<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>移动端</title>
    <url>/undefined/a89303d5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CSS预处理器</title>
    <url>/undefined/97913aad/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/undefined/98f3a6d9/</url>
    <content><![CDATA[<blockquote>
<p>HTML5新增</p>
</blockquote>
<span id="more"></span>
<h1 id="1-HTML5语义化元素"><a href="#1-HTML5语义化元素" class="headerlink" title="1 HTML5语义化元素"></a>1 HTML5语义化元素</h1><p>header、nav、main、footer</p>
<p>使用过多的div，对于浏览器来说元素不够语义化；对于搜索引擎来说，不利于SEO的优化</p>
<p><strong>HTML5新增语义化元素</strong></p>
<blockquote>
<p>样式等同于<code>&lt;div&gt;</code></p>
</blockquote>
<p><code>&lt;header&gt;</code>头部元素</p>
<p><code>&lt;nav&gt;</code>导航元素</p>
<p><code>&lt;section&gt;</code>定义文档某个区域的元素</p>
<p><code>&lt;article&gt;</code>内容元素</p>
<p><code>&lt;aside&gt;</code>侧边栏元素</p>
<p><code>&lt;footer&gt;</code>尾部元素</p>
<h1 id="2-HTML5新增其他元素"><a href="#2-HTML5新增其他元素" class="headerlink" title="2 HTML5新增其他元素"></a>2 HTML5新增其他元素</h1><p>在HTML5之前是通过flash或其他插件实现的，但有很多问题（无法很好的支持HTML/CSS特性，兼容性问题等）</p>
<h2 id="2-1-视频"><a href="#2-1-视频" class="headerlink" title="2.1 视频"></a>2.1 视频</h2><p><code>&lt;video&gt;</code></p>
<h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><ul>
<li><code>src</code>：视频播放的URL地址</li>
<li><code>width</code></li>
<li><code>height</code></li>
<li><code>controls</code>：是否显示控制栏，包括音量，跨帧，暂停/恢复播放</li>
<li><code>autoplay</code>：是否视频自动播放（某些浏览器需要添加muted，比如Chrome）</li>
<li><code>muted</code>：是否静音播放</li>
<li><code>preload: none/metadata/auto</code>：是否需要预加载视频，metadata表示预加载元数据（比如视频时长等）</li>
<li><code>poster: URL地址</code>：海报帧的URL</li>
</ul>
<blockquote>
<p>微信浏览器视频加载问题解决方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">preload</span>=<span class="string">&quot;auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="2-2-音频"><a href="#2-2-音频" class="headerlink" title="2.2 音频"></a>2.2 音频</h2><p><code>&lt;audio&gt;</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript笔记</title>
    <url>/undefined/8507f01f/</url>
    <content><![CDATA[<blockquote>
<p>TypeScript笔记</p>
</blockquote>
<span id="more"></span>
<h1 id="1-认识TypeScript"><a href="#1-认识TypeScript" class="headerlink" title="1 认识TypeScript"></a>1 认识TypeScript</h1><p>TypeScript的出现是为了解决JavaScript不进行类型检测的问题</p>
<p>TypeScript是拥有类型的JavaScript超集，它可以编译成普通、干净、完整的JavaScript代码。</p>
<p>TypeScript是JavaScript的一个超集</p>
<h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h1><h2 id="2-1-number"><a href="#2-1-number" class="headerlink" title="2.1 number"></a>2.1 number</h2><p>不区分整型和浮点型，支持二进制，八进制，十进制，十六进制</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span>;  <span class="comment">// 十进制</span></span><br><span class="line">num = <span class="number">0b110</span>;  <span class="comment">// 二进制</span></span><br><span class="line">num = <span class="number">0o555</span>;  <span class="comment">// 八进制</span></span><br><span class="line">num = <span class="number">0xf23</span>;  <span class="comment">// 十六进制</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-boolean"><a href="#2-2-boolean" class="headerlink" title="2.2 boolean"></a>2.2 boolean</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">flag = <span class="number">20</span> &gt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<h2 id="2-3-string"><a href="#2-3-string" class="headerlink" title="2.3 string"></a>2.3 string</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">message = <span class="string">&#x27;Hello TypeScript&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>支持ES6的模板字符串来拼接变量和字符串：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>, height is <span class="subst">$&#123;height&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br></pre></td></tr></table></figure>
<h2 id="2-4-Array类型"><a href="#2-4-Array类型" class="headerlink" title="2.4 Array类型"></a>2.4 Array类型</h2><p>两种形式：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names: <span class="built_in">string</span>[] = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;cba&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> names2: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>];</span><br><span class="line"></span><br><span class="line">names.push(<span class="string">&quot;why&quot;</span>);</span><br><span class="line">names2.push(<span class="string">&quot;why&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果添加其他类型到数组中将会报错</p>
<h2 id="2-5-object"><a href="#2-5-object" class="headerlink" title="2.5 object"></a>2.5 object</h2><p>object对象类型可以用于描述一个对象：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myInfo: <span class="built_in">object</span> = &#123;</span><br><span class="line">    name: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    height: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是从myinfo中我们不能获取数据，也不能设置数据</p>
<h2 id="2-6-Symbol"><a href="#2-6-Symbol" class="headerlink" title="2.6 Symbol"></a>2.6 Symbol</h2><p>在ES5中，如果我们是不可以在对象中添加相同的属性名称的。通常我们的做法是定义两个不同的属性名字：比如identity1和identity2。 </p>
<p>但是我们也可以通过symbol来定义相同的名称，因为Symbol函数返回的是不同的值：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1: symbol = <span class="built_in">Symbol</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> s2: symbol = <span class="built_in">Symbol</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    [s1]: <span class="string">&quot;程序员&quot;</span>,</span><br><span class="line">    [s2]: <span class="string">&quot;老师&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-7-null和undefined"><a href="#2-7-null和undefined" class="headerlink" title="2.7 null和undefined"></a>2.7 null和undefined</h2><p>它们既是实际的值，也是自己的类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>
<h2 id="2-8-any"><a href="#2-8-any" class="headerlink" title="2.8 any"></a>2.8 any</h2><p>在某些情况下，我们确实无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以使用any类型</p>
<p>any类型有点像一种讨巧的TypeScript手段：</p>
<ul>
<li><p>我们可以对any类型的变量进行任何的操作，包括获取不存在的属性、方法；</p>
</li>
<li><p>我们给一个any类型的变量赋值任何的值，比如数字、字符串的值；</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">any</span> = <span class="string">&quot;why&quot;</span>;</span><br><span class="line">a = <span class="number">123</span>;</span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aArray: <span class="built_in">any</span>[] = [<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>];</span><br></pre></td></tr></table></figure>
<p>如果对于某些情况的处理过于繁琐不希望添加规定的类型注解，或者在引入一些第三方库时，缺失了类型注解，这个时候我们可以使用any： 包括在Vue源码中，也会使用到any来进行某些类型的适配；</p>
<h2 id="2-9-unknown"><a href="#2-9-unknown" class="headerlink" title="2.9 unknown"></a>2.9 unknown</h2><p>描述类型不确定的变量</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> result: unknown</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  result = foo()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-10-void"><a href="#2-10-void" class="headerlink" title="2.10 void"></a>2.10 void</h2><p>通常用来指定一个函数是没有返回值的，那么它的返回值就是void类型。我们可以将null和undefined赋值给void类型，也就是函数可以返回null或者undefined</p>
<h2 id="2-11-never"><a href="#2-11-never" class="headerlink" title="2.11 never"></a>2.11 never</h2><p>表示永远不会发生值的类型，比如一个函数：</p>
<ul>
<li>如果一个函数中是一个死循环或者抛出一个异常，那么这个函数会返回东西吗？</li>
<li>不会，那么写void类型或者其他类型作为返回值类型都不合适，我们就可以使用never类型；</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopFun</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loopErr</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">message: <span class="built_in">number</span>|<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">typeof</span> message) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;string&quot;</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">const</span> check: <span class="built_in">never</span> = message</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-12-tuple"><a href="#2-12-tuple" class="headerlink" title="2.12 tuple"></a>2.12 tuple</h2><p>元组类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tInfo: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>];</span><br><span class="line"><span class="keyword">const</span> item1 = tInfo[<span class="number">0</span>];  <span class="comment">// why,并且知道类型是string类型</span></span><br><span class="line"><span class="keyword">const</span> item2 = tInfo[<span class="number">1</span>];  <span class="comment">// 18，并且知道类型是number类型</span></span><br></pre></td></tr></table></figure>
<p>tuple和数组的区别： </p>
<ul>
<li>首先，数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中。（可以放在对象或者元组中）</li>
<li>其次，元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型；</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info: (<span class="built_in">string</span>|<span class="built_in">number</span>)[] = [<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>]</span><br><span class="line"><span class="keyword">const</span> item1 = info[<span class="number">0</span>];  <span class="comment">// 不确定类型</span></span><br><span class="line"><span class="keyword">const</span> tInfo: [<span class="built_in">String</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>]</span><br><span class="line"><span class="keyword">const</span> item2 = tInfo[<span class="number">0</span>];  <span class="comment">// 一定是string类型</span></span><br></pre></td></tr></table></figure>
<p>应用场景：通常可以作为返回的值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>&lt;<span class="title">T</span>&gt;(<span class="params">state: T</span>): [<span class="title">T</span>, (<span class="params">newState: T</span>) =&gt; <span class="title">void</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentState = state</span><br><span class="line">  <span class="keyword">const</span> changeState = <span class="function">(<span class="params">newState: T</span>) =&gt;</span> &#123;</span><br><span class="line">    currentState = newState</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [currentState, changeState]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [counter, setCouter] = useState(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<h1 id="3-函数"><a href="#3-函数" class="headerlink" title="3 函数"></a>3 函数</h1><p>typescript允许我们指定函数的参数和返回值的类型</p>
<h2 id="3-1-函数的参数类型"><a href="#3-1-函数的参数类型" class="headerlink" title="3.1 函数的参数类型"></a>3.1 函数的参数类型</h2><p>声明函数时，可以在每个参数后添加类型注解，以声明函数接受的参数类型</p>
<h2 id="3-2-函数的返回值类型"><a href="#3-2-函数的返回值类型" class="headerlink" title="3.2 函数的返回值类型"></a>3.2 函数的返回值类型</h2><p>和变量的类型注解一样，我们通常情况下不需要返回类型注解，因为TypeScript会根据 return 返回值推断函数的返回类型</p>
<h2 id="3-3-匿名函数的参数"><a href="#3-3-匿名函数的参数" class="headerlink" title="3.3 匿名函数的参数"></a>3.3 匿名函数的参数</h2><p>匿名函数与函数声明会有一些不同：</p>
<ul>
<li><p>当一个函数出现在TypeScript可以确定该函数会被如何调用的地方时；</p>
</li>
<li><p>该函数的参数会自动指定类型；</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>];</span><br><span class="line">names.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item.toUpperCase());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我们并没有指定item的类型，但是item是一个string类型：</p>
<ul>
<li><p>这是因为TypeScript会根据forEach函数的类型以及数组的类型推断出item的类型；</p>
</li>
<li><p>这个过程称之为上下文类型（contextual typing），因为函数执行的上下文可以帮助确定参数和返回值的类型；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>dos操作指令</title>
    <url>/undefined/88e5f7b7/</url>
    <content><![CDATA[<blockquote>
<p>了解一些基本的dos操作指令</p>
</blockquote>
<span id="more"></span>



<p>dos：磁盘操作系统（Dos操作系统解析cmd的指令）</p>
<h1 id="1-目录操作"><a href="#1-目录操作" class="headerlink" title="1 目录操作"></a>1 目录操作</h1><p><code>dir</code> 查看当前目录</p>
<p><code>cd /d f:</code>切换到其他盘（此处为f盘）</p>
<p><code>cd \</code>切换到根目录</p>
<p><code>md ok200</code>新建目录ok200</p>
<p><code>md ok300 ok400</code>新建多个目录</p>
<p><code>rd ok100</code>删除空目录</p>
<p><code>rd /q/s ok200</code>删除目录及下面的子目录和文件，不询问</p>
<p><code>rd /s ok300</code>删除目录及下面的子目录和文件，带询问</p>
<h1 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2 文件操作"></a>2 文件操作</h1><p>新建或追加内容到文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello &gt; d:\test100\abc100\abc.txt</span><br></pre></td></tr></table></figure>

<p>复制或移动文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">copy abc.txt d:\text200</span><br><span class="line">copy abc.txt d:\text200\ok.txt</span><br><span class="line">move abc.txt f:\</span><br></pre></td></tr></table></figure>

<p>删除文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del abc2.txt</span><br><span class="line">del *.txt</span><br></pre></td></tr></table></figure>

<h1 id="3-其它指令"><a href="#3-其它指令" class="headerlink" title="3 其它指令"></a>3 其它指令</h1><p>清屏</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure>

<p>退出dos</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>dos</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3.0笔记</title>
    <url>/undefined/93abad8a/</url>
    <content><![CDATA[<blockquote>
<p>Vue3.0笔记</p>
</blockquote>
<span id="more"></span>



<h1 id="1-02diff算法——理解-amp-amp-03静态提升和监听缓存"><a href="#1-02diff算法——理解-amp-amp-03静态提升和监听缓存" class="headerlink" title="1 02diff算法——理解&amp;&amp;03静态提升和监听缓存"></a>1 02diff算法——理解&amp;&amp;03静态提升和监听缓存</h1><h2 id="1-1-Vue3-0中的六大亮点"><a href="#1-1-Vue3-0中的六大亮点" class="headerlink" title="1.1 Vue3.0中的六大亮点"></a>1.1 Vue3.0中的六大亮点</h2><table>
<thead>
<tr>
<th>序号</th>
<th>特性</th>
<th>解析</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>Performance </code></td>
<td>性能上比Vue2.0快1.3~2倍</td>
</tr>
<tr>
<td>2</td>
<td><code>Tree shaking support </code></td>
<td>按需编译，体积更加轻量化</td>
</tr>
<tr>
<td>3</td>
<td><code>Composition API</code></td>
<td>组合API，可参考<code>React hooks</code>理解</td>
</tr>
<tr>
<td>4</td>
<td><code>Better TypeScript support</code></td>
<td>对 Ts 提供了更好的支持</td>
</tr>
<tr>
<td>5</td>
<td><code>Custom Renderer API</code></td>
<td>暴露了自定义渲染API</td>
</tr>
<tr>
<td>6</td>
<td><code>Fragment,Teleport(Protal),Suspense</code></td>
<td>更先进的组件</td>
</tr>
</tbody></table>
<h2 id="1-2-Vue是如何变快的"><a href="#1-2-Vue是如何变快的" class="headerlink" title="1.2 Vue是如何变快的"></a>1.2 Vue是如何变快的</h2><h3 id="1-2-1-diff方法优化"><a href="#1-2-1-diff方法优化" class="headerlink" title="1.2.1 diff方法优化"></a>1.2.1 diff方法优化</h3><ul>
<li>Vue2中的虚拟dom是进行全量比对</li>
<li>Vue3新增了静态标记（PatchFlag）<br> 在与上次虚拟节点进行比对时候，只对比带有patch flag的节点<br> 并且可以通过flag的信息 得知当前节点要比对的具体内容</li>
</ul>
<h4 id="1、Vue2-diff算法"><a href="#1、Vue2-diff算法" class="headerlink" title="1、Vue2 diff算法"></a>1、Vue2 diff算法</h4><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220414192452.webp"></p>
<h4 id="2、Vue3-diff算法"><a href="#2、Vue3-diff算法" class="headerlink" title="2、Vue3 diff算法"></a>2、Vue3 diff算法</h4><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220414192534.webp"></p>
<h4 id="3、Vue编译demo"><a href="#3、Vue编译demo" class="headerlink" title="3、Vue编译demo"></a>3、Vue编译demo</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createVNode <span class="keyword">as</span> _createVNode,</span><br><span class="line">  toDisplayString <span class="keyword">as</span> _toDisplayString,</span><br><span class="line">  openBlock <span class="keyword">as</span> _openBlock,</span><br><span class="line">  createBlock <span class="keyword">as</span> _createBlock</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (_openBlock(), _createBlock(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    _createVNode(<span class="string">&quot;p&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;我是段落&quot;</span>),</span><br><span class="line">    _createVNode(<span class="string">&quot;p&quot;</span>, <span class="literal">null</span>, _toDisplayString(_ctx.msg), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、附录PatchFlags"><a href="#4、附录PatchFlags" class="headerlink" title="4、附录PatchFlags"></a>4、附录PatchFlags</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum PatchFlags &#123;</span><br><span class="line">  TEXT = <span class="number">1</span>, <span class="comment">// 动态文本节点</span></span><br><span class="line">  CLASS = <span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="comment">// 2 动态class</span></span><br><span class="line">  STYLE = <span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="comment">// 4 动态style</span></span><br><span class="line">  PROPS = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 8 动态属性，但不包含类名和样式</span></span><br><span class="line">  FULL_PROPS = <span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="comment">// 16 具有动态 key 属性，当 key 改变时，需要进行完整的 diff 比较</span></span><br><span class="line">  HYDRATE_EVENTS = <span class="number">1</span> &lt;&lt; <span class="number">5</span>, <span class="comment">// 32 带有监听事件的节点</span></span><br><span class="line">  STABLE_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">6</span>, <span class="comment">// 64 一个不会改变子节点顺序的 fragment</span></span><br><span class="line">  KEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">// 128 带有key属性的 fragment 或部分带有 key</span></span><br><span class="line">  UNKEYED_FRAGMENT = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="comment">// 256 子节点没有 key 的 fragment</span></span><br><span class="line">  NEED_PATCH = <span class="number">1</span> &lt;&lt; <span class="number">9</span>, <span class="comment">// 512 一个节点只会进行非 props 比较</span></span><br><span class="line">  DYNAMIC_SLOTS = <span class="number">1</span> &lt;&lt; <span class="number">10</span>, <span class="comment">// 1024</span></span><br><span class="line">  HOISTED = -<span class="number">1</span>,</span><br><span class="line">  BAIL = -<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-hoistStatic-静态提升"><a href="#1-2-2-hoistStatic-静态提升" class="headerlink" title="1.2.2 hoistStatic 静态提升"></a>1.2.2 hoistStatic 静态提升</h3><ul>
<li>Vue2中无论元素是否参与更新，每次都会重新创建，然后再渲染</li>
<li>Vue3中对于不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用即可</li>
</ul>
<h4 id="1、Vue编译demo"><a href="#1、Vue编译demo" class="headerlink" title="1、Vue编译demo"></a>1、Vue编译demo</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createVNode <span class="keyword">as</span> _createVNode,</span><br><span class="line">  toDisplayString <span class="keyword">as</span> _toDisplayString,</span><br><span class="line">  openBlock <span class="keyword">as</span> _openBlock,</span><br><span class="line">  createBlock <span class="keyword">as</span> _createBlock</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _hoisted_1 = <span class="comment">/*#__PURE__*/</span>_createVNode(<span class="string">&quot;p&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;我是段落&quot;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (_openBlock(), _createBlock(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    _hoisted_1,</span><br><span class="line">    _createVNode(<span class="string">&quot;p&quot;</span>, <span class="literal">null</span>, _toDisplayString(_ctx.msg), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-cacheHandlers事件侦听器缓存"><a href="#1-2-3-cacheHandlers事件侦听器缓存" class="headerlink" title="1.2.3 cacheHandlers事件侦听器缓存"></a>1.2.3 cacheHandlers事件侦听器缓存</h3><ul>
<li>默认情况下onClick会被视为动态绑定，所以每次都会去追踪它的变化，但是因为是同一个函数，所以没有追踪变化，直接缓存起来复用即可</li>
</ul>
<h4 id="1、Vue编译demo-1"><a href="#1、Vue编译demo-1" class="headerlink" title="1、Vue编译demo"></a>1、Vue编译demo</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关闭事件侦听器缓存</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createVNode <span class="keyword">as</span> _createVNode,</span><br><span class="line">  openBlock <span class="keyword">as</span> _openBlock,</span><br><span class="line">  createBlock <span class="keyword">as</span> _createBlock</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (_openBlock(), _createBlock(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    _createVNode(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">onClick</span>: _ctx.onClick &#125;, <span class="string">&quot;按钮&quot;</span>, <span class="number">8</span> <span class="comment">/* PROPS */</span>, [<span class="string">&quot;onClick&quot;</span>])</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启事件侦听器缓存</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createVNode <span class="keyword">as</span> _createVNode,</span><br><span class="line">  openBlock <span class="keyword">as</span> _openBlock,</span><br><span class="line">  createBlock <span class="keyword">as</span> _createBlock</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (_openBlock(), _createBlock(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, [</span><br><span class="line">    _createVNode(<span class="string">&quot;button&quot;</span>, &#123;</span><br><span class="line">      onClick: _cache[<span class="number">1</span>] || (_cache[<span class="number">1</span>] = <span class="function">(<span class="params">...args</span>) =&gt;</span> (_ctx.onClick(...args)))</span><br><span class="line">    &#125;, <span class="string">&quot;按钮&quot;</span>)</span><br><span class="line">  ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：转换之后的代码，大家可能还看不懂，但是不要紧，我们只需要观察有没有静态标记即可，因为我们知道在Vue3的diff算法中，只有有静态标记的才会进行比较，才会进行追踪</p>
<h3 id="1-2-4-ssr渲染"><a href="#1-2-4-ssr渲染" class="headerlink" title="1.2.4 ssr渲染"></a>1.2.4 ssr渲染</h3><ul>
<li><p>当有大量静态内容时候，这些内容会被当做纯字符串推进一个buffer里面，即使存在动态绑定，会通过模板插值嵌入进去。这样会比通过虚拟dom来渲染的快上很多很多。</p>
</li>
<li><p>当静态内容大到一定量级时候，会用_createStaticVNode方法在客户端生成一个static node，这些静态node，会被直接innerHTML，就不需要创建对象，然后根据对象渲染。</p>
</li>
</ul>
<h1 id="2-04项目创建——理解"><a href="#2-04项目创建——理解" class="headerlink" title="2 04项目创建——理解"></a>2 04项目创建——理解</h1><h2 id="2-1-创建Vue3的三种方式"><a href="#2-1-创建Vue3的三种方式" class="headerlink" title="2.1 创建Vue3的三种方式"></a>2.1 创建Vue3的三种方式</h2><h3 id="2-1-1-Vue-CLI"><a href="#2-1-1-Vue-CLI" class="headerlink" title="2.1.1 Vue-CLI"></a>2.1.1 Vue-CLI</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create projectName</span><br><span class="line">cd projectName</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-Webpack"><a href="#2-1-2-Webpack" class="headerlink" title="2.1.2 Webpack"></a>2.1.2 Webpack</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vuejs/vue-next-webpack-preview.git projectName</span><br><span class="line">cd projectName</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-Vite"><a href="#2-1-3-Vite" class="headerlink" title="2.1.3 Vite"></a>2.1.3 Vite</h3><h2 id="2-2-什么是Vite"><a href="#2-2-什么是Vite" class="headerlink" title="2.2  什么是Vite?"></a>2.2  什么是Vite?</h2><ul>
<li>Vite是Vue作者开发的一款意图取代webpack的工具</li>
<li>其实现原理是利用ES6的import会发送请求去加载文件的特性，拦截这些请求，做一些预编译，省去webpack冗长的打包时间</li>
</ul>
<h2 id="2-3-利用Vite创建Vue3项目"><a href="#2-3-利用Vite创建Vue3项目" class="headerlink" title="2.3 利用Vite创建Vue3项目"></a>2.3 利用Vite创建Vue3项目</h2><h3 id="2-3-1-安装Vite"><a href="#2-3-1-安装Vite" class="headerlink" title="2.3.1 安装Vite"></a>2.3.1 安装Vite</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g create-vite-app</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-创建Vue3项目"><a href="#2-3-2-创建Vue3项目" class="headerlink" title="2.3.2 创建Vue3项目"></a>2.3.2 创建Vue3项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create-vite-app projectName</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-安装依赖运行项目"><a href="#2-3-3-安装依赖运行项目" class="headerlink" title="2.3.3 安装依赖运行项目"></a>2.3.3 安装依赖运行项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd projectName</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="2-4-Vue3-0-demo"><a href="#2-4-Vue3-0-demo" class="headerlink" title="2.4 Vue3.0 demo"></a>2.4 Vue3.0 demo</h2><ul>
<li>修改App.vue文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;智播渔&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myFn() &#123;</span><br><span class="line">      alert(&#39;www.it666.com&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220414203750.webp"></p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220414203840.webp"></p>
<h1 id="3-05Vue2-x存在的问题——理解"><a href="#3-05Vue2-x存在的问题——理解" class="headerlink" title="3 05Vue2.x存在的问题——理解"></a>3 05Vue2.x存在的问题——理解</h1><h2 id="3-1-todolist-demo"><a href="#3-1-todolist-demo" class="headerlink" title="3.1 todolist demo"></a>3.1 todolist demo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        v-model&#x3D;&quot;stu.id&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        v-model&#x3D;&quot;stu.name&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        v-model&#x3D;&quot;stu.age&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;submit&quot;</span><br><span class="line">        @click&#x3D;&quot;addStu&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(stu,index) in stus&quot;</span><br><span class="line">        :key&#x3D;&quot;stu.id&quot;</span><br><span class="line">        @click&#x3D;&quot;remStu(index)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123;stu.name&#125;&#125; -- &#123;&#123;stu.age&#125;&#125;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      stus: [</span><br><span class="line">        &#123; id: 1, name: &#39;zs&#39;, age: 10 &#125;,</span><br><span class="line">        &#123; id: 2, name: &#39;ls&#39;, age: 20 &#125;,</span><br><span class="line">        &#123; id: 3, name: &#39;ww&#39;, age: 30 &#125;,</span><br><span class="line">      ],</span><br><span class="line">      stu: &#123;</span><br><span class="line">        id: &#39;&#39;,</span><br><span class="line">        name: &#39;&#39;,</span><br><span class="line">        age: &#39;&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 新增功能1的数据</span><br><span class="line">    &#x2F;&#x2F; 新增功能2的数据</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    remStu(index) &#123;</span><br><span class="line">      this.stus &#x3D; this.stus.filter((stu, idx) &#x3D;&gt; idx !&#x3D; index)</span><br><span class="line">    &#125;,</span><br><span class="line">    addStu(e) &#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">      const stu &#x3D; Object.assign(&#123;&#125;, this.stu)</span><br><span class="line">      this.stus.push(stu)</span><br><span class="line">      this.stu &#x3D; &#123;</span><br><span class="line">        id: &#39;&#39;,</span><br><span class="line">        name: &#39;&#39;,</span><br><span class="line">        age: &#39;&#39;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 新增功能1的业务逻辑</span><br><span class="line">    &#x2F;&#x2F; 新增功能2的业务逻辑</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    &#x2F;&#x2F; 新增功能1的业务逻辑</span><br><span class="line">    &#x2F;&#x2F; 新增功能2的业务逻辑</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    &#x2F;&#x2F; 新增功能1的业务逻辑</span><br><span class="line">    &#x2F;&#x2F; 新增功能2的业务逻辑</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-问题"><a href="#3-2-问题" class="headerlink" title="3.2 问题"></a>3.2 问题</h2><p>数据和业务逻辑分散，不利于管理维护</p>
<h1 id="4-06-Vue3-0-组合API上-理解"><a href="#4-06-Vue3-0-组合API上-理解" class="headerlink" title="4 06-Vue3.0-组合API上-理解"></a>4 06-Vue3.0-组合API上-理解</h1><h2 id="4-1-组合API初体验-demo"><a href="#4-1-组合API初体验-demo" class="headerlink" title="4.1 组合API初体验 demo"></a>4.1 组合API初体验 demo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;count&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  &#x2F;&#x2F; setup函数是组合API的入口函数</span><br><span class="line">  setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义了一个名称叫做count的变量，这个变量的初始值是0</span><br><span class="line">    &#x2F;&#x2F; 这个变量发生改变之后，Vue会自动更新UI</span><br><span class="line">    let count &#x3D; ref(0)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在组合API中，如果想定义方法，不用定义到methods中，直接定义即可</span><br><span class="line">    function myFn() &#123;</span><br><span class="line">      count.value +&#x3D; 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 注意点</span><br><span class="line">    &#x2F;&#x2F; 在组合API中定义的变量&#x2F;方法，要想在外界使用，必须通过return &#123;xxx, xxx&#125;暴露出去</span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-注意点"><a href="#4-2-注意点" class="headerlink" title="4.2 注意点"></a>4.2 注意点</h2><ul>
<li><p>setup函数是组合API的入口函数</p>
</li>
<li><p>使用ref定义一个变量并设置初始值，这个变量发生改变之后，Vue会自动更新UI</p>
</li>
<li><p>ref函数只能监听简单类型的变化，不能监听复杂类型的变化（对象/数组）</p>
</li>
<li><p>在组合API中，如果想定义方法，不用定义到methods中，直接定义即可</p>
</li>
<li><p>在组合API中定义的变量/方法，要想在外界使用，必须通过return {xxx, xxx}暴露出去</p>
</li>
</ul>
<h1 id="5-07组合API中——理解"><a href="#5-07组合API中——理解" class="headerlink" title="5 07组合API中——理解"></a>5 07组合API中——理解</h1><h2 id="5-1-业务抽离demo"><a href="#5-1-业务抽离demo" class="headerlink" title="5.1 业务抽离demo"></a>5.1 业务抽离demo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(stu,index) in state.stus&quot;</span><br><span class="line">        :key&#x3D;&quot;stu.id&quot;</span><br><span class="line">        @click&#x3D;&quot;remStu(index)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123;stu.name&#125;&#125; -- &#123;&#123;stu.age&#125;&#125;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">function useRemoveStudent() &#123;</span><br><span class="line">  let state &#x3D; reactive(&#123;</span><br><span class="line">    stus: [</span><br><span class="line">      &#123; id: 1, name: &#39;zs&#39;, age: 10 &#125;,</span><br><span class="line">      &#123; id: 2, name: &#39;ls&#39;, age: 20 &#125;,</span><br><span class="line">      &#123; id: 3, name: &#39;ww&#39;, age: 30 &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function remStu(index) &#123;</span><br><span class="line">    state.stus &#x3D; state.stus.filter((stu, idx) &#x3D;&gt; idx !&#x3D; index)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return &#123; state, remStu &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  setup() &#123;</span><br><span class="line"></span><br><span class="line">    let &#123; state, remStu &#125; &#x3D; useRemoveStudent()</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      remStu,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-理解"><a href="#5-2-理解" class="headerlink" title="5.2 理解"></a>5.2 理解</h2><p>删除用户的业务代码被抽离到了useRemoveStudent中，利于之后的管理和维护</p>
<h1 id="6-08组合API下——理解"><a href="#6-08组合API下——理解" class="headerlink" title="6 08组合API下——理解"></a>6 08组合API下——理解</h1><h2 id="6-1-多文件demo"><a href="#6-1-多文件demo" class="headerlink" title="6.1 多文件demo"></a>6.1 多文件demo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        v-model&#x3D;&quot;state2.stu.id&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        v-model&#x3D;&quot;state2.stu.name&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;text&quot;</span><br><span class="line">        v-model&#x3D;&quot;state2.stu.age&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type&#x3D;&quot;submit&quot;</span><br><span class="line">        @click&#x3D;&quot;addStu&quot;</span><br><span class="line">      &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        v-for&#x3D;&quot;(stu,index) in state.stus&quot;</span><br><span class="line">        :key&#x3D;&quot;stu.id&quot;</span><br><span class="line">        @click&#x3D;&quot;remStu(index)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123;stu.name&#125;&#125; -- &#123;&#123;stu.age&#125;&#125;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#39;vue&#39;</span><br><span class="line">import useAddStudent from &#39;.&#x2F;js&#x2F;add&#39;</span><br><span class="line">import useRemoveStudent from &#39;.&#x2F;js&#x2F;remove&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let &#123; state, remStu &#125; &#x3D; useRemoveStudent()</span><br><span class="line">    let &#123; state2, addStu &#125; &#x3D; useAddStudent(state)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      remStu,</span><br><span class="line">      state2,</span><br><span class="line">      addStu,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useRemoveStudent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state = reactive(&#123;</span><br><span class="line">    stus: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">10</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;ww&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remStu</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    state.stus = state.stus.filter(<span class="function">(<span class="params">stu, idx</span>) =&gt;</span> idx != index)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; state, remStu &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useRemoveStudent</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useAddStudent</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state2 = reactive(&#123;</span><br><span class="line">    stu: &#123;</span><br><span class="line">      id: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      age: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addStu</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    <span class="keyword">const</span> stu = <span class="built_in">Object</span>.assign(&#123;&#125;, state2.stu)</span><br><span class="line">    state.stus.push(stu)</span><br><span class="line">    state2.stu = &#123;</span><br><span class="line">      id: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      age: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; state2, addStu &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useAddStudent</span><br></pre></td></tr></table></figure>

<h2 id="6-2-理解"><a href="#6-2-理解" class="headerlink" title="6.2 理解"></a>6.2 理解</h2><p>所有的功能都可以放到独立的模块中去管理</p>
<h1 id="7-09来点动力——理解"><a href="#7-09来点动力——理解" class="headerlink" title="7 09来点动力——理解"></a>7 09来点动力——理解</h1><p>Vue2.0 按照操作划分代码块，Vue3.0 按业务划分代码块</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220414210018.webp"></p>
<h1 id="8-10-Vue3-0-组合API本质-理解-amp-amp-11-Vue3-0-setup执行时机和注意点-理解"><a href="#8-10-Vue3-0-组合API本质-理解-amp-amp-11-Vue3-0-setup执行时机和注意点-理解" class="headerlink" title="8 10-Vue3.0-组合API本质-理解&amp;&amp;11-Vue3.0-setup执行时机和注意点-理解"></a>8 10-Vue3.0-组合API本质-理解&amp;&amp;11-Vue3.0-setup执行时机和注意点-理解</h1><h2 id="8-1-Composition-API-和-Option-API-混合使用"><a href="#8-1-Composition-API-和-Option-API-混合使用" class="headerlink" title="8.1 Composition API 和 Option API 混合使用"></a>8.1 Composition API 和 Option API 混合使用</h2><p>Composition API 和 Option API可以混合使用</p>
<h3 id="8-1-1-混合使用demo"><a href="#8-1-1-混合使用demo" class="headerlink" title="8.1.1 混合使用demo"></a>8.1.1 混合使用demo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn1&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn2&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &#39;lnj&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myFn1() &#123;</span><br><span class="line">      alert(&#39;abc&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let age &#x3D; ref(18)</span><br><span class="line">    function myFn2() &#123;</span><br><span class="line">      alert(&#39;sxx&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      age,</span><br><span class="line">      myFn2,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-Composition-API本质（组合API-注入API）"><a href="#8-2-Composition-API本质（组合API-注入API）" class="headerlink" title="8.2  Composition API本质（组合API/注入API）"></a>8.2  Composition API本质（组合API/注入API）</h2><p>Composition API的本质就是在运行的时候将暴露出去的数据注入到option api中，如将数据注入到data中，将方法注入到methods中。</p>
<h2 id="8-3-setup执行时机"><a href="#8-3-setup执行时机" class="headerlink" title="8.3 setup执行时机"></a>8.3 setup执行时机</h2><p>setup在beforeCreate和created两个生命周期之间执行</p>
<ul>
<li>beforeCreate: 表示组件刚刚被创建出来，组件的data和methods还没有初始化好</li>
<li>setup</li>
<li>created: data和methods已经初始化好</li>
</ul>
<h2 id="8-4-setup注意点"><a href="#8-4-setup注意点" class="headerlink" title="8.4 setup注意点"></a>8.4 setup注意点</h2><ul>
<li>由于在执行setup函数的时候，还没有执行created生命周期方法，所以在setup函数中，是无法使用data和methods</li>
<li>由于我们不能在setup函数中无法使用data和methods，所以Vue为了避免我们错误的使用，它直接将函数中的this修改成了<strong>undefined</strong></li>
<li>setup函数只能是同步的，不能是异步的</li>
</ul>
<h1 id="9-12reactive-理解"><a href="#9-12reactive-理解" class="headerlink" title="9 12reactive-理解"></a>9 12reactive-理解</h1><h2 id="9-1-什么是reactive"><a href="#9-1-什么是reactive" class="headerlink" title="9.1 什么是reactive"></a>9.1 什么是reactive</h2><ul>
<li>reactive是Vue3中提供的实现响应式数据的方法</li>
<li>在Vue2中响应式数据是通过defineProperty来实现的，而在Vue3中响应式数据是通过ES6的Proxy来实现的</li>
</ul>
<h2 id="9-2-reactiv注意点"><a href="#9-2-reactiv注意点" class="headerlink" title="9.2 reactiv注意点"></a>9.2 reactiv注意点</h2><ul>
<li>reactive参数必须是对象（json/arr）</li>
<li>如果给reactive传递了其他对象<ul>
<li>默认情况下修改对象，界面不会自动更新</li>
<li>如果想更新，可以通过重新赋值的方式</li>
</ul>
</li>
</ul>
<h3 id="9-2-1-给reactive传递非对象无法实现响应式"><a href="#9-2-1-给reactive传递非对象无法实现响应式" class="headerlink" title="9.2.1 给reactive传递非对象无法实现响应式"></a>9.2.1 给reactive传递非对象无法实现响应式</h3><p>点击按钮值发生变化但页面将不会发生变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建一个响应式数据</span><br><span class="line">    &#x2F;&#x2F; 本质：就是将传入的数据包装成一个Proxy对象</span><br><span class="line">    let state &#x3D; reactive(123)</span><br><span class="line"></span><br><span class="line">    function myFn() &#123;</span><br><span class="line">      state &#x3D; 666 &#x2F;&#x2F; 由于在创建响应式数据的时候传递的不是一个对象，所以无法实现响应式</span><br><span class="line">      console.log(state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-2-需要传递一个对象才可以实现响应式"><a href="#9-2-2-需要传递一个对象才可以实现响应式" class="headerlink" title="9.2.2 需要传递一个对象才可以实现响应式"></a>9.2.2 需要传递一个对象才可以实现响应式</h3><p>点击按钮页面将发生变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state.age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let state &#x3D; reactive(&#123;</span><br><span class="line">      age: 123,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    function myFn() &#123;</span><br><span class="line">      state.age &#x3D; 666</span><br><span class="line">      console.log(state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-3-数组也可以监听"><a href="#9-2-3-数组也可以监听" class="headerlink" title="9.2.3 数组也可以监听"></a>9.2.3 数组也可以监听</h3><p>点击按钮修改数组的值将发现页面发生变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;state&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;myFn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive &#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let state &#x3D; reactive([1, 3, 5])</span><br><span class="line"></span><br><span class="line">    function myFn() &#123;</span><br><span class="line">      state[0] &#x3D; 666</span><br><span class="line">      console.log(state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4-其他对象不能实现响应式，需要重新赋值"><a href="#4-其他对象不能实现响应式，需要重新赋值" class="headerlink" title="4. 其他对象不能实现响应式，需要重新赋值"></a>4. 其他对象不能实现响应式，需要重新赋值</h5><p>调用Date自带的方法不能实现响应式，需要使用注释的方法实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.time&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// const newTime = new Date(state.time.getTime())</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// newTime.setDate(newTime.getDate() + 1)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// state.time = newTime</span></span></span><br><span class="line">      state.time.setDate(state.time.getDate() + 1)</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.time)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="13-Vue3-0-ref-理解"><a href="#13-Vue3-0-ref-理解" class="headerlink" title="13-Vue3.0-ref-理解"></a>13-Vue3.0-ref-理解</h3><h4 id="一、什么是ref"><a href="#一、什么是ref" class="headerlink" title="一、什么是ref"></a>一、什么是ref</h4><ul>
<li>ref和reactive一样，也是用来实现响应式数据的方法</li>
<li>由于reactive必须传递一个对象，所以导致在企业开发中如果我们只想让某个变量实现响应式的时候会非常麻烦，所以Vue3就给我们提供了ref方法，实现对简单值的监听</li>
</ul>
<h4 id="二、ref本质"><a href="#二、ref本质" class="headerlink" title="二、ref本质"></a>二、ref本质</h4><ul>
<li>ref底层的本质其实还是reactive，系统会自动根据我们给ref传入的值将它转换成<code>ref(xx) -&gt; reactive(&#123;value: xx&#125;)</code></li>
</ul>
<h4 id="三、ref注意点"><a href="#三、ref注意点" class="headerlink" title="三、ref注意点"></a>三、ref注意点</h4><ul>
<li>在template中使用ref的值不用通过value获取</li>
<li>在js中使用ref的值必须通过value获取</li>
</ul>
<ol>
<li>js中加value，template中不需要加value</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = ref(<span class="number">18</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      age.value = 666</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      age,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="14-Vue3-0-ref和reactive区别-理解"><a href="#14-Vue3-0-ref和reactive区别-理解" class="headerlink" title="14-Vue3.0-ref和reactive区别-理解"></a>14-Vue3.0-ref和reactive区别-理解</h3><h4 id="一、Vue在处理的时候会先判断数据是什么类型的"><a href="#一、Vue在处理的时候会先判断数据是什么类型的" class="headerlink" title="一、Vue在处理的时候会先判断数据是什么类型的"></a>一、Vue在处理的时候会先判断数据是什么类型的</h4><ul>
<li>如果在template里面使用的是ref类型的数据，那么Vue会自动帮我们添加.value</li>
<li>如果template里使用的是reactive类型的数据，那么Vue不会自动帮我们添加.value</li>
</ul>
<h4 id="二、Vue是如何判断数据类型的呢"><a href="#二、Vue是如何判断数据类型的呢" class="headerlink" title="二、Vue是如何判断数据类型的呢"></a>二、Vue是如何判断数据类型的呢</h4><h5 id="1-打印ref数据的结果"><a href="#1-打印ref数据的结果" class="headerlink" title="1. 打印ref数据的结果"></a>1. 打印ref数据的结果</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">RefImpl &#123;_rawValue: <span class="number">18</span>, _shallow: <span class="literal">false</span>, __v_isRef: <span class="literal">true</span>, _value: <span class="number">18</span>&#125;</span><br><span class="line">__v_isRef: <span class="literal">true</span></span><br><span class="line">_rawValue: <span class="number">18</span></span><br><span class="line">_shallow: <span class="literal">false</span></span><br><span class="line">_value: <span class="number">18</span></span><br><span class="line"><span class="keyword">value</span>: <span class="number">18</span></span><br></pre></td></tr></table></figure>

<h5 id="2-解释"><a href="#2-解释" class="headerlink" title="2. 解释"></a>2. 解释</h5><ul>
<li>Vue在解析数据之前，会自动判断这个数据是否是 ref 类型的，如果是就自动添加 .value ，如果不是就不自动添加 .value</li>
<li>通过当前数据的 __v_isRef 来判断，如果有这个私有属性，并且取值为true，那么就代表是一个ref类型的数据</li>
</ul>
<h4 id="三、isRef和isReactive"><a href="#三、isRef和isReactive" class="headerlink" title="三、isRef和isReactive"></a>三、isRef和isReactive</h4><p>通过 isRef 和 isReactive 可以判断数据是 ref 还是 reactive</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref, isRef, isReactive, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = ref(<span class="number">18</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(&#123; <span class="attr">age</span>: <span class="number">18</span> &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(isRef(age))</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(isRef(state))</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(isReactive(age))</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(isReactive(state))</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      age,</span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="15-Vue3-0-递归监听理解"><a href="#15-Vue3-0-递归监听理解" class="headerlink" title="15-Vue3.0-递归监听理解"></a>15-Vue3.0-递归监听理解</h3><h4 id="一、递归监听"><a href="#一、递归监听" class="headerlink" title="一、递归监听"></a>一、递归监听</h4><p>默认情况下，无论是通过ref还是通过reactive都是递归监听</p>
<h5 id="1-reactive递归监听"><a href="#1-reactive递归监听" class="headerlink" title="1. reactive递归监听"></a>1. reactive递归监听</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.a = <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.gf.b = <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.gf.f.c = <span class="string">&#x27;3&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.gf.f.s.d = <span class="string">&#x27;4&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-ref递归监听"><a href="#2-ref递归监听" class="headerlink" title="2. ref递归监听"></a>2. ref递归监听</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = ref(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.value.a = <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.value.gf.b = <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.value.gf.f.c = <span class="string">&#x27;3&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.value.gf.f.s.d = <span class="string">&#x27;4&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="二、递归监听存在的问题"><a href="#二、递归监听存在的问题" class="headerlink" title="二、递归监听存在的问题"></a>二、递归监听存在的问题</h4><p>如果数据量比较大，非常消耗性能<br> 因为递归监听将使每一层都被包装成一个Proxy</p>
<h5 id="1-递归监听验证"><a href="#1-递归监听验证" class="headerlink" title="1. 递归监听验证"></a>1. 递归监听验证</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.gf)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.gf.f)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.gf.f.s)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮看到控制台的输出</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1907212-11a2115947c5003f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/282/format/webp" alt="img"></p>
<p>image.png</p>
<h3 id="16-Vue3-0-非递归监听-掌握"><a href="#16-Vue3-0-非递归监听-掌握" class="headerlink" title="16-Vue3.0-非递归监听-掌握"></a>16-Vue3.0-非递归监听-掌握</h3><h4 id="一、非递归监听"><a href="#一、非递归监听" class="headerlink" title="一、非递归监听"></a>一、非递归监听</h4><h5 id="1-shallowReactive"><a href="#1-shallowReactive" class="headerlink" title="1. shallowReactive"></a>1. shallowReactive</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; shallowReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = shallowReactive(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// state.a = &#x27;1&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.gf.b = <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.gf.f.c = <span class="string">&#x27;3&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.gf.f.s.d = <span class="string">&#x27;4&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.gf)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.gf.f)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.gf.f.s)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮页面将不会发生变化，查看控制台将看到以下打印结果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1907212-c4b69db8d51a9467.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/262/format/webp" alt="img"></p>
<p>image.png</p>
<p>发现除了第一层之外其它层没有被包装成Proxy</p>
<h5 id="2-shallowRef"><a href="#2-shallowRef" class="headerlink" title="2. shallowRef"></a>2. shallowRef</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; shallowRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = shallowRef(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.value.a = <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.value.gf.b = <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.value.gf.f.c = <span class="string">&#x27;3&#x27;</span></span></span><br><span class="line"><span class="javascript">      state.value.gf.f.s.d = <span class="string">&#x27;4&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.value)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.value.gf)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.value.gf.f)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state.value.gf.f.s)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮页面将不会发生变化，查看控制台将看到以下打印结果</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1907212-edef292c0e152c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/508/format/webp" alt="img"></p>
<p>image.png</p>
<p> 发现除了第一层之外所有层均没有被包装<br><strong>注意：</strong>  如果是通过shallowRef创建数据，nameVue监听的是.value的变化，并不是第一层的变化</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; shallowRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = shallowRef(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      state.value = &#123;</span><br><span class="line"><span class="javascript">        a: <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line">        gf: &#123;</span><br><span class="line"><span class="javascript">          b: <span class="string">&#x27;2&#x27;</span>,</span></span><br><span class="line">          f: &#123;</span><br><span class="line"><span class="javascript">            c: <span class="string">&#x27;3&#x27;</span>,</span></span><br><span class="line">            s: &#123;</span><br><span class="line"><span class="javascript">              d: <span class="string">&#x27;4&#x27;</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮发现页面发生变化了</p>
<h5 id="3-triggerRef"><a href="#3-triggerRef" class="headerlink" title="3. triggerRef"></a>3. triggerRef</h5><p>采用非递归监听如果想监听第四层的数据，可以使用triggerRef根据传入的数据主动更新界面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.b&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.c&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.gf.f.s.d&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; shallowRef, triggerRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = shallowRef(&#123;</span></span><br><span class="line"><span class="javascript">      a: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">      gf: &#123;</span><br><span class="line"><span class="javascript">        b: <span class="string">&#x27;b&#x27;</span>,</span></span><br><span class="line">        f: &#123;</span><br><span class="line"><span class="javascript">          c: <span class="string">&#x27;c&#x27;</span>,</span></span><br><span class="line">          s: &#123;</span><br><span class="line"><span class="javascript">            d: <span class="string">&#x27;d&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.value.gf.f.s.d = <span class="string">&#x27;4&#x27;</span></span></span><br><span class="line">      triggerRef(state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮发现第四层的数据发生了变化<br> <strong>注意：</strong> Vue3只提供了triggerRef方法，没有提供triggerReactive方法，所以如果是reactive类型的数据，那么是无法主动触发界面更新的</p>
<h3 id="17-Vue3-0-shallowRef本质"><a href="#17-Vue3-0-shallowRef本质" class="headerlink" title="17-Vue3.0-shallowRef本质"></a>17-Vue3.0-shallowRef本质</h3><p><code>ref-&gt;reactive</code><br> <code>ref(10)-&gt;reactive(&#123;value: 10&#125;)</code><br> <code>shallowRef-&gt;shallowReactive</code><br> <code>shallowRef(10)-&gt;shallowReactive(&#123;value: 10&#125;)</code><br> 所以如果是通过shallowRef创建的数据，它监听的是.value的变化，因为底层本质上value才是第一层</p>
<h3 id="18-Vue3-0-toRaw-amp-amp-19-Vue3-0-toRaw"><a href="#18-Vue3-0-toRaw-amp-amp-19-Vue3-0-toRaw" class="headerlink" title="18-Vue3.0-toRaw &amp;&amp; 19-Vue3.0-toRaw"></a>18-Vue3.0-toRaw &amp;&amp; 19-Vue3.0-toRaw</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(obj)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj === state) <span class="comment">// false</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// state和obj的关系</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 引用关系，state的本质是一个Proxy对象，在这个Proxy对象引用了obj</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果直接修改obj，那么是无法触发界面更新的，只有通过包装之后的对象来修改，才会触发界面的更新</span></span></span><br><span class="line"><span class="javascript">      obj.name = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="一、toRaw"><a href="#一、toRaw" class="headerlink" title="一、toRaw"></a>一、toRaw</h4><p>从reactive或ref中得到原始数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(obj)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj2 = toRaw(state)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj === obj2)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制台打印true</p>
<h4 id="二、toRaw作用"><a href="#二、toRaw作用" class="headerlink" title="二、toRaw作用"></a>二、toRaw作用</h4><p>做一些不想被监听的事情（提升性能）</p>
<p>ref/reactive数据类型的特点：每次修改都会被追踪，都会更新UI界面，但是这样其实是非常消耗性能的，所以如果我们有一些操作不需要追踪，不需要更新UI界面，那么这个时候，我们就可以通过toRaw方法拿到它的原始数据，对原始数据进行修改，这样就不会被追踪，这样就不会更新UI界面，这样性能就好了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(obj)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj2 = toRaw(state)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj === obj2)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      obj2.name = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮发现数据发生了改变，但界面没有发生改变</p>
<h4 id="三、ref的toRaw"><a href="#三、ref的toRaw" class="headerlink" title="三、ref的toRaw"></a>三、ref的toRaw</h4><p>如果想通过toRaw拿到ref类型的原始数据（创建时传入的那个数据），那么就必须明确告诉toRaw方法，要获取的是.value的值，因为经过Vue处理之后.value中保存的才是当初创建时传入的那个原始数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// ref本质：reactive</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ref(obj) -&gt; reactive(&#123;value: obj&#125;)</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = ref(obj)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj2 = toRaw(state.value)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(obj === obj2)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      obj2.name = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="20-Vue3-0-markRaw"><a href="#20-Vue3-0-markRaw" class="headerlink" title="20-Vue3.0-markRaw"></a>20-Vue3.0-markRaw</h3><p>markRaw标记某个数据永远不会被追踪</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; markRaw, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    obj = markRaw(obj)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = reactive(obj)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.name = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮数据不会发生变化</p>
<h3 id="21-Vue3-0-toRef-理解"><a href="#21-Vue3-0-toRef-理解" class="headerlink" title="21-Vue3.0-toRef-理解"></a>21-Vue3.0-toRef-理解</h3><h4 id="一、toRef的理解"><a href="#一、toRef的理解" class="headerlink" title="一、toRef的理解"></a>一、toRef的理解</h4><ul>
<li>如果利用ref将某一个对象中的属性变成响应式的数据， 我们修改响应式数据是不会影响到原始数据的。</li>
<li>如果利用toRef将某一个对象中的属性变成响应式的数据，我们修改响应式数据是会影响到原始数据的</li>
<li>但是如果响应式数据是通过toRef创建的，那么修改了数据并不会触发UI界面的更新</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = toRef(obj, <span class="string">&#x27;name&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.value = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(obj)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮发现数据与原始数据都发生了变化</p>
<h4 id="二、ref和toRef区别"><a href="#二、ref和toRef区别" class="headerlink" title="二、ref和toRef区别"></a>二、ref和toRef区别</h4><ul>
<li>ref-&gt;复制，修改响应式数据不会影响以前的数据</li>
<li>toRef-&gt;引用，修改响应式数据会影响以前的数据</li>
<li>ref-&gt;数据发生改变，界面就会自动更新</li>
<li>toRef-&gt;数据发生改变，界面也不会自动更新</li>
</ul>
<h4 id="三、toRef引用场景"><a href="#三、toRef引用场景" class="headerlink" title="三、toRef引用场景"></a>三、toRef引用场景</h4><p>如果想让响应式数据和以前的数据关联起来，并且更新响应式数据之后还不想更新UI，name就可以使用toRef。</p>
<h3 id="22-Vue3-0-toRefs-理解"><a href="#22-Vue3-0-toRefs-理解" class="headerlink" title="22-Vue3.0-toRefs-理解"></a>22-Vue3.0-toRefs-理解</h3><p>将对象中所有的属性全部追踪</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      age:18</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = toRefs(obj)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.name.value = <span class="string">&#x27;zs&#x27;</span></span></span><br><span class="line">      state.age.value = 666</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(obj)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击按钮发现数据和原始数据都发生了变化</p>
<h3 id="23-Vue3-0-customRef-上-理解-amp-amp-24-Vue3-0-customRef-下-理解"><a href="#23-Vue3-0-customRef-上-理解-amp-amp-24-Vue3-0-customRef-下-理解" class="headerlink" title="23-Vue3.0-customRef 上-理解 &amp;&amp; 24-Vue3.0-customRef 下-理解"></a>23-Vue3.0-customRef 上-理解 &amp;&amp; 24-Vue3.0-customRef 下-理解</h3><h4 id="一、customRef"><a href="#一、customRef" class="headerlink" title="一、customRef"></a>一、customRef</h4><p>返回一个ref对象，可以显式地控制依赖追踪和触发响应</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myRef</span>(<span class="params">value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        track() <span class="comment">// 告诉Vue这个数据需要追踪变化</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>, value)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> value</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>, newValue)</span></span><br><span class="line">        value = newValue</span><br><span class="line"><span class="javascript">        trigger() <span class="comment">// 告诉Vue触发界面更新</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = myRef(<span class="number">18</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      age.value += 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      age,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="二、为什么要使用customRef"><a href="#二、为什么要使用customRef" class="headerlink" title="二、为什么要使用customRef"></a>二、为什么要使用customRef</h4><p>一个使用customRef的场景，根据数据的请求路径进行追踪</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &lt;li</span><br><span class="line">      v-for=&quot;item in state&quot;</span><br><span class="line">      :key=&quot;item.id&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myRef</span>(<span class="params">path, initValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> value = initValue</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line">    fetch(path)</span><br><span class="line"><span class="javascript">      .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span></span><br><span class="line"><span class="javascript">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line">        value = data</span><br><span class="line">        trigger()</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(err)</span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这个数据是需要追中变化的</span></span></span><br><span class="line">        track()</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>, value)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> value</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>, newValue)</span></span><br><span class="line">        value = newValue</span><br><span class="line"><span class="javascript">        <span class="comment">// 告诉Vue触发界面更新</span></span></span><br><span class="line">        trigger()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = myRef(<span class="string">&#x27;/data.json&#x27;</span>, [])</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="25-Vue3-0-ref-获取元素-理解"><a href="#25-Vue3-0-ref-获取元素-理解" class="headerlink" title="25-Vue3.0-ref-获取元素-理解"></a>25-Vue3.0-ref-获取元素-理解</h3><p>在vue3.x中我们也可以通过ref来获取元素</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    我是div</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> box = ref(<span class="literal">null</span>) <span class="comment">// reactive(&#123;value: null&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;onMounted&#x27;</span>, box.value)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      box,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="26-Vue3-0-readonly家族-理解"><a href="#26-Vue3-0-readonly家族-理解" class="headerlink" title="26-Vue3.0-readonly家族-理解"></a>26-Vue3.0-readonly家族-理解</h3><p>用于创建一个只读的数据，并且是递归只读</p>
<h4 id="一、readonly"><a href="#一、readonly" class="headerlink" title="一、readonly"></a>一、readonly</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.attr.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.attr.height&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; readonly, isReadonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 用于创建一个只读的数据，并且是递归只读</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = readonly(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      attr: &#123;</span><br><span class="line">        age: 18,</span><br><span class="line">        height: 1.88,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.name = <span class="string">&#x27;知播渔&#x27;</span></span></span><br><span class="line">      state.attr.age = 666</span><br><span class="line">      state.attr.height = 1.66</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="二、shallowReadonly"><a href="#二、shallowReadonly" class="headerlink" title="二、shallowReadonly"></a>二、shallowReadonly</h4><p>用于创建一个只读的数据，但不是递归只读的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.attr.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.attr.height&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; readonly, isReadonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 用于创建一个只读的数据，并且是递归只读</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = shallowReadonly(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      attr: &#123;</span><br><span class="line">        age: 18,</span><br><span class="line">        height: 1.88,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.name = <span class="string">&#x27;知播渔&#x27;</span></span></span><br><span class="line">      state.attr.age = 666</span><br><span class="line">      state.attr.height = 1.66</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="三、isReadonly"><a href="#三、isReadonly" class="headerlink" title="三、isReadonly"></a>三、isReadonly</h4><p>判断一个数据是否是只读的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.attr.age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;state.attr.height&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;myFn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; readonly, isReadonly, shallowReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 用于创建一个只读的数据，并且是递归只读</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> state = shallowReadonly(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;lnj&#x27;</span>,</span></span><br><span class="line">      attr: &#123;</span><br><span class="line">        age: 18,</span><br><span class="line">        height: 1.88,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">myFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      state.name = <span class="string">&#x27;知播渔&#x27;</span></span></span><br><span class="line">      state.attr.age = 666</span><br><span class="line">      state.attr.height = 1.66</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(state)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(isReadonly(state))</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      state,</span><br><span class="line">      myFn,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="四、readonly-和-const-的区别"><a href="#四、readonly-和-const-的区别" class="headerlink" title="四、readonly 和 const 的区别"></a>四、readonly 和 const 的区别</h4><p>const：赋值保护，不能给变量重新赋值<br> readonly：属性保护，不能给属性重新赋值</p>
<h3 id="27-Vue3-0-V3响应式数据本质上-理解-amp-amp-28-Vue3-0-V3响应式数据本质下-理解"><a href="#27-Vue3-0-V3响应式数据本质上-理解-amp-amp-28-Vue3-0-V3响应式数据本质下-理解" class="headerlink" title="27-Vue3.0-V3响应式数据本质上-理解 &amp;&amp; 28-Vue3.0-V3响应式数据本质下-理解"></a>27-Vue3.0-V3响应式数据本质上-理解 &amp;&amp; 28-Vue3.0-V3响应式数据本质下-理解</h3><h4 id="一、Vue3-0响应式数据本质"><a href="#一、Vue3-0响应式数据本质" class="headerlink" title="一、Vue3.0响应式数据本质"></a>一、Vue3.0响应式数据本质</h4><ul>
<li>在Vue2.x中是通过defineProperty来实现响应式数据的<br> 详见：手写Vue全家桶</li>
<li>在Vue3.x中是通过Proxy来实现响应式数据的</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;lng&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> state = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">  get (obj, key) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj, key)</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set (obj, key, value) &#123;</span><br><span class="line">    obj[key] = value</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;更新界面&#x27;</span>, obj, key, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state.name) <span class="comment">// lng</span></span><br><span class="line">state.name = <span class="string">&#x27;直播&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(state.name)</span><br></pre></td></tr></table></figure>

<h4 id="二、-Proxy注意点"><a href="#二、-Proxy注意点" class="headerlink" title="二、 Proxy注意点"></a>二、 Proxy注意点</h4><ul>
<li>set方法必须通过返回值告诉Proxy此次操作是否成功</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> state = <span class="keyword">new</span> <span class="built_in">Proxy</span>(arr, &#123;</span><br><span class="line">  get (obj, key) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj, key)</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set (obj, key, value) &#123;</span><br><span class="line">    obj[key] = value</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;更新界面&#x27;</span>, obj, key, value)</span><br><span class="line">    <span class="comment">// 没有会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state[<span class="number">1</span>])</span><br><span class="line">state.push(<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<h3 id="29-Vue3-0-手写-shallowReactive-shallowRef-理解"><a href="#29-Vue3-0-手写-shallowReactive-shallowRef-理解" class="headerlink" title="29-Vue3.0-手写 shallowReactive-shallowRef-理解"></a>29-Vue3.0-手写 shallowReactive-shallowRef-理解</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowReactive</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    get (obj, key) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set (obj, key, value) &#123;</span><br><span class="line">      obj[key] = value</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;更新界面&#x27;</span>, obj, key, value)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowRef</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> shallowReactive(&#123;</span><br><span class="line">    value: val</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="30-Vue3-0-手写reactive-ref-理解"><a href="#30-Vue3-0-手写reactive-ref-理解" class="headerlink" title="30-Vue3.0-手写reactive-ref-理解"></a>30-Vue3.0-手写reactive-ref-理解</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果是一个数组，那么取出数组中的某一个元素</span></span><br><span class="line">      <span class="comment">// 判断每一个元素是否又是一个对象，如果又是一个对象，如果又是一个对象，那么也需要包装成一个Proxy</span></span><br><span class="line">      obj.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          obj[index] = reactive(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果是一个对象，那么取出对象属性的取值</span></span><br><span class="line">      <span class="comment">// 判断每一个元素是否又是一个对象，如果又是一个对象，如果又是一个对象，那么也需要包装成一个Proxy</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = obj[key]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          obj[key] = reactive(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">      get (obj, key) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      set (obj, key, value) &#123;</span><br><span class="line">        obj[key] = value</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;更新界面&#x27;</span>, <span class="built_in">JSON</span>.stringify(obj), key, value)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">&#x27;不是一个对象&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reactive(&#123;</span><br><span class="line">    value: val</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="31-Vue3-0-手写readonly-shallowReadonly-理解"><a href="#31-Vue3-0-手写readonly-shallowReadonly-理解" class="headerlink" title="31-Vue3.0-手写readonly-shallowReadonly-理解"></a>31-Vue3.0-手写readonly-shallowReadonly-理解</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowReadonly</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    get (obj, key) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set (obj, key, value) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;只读&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果是一个数组，那么取出数组中的某一个元素</span></span><br><span class="line">      <span class="comment">// 判断每一个元素是否又是一个对象，如果又是一个对象，如果又是一个对象，那么也需要包装成一个Proxy</span></span><br><span class="line">      obj.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          obj[index] = readonly(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果是一个对象，那么取出对象属性的取值</span></span><br><span class="line">      <span class="comment">// 判断每一个元素是否又是一个对象，如果又是一个对象，如果又是一个对象，那么也需要包装成一个Proxy</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = obj[key]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">          obj[key] = readonly(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">      get (obj, key) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      set (obj, key, value) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;只读&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">&#x27;不是一个对象&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs笔记</title>
    <url>/undefined/fb69810e/</url>
    <content><![CDATA[<blockquote>
<p>nodejs笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-邂逅Node"><a href="#1-邂逅Node" class="headerlink" title="1 邂逅Node"></a>1 邂逅Node</h1><h2 id="1-1-什么是nodejs"><a href="#1-1-什么是nodejs" class="headerlink" title="1.1 什么是nodejs"></a>1.1 什么是nodejs</h2><p>Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境</p>
<h2 id="1-2-Node程序传递参数"><a href="#1-2-Node程序传递参数" class="headerlink" title="1.2 Node程序传递参数"></a>1.2 Node程序传递参数</h2><p>在某些情况下执行node程序的过程中，我们可能希望给node传递一些参数：</p>
<p><code>node index.js env=development coderwhy</code></p>
<p>如果我们这样来使用程序，就意味着我们需要在程序中获取到传递的参数：</p>
<ul>
<li><p>获取参数其实是在process的内置对象中的；</p>
</li>
<li><p>如果我们直接打印这个内置对象，它里面包含特别的信息： </p>
</li>
<li><p>其他的一些信息，比如版本、操作系统等大家可以自行查看，后面用到一些其他的我们还会提到；</p>
</li>
</ul>
<p>现在，我们先找到其中的argv属性： 我们发现它是一个数组，里面包含了我们需要的参数；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(process.argv);</span><br><span class="line">process.argv.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1-3-Node的输出"><a href="#1-3-Node的输出" class="headerlink" title="1.3 Node的输出"></a>1.3 Node的输出</h2><p><code>console.log</code></p>
<p><code>console.clear</code> 清空控制台</p>
<p><code>console.trace</code> 打印函数的调用栈</p>
<h2 id="1-4-常见的全局对象"><a href="#1-4-常见的全局对象" class="headerlink" title="1.4 常见的全局对象"></a>1.4 常见的全局对象</h2><p><strong>process对象：</strong>process提供了Node进程中相关的信息： </p>
<ul>
<li><p>比如Node的运行环境、参数信息等； </p>
</li>
<li><p>后面在项目中，我也会讲解，如何将一些环境变量读取到 process 的 env 中；</p>
</li>
</ul>
<p><strong>console对象：</strong> 提供了简单的调试控制台</p>
<p><strong>定时器函数：</strong> 在node中使用定时器有好几种方式</p>
<ul>
<li><p><code>setTimeout(callback, delay[, ...args])</code>：callback在delay毫秒后执行一次； </p>
</li>
<li><p><code>setInterval(callback, delay[, ...args])</code>：callback每delay毫秒重复执行一次； </p>
</li>
<li><p><code>setImmediate(callback[, ...args])</code>：callbackI / O事件后的回调的“立即”执行； </p>
<ul>
<li>这里先不展开讨论它和<code>setTimeout(callback, 0)</code>之间的区别；</li>
<li>因为它涉及到事件循环的阶段问题，我会在后续详细讲解事件循环相关的知识；</li>
</ul>
</li>
<li><p><code>process.nextTick(callback[, ...args])</code>：添加到下一次tick队列中；</p>
</li>
</ul>
<p><strong>global对象：</strong> 全局对象，<code>process</code>、<code>console</code>、<code>setTimeout</code>等都有被放到global中</p>
<blockquote>
<p>global和window的区别：</p>
<ul>
<li><p>在浏览器中，全局变量都是在window上的，比如有document、setInterval、setTimeout、alert、console等等</p>
</li>
<li><p>在Node中，我们也有一个global属性，并且看起来它里面有很多其他对象。 </p>
</li>
<li><p>但是在浏览器中执行的JavaScript代码，如果我们在顶级范围内通过var定义的一个属性，默认会被添加到window对象上</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;sjx&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name)</span><br></pre></td></tr></table></figure>

<ul>
<li>但是在node中，我们通过var定义一个变量，它只是在当前模块中有一个变量，不会放到全局中：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;sjx&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">global</span>.name)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220502155617.png" alt="image-20220502155309540"></p>
<h2 id="1-5-特殊的全局对象"><a href="#1-5-特殊的全局对象" class="headerlink" title="1.5 特殊的全局对象"></a>1.5 特殊的全局对象</h2><p>可以在模块中任意使用，但是在命令行交互中是不可以使用的：包括：<code>__dirname</code>、<code>__filename</code>、<code>exports</code>、<code>module</code>、<code>require()</code></p>
<p><code>__dirname</code>：获取当前文件所在的路径，不包括后面的文件名</p>
<p><code>__filename</code>：获取当前文件所在的路径和文件名称，包括后面的文件名称</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(__dirname);</span><br><span class="line"><span class="comment">// Users/SJX/Desktop</span></span><br><span class="line"><span class="built_in">console</span>.log(__filename);</span><br><span class="line"><span class="comment">// Users/SJX/Desktop/test.js</span></span><br></pre></td></tr></table></figure>

<h1 id="2-JavaScript模块化"><a href="#2-JavaScript模块化" class="headerlink" title="2 JavaScript模块化"></a>2 JavaScript模块化</h1><h2 id="2-1-什么是模块化"><a href="#2-1-什么是模块化" class="headerlink" title="2.1 什么是模块化"></a>2.1 什么是模块化</h2><ul>
<li><p>事实上模块化开发最终的目的是将程序划分成一个个小的结构； </p>
</li>
<li><p>这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构；</p>
</li>
<li><p>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用；</p>
</li>
<li><p>也可以通过某种方式，导入另外结构中的变量、函数、对象等；</p>
</li>
</ul>
<p>按照这种结构划分开发程序的过程，就是模块化开发的过程</p>
<h2 id="2-2-CommonJS和Node"><a href="#2-2-CommonJS和Node" class="headerlink" title="2.2 CommonJS和Node"></a>2.2 CommonJS和Node</h2><ul>
<li><p>Node是CommonJS在服务器端一个具有代表性的实现；</p>
</li>
<li><p>Browserify是CommonJS在浏览器中的一种实现；</p>
</li>
<li><p>webpack打包工具具备对CommonJS的支持和转换；</p>
</li>
</ul>
<p>Node中对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发：</p>
<ul>
<li><p>在Node中每一个js文件都是一个单独的模块； </p>
</li>
<li><p>这个模块中包括CommonJS规范的核心变量：exports、module.exports、require； </p>
</li>
<li><p>我们可以使用这些变量来方便的进行模块化开发；</p>
</li>
</ul>
<p>模块化的核心是<strong>导出</strong>和<strong>导入</strong>，Node中对其进行了实现：</p>
<ul>
<li><p>exports和module.exports可以负责对模块中的内容进行导出； </p>
</li>
<li><p>require函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容；</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;sjx&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.name = name;</span><br><span class="line"><span class="built_in">exports</span>.age = age;</span><br><span class="line"><span class="built_in">exports</span>.sayHello = sayHello;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bar.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name);</span><br><span class="line"><span class="built_in">console</span>.log(a.age);</span><br><span class="line">a.sayHello(<span class="string">&#x27;sjk&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><code>node bar.js</code> 执行该文件</p>
<p>实际上为一个浅拷贝（引用赋值）</p>
<blockquote>
<p>exports与module.exports：</p>
<p>因为module对象的exports属性是exports对象的一个引用，即module.exports = exports</p>
</blockquote>
<h2 id="2-3-模块的加载过程"><a href="#2-3-模块的加载过程" class="headerlink" title="2.3 模块的加载过程"></a>2.3 模块的加载过程</h2><p>结论一：模块在被第一次引入时，模块中的js代码会被运行一次</p>
<p>结论二：模块被多次引入时，会缓存，最终只加载（运行）一次</p>
<ul>
<li>每个模块对象module都有一个属性：loaded：为false表示还没有加载，为true表示已经加载</li>
</ul>
<p>结论三：如果有循环引入，那么加载顺序是什么？</p>
<p>如果出现如图模块的引用关系，那么加载顺序是什么呢？</p>
<ul>
<li><p>这个其实是一种数据结构：图结构；</p>
</li>
<li><p>图结构在遍历的过程中，有深度优先搜索（DFS, depth first search）和广度优先搜索（BFS, breadth first search）； </p>
</li>
<li><p>Node采用的是深度优先算法：main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220502165513.png" alt="image-20220502165513214"></p>
<h2 id="2-4-CommonJS规范缺点"><a href="#2-4-CommonJS规范缺点" class="headerlink" title="2.4 CommonJS规范缺点"></a>2.4 CommonJS规范缺点</h2><p>CommonJS加载模块是同步的，应用于浏览器需要等js文件从服务器上下载下来才能运行，所以在浏览器中通常不使用CommonJS规范</p>
<h2 id="2-5-AMD规范"><a href="#2-5-AMD规范" class="headerlink" title="2.5 AMD规范"></a>2.5 AMD规范</h2><p>AMD主要是应用于浏览器的一种模块化规范：</p>
<ul>
<li><p>AMD是Asynchronous Module Definition（异步模块定义）的缩写； </p>
</li>
<li><p>它采用的是异步加载模块；</p>
</li>
<li><p>事实上AMD的规范还要早于CommonJS，但是CommonJS目前依然在被使用，而AMD使用的较少了；</p>
</li>
</ul>
<p>规范只是定义代码的应该如何去编写，只有有了具体的实现才能被应用：</p>
<ul>
<li>AMD实现的比较常用的库是require.js和curl.js；</li>
</ul>
<h3 id="require-js"><a href="#require-js" class="headerlink" title="require.js"></a>require.js</h3><p>第一步：下载require.js</p>
<ul>
<li><p>下载地址：<a href="https://github.com/requirejs/requirejs">https://github.com/requirejs/requirejs</a></p>
</li>
<li><p>找到其中的require.js文件；</p>
</li>
</ul>
<p>第二步：定义HTML的script标签引入require.js和定义入口文件：</p>
<ul>
<li>data-main属性的作用是在加载完src的文件后会加载执行该文件</li>
</ul>
<p><code>&lt;script src=&quot;./lib/require.js&quot; data-main=&quot;./index.js&quot;&gt;&lt;/script&gt;</code></p>
<h2 id="2-6-CMD规范"><a href="#2-6-CMD规范" class="headerlink" title="2.6 CMD规范"></a>2.6 CMD规范</h2><p>CMD规范也是应用于浏览器的一种模块化规范：</p>
<ul>
<li><p>CMD 是Common Module Definition（通用模块定义）的缩写； </p>
</li>
<li><p>它也采用了异步加载模块，但是它将CommonJS的优点吸收了过来；</p>
</li>
<li><p>但是目前CMD使用也非常少了；</p>
</li>
</ul>
<p>CMD也有自己比较优秀的实现方案： </p>
<ul>
<li>SeaJS</li>
</ul>
<h3 id="SeaJS的使用"><a href="#SeaJS的使用" class="headerlink" title="SeaJS的使用"></a>SeaJS的使用</h3><p>第一步：下载SeaJS</p>
<ul>
<li><p>下载地址：<a href="https://github.com/seajs/seajs">https://github.com/seajs/seajs</a></p>
</li>
<li><p>找到dist文件夹下的sea.js</p>
</li>
</ul>
<p>第二步：引入sea.js和使用主入口文件</p>
<ul>
<li>seajs是指定主入口文件的</li>
</ul>
<h2 id="2-7-ES-Module"><a href="#2-7-ES-Module" class="headerlink" title="2.7 ES Module"></a>2.7 ES Module</h2><p>ES Module和CommonJS的模块化有一些不同之处： </p>
<ul>
<li><p>一方面它使用了import和export关键字； </p>
</li>
<li><p>另一方面它采用编译期的静态分析，并且也加入了动态引用的方式；</p>
</li>
</ul>
<p>ES Module模块采用export和import关键字来实现模块化：</p>
<ul>
<li><p>export负责将模块内的内容导出；</p>
</li>
<li><p>import负责从其他模块导入内容； </p>
</li>
</ul>
<p>采用ES Module将自动采用严格模式：<strong>use strict</strong>（如果你不熟悉严格模式可以简单看一下MDN上的解析；<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode%EF%BC%89">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode）</a></p>
<h3 id="2-7-1-export"><a href="#2-7-1-export" class="headerlink" title="2.7.1 export"></a>2.7.1 export</h3><p>export关键字将一个模块中的变量、函数、类等导出；</p>
<p>我们希望将其他中内容全部导出，它可以有如下的方式：</p>
<ul>
<li><p>方式一：在语句声明的前面直接加上export关键字</p>
</li>
<li><p>方式二：将所有需要导出的标识符，放到export后面的 {}中 </p>
<ul>
<li>注意：这里的 {}里面不是ES6的对象字面量的增强写法，{}也不是表示一个对象的</li>
<li>所以： export {name: name}，是错误的写法； </li>
</ul>
</li>
<li><p>方式三：导出时给标识符起一个别名</p>
</li>
</ul>
<h3 id="2-7-2-import"><a href="#2-7-2-import" class="headerlink" title="2.7.2 import"></a>2.7.2 import</h3><p>import关键字负责从另外一个模块中导入内容 </p>
<p>导入内容的方式也有多种：</p>
<ul>
<li><p>方式一：import {标识符列表} from ‘模块’； </p>
<ul>
<li>注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容； </li>
</ul>
</li>
<li><p>方式二：导入时给标识符起别名 </p>
</li>
<li><p>方式三：通过 * 将模块功能放到一个模块功能对象（a module object）上</p>
</li>
</ul>
<h3 id="2-7-3-export和import结合使用"><a href="#2-7-3-export和import结合使用" class="headerlink" title="2.7.3 export和import结合使用"></a>2.7.3 export和import结合使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; sum <span class="keyword">as</span> barSum &#125; <span class="keyword">from</span> <span class="string">&#x27;./bar.js&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</p>
</li>
<li><p>这样方便指定统一的接口规范，也方便阅读； </p>
</li>
<li><p>这个时候，我们就可以使用export和import结合使用；</p>
</li>
</ul>
<h3 id="2-7-4-default用法"><a href="#2-7-4-default用法" class="headerlink" title="2.7.4 default用法"></a>2.7.4 default用法</h3><p>默认导出：</p>
<ul>
<li>默认导出export时可以不需要指定名字</li>
<li>在导入时不需要使用{}，并且可以自己来指定名字</li>
<li>它也方便我们和现有的CommonJS等规范相互操作</li>
</ul>
<p>在一个模块中，只能有一个默认导出</p>
<h3 id="2-7-5-import函数"><a href="#2-7-5-import函数" class="headerlink" title="2.7.5 import函数"></a>2.7.5 import函数</h3><p>通过import加载一个模块，是不可以在其放到逻辑代码中的，比如：</p>
<p>为什么会出现这个情况呢？</p>
<ul>
<li><p>这是因为ES Module在被JS引擎解析时，就必须知道它的依赖关系；</p>
</li>
<li><p>由于这个时候js代码没有任何的运行，所以无法在进行类似于if判断中根据代码的执行情况；</p>
</li>
<li><p>甚至下面的这种写法也是错误的：因为我们必须到运行时能确定path的值；</p>
</li>
</ul>
<p>但是某些情况下，我们确确实实希望动态的来加载某一个模块：</p>
<ul>
<li><p>如果根据不懂的条件，动态来选择加载模块的路径；</p>
</li>
<li><p>这个时候我们需要使用 import() 函数来动态加载；</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./modules/aaa.js&#x27;</span>).then(<span class="function"><span class="params">aaa</span> =&gt;</span> &#123;</span><br><span class="line">    aaa.aaa();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./modules/bbb.js&#x27;</span>).then(<span class="function"><span class="params">bbb</span> =&gt;</span> &#123;</span><br><span class="line">    bbb.bbb();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对比CommonJS和ES Module加载过程</p>
<p>CommonJS模块加载js文件的过程是运行时加载的，并且是同步的</p>
<ul>
<li>运行时加载意味着是js引擎在执行js代码的过程中加载模块</li>
<li>同步的就意味着一个文件没有加载结束之前，后面的代码都不会执行</li>
</ul>
<p>ES Module加载js文件的过程是编译（解析）时加载的，并且是异步的</p>
<ul>
<li>编译时（解析）时加载，意味着import不能和运行时相关的内容放在一起使用</li>
<li>异步的意味着：JS引擎在遇到import时会去获取这个js文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行</li>
</ul>
</blockquote>
<p>通常情况下，CommonJS不能加载ES Module；多数情况下，ES Module可以加载CommonJS</p>
<h1 id="3-Node常用内置模块"><a href="#3-Node常用内置模块" class="headerlink" title="3 Node常用内置模块"></a>3 Node常用内置模块</h1><h2 id="3-1-内置模块path"><a href="#3-1-内置模块path" class="headerlink" title="3.1 内置模块path"></a>3.1 内置模块path</h2><p>常见的API</p>
<p><strong>从路径中获取信息</strong></p>
<ul>
<li><p>dirname：获取文件的父文件夹；</p>
</li>
<li><p>basename：获取文件名；</p>
</li>
<li><p>extname：获取文件扩展名；</p>
</li>
</ul>
<p><strong>路径的拼接</strong></p>
<ul>
<li><p>如果我们希望将多个路径进行拼接，但是不同的操作系统可能使用的是不同的分隔符；</p>
</li>
<li><p>这个时候我们可以使用path.join函数；</p>
</li>
</ul>
<p><strong>将文件和某个文件夹拼接</strong></p>
<ul>
<li><p>如果我们希望将某个文件和文件夹拼接，可以使用 path.resolve; </p>
</li>
<li><p>resolve函数会判断我们拼接的路径前面是否有 /或../或./； </p>
</li>
<li><p>如果有表示是一个绝对路径，会返回对应的拼接路径；</p>
</li>
<li><p>如果没有，那么会和当前执行文件所在的文件夹进行路径的拼接</p>
</li>
</ul>
<h2 id="3-2-内置模块fs"><a href="#3-2-内置模块fs" class="headerlink" title="3.2 内置模块fs"></a>3.2 内置模块fs</h2><p>fs是File System的缩写，表示文件系统。</p>
<p>对于任何一个为服务器端服务的语言或者框架通常都会有自己的文件系统：</p>
<ul>
<li><p>因为服务器需要将各种数据、文件等放置到不同的地方；</p>
</li>
<li><p>比如用户数据可能大多数是放到数据库中的（后面我们也会学习）；</p>
</li>
<li><p>比如某些配置文件或者用户资源（图片、音视频）都是以文件的形式存在于操作系统上的；</p>
</li>
</ul>
<p>Node也有自己的文件系统操作模块，就是fs： </p>
<ul>
<li><p>借助于Node帮我们封装的文件系统，我们可以在任何的操作系统（window、Mac OS、Linux）上面直接去操作文件；</p>
</li>
<li><p>这也是Node可以开发服务器的一大原因，也是它可以成为前端自动化脚本等热门工具的原因；</p>
</li>
</ul>
<h3 id="常见的API"><a href="#常见的API" class="headerlink" title="常见的API"></a>常见的API</h3><p>Node文件系统的API非常的多，我们不可能，也没必要一个个去学习，我们只需要学习最常用的即可</p>
<ul>
<li><a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html">https://nodejs.org/dist/latest-v14.x/docs/api/fs.html</a></li>
</ul>
<p>这些API大多数都提供三种操作方式：</p>
<ul>
<li><p>方式一：同步操作文件：代码会被阻塞，不会继续执行；</p>
</li>
<li><p>方式二：异步回调函数操作文件：代码不会被阻塞，需要传入回调函数，当获取到结果时，回调函数被执行；</p>
</li>
<li><p>方式三：异步Promise操作文件：代码不会被阻塞，通过 fs.promises 调用方法操作，会返回一个Promise，可以通过then、catch进行处理；</p>
</li>
</ul>
<p>案例：获取一个文件的状态</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack详解</title>
    <url>/undefined/73362992/</url>
    <content><![CDATA[<blockquote>
<p>webpack黑马程序员笔记</p>
</blockquote>
<span id="more"></span>



<p>之前学vue的时候没有详细学webpack，现在详细记一下笔记</p>
<h1 id="1-前端工程化"><a href="#1-前端工程化" class="headerlink" title="1 前端工程化"></a>1 前端工程化</h1><h2 id="1-1-小白眼中的前端开发-vs-实际的前端开发"><a href="#1-1-小白眼中的前端开发-vs-实际的前端开发" class="headerlink" title="1.1  小白眼中的前端开发 vs 实际的前端开发"></a>1.1  小白眼中的前端开发 vs 实际的前端开发</h2><p>小白眼中的前端开发：</p>
<ul>
<li><p> 会写 HTML + CSS + JavaScript 就会前端开发</p>
</li>
<li><p>需要美化页面样式，就拽一个 bootstrap 过来</p>
</li>
<li><p>需要操作 DOM 或发起 Ajax 请求，再拽一个 jQuery 过来</p>
</li>
<li><p>需要快速实现网页布局效果，就拽一个 Layui 过来</p>
</li>
</ul>
<p>实际的前端开发：</p>
<ul>
<li><p>模块化（js 的模块化、css 的模块化、资源的模块化）</p>
</li>
<li><p>组件化（复用现有的 UI 结构、样式、行为）</p>
</li>
<li><p>规范化（目录结构的划分、编码规范化、接口规范化、文档规范化、 Git 分支管理）</p>
</li>
<li><p>自动化（自动化构建、自动部署、自动化测试）</p>
</li>
</ul>
<h2 id="1-2-什么是前端工程化"><a href="#1-2-什么是前端工程化" class="headerlink" title="1.2 什么是前端工程化"></a>1.2 什么是前端工程化</h2><p>前端工程化指的是：在企业级的前端项目开发中，把前端开发所需的工具、技术、流程、经验等进行规范化、标准化。</p>
<p>企业中的 Vue 项目和 React 项目，都是基于工程化的方式进行开发的。</p>
<p>好处：前端开发自成体系，有一套标准的开发方案和流程。</p>
<h2 id="1-3-前端工程化的解决方案"><a href="#1-3-前端工程化的解决方案" class="headerlink" title="1.3 前端工程化的解决方案"></a>1.3 前端工程化的解决方案</h2><p>早期的前端工程化解决方案：</p>
<ul>
<li><p>grunt（ <a href="https://www.gruntjs.net/">https://www.gruntjs.net/</a> ） </p>
</li>
<li><p>gulp（ <a href="https://www.gulpjs.com.cn/">https://www.gulpjs.com.cn/</a> ）</p>
</li>
</ul>
<p>目前主流的前端工程化解决方案：</p>
<ul>
<li><p>webpack（ <a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a> ） </p>
</li>
<li><p>parcel（ <a href="https://zh.parceljs.org/">https://zh.parceljs.org/</a> ）</p>
</li>
</ul>
<h1 id="2-webpack的基本使用"><a href="#2-webpack的基本使用" class="headerlink" title="2 webpack的基本使用"></a>2 webpack的基本使用</h1><h2 id="2-1-什么是-webpack"><a href="#2-1-什么是-webpack" class="headerlink" title="2.1 什么是 webpack"></a>2.1 什么是 webpack</h2><p>概念：webpack 是前端项目工程化的具体解决方案。</p>
<p>主要功能：它提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端 JavaScript 的兼容性（运行时webpack会把高级的js代码转换为低级的js代码运行）、性能优化等强大的功能。</p>
<p>好处：让程序员把工作的重心放到具体功能的实现上，提高了前端开发效率和项目的可维护性。</p>
<p>注意：目前 Vue，React 等前端项目，基本上都是基于 webpack 进行工程化开发的。</p>
<h2 id="2-2-创建列表隔行变色项目"><a href="#2-2-创建列表隔行变色项目" class="headerlink" title="2.2  创建列表隔行变色项目"></a>2.2  创建列表隔行变色项目</h2><p>① 新建项目空白目录，并运行 npm init –y 命令，初始化包管理配置文件 package.json</p>
<p>② 新建 src 源代码目录</p>
<p>③ 新建 src -&gt; index.html 首页和 src -&gt; index.js 脚本文件</p>
<p>④ 初始化首页基本的结构</p>
<p>⑤ 运行 npm install jquery –S 命令，安装 jQuery</p>
<p>⑥ 通过 ES6 模块化的方式导入 jQuery，实现列表隔行变色效果</p>
<h2 id="2-3-在项目中安装-webpack"><a href="#2-3-在项目中安装-webpack" class="headerlink" title="2.3 在项目中安装 webpack"></a>2.3 在项目中安装 webpack</h2><p>在终端运行如下的命令，安装 webpack 相关的两个包：</p>
<p>npm install <a href="mailto:&#x77;&#x65;&#x62;&#x70;&#x61;&#99;&#107;&#64;&#53;&#x2e;&#x34;&#x32;&#46;&#x31;">&#x77;&#x65;&#x62;&#x70;&#x61;&#99;&#107;&#64;&#53;&#x2e;&#x34;&#x32;&#46;&#x31;</a> webpack-cli@4.7.2 -D </p>
<h2 id="2-4-在项目中配置-webpack"><a href="#2-4-在项目中配置-webpack" class="headerlink" title="2.4 在项目中配置 webpack"></a>2.4 在项目中配置 webpack</h2><p>① 在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件，并初始化如下的基本配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>  <span class="comment">// mode用来指定构建模式，可选值有development和production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 在 package.json 的 scripts 节点下，新增 dev 脚本如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack&quot;  // script 节点下的脚本，可以通过npm run执行，例如npm run dev</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③ 在终端中运行 npm run dev 命令，启动 webpack 进行项目的打包构建</p>
<h3 id="2-4-1-mode-的可选值"><a href="#2-4-1-mode-的可选值" class="headerlink" title="2.4.1 mode 的可选值"></a>2.4.1 mode 的可选值</h3><p>mode 节点的可选值有两个，分别是：</p>
<p>① development</p>
<ul>
<li><p>开发环境</p>
</li>
<li><p> 不会对打包生成的文件进行代码压缩和性能优化</p>
</li>
<li><p>打包速度快，适合在开发阶段使用</p>
</li>
</ul>
<p>② production</p>
<ul>
<li><p>生产环境</p>
</li>
<li><p>会对打包生成的文件进行代码压缩和性能优化</p>
</li>
<li><p>打包速度很慢，仅适合在项目发布阶段使用</p>
</li>
</ul>
<h3 id="2-4-2-webpack-config-js-文件的作用"><a href="#2-4-2-webpack-config-js-文件的作用" class="headerlink" title="2.4.2 webpack.config.js 文件的作用"></a>2.4.2 webpack.config.js 文件的作用</h3><p>webpack.config.js 是 webpack 的配置文件。webpack 在真正开始打包构建之前，会先读取这个配置文件，从而基于给定的配置，对项目进行打包。</p>
<p>注意：由于 webpack 是基于 node.js 开发出来的打包工具，因此在它的配置文件中，支持使用 node.js 相关的语法和模块进行 webpack 的个性化配置。</p>
<h3 id="2-4-3-webpack-中的默认约定"><a href="#2-4-3-webpack-中的默认约定" class="headerlink" title="2.4.3 webpack 中的默认约定"></a>2.4.3 webpack 中的默认约定</h3><p>在 webpack 4.x 和 5.x 的版本中，有如下的默认约定：</p>
<p>① 默认的打包入口文件为 src -&gt; index.js</p>
<p>② 默认的输出文件路径为 dist -&gt; main.js</p>
<p>注意：可以在 webpack.config.js 中修改打包的默认约定</p>
<h3 id="2-4-4-自定义打包的入口与出口"><a href="#2-4-4-自定义打包的入口与出口" class="headerlink" title="2.4.4 自定义打包的入口与出口"></a>2.4.4 自定义打包的入口与出口</h3><p>在 webpack.config.js 配置文件中，通过 entry 节点指定打包的入口。通过 output 节点指定打包的出口。</p>
<p>示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)  <span class="comment">// 导入node.js中专门操作路径的模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: path.join(_dirname, <span class="string">&#x27;./src/index.js&#x27;</span>), <span class="comment">//打包入口文件的路径</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(_dirname, <span class="string">&#x27;./dist&#x27;</span>), <span class="comment">// 输出文件的存放路径</span></span><br><span class="line">        filename: <span class="string">&#x27;bundle.js&#x27;</span>  <span class="comment">// 输出文件的名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-webpack-中的插件"><a href="#3-webpack-中的插件" class="headerlink" title="3 webpack 中的插件"></a>3 webpack 中的插件</h1><h2 id="3-1-webpack-插件的作用"><a href="#3-1-webpack-插件的作用" class="headerlink" title="3.1 webpack 插件的作用"></a>3.1 webpack 插件的作用</h2><p>通过安装和配置第三方的插件，可以拓展 webpack 的能力，从而让 webpack 用起来更方便。最常用的</p>
<p>webpack 插件有如下两个：</p>
<p>① webpack-dev-server</p>
<ul>
<li><p>类似于 node.js 阶段用到的 nodemon 工具</p>
</li>
<li><p>每当修改了源代码，webpack 会自动进行项目的打包和构建</p>
</li>
</ul>
<p>② html-webpack-plugin</p>
<ul>
<li><p>webpack 中的 HTML 插件（类似于一个模板引擎插件）</p>
</li>
<li><p>可以通过此插件自定制 index.html 页面的内容</p>
</li>
</ul>
<h2 id="3-2-webpack-dev-server"><a href="#3-2-webpack-dev-server" class="headerlink" title="3.2 webpack-dev-server"></a>3.2 webpack-dev-server</h2><p>webpack-dev-server 可以让 webpack 监听项目源代码的变化，从而进行自动打包构建。</p>
<h3 id="3-2-1-安装-webpack-dev-server"><a href="#3-2-1-安装-webpack-dev-server" class="headerlink" title="3.2.1 安装 webpack-dev-server"></a>3.2.1 安装 webpack-dev-server</h3><p>运行如下的命令，即可在项目中安装此插件：</p>
<p>npm install <a href="mailto:&#x77;&#101;&#98;&#112;&#97;&#x63;&#x6b;&#45;&#x64;&#x65;&#x76;&#x2d;&#x73;&#101;&#114;&#118;&#101;&#x72;&#x40;&#51;&#46;&#49;&#x31;&#x2e;&#50;">&#x77;&#101;&#98;&#112;&#97;&#x63;&#x6b;&#45;&#x64;&#x65;&#x76;&#x2d;&#x73;&#101;&#114;&#118;&#101;&#x72;&#x40;&#51;&#46;&#49;&#x31;&#x2e;&#50;</a> -D</p>
<h3 id="3-2-2-配置-webpack-dev-server"><a href="#3-2-2-配置-webpack-dev-server" class="headerlink" title="3.2.2 配置 webpack-dev-server"></a>3.2.2 配置 webpack-dev-server</h3><p>① 修改 package.json -&gt; scripts 中的 dev 命令如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack serve&quot;, // script节点下的脚本，可以通过npm run执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 再次运行 npm run dev 命令，重新进行项目的打包</p>
<p>③ 在浏览器中访问 <a href="http://localhost:8080/">http://localhost:8080</a> 地址，查看自动打包效果</p>
<p>注意：webpack-dev-server 会启动一个实时打包的 http 服务器</p>
<h3 id="3-2-3-打包生成的文件哪儿去了？"><a href="#3-2-3-打包生成的文件哪儿去了？" class="headerlink" title="3.2.3 打包生成的文件哪儿去了？"></a>3.2.3 打包生成的文件哪儿去了？</h3><p>① 不配置 webpack-dev-server 的情况下，webpack 打包生成的文件，会存放到实际的物理磁盘上</p>
<ul>
<li><p>严格遵守开发者在 webpack.config.js 中指定配置</p>
</li>
<li><p>根据 output 节点指定路径进行存放</p>
</li>
</ul>
<p>② 配置了 webpack-dev-server 之后，打包生成的文件存放到了内存中</p>
<ul>
<li><p>不再根据 output 节点指定的路径，存放到实际的物理磁盘上</p>
</li>
<li><p>提高了实时打包输出的性能，因为内存比物理磁盘速度快很多</p>
</li>
</ul>
<h3 id="3-2-4-生成到内存中的文件该如何访问？"><a href="#3-2-4-生成到内存中的文件该如何访问？" class="headerlink" title="3.2.4 生成到内存中的文件该如何访问？"></a>3.2.4 生成到内存中的文件该如何访问？</h3><p>webpack-dev-server 生成到内存中的文件，默认放到了项目的根目录中，而且是虚拟的、不可见的。 </p>
<ul>
<li><p>可以直接用 / 表示项目根目录，后面跟上要访问的文件名称，即可访问内存中的文件</p>
</li>
<li><p>例如 /bundle.js 就表示要访问 webpack-dev-server 生成到内存中的 bundle.js 文件</p>
</li>
</ul>
<h2 id="3-3-html-webpack-plugin"><a href="#3-3-html-webpack-plugin" class="headerlink" title="3.3 html-webpack-plugin"></a>3.3 html-webpack-plugin</h2><p>html-webpack-plugin 是 webpack 中的 HTML 插件，可以通过此插件自定制 index.html 页面的内容。</p>
<p>需求：通过 html-webpack-plugin 插件，将 src 目录下的 index.html 首页，复制到项目根目录中一份！</p>
<h3 id="3-3-1-安装-html-webpack-plugin"><a href="#3-3-1-安装-html-webpack-plugin" class="headerlink" title="3.3.1 安装 html-webpack-plugin"></a>3.3.1 安装 html-webpack-plugin</h3><p>运行如下的命令，即可在项目中安装此插件：</p>
<p>npm install <a href="mailto:&#104;&#x74;&#109;&#x6c;&#45;&#x77;&#x65;&#98;&#112;&#97;&#99;&#x6b;&#x2d;&#x70;&#x6c;&#x75;&#x67;&#105;&#110;&#x40;&#x35;&#46;&#x33;&#x2e;&#x32;">&#104;&#x74;&#109;&#x6c;&#45;&#x77;&#x65;&#98;&#112;&#97;&#99;&#x6b;&#x2d;&#x70;&#x6c;&#x75;&#x67;&#105;&#110;&#x40;&#x35;&#46;&#x33;&#x2e;&#x32;</a> -D</p>
<h3 id="3-3-2-配置-html-webpack-plugin"><a href="#3-3-2-配置-html-webpack-plugin" class="headerlink" title="3.3.2 配置 html-webpack-plugin"></a>3.3.2 配置 html-webpack-plugin</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 导入HTML插件，得到一个构造函数</span></span><br><span class="line"><span class="keyword">const</span> HtmlPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建HTML插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> HtmlPlugin(&#123;</span><br><span class="line">    template: <span class="string">&#x27;./src/index.html&#x27;</span>, <span class="comment">// 指定原文件的存放路径</span></span><br><span class="line">    filename: <span class="string">&#x27;./index.html&#x27;</span> <span class="comment">// 指定生成的文件的存放路径</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    plugins: [htmlPlugin], <span class="comment">// 3. 通过plugins节点，使htmlPlugin插件生效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-解惑-html-webpack-plugin"><a href="#3-3-3-解惑-html-webpack-plugin" class="headerlink" title="3.3.3 解惑 html-webpack-plugin"></a>3.3.3 解惑 html-webpack-plugin</h3><p>① 通过 HTML 插件复制到项目根目录中的 index.html 页面，也被放到了内存中</p>
<p>② HTML 插件在生成的 index.html 页面，自动注入了打包的 bundle.js 文件</p>
<h2 id="3-4-devServer-节点"><a href="#3-4-devServer-节点" class="headerlink" title="3.4 devServer 节点"></a>3.4 devServer 节点</h2><p>在 webpack.config.js 配置文件中，可以通过 devServer 节点对 webpack-dev-server 插件进行更多的配置，</p>
<p>示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">// 初次打包完成后，自动打开浏览器</span></span><br><span class="line">    host: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment">// 实时打包所使用的主机地址</span></span><br><span class="line">    port: <span class="number">80</span>, <span class="comment">// 实时打包所使用的端口号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：凡是修改了 webpack.config.js 配置文件，或修改了 package.json 配置文件，必须重启实时打包的服务器，否则最新的配置文件无法生效！</p>
<h1 id="4-webpack-中的-loader"><a href="#4-webpack-中的-loader" class="headerlink" title="4 webpack 中的 loader"></a>4 webpack 中的 loader</h1><h2 id="4-1-loader-概述"><a href="#4-1-loader-概述" class="headerlink" title="4.1 loader 概述"></a>4.1 loader 概述</h2><p>在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块。其他非 .js 后缀名结尾的模块，webpack 默认处理不了，需要调用 loader 加载器才可以正常打包，否则会报错！</p>
<p>loader 加载器的作用：协助 webpack 打包处理特定的文件模块。比如：</p>
<ul>
<li><p>css-loader 可以打包处理 .css 相关的文件</p>
</li>
<li><p>less-loader 可以打包处理 .less 相关的文件</p>
</li>
<li><p>babel-loader 可以打包处理 webpack 无法处理的高级 JS 语法</p>
</li>
</ul>
<h2 id="4-2-loader的调用过程"><a href="#4-2-loader的调用过程" class="headerlink" title="4.2 loader的调用过程"></a>4.2 loader的调用过程</h2><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220403200855794.png" alt="image-20220403200855794"></p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/01.loader%E8%B0%83%E7%94%A8%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="01.loader调用的过程"></p>
<h2 id="4-3-打包处理-css-文件"><a href="#4-3-打包处理-css-文件" class="headerlink" title="4.3 打包处理 css 文件"></a>4.3 打包处理 css 文件</h2><p>① 运行 npm i <a href="mailto:&#115;&#116;&#121;&#108;&#x65;&#45;&#x6c;&#111;&#x61;&#x64;&#101;&#114;&#64;&#x33;&#x2e;&#x30;&#46;&#48;">&#115;&#116;&#121;&#108;&#x65;&#45;&#x6c;&#111;&#x61;&#x64;&#101;&#114;&#64;&#x33;&#x2e;&#x30;&#46;&#48;</a> css-loader@5.2.6 -D 命令，安装处理 css 文件的 loader</p>
<p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">    rules: [ <span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，test 表示匹配的文件类型， use 表示对应要调用的 loader</p>
<p>注意：</p>
<ul>
<li><p>use 数组中指定的 loader 顺序是固定的</p>
</li>
<li><p>多个 loader 的调用顺序是：从后往前调用</p>
</li>
</ul>
<h2 id="4-4-打包处理-less-文件"><a href="#4-4-打包处理-less-文件" class="headerlink" title="4.4 打包处理 less 文件"></a>4.4 打包处理 less 文件</h2><p>① 运行 npm i <a href="mailto:&#x6c;&#101;&#115;&#x73;&#45;&#108;&#111;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#x30;&#x2e;&#49;">&#x6c;&#101;&#115;&#x73;&#45;&#108;&#111;&#x61;&#100;&#101;&#114;&#64;&#x31;&#x30;&#x2e;&#x30;&#x2e;&#49;</a> less@4.1.1 -D 命令</p>
<p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">    rules: [ <span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>] &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-打包处理样式表中与-url-路径相关的文件"><a href="#4-5-打包处理样式表中与-url-路径相关的文件" class="headerlink" title="4.5 打包处理样式表中与 url 路径相关的文件"></a>4.5 打包处理样式表中与 url 路径相关的文件</h2><p>① 运行 npm i <a href="mailto:&#x75;&#x72;&#x6c;&#x2d;&#x6c;&#111;&#97;&#x64;&#101;&#114;&#64;&#x34;&#x2e;&#x31;&#x2e;&#49;">&#x75;&#x72;&#x6c;&#x2d;&#x6c;&#111;&#97;&#x64;&#101;&#114;&#64;&#x34;&#x2e;&#x31;&#x2e;&#49;</a> file-loader@6.2.0 -D 命令</p>
<p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123; <span class="comment">// 所有第三方文件模块的匹配规则</span></span><br><span class="line">    rules: [ <span class="comment">// 文件后缀名的匹配规则</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.jpg|png|gif$/</span>, use: [<span class="string">&#x27;url-loader?limit=22229&#x27;</span>] &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 ? 之后的是 loader 的参数项： </p>
<ul>
<li><p>limit 用来指定图片的大小，单位是字节（byte） </p>
</li>
<li><p>只有 ≤ limit 大小的图片，才会被转为 base64 格式的图片</p>
</li>
</ul>
<h2 id="4-6-打包处理js文件中的高级语法"><a href="#4-6-打包处理js文件中的高级语法" class="headerlink" title="4.6 打包处理js文件中的高级语法"></a>4.6 打包处理js文件中的高级语法</h2><p>webpack 只能打包处理一部分高级的 JavaScript 语法。对于那些 webpack 无法处理的高级 js 语法，需要借助于 babel-loader 进行打包处理。例如 webpack 无法处理下面的 JavaScript 代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义了名为info的装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 为目标添加静态属性info</span></span><br><span class="line">    target.info = <span class="string">&#x27;Person info&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 为Person类应用info装饰器</span></span><br><span class="line">@info</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 打印 Person 的静态属性 info</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.info)</span><br></pre></td></tr></table></figure>

<h3 id="4-6-1-安装-babel-loader-相关的包"><a href="#4-6-1-安装-babel-loader-相关的包" class="headerlink" title="4.6.1 安装 babel-loader 相关的包"></a>4.6.1 安装 babel-loader 相关的包</h3><p>运行如下的命令安装对应的依赖包：</p>
<p>npm i <a href="mailto:&#x62;&#x61;&#x62;&#101;&#x6c;&#x2d;&#x6c;&#x6f;&#x61;&#x64;&#101;&#114;&#64;&#x38;&#46;&#50;&#46;&#x32;">&#x62;&#x61;&#x62;&#101;&#x6c;&#x2d;&#x6c;&#x6f;&#x61;&#x64;&#101;&#114;&#64;&#x38;&#46;&#50;&#46;&#x32;</a> @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D </p>
<p>在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：必须使用exclude指定排除项；因为node_modules目录下的第三方包不需要被打包</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, use: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-2-配置-babel-loader"><a href="#4-6-2-配置-babel-loader" class="headerlink" title="4.6.2 配置 babel-loader"></a>4.6.2 配置 babel-loader</h3><p>在项目根目录下，创建名为 babel.config.js 的配置文件，定义 Babel 的配置项如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="comment">// 声明babel可用的插件</span></span><br><span class="line">    plugins:[[<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>, &#123;<span class="attr">legacy</span>: <span class="literal">true</span>&#125;]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-打包发布"><a href="#5-打包发布" class="headerlink" title="5 打包发布"></a>5 打包发布</h1><h2 id="5-1-为什么要打包发布"><a href="#5-1-为什么要打包发布" class="headerlink" title="5.1 为什么要打包发布"></a>5.1 为什么要打包发布</h2><p>项目开发完成之后，需要使用 webpack 对项目进行打包发布，主要原因有以下两点：</p>
<p>① 开发环境下，打包生成的文件存放于内存中，无法获取到最终打包生成的文件</p>
<p>② 开发环境下，打包生成的文件不会进行代码压缩和性能优化</p>
<p>为了让项目能够在生产环境中高性能的运行，因此需要对项目进行打包发布。</p>
<h2 id="5-2-配置-webpack-的打包发布"><a href="#5-2-配置-webpack-的打包发布" class="headerlink" title="5.2 配置 webpack 的打包发布"></a>5.2 配置 webpack 的打包发布</h2><p>在 package.json 文件的 scripts 节点下，新增 build 命令如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;webpack serve&quot;, // 开发环境中，运行dev命令</span><br><span class="line">    &quot;build&quot;: &quot;webpack --mode production&quot;  // 项目发布时，运行build命令</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>–model 是一个参数项，用来指定 webpack 的运行模式。production 代表生产环境，会对打包生成的文件进行代码压缩和性能优化。</p>
<p>注意：通过 –model 指定的参数项，会覆盖 webpack.config.js 中的 model 选项。</p>
<h2 id="5-3-把-JavaScript-文件统一生成到-js-目录中"><a href="#5-3-把-JavaScript-文件统一生成到-js-目录中" class="headerlink" title="5.3 把 JavaScript 文件统一生成到 js 目录中"></a>5.3 把 JavaScript 文件统一生成到 js 目录中</h2><p>在 webpack.config.js 配置文件的 output 节点中，进行如下的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(_dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 明确告诉webpack把生成的bundle.js文件存放到dist目录下的js子目录中</span></span><br><span class="line">    filename: <span class="string">&#x27;js/bundle.js&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-把图片文件统一生成到-image-目录中"><a href="#5-4-把图片文件统一生成到-image-目录中" class="headerlink" title="5.4 把图片文件统一生成到 image 目录中"></a>5.4 把图片文件统一生成到 image 目录中</h2><p>修改 webpack.config.js 中的 url-loader 配置项，新增 outputPath 选项即可指定图片文件的输出路径：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.jpg|png|gif$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: <span class="number">22228</span>,</span><br><span class="line">            <span class="comment">// 明确指定把打包生成的图片文件，存放到dist目录下的image文件夹中</span></span><br><span class="line">            outputPath: <span class="string">&#x27;image&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-5-自动清理-dist-目录下的旧文件"><a href="#5-5-自动清理-dist-目录下的旧文件" class="headerlink" title="5.5 自动清理 dist 目录下的旧文件"></a>5.5 自动清理 dist 目录下的旧文件</h2><p>为了在每次打包发布时自动清理掉 dist 目录中的旧文件，可以安装并配置 clean-webpack-plugin 插件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 安装清理dist目录的webpack插件</span></span><br><span class="line">npm install clean-webpack-plugin@<span class="number">3.0</span><span class="number">.0</span> -D</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 按需导入插件，得到插件的构造函数之后，创建插件的实例对象</span></span><br><span class="line"><span class="keyword">const</span> &#123;CleanWebpackPlugin&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanPlugin = <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 把创建的cleanPlugin插件实例对象，挂载到plugins节点中</span></span><br><span class="line">plugins: [htmlPlugin, cleanPlugin], <span class="comment">// 挂载插件</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Source-Map"><a href="#6-Source-Map" class="headerlink" title="6 Source Map"></a>6 Source Map</h1><h2 id="6-1-生产环境遇到的问题"><a href="#6-1-生产环境遇到的问题" class="headerlink" title="6.1 生产环境遇到的问题"></a>6.1 生产环境遇到的问题</h2><p>前端项目在投入生产环境之前，都需要对 JavaScript 源代码进行压缩混淆，从而减小文件的体积，提高文件的加载效率。此时就不可避免的产生了另一个问题：</p>
<p>对压缩混淆之后的代码除错（debug）是一件极其困难的事情</p>
<ul>
<li><p>变量被替换成没有任何语义的名称</p>
</li>
<li><p>空行和注释被剔除</p>
</li>
</ul>
<h2 id="6-2-什么是-Source-Map"><a href="#6-2-什么是-Source-Map" class="headerlink" title="6.2 什么是 Source Map"></a>6.2 什么是 Source Map</h2><p>Source Map 就是一个信息文件，里面储存着位置信息。也就是说，Source Map 文件中存储着压缩混淆后的代码，所对应的转换前的位置。</p>
<p>有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码，能够极大的方便后期的调试。</p>
<h2 id="6-3-webpack-开发环境下的-Source-Map"><a href="#6-3-webpack-开发环境下的-Source-Map" class="headerlink" title="6.3 webpack 开发环境下的 Source Map"></a>6.3 webpack 开发环境下的 Source Map</h2><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220403204241772.png" alt="image-20220403204241772"></p>
<h3 id="6-3-1-默认-Source-Map-的问题"><a href="#6-3-1-默认-Source-Map-的问题" class="headerlink" title="6.3.1 默认 Source Map 的问题"></a>6.3.1 默认 Source Map 的问题</h3><p>开发环境下默认生成的 Source Map，记录的是生成后的代码的位置。会导致运行时报错的行数与源代码的行数不一致的问题。示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220403204343823.png" alt="image-20220403204343823"></p>
<h3 id="6-3-2-解决默认-Source-Map-的问题"><a href="#6-3-2-解决默认-Source-Map-的问题" class="headerlink" title="6.3.2 解决默认 Source Map 的问题"></a>6.3.2 解决默认 Source Map 的问题</h3><p>开发环境下，推荐在 webpack.config.js 中添加如下的配置，即可保证运行时报错的行数与源代码的行数保持一致：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">// eval-source-map仅限在“开发模式”下使用，不建议在“生产模式”下使用</span></span><br><span class="line">    <span class="comment">// 此选项生成的Source Map能够保证“运行时报错的行数”与“源代码的行数”保持一致</span></span><br><span class="line">    devtool: <span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">// 省略其他配置项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-webpack-生产环境下的-Source-Map"><a href="#6-4-webpack-生产环境下的-Source-Map" class="headerlink" title="6.4 webpack 生产环境下的 Source Map"></a>6.4 webpack 生产环境下的 Source Map</h2><p>在生产环境下，如果省略了 devtool 选项，则最终生成的文件中不包含 Source Map。这能够防止原始代码通过 Source Map 的形式暴露给别有所图之人。</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220403204819803.png" alt="image-20220403204819803"></p>
<h3 id="6-4-1-只定位行数不暴露源码"><a href="#6-4-1-只定位行数不暴露源码" class="headerlink" title="6.4.1 只定位行数不暴露源码"></a>6.4.1 只定位行数不暴露源码</h3><p>在生产环境下，如果只想定位报错的具体行数，且不想暴露源码。此时可以将 devtool 的值设置为nosources-source-map。实际效果如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220403204925752.png" alt="image-20220403204925752"></p>
<h3 id="6-4-2-定位行数且暴露源码"><a href="#6-4-2-定位行数且暴露源码" class="headerlink" title="6.4.2 定位行数且暴露源码"></a>6.4.2 定位行数且暴露源码</h3><p>在生产环境下，如果想在定位报错行数的同时，展示具体报错的源码。此时可以将 devtool 的值设置为source-map。实际效果如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220403205008039.png" alt="image-20220403205008039"></p>
<p>采用此选项后：你应该将你的服务器配置为，不允许普通用户访问 source map 文件！</p>
<p>6.5  Source Map 的最佳实践</p>
<p>① 开发环境下：</p>
<ul>
<li><p>建议把 devtool 的值设置为 eval-source-map</p>
</li>
<li><p>好处：可以精准定位到具体的错误行</p>
</li>
</ul>
<p>② 生产环境下：</p>
<ul>
<li><p>建议关闭 Source Map 或将 devtool 的值设置为 nosources-source-map</p>
</li>
<li><p>好处：防止源码泄露，提高网站的安全性</p>
</li>
</ul>
<h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h1><p>① 能够掌握 webpack 的基本使用</p>
<ul>
<li>安装、webpack.config.js、修改打包入口</li>
</ul>
<p>② 了解常用的 plugin 的基本使用</p>
<ul>
<li>webpack-dev-server、html-webpack-plugin</li>
</ul>
<p>③ 了解常用的 loader 的基本使用</p>
<ul>
<li>loader 的作用、loader 的调用过程</li>
</ul>
<p>④ 能够说出 Source Map 的作用</p>
<ul>
<li><p>精准定位到错误行并显示对应的源码</p>
</li>
<li><p>方便开发者调试源码中的错误</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记</title>
    <url>/undefined/fd5f561d/</url>
    <content><![CDATA[<blockquote>
<p>黑马程序员MySQL学习笔记</p>
</blockquote>
<span id="more"></span>



<h1 id="1-数据库基本介绍"><a href="#1-数据库基本介绍" class="headerlink" title="1 数据库基本介绍"></a>1 数据库基本介绍</h1><h2 id="1-1-数据库基本知识"><a href="#1-1-数据库基本知识" class="headerlink" title="1.1 数据库基本知识"></a>1.1 数据库基本知识</h2><p><strong>数据库</strong>：database（DB），是一种存储数据的仓库</p>
<ul>
<li>数据库是根据数据结构组织、存储和管理数据</li>
<li>数据库能够长期、高效的管理和存储数据</li>
<li>数据库的目的就是能够存储（写）和提供（读）数据</li>
</ul>
<h2 id="1-2-数据库分类"><a href="#1-2-数据库分类" class="headerlink" title="1.2 数据库分类"></a>1.2 数据库分类</h2><p><strong>数据库分类</strong>：根据数据库的架构和数据组织原理进行分类</p>
<p>1、早期根据数据库的组织数据的存储模型分类</p>
<ul>
<li>层次数据库：基于层次的数据结构（数据分层）——树</li>
<li>网状数据库：基于网状的数据结构（数据网络）——图</li>
<li>关系数据库：基于关系模型的数据结构（二维表）</li>
</ul>
<p>2、现在较多根据实际数据管理模型分类（存储介质）</p>
<ul>
<li>关系型数据库：基于关系模型的数据结构（二维表）通常存储在磁盘（比较稳定）</li>
<li>非关系型数据库：没有具体模型的数据结构（键值对）通常存储在内存（效率高）</li>
</ul>
<h2 id="1-3-关系型数据库"><a href="#1-3-关系型数据库" class="headerlink" title="1.3 关系型数据库"></a>1.3 关系型数据库</h2><p><strong>关系型数据库</strong>：是一种建立在关系模型上的数据库</p>
<ul>
<li>关系模型<ul>
<li>关系数据结构（存储）</li>
<li>关系操作集合（操作）</li>
<li>关系完整性约束（约束）</li>
</ul>
</li>
<li>关系型数据库存储在磁盘中（永久性存储）</li>
<li>关系型数据库系统（DBS）模型有四层结构<ul>
<li>数据库管理系统（DBMS）：管理系统运行（DataBase Management System）</li>
<li>数据库（DB）：数据存储的管理者（小管理，受DBMS管理）</li>
<li>数据表（Table）：数据关系管理者</li>
<li>数据字段（Field）：依赖于数据表，实际数据存储者</li>
</ul>
</li>
<li>关系型数据库产品<ul>
<li>大型：Oracle、DB2</li>
<li>中型：MySQL、SqlServer</li>
<li>小型：Sybase、Access</li>
</ul>
</li>
</ul>
<h2 id="1-4-非关系型数据库"><a href="#1-4-非关系型数据库" class="headerlink" title="1.4 非关系型数据库"></a>1.4 非关系型数据库</h2><p><strong>非关系型数据库</strong>：NoSQL（Not only SQL），不仅仅是关系型数据库</p>
<ul>
<li>所有不是关系型数据库的统称</li>
<li>数据存储模型不是二维表，而是<strong>键值对</strong>（key-&gt;value）</li>
<li>存储的位置通常是内存（效率高）</li>
<li>不能永久性存储（需要定时存到关系型数据库中）</li>
<li>常见的非关系型数据库产品<ul>
<li>MongoDB</li>
<li>Redis</li>
<li>Memcached</li>
</ul>
</li>
</ul>
<blockquote>
<p>对比</p>
</blockquote>
<p><strong>NoSQL通常是与关系型数据库配合使用的</strong>，他们彼此是一种互补关系</p>
<ul>
<li>NoSQL运行在内存，解决效率问题<ul>
<li>I/O问题</li>
<li>效率问题</li>
</ul>
</li>
<li>MySQL运行在磁盘，解决稳定问题<ul>
<li>安全问题（永久存储）</li>
<li>稳定</li>
</ul>
</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、NoSQL是对非关系型数据库的一类统称</p>
<ul>
<li>NoSQL是不仅仅只是关系型数据库的意思</li>
</ul>
<p>2、NoSQL通常运行在内存</p>
<ul>
<li>读取效率高</li>
<li>并发访问高</li>
<li>稳定性不高（断电即丢失）</li>
</ul>
<p>3、NoSQL通常是键值对存储数据，访问也比较简单</p>
<h2 id="1-5-SQL基本介绍"><a href="#1-5-SQL基本介绍" class="headerlink" title="1.5 SQL基本介绍"></a>1.5 SQL基本介绍</h2><p><strong>SQL</strong>：Structured Query Language，结构化查询语言，是一种针对关系型数据库特殊标准化的编程语言</p>
<ul>
<li><p>SQL是一种编程语言</p>
</li>
<li><p>能够实现用户数据库查询和程序设计</p>
</li>
<li><p>SQL根据操作不同，分为几类</p>
<ul>
<li>DQL：Data Query Language，数据查询语言，用于查询和检索数据</li>
<li>DML：Data Manipulation Language，数据操作语言，用于数据的写操作（增删改） </li>
<li>DDL：Data Definition Language，数据定义语言，用于创建数据结构</li>
<li>DCL：Data Control Language，数据控制语言，用于用户权限管理</li>
<li>TPL：Transaction Process Language，事务处理语言，辅助DML进行事务操作（因此也归属于DML）   </li>
</ul>
</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、SQL虽然是编程语言，但是目前数据库通常只用来进行数据管理（逻辑部分给其他编程语言）</p>
<p>2、SQL虽然是针对关系型数据库的通用语言，但是不同的产品操作指令不完全通用</p>
<h2 id="1-6-MySQL基本介绍"><a href="#1-6-MySQL基本介绍" class="headerlink" title="1.6 MySQL基本介绍"></a>1.6 MySQL基本介绍</h2><p><strong>MySQL</strong>：是瑞典AB公司下的一款<strong>关系型数据库</strong></p>
<ul>
<li>MySQL当前属于甲骨文公司（AB-&gt;Sun-&gt;Oracle）</li>
<li>MySQL开源免费（部分存储引擎收费，源码开源，Oracle收费）</li>
<li>MySQL是一种C/S结构软件，因此需要MySQL的客户端来访问服务端（数据管理）<ul>
<li>mysqld.exe：服务端</li>
<li>mysql.exe：客户端</li>
</ul>
</li>
<li>MySQL使用SQL指令对数据库进行操作</li>
</ul>
<blockquote>
<p>访问原理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(MySQL客户端)--&gt;B[寻找服务端&lt;br&gt;host寻找]</span><br><span class="line">B--&gt;C[寻找服务端&lt;br&gt;Port寻找]</span><br><span class="line">C--&gt;D[验证身份&lt;br&gt;username判定&lt;br&gt;password判定]</span><br><span class="line">D--&gt;E((服务端))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、MySQL是一款流行的关系型数据库</p>
<p>2、MySQL是一款C/S结构的软件，需要客户端访问服务端</p>
<p>3、MySQL是基于SQL指令进行管理操作</p>
<h2 id="1-7-MySQL访问"><a href="#1-7-MySQL访问" class="headerlink" title="1.7 MySQL访问"></a>1.7 MySQL访问</h2><p><strong>MySQL访问</strong>：就是客户端连接上服务端，然后实现数据操作的过程</p>
<ul>
<li><p>客户端访问服务端</p>
<ul>
<li>利用Windows控制台访问（MySQL客户端）</li>
<li>利用数据库管理工具（Navicat）</li>
</ul>
</li>
<li><p>客户端需要连接认证</p>
<ul>
<li>-h：主机地址（本机localhost可以省略）</li>
<li>-P：端口号（默认3306可以省略）</li>
<li>-u：用户名</li>
<li>-p：用户密码</li>
</ul>
</li>
<li><p>客户端连接上服务端就表示占用了一个资源，可以进行对应权限的操作</p>
<ul>
<li>MySQL数据库连接资源有限：单个服务器最多16384个</li>
<li>连接资源不够了其他访问就需要排队等待</li>
<li>用完尽可能释放资源</li>
</ul>
</li>
<li><p>客户端退出服务端</p>
<ul>
<li>\q</li>
<li>quit</li>
<li>exit</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、打开客户端（CMD控制台）：mysql -uroot -p密码</p>
<p>2、输入服务器信息（连接）和用户信息（验证）</p>
<p>3、执行SQL操作</p>
<p>4、断开连接</p>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、MySQL需要通过客户端来进行服务端访问</p>
<ul>
<li>自带客户端mysql.exe：Windows下借助CMD</li>
<li>数据库管理工具：Navicat，图形化管理</li>
<li>支持MySQL扩展的编程语言：PHP、Java等</li>
</ul>
<p>2、数据库操作需要进行连接认证</p>
<ul>
<li>主机地址：-h，默认localhost可省略</li>
<li>端口：-P（大写字母），默认3306可省略</li>
<li>用户名：-u</li>
<li>密码：-p（小写字母）</li>
</ul>
<p>3、数据库连接资源有限，用完即关闭</p>
<h2 id="1-8-总结"><a href="#1-8-总结" class="headerlink" title="1.8 总结"></a>1.8 总结</h2><p>1、数据库的作用要清楚：高效的存储和管理数据，为编程语言提供数据支撑</p>
<p>2、当前市面上数据库的分类主要为两类</p>
<ul>
<li>关系型数据库：注重结构和数据存储的持久性</li>
<li>非关系型数据库：注重数据读取的效率</li>
</ul>
<p>3、关系型数据库是几乎所有网站都会使用到的，必须掌握其概念</p>
<p>4、所有关系型数据库都是基于SQL进行数据的操作，MySQL数据库也是（不同的数据库产品对应的SQL指令可能有细微差别）</p>
<p>5、MySQL是一种C/S结构的软件，所以访问者必须通过客户端进行访问</p>
<ul>
<li>客户端与服务端通常不会在一台电脑上</li>
<li>客户端访问服务端需要寻址、授权（-hPup）</li>
<li>MySQL服务端的连接数是有限的，时刻注意用完就销毁（减少资源无效占用）</li>
</ul>
<h1 id="2-MySQL基本操作"><a href="#2-MySQL基本操作" class="headerlink" title="2 MySQL基本操作"></a>2 MySQL基本操作</h1><h2 id="2-1-SQL语法规则"><a href="#2-1-SQL语法规则" class="headerlink" title="2.1 SQL语法规则"></a>2.1 SQL语法规则</h2><p><strong>SQL语法规则</strong>：SQL是一种结构化编程语言</p>
<ul>
<li>基础SQL指令通常是以行为单位</li>
<li>SQL指令需要语句结束符，默认是英文分号：<code>;</code>、\g、\G<ul>
<li>\G：主要用于查询数据，立体展示结果</li>
</ul>
</li>
<li>SQL指令类似自然语言</li>
<li>编写的SQL中如果用到了关键字或者保留字，需要使用反引号``来包裹，让系统忽略</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、结构创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create 结构类型 结构名 结构描述;</span><br></pre></td></tr></table></figure>

<p>2、显示结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示结构</span><br><span class="line">show 结构类型（复数）;</span><br><span class="line"></span><br><span class="line">#显示结构创建详情</span><br><span class="line">show create 结构类型 结构名;</span><br></pre></td></tr></table></figure>

<p>3、数据操作（数据表）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#新增数据</span><br><span class="line">insert into 表名 values</span><br><span class="line"></span><br><span class="line">#查看数据</span><br><span class="line">select from 表名</span><br><span class="line"></span><br><span class="line">#更新数据</span><br><span class="line">update 表名 set </span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line">delete from 表名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、SQL是一种类似于自然语言的编程语言</p>
<ul>
<li>基本SQL指令以行为单位</li>
<li>SQL指令需要语句结束符</li>
</ul>
<p>2、根据数据库的对象层级，可以将基础SQL操作分为三类</p>
<ul>
<li>库操作：数据库相关操作</li>
<li>表操作：数据表（字段）相关操作</li>
<li>数据操作：数据相关操作</li>
</ul>
<h2 id="2-2-SQL库操作"><a href="#2-2-SQL库操作" class="headerlink" title="2.2 SQL库操作"></a>2.2 SQL库操作</h2><h3 id="1、-创建数据库"><a href="#1、-创建数据库" class="headerlink" title="1、 创建数据库"></a>1、 创建数据库</h3><p><strong>创建数据库</strong>：根据项目需求创建一个存储数据的仓库</p>
<ul>
<li>使用create database 数据库名字创建<ul>
<li>数据库层面可以指定字符集：charset / character set</li>
<li>数据库层面可以指定校对集：collate</li>
</ul>
</li>
<li>创建数据库会在磁盘指定存放处产生一个文件夹</li>
<li>创建语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database 数据库名字 [数据库选项];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建一个指定名字的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db_1;</span><br></pre></td></tr></table></figure>

<p>2、创建一个指定字符集的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db_2 charset utf8MB4;</span><br></pre></td></tr></table></figure>

<p>3、创建一个指定校对集的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db_3 charset utf8MB4 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据库的创建是存储数据的基础，数据库的创建通常是一次性的</p>
<p>2、创建数据库的语法包含几个部分</p>
<ul>
<li>关键字： create database </li>
<li>数据库名字： 自定义名字<ul>
<li>数字、字母和下划线组成</li>
<li>不区分大小写</li>
<li>数字不能开头</li>
<li>使用下划线法创建复杂数据库名字（很少使用驼峰命名法）</li>
</ul>
</li>
<li>数据库选项：非必须的规定<ul>
<li>字符集：charset /character  set 字符集。非必须，默认继承DBMS</li>
<li>校对集：collate 校对集。非必须，依赖字符集</li>
</ul>
</li>
</ul>
<p>3、创建好的数据库可以在数据存储指定地点（安装时指定）看到</p>
<ul>
<li>一个数据库对应一个文件夹</li>
<li>每个数据库下有个对应的文件，里面有字符集和校对集信息（Mysql7以前）</li>
</ul>
<h3 id="2、显示数据库"><a href="#2、显示数据库" class="headerlink" title="2、显示数据库"></a>2、显示数据库</h3><p><strong>显示数据库</strong>：通过客户端指令来查看已有数据库</p>
<ul>
<li>数据库的查看是根据用户权限限定的</li>
<li>数据库的查看分为两种查看方式：<ul>
<li>查看全部数据库</li>
<li>查看数据库创建指令</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、显示所有数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>2、显示数据库创建指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create database db_1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、查看数据库分为两种方式</p>
<ul>
<li>查看全部：show databases;</li>
<li>查看具体创建指令：show create database 数据库名字;</li>
</ul>
<p>2、查看数据库的目的和应用</p>
<ul>
<li>开发人员确认数据库是否存在</li>
<li>数据库管理员维护</li>
</ul>
<h3 id="3、使用数据库"><a href="#3、使用数据库" class="headerlink" title="3、使用数据库"></a>3、使用数据库</h3><p><strong>使用数据库</strong>：指在进行具体SQL指令之前，让系统知道操作针对的是哪个数据库</p>
<ul>
<li>数据库的操作通常是针对数据表或者数据</li>
<li>通过使用数据库可以让后续指令默认针对具体数据库环境</li>
<li>使用数据库语法：use 数据库名字;</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use db_1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、使用数据库的指令是：use 数据库名字;</p>
<p>2、使用数据库的目标</p>
<ul>
<li>让系统知道后续SQL指令都是针对当前选择的数据库</li>
<li>简化后续SQL指令的复杂度（如果不指定数据库，那么所有的SQL操作都必须强制指定数据库名字）</li>
</ul>
<h3 id="4、修改数据库"><a href="#4、修改数据库" class="headerlink" title="4、修改数据库"></a>4、修改数据库</h3><p><strong>修改数据库</strong>：修改数据库的相关库选项</p>
<ul>
<li>数据库名字不可修改（老版本可以）<ul>
<li>先新增</li>
<li>后迁移</li>
<li>最后删除</li>
</ul>
</li>
<li>数据库修改分为两个部分（库选项）<ul>
<li>字符集</li>
<li>校对集</li>
</ul>
</li>
<li>数据库修改指令（与创建指令差不多）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database 数据库名字 库选项</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、修改数据库字符集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database db_2 charset gbk;</span><br></pre></td></tr></table></figure>

<p>2、修改数据库校对集（如果校对集修改必须同时改变字符集）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database db_3 charset gbk collate gbk_chinese_ci;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据库的修改只能修改库选项，不能修改名字</p>
<p>2、字符集的修改指令使用alter，其他跟创建指令一致</p>
<p>3、数据库修改通常有两部分</p>
<ul>
<li>字符集修改</li>
<li>校对集修改（校对集必须对应字符集）</li>
</ul>
<p>4、一般我们都不会使用数据库修改（一般要改也是删除后新增）</p>
<h3 id="5、删除数据库"><a href="#5、删除数据库" class="headerlink" title="5、删除数据库"></a>5、删除数据库</h3><p><strong>删除数据库</strong>：将当前已有数据库删除</p>
<ul>
<li>删除数据库会删除数据库内所有的表和数据</li>
<li>删除数据库操作要慎重（删前备份）</li>
<li>删除数据库后，对应的存储文件夹就会消失</li>
<li>删除语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database 数据库名字;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database db_1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、删除数据库使用指令：drop database 数据库名字</p>
<p>2、数据库的删除不可逆</p>
<ul>
<li>删除会清空当前数据库内的所有数据表（表里数据一并删除）</li>
<li>删除数据库会将对应的文件夹从磁盘抹掉</li>
<li>数据库删除要谨慎（一般不建议删除）</li>
</ul>
<h3 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h3><p>1、数据库的操作通常是一次性的，即在进行业务代码开展之前将数据库维护好</p>
<p>2、数据库的删除需要非常慎重，尤其是生产环境，数据库的删除是不可逆（会将数据库中的所有数据全部删除）</p>
<h2 id="2-3-SQL表（字段）操作"><a href="#2-3-SQL表（字段）操作" class="headerlink" title="2.3 SQL表（字段）操作"></a>2.3 SQL表（字段）操作</h2><h3 id="1、创建数据表"><a href="#1、创建数据表" class="headerlink" title="1、创建数据表"></a>1、创建数据表</h3><p><strong>创建数据表</strong>：根据业务需求，确定数据表的字段信息，然后创建表结构</p>
<ul>
<li>表与字段不分家，相辅相成</li>
<li>表的创建需要指定存储的数据库<ul>
<li>明确指定数据库：<code>数据库.表名</code></li>
<li>先使用数据库：<code>use 数据库名字</code></li>
</ul>
</li>
<li>字段至少需要指定名字、类型</li>
<li>数据库表不限定字段数量<ul>
<li>每个字段间使用逗号<code>,</code>分隔</li>
<li>最后一个字段不需要逗号</li>
</ul>
</li>
<li>表可以指定表选项（都有默认值）<ul>
<li>存储引擎：engine [=] 具体存储引擎</li>
<li>字符集：[default] charset 具体字符集（继承数据库）</li>
<li>校对集：collate（继承数据库）</li>
</ul>
</li>
<li>表创建语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table [数据库名.]表名(</span><br><span class="line">    字段名 字段类型,</span><br><span class="line">    ...</span><br><span class="line">    字段名 字段类型</span><br><span class="line">)表选项;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建简单数据表（指定数据库创建数据表）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table db_2.t_1(</span><br><span class="line">    name varchar(50)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2、创建数据表——多字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用数据库（进入数据库环境）</span><br><span class="line">use db_2;</span><br><span class="line">create table t_2(</span><br><span class="line">    name varchar(50),</span><br><span class="line">    age int,</span><br><span class="line">    gender varchar(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>3、创建数据表——表选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_3(</span><br><span class="line">    name varchar(50)</span><br><span class="line">)engine Innodb charset utf8MB4;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、创建数据库表是为了存储具体数据</p>
<p>2、数据表的创建与字段是同时存在的</p>
<p>3、数据表的创建需要指定数据库</p>
<ul>
<li>在表名字前指定数据库：数据库名.表名</li>
<li>进入数据库环境（常用）</li>
</ul>
<p>4、一张数据表用来存一组相关数据</p>
<p>5、扩展：存储引擎是指数据存储和管理的方式，MySQL中提供了多种存储引擎，一般使用默认存储引擎</p>
<ul>
<li>InnoDB（常用）<ul>
<li>默认存储引擎</li>
<li>支持事务处理和外键</li>
<li>数据统一管理</li>
</ul>
</li>
<li>MyIsam<ul>
<li>不支持事务和外键</li>
<li>数据、表结构、索引独立管理</li>
<li>MySQL5.6以后不再维护</li>
</ul>
</li>
</ul>
<p>6、扩展：如果想创建一个与已有表一样的数据表，MySQL提供了一种便捷的复制模式</p>
<ul>
<li>create table 表名 like 数据库名字.表名</li>
</ul>
<p><code>create table t_3_like like t_3;</code></p>
<h3 id="2、显示数据表"><a href="#2、显示数据表" class="headerlink" title="2、显示数据表"></a>2、显示数据表</h3><p>显示数据表：客户端通过指令显示已有的数据表</p>
<ul>
<li>数据表的显示跟用户权限有关</li>
<li>显示数据表有两种方式<ul>
<li>显示所有数据表</li>
<li>显示具体数据表的创建指令</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、显示所有数据表——当前数据库下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>2、显示所有数据表——指定数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables from db_3;</span><br></pre></td></tr></table></figure>

<p>3、显示部分关联数据表——匹配</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables like &#39;%like&#39;;	# _表示匹配一个字符（固定位置），%表示匹配N个字符</span><br></pre></td></tr></table></figure>

<p>4、显示数据表的创建指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table t_1; # 看到的结果未必一定是真实创建的指令（系统会加工）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、显示数据表有两种形式</p>
<ul>
<li>显示所有数据表：show tables [from 指定数据库];<ul>
<li>显示部分：show tables like ‘pattern’;   匹配模式：_匹配单个字符，%匹配不限量字符</li>
</ul>
</li>
<li>显示数据表创建指令：show create table 表名;</li>
</ul>
<p>2、显示数据表通常是为了验证数据表是否存在或者验证数据表的创建指令是否正确</p>
<p>3、在显示数据的时候可以使用不同的语句结束符</p>
<ul>
<li>\g：与普通分号无区别</li>
<li>\G：纵向显示列数据</li>
</ul>
<h3 id="3、查看数据表"><a href="#3、查看数据表" class="headerlink" title="3、查看数据表"></a>3、查看数据表</h3><p><strong>查看数据表</strong>：指查看数据表中的具体结构</p>
<ul>
<li>通常是查看字段信息</li>
<li>详细的显示字段的各项信息</li>
<li>查看语法有三种（效果一样）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc 表名；</span><br><span class="line">describe 表名;</span><br><span class="line">show columns from 表名;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc t_1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据表的查看是为了查看表中具体字段的信息</p>
<p>2、查看数据表的指令有多个，效果都一样</p>
<ul>
<li>desc 表名;（常用）</li>
<li>describe 表名;</li>
<li>show columns from 表名;</li>
</ul>
<p>3、查看表结构的原因通常是在开发过程中为了更清晰的了解数据的存储形式和要求</p>
<h3 id="4、更改数据表"><a href="#4、更改数据表" class="headerlink" title="4、更改数据表"></a>4、更改数据表</h3><p><strong>更改数据表</strong>：修改表名字和表选项</p>
<ul>
<li>修改表名：<code>rename table 表名 to 新表名</code></li>
<li>修改表选项：<code>alter table 表名</code></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、修改表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename table t_1 to t1;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果有时候想要跨库修改的话，需要使用<code>数据库名.表名</code>（一般不建议）</p>
<p>2、修改表选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t1 charset utf8;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、更改数据表分为两个部分</p>
<ul>
<li>更改表名：rename table 原表名 to 新表名；</li>
<li>更改表选项：alter table 表名 表选项</li>
</ul>
<p>2、通常我们较少使用更改数据表，数据表应该在创建时就定义好</p>
<h3 id="5、更改字段"><a href="#5、更改字段" class="headerlink" title="5、更改字段"></a>5、更改字段</h3><p><strong>更改字段</strong>：指针对表创建好后，里面字段的增删改</p>
<ul>
<li>字段操作包含字段名字、类型和属性的操作</li>
<li>字段操作分为四类<ul>
<li>新增字段：add [column]</li>
<li>更改字段名：change</li>
<li>修改类型：modify</li>
<li>删除字段：drop</li>
</ul>
</li>
<li>字段操作还有位置处理</li>
<li>字段操作通常是在表已经存在数据后进行</li>
</ul>
<h4 id="（1）新增字段"><a href="#（1）新增字段" class="headerlink" title="（1）新增字段"></a>（1）新增字段</h4><p><strong>新增字段</strong>：在表创建好后往里面增加其他字段</p>
<ul>
<li><p>字段的新增必须同时存在字段类型</p>
</li>
<li><p>新增语法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add [column] 字段名 字段类型 [字段属性] [字段位置]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、给已经存在的t_3表增加一个字段age</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 add age int;</span><br></pre></td></tr></table></figure>

<p>2、给已经存在的t_3表增加一个字段nickname</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 add column nickname varchar(10);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、新增字段就是给已有表追加一个字段（较少）（因为，增加的数据从何处来）</p>
<p>2、字段新增必须指定字段类型</p>
<p>3、字段新增语法为：alter table 表名 add [column] 字段名 字段类型;</p>
<p>4、字段的追加默认是在所有字段之后</p>
<h4 id="（2）字段位置"><a href="#（2）字段位置" class="headerlink" title="（2）字段位置"></a>（2）字段位置</h4><p><strong>字段位置</strong>：指字段放到某个指定字段之后</p>
<ul>
<li>字段位置分为两种<ul>
<li>第一个字段：first</li>
<li>某个字段后：after 已经存在字段名</li>
</ul>
</li>
<li>字段位置适用于追加字段、修改字段、更改字段名</li>
<li>字段位置语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 字段操作 字段位置;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、为t_3表增加一个id字段，放到最前面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 add id int first;</span><br></pre></td></tr></table></figure>

<p>2、在t_3表name字段后增加一个身份证字段card</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 add card varchar(18) after name;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、字段位置是配合字段操作的（新增、修改）</p>
<p>2、字段位置分两种</p>
<ul>
<li>最前面（第一个字段）：first</li>
<li>字段后面：after 已存在字段名</li>
</ul>
<h4 id="（3）更改字段名"><a href="#（3）更改字段名" class="headerlink" title="（3）更改字段名"></a>（3）更改字段名</h4><p><strong>更改字段名</strong>：指对已经存在的字段名进行修改</p>
<ul>
<li>字段名的修改也必须跟上字段类型</li>
<li>字段名修改语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 change 原字段名 新字段名 字段类型 [字段属性] [位置]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>修改字段名card为sfz</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 change card sfz varchar(18);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、字段名更改通常只是修改字段名字，但是也必须跟随类型</p>
<p>2、字段名修改语法：alter table 表名 change 原字段名 新字段名 字段类型</p>
<p>3、字段名修改change其实也可以修改字段类型、属性和位置，但是通常不使用（专人专事）</p>
<h4 id="（4）修改字段"><a href="#（4）修改字段" class="headerlink" title="（4）修改字段"></a>（4）修改字段</h4><p><strong>修改字段</strong>：指修改字段的相关信息</p>
<ul>
<li>修改字段类型、字段属性和位置</li>
<li>修改字段语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 modify 字段名 字段类型 [字段属性] [位置]；</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>修改身份证的类型为char(18)并且位置放到id后面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 modify sfz char(18) after id;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、修改字段包含多个操作</p>
<ul>
<li>字段类型修改</li>
<li>字段属性修改</li>
<li>字段位置修改</li>
</ul>
<p>2、修改字段语法：alter table 表名 modify 字段名  字段类型 [字段属性] [位置];</p>
<h3 id="6、删除字段"><a href="#6、删除字段" class="headerlink" title="6、删除字段"></a>6、删除字段</h3><p><strong>删除字段</strong>：即将某个不要的字段从表中剔除</p>
<ul>
<li>删除字段会将数据也删除（不可逆）</li>
<li>删除字段语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop 字段名;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>删除年龄字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_3 drop age;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、字段删除在删除字段名的同时会删除字段对应的数据，而且不可逆</p>
<p>2、字段删除语法：alter table 表名 drop 字段名</p>
<h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>1、数据表结构的操作是数据操作的基础</p>
<p>2、一般情况下新手都不会接触数据表的设计，但是作为一名新手一定要在使用数据表之前查看数据表的结构信息</p>
<p>3、不要轻易的修改或者删除数据表结构（数据会一并被处理掉）</p>
<p>4、数据表结构的维护通常是一次性的，在业务开展前尽可能好的设计好数据表，而不要后期再进行其他维护</p>
<h2 id="2-4-SQL数据操作"><a href="#2-4-SQL数据操作" class="headerlink" title="2.4 SQL数据操作"></a>2.4 SQL数据操作</h2><h3 id="1、新增数据"><a href="#1、新增数据" class="headerlink" title="1、新增数据"></a>1、新增数据</h3><p><strong>新增数据</strong>：将数据插入到数据表永久存储</p>
<ul>
<li>新增数据是根据表的字段顺序和数据类型要求将数据存放到数据表中</li>
<li>数据表中的数据以行（row）为存储单位，实际存储属于字段（field）存储数据</li>
<li>数据插入分两种方式<ul>
<li>全字段插入：<code>insert into 表名 values(字段列表顺序对应的所有值);</code></li>
<li>部分字段插入：<code>insert into 表名 (字段列表) values(字段列表对应的值顺序列表);</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、给t_3表插入一条完整数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_3 values(1,&#39;440111200011111101&#39;,&#39;Jim&#39;,&#39;Green&#39;);</span><br></pre></td></tr></table></figure>

<p>2、根据字段插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_3 (id,sfz,name) values(2,&#39;441000200011111211&#39;,&#39;Tom&#39;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据插入是利用insert指令将数据永久存储到数据表中</p>
<p>2、数据存储以行为单位，字段为最小实际存储单位</p>
<p>3、数据插入分为两种方式插入数据</p>
<ul>
<li>全字段插入<ul>
<li>insert into 表名 values(值列表)</li>
<li>值列表必须与字段列表顺序一致</li>
<li>值列表的每个数据类型必须与字段类型一致</li>
</ul>
</li>
<li>部分字段插入<ul>
<li>insert into 表名 (字段列表) values(值列表)</li>
<li>字段列表可以顺序随意</li>
<li>值列表必须与指定的字段列表顺序一致</li>
<li>值列表元素的类型必须与字段列表的类型一致</li>
</ul>
</li>
</ul>
<h3 id="2、查看数据"><a href="#2、查看数据" class="headerlink" title="2、查看数据"></a>2、查看数据</h3><p><strong>查看数据</strong>：将表中已经存在的数据按照指定的要求显示出来</p>
<ul>
<li>查到的数据显示出来是一张二维表</li>
<li>数据显示包含字段名和数据本身</li>
<li>数据查看分两种方式<ul>
<li>查看全部字段：使用<code>*</code>代替所有字段</li>
<li>查看部分字段：明确字段名，使用逗号分隔</li>
</ul>
</li>
<li>查看数据很多时候也是根据条件查询部分数据</li>
<li>查看语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select *|字段列表 from 表名;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、查看t_3表中所有数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_3;</span><br></pre></td></tr></table></figure>

<p>2、查看t_3表中的name和身份证信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name,sfz from t_3;</span><br></pre></td></tr></table></figure>

<p>3、查看t_3表中id值为1的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_3 where id &#x3D; 1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据查看是数据库中最常用的操作（99%）</p>
<p>2、数据查看分两种情况</p>
<ul>
<li>查看全部：select * （*叫做通配符）</li>
<li>查看部分：select 字段列表（建议）</li>
</ul>
<p>3、实际使用时通常会带where条件进行数据筛选</p>
<h3 id="3、更新数据"><a href="#3、更新数据" class="headerlink" title="3、更新数据"></a>3、更新数据</h3><p><strong>更新数据</strong>：即更新某个已有字段的值</p>
<ul>
<li>更新数据通常是根据条件更新某些数据，而不是全部记录都更新</li>
<li>更新数据语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段 &#x3D; 新值[,字段 &#x3D; 新值] [where条件筛选];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、更新所有记录的身份证信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update t_3 set sfz &#x3D; &#39;440100200010100001&#39;;</span><br></pre></td></tr></table></figure>

<p>2、更新某个记录的多个字段数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update t_3 set name &#x3D; &#39;Lily&#39;,sfz &#x3D; &#39;440100200010100002&#39; where id &#x3D; 1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、更新数据的针对记录的字段数据进行更新</p>
<p>2、更新通常是限定条件更新（一般不会更新全部）</p>
<h3 id="4、删除数据"><a href="#4、删除数据" class="headerlink" title="4、删除数据"></a>4、删除数据</h3><p><strong>删除数据</strong>：将数据从已有数据表中清除（针对的是记录record）</p>
<ul>
<li>删除数据是一种不可逆操作</li>
<li>数据删除通常都是有条件删除</li>
<li>数据删除语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where条件];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>删除t_3表中id为2的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from t_3 where id &#x3D; 2;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据删除是不可逆的操作</p>
<p>2、数据删除通常都匹配条件部分删除</p>
<h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p>1、数据操作不论是初级开发者还是高级开发者都频繁接触的操作</p>
<p>2、数据操作中读操作，往往占据了整个操作的99%以上</p>
<p>3、基本的增删改查是作为进阶的必要知识，必须熟练掌握和频繁练习（尽可能使用原码，集成工具后期开发时使用）</p>
<h1 id="3-MySQL数据库字符集"><a href="#3-MySQL数据库字符集" class="headerlink" title="3 MySQL数据库字符集"></a>3 MySQL数据库字符集</h1><h2 id="3-1-字符集"><a href="#3-1-字符集" class="headerlink" title="3.1 字符集"></a>3.1 字符集</h2><h3 id="1、字符集概念"><a href="#1、字符集概念" class="headerlink" title="1、字符集概念"></a>1、字符集概念</h3><p><strong>字符集</strong>：charset或者character set，是各种文字和符号在计算机中的总称</p>
<ul>
<li>字符集根据不同国家的符号不同，有不同的字符集</li>
<li>不同的字符集占用的存储空间不一样，存储的底层也不一样</li>
<li>不同字符集之间可以进行转换</li>
<li>常见字符集<ul>
<li>ASCII：美国信息交换标准码，一般英文符号，一个字节存储</li>
<li>latin1：拉丁文字符集，一个字节存储，ISO-8859-1的别名 ，能够向下兼容ASCII</li>
<li>GB2312：信息交换用汉字编码字符集 ，是中国1981年的一套国标规范，2个字节存储</li>
<li>GBK：汉字内码扩展规范（1995年），两个字节表示表示（汉字很多超过5000个）</li>
<li>Unicode：万国码（统一码），使用统一的编码方式来解决传统的局限，1994年出现</li>
<li>UTF-8：8-bit Unicode Transformation Format（万国码） ，针对Unicode的可变长度字符编码，采用1-6个字节编码Unicode字符（目前通用编码规则）。建议使用UTF-8字符集进行数据存储（MySQL8中建议使用utf8mb4）</li>
</ul>
</li>
</ul>
<blockquote>
<p> 原理流程图</p>
</blockquote>
<p>1、数据存储</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(输入符号&lt;br&gt;A)--&gt;B[计算机存储]</span><br><span class="line">B--&gt;C&#123;字符集选择&#125;</span><br><span class="line">C--&gt;|ASCII|D[转码&lt;br&gt;01000001]</span><br><span class="line">C--&gt;|GBK|E[转码&lt;br&gt;0000000001000001]</span><br><span class="line">C--&gt;|ASCII 存储中文|G[转码&lt;br&gt;乱码]</span><br><span class="line">D--&gt;F((存储))</span><br><span class="line">E--&gt;F</span><br><span class="line">G--&gt;F</span><br></pre></td></tr></table></figure>

<p>2、数据读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(数据读取)--&gt;B&#123;字符集选择&#125;</span><br><span class="line">B--&gt;|ASCII|C[读1个字节&lt;br&gt;01000001]</span><br><span class="line">B--&gt;|GBK|D[读2个字节&lt;br&gt;0000000001000001]</span><br><span class="line">B--&gt;|UTF-8|G[读3个字节&lt;br&gt;错误读取]</span><br><span class="line">G--&gt;H[解析&lt;br&gt;乱码]</span><br><span class="line">C--&gt;E[解析&lt;br&gt;A]</span><br><span class="line">D--&gt;E</span><br><span class="line">E--&gt;F((输出))</span><br><span class="line">H--&gt;F</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、字符集是一套符号的总称</p>
<p>2、不同国家地区的符号有区别，所以有自己的字符集</p>
<p>3、常见的字符集目前是三个</p>
<ul>
<li>ASCII：美国信息交换标准码</li>
<li>GBK：汉字内码扩展规范（国标），兼容ASCII</li>
<li>UTF-8：8字节万国码，兼容GBK和ASCII</li>
</ul>
<p>4、目前基本都统一使用UTF-8开发和数据存储</p>
<p>5、字符集是指定字符的存储和读取的规范</p>
<ul>
<li>指定的字符集存储需要使用对应的字符集读取</li>
<li>错误的字符集存储或者读取都会产生乱码</li>
</ul>
<h3 id="2、MySQL字符集"><a href="#2、MySQL字符集" class="headerlink" title="2、MySQL字符集"></a>2、MySQL字符集</h3><p><strong>MySQL字符集</strong>：MySQL内部对于数据实际存储的字符集（服务器端）</p>
<ul>
<li>MySQL内部对象可以在各个层级设置字符集</li>
<li>MySQL内部对象存在字符集继承：字段 -&gt; 表 -&gt; 数据库 -&gt; DBMS</li>
<li>MySQL内部内嵌支持几乎所有主流字符集</li>
<li>数据存储的最终字符集由字段控制</li>
<li>客户端与服务器进行交互时，需要明确告知服务器客户端自己的字符集（数据格式）</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>查看MySQL支持的所有字符集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show charset;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原理图</p>
</blockquote>
<p>1、数据库内部对象字符集原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(服务器数据管理)--&gt;B[DBMS系统&lt;br&gt;安装配置字符集]</span><br><span class="line">B--&gt;C[数据库&lt;br&gt;设定字符集]</span><br><span class="line">C--&gt;|继承DBMS字符集|B</span><br><span class="line">C--&gt;D[数据表&lt;br&gt;设定字符集]</span><br><span class="line">D--&gt;|继承数据库字符集|C</span><br><span class="line">D--&gt;E[数据字段&lt;br&gt;设定字符集]</span><br><span class="line">E--&gt;|继承数据表字符集|D</span><br></pre></td></tr></table></figure>

<p>1.1、服务端存储的数据最终字符集由字段确定</p>
<p>1.2、字段通常不会设置字符集，继承表的字符集（统一性，真正一般都与数据库一致）</p>
<p>1.3、数据存储的字符集与客户端的字符集没有直接关系，是由表（字段）决定</p>
<p>2、客户端存储数据原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(客户端录入数据&lt;br&gt;数据自带字符集)--&gt;B[发送服务端]</span><br><span class="line">A--&gt;|提前告知服务端客户端数据字符集&lt;br&gt;如不告知-服务器使用默认设置|C</span><br><span class="line">B--&gt;C</span><br><span class="line">C[服务端接收数据]--&gt;D[执行存储操作]</span><br><span class="line">D--&gt;E[转码为目标字符集]</span><br><span class="line">E--&gt;F((存储))</span><br></pre></td></tr></table></figure>



<p>3、客户端读取数据原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(客户端录入获取指令)--&gt;B[发送服务端]</span><br><span class="line">A--&gt;|提前告知服务端客户端数据字符集&lt;br&gt;如不告知-服务器使用默认设置|C</span><br><span class="line">B--&gt;C[服务器接收请求]</span><br><span class="line">C--&gt;D[执行获取指令&lt;br&gt;按照数据存储本身字符集获取]</span><br><span class="line">D--&gt;E[转成客户端字符集数据]</span><br><span class="line">E--&gt;F[返回客户端]</span><br><span class="line">F--&gt;G((客户端解析&lt;br&gt;只能按照自己的字符集解析))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、MySQL服务端数据存储的字符集依赖各个对象设置</p>
<ul>
<li>DBMS：设置最广，一旦设置所有对象都可以依赖，但是优先级最低</li>
<li>DB：针对数据库内的所有表，优先级高于DBMS，可以继承DBMS（一般在数据库层设置）</li>
<li>Table：针对当前表的设置，优先级高于DB，可以继承DB</li>
<li>Field：针对当前字段设置，优先级高于Table，可以继承Table，优先级最高</li>
</ul>
<p>2、通常字符集的设置都是围绕数据表（现在都在数据库层），不会到具体字段</p>
<p>3、建议使用UTF8字符集存储数据（MySQL8以后建议使用UTF8MB4）</p>
<p>4、MySQL服务端支持各种字符集，并且能够进行各种字符集转换</p>
<p>5、客户端存储数据到服务端原理</p>
<ul>
<li>客户端告知服务端客户端的字符集</li>
<li>服务端按照客户端指定的字符集接收数据（如果没有指定，使用默认，可能出现乱码）</li>
<li>服务端按照实际存储表对应的字符集进行转换</li>
<li>服务端存储数据</li>
</ul>
<p>6、客户端读取服务端数据原理</p>
<ul>
<li>客户端告知服务端客户端的字符集</li>
<li>服务端按照客户指定的指令从数据库读取原始字符集数据</li>
<li>服务端按照客户端的需求将数据进行字符转换</li>
<li>服务端发送目标数据给客户端</li>
<li>客户端按照自己的字符集进行解析</li>
</ul>
<h3 id="3、乱码问题解决"><a href="#3、乱码问题解决" class="headerlink" title="3、乱码问题解决"></a>3、乱码问题解决</h3><p><strong>乱码</strong>：指数据不能按照正确的字符集进行存储或者解析</p>
<ul>
<li>乱码原因1：数据在存储的时候已经变成乱码<ul>
<li>客户端字符集与服务端解析字符集不一致</li>
<li>读取时想转成其他字符集均会错误</li>
</ul>
</li>
<li>乱码原因2：数据存储时正确，但是读取时解析成错误字符集<ul>
<li>客户端能解析的字符集与服务器提供的字符集不一致</li>
</ul>
</li>
<li>乱码解决方案：不论存储还是读取，都提前告知服务器当前客户端的字符集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set names 客户端字符集;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、MySQL客户端（CMD打开），客户端字符集是固定的GBK</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set names gbk;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>流程图</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(客户端连接认证服务端)--&gt;B[设定字符集&lt;br&gt;告知服务端当前客户端的字符集]</span><br><span class="line">B--&gt;C[其他操作&lt;br&gt;内部字符集转换不用管]</span><br><span class="line">C--&gt;D((结束))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、乱码的本质原因就是客户端与服务端的字符集不一致导致</p>
<ul>
<li>客户端存储数据的时候服务端没有正确理解（服务端按照默认的存储，存储的就是乱码）</li>
<li>客户端读取的时候没有正确告知服务端（服务端按照默认的提供）</li>
</ul>
<p>2、解决乱码问题的方案：保证服务端正确理解客户端的字符集</p>
<ul>
<li>set names 客户端字符集</li>
<li>在任何数据操作之前（尤其是写数据，包括结构）</li>
</ul>
<h3 id="4、字符集设置原理"><a href="#4、字符集设置原理" class="headerlink" title="4、字符集设置原理"></a>4、字符集设置原理</h3><p><strong>字符集设置原理</strong>：服务器端正确保障对客户端的数据识别</p>
<ul>
<li>MySQL服务端提供了变量来记录客户端的字符集</li>
<li>MySQL对应的存储字符集的变量可以修改</li>
<li><code>set names 字符集</code>就是对变量的修改，总共有三个<ul>
<li>character_set_client：客户端提供的数据的字符集</li>
<li>character_set_results：客户端需要服务端提供的数据的字符集</li>
<li>character_set_connection：连接使用的字符集，内部数据操作</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查看系统内部存储这些记录字符集的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;character_set%&#39;;	#%表示通配符，匹配后续所有不确定的数据</span><br></pre></td></tr></table></figure>



<p>2、修改客户端字符集变量，保证数据正常存进服务端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set character_set_client &#x3D; gbk;</span><br></pre></td></tr></table></figure>



<p>3、修改客户端解析字符集变量，保证数据正常被客户端查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set character_set_results &#x3D; gbk;</span><br></pre></td></tr></table></figure>



<p>4、使用set names 字符集批量修改，保证客户端被服务端正确理解，同时客户端也能正确解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set names gbk;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、MySQL字符集控制是在服务端内部通过变量连接（针对每个独立的客户端）</p>
<p>2、set names字符集是一种快捷方式，本质有三个变量被修改</p>
<ul>
<li>character_set_client：服务端接收客户端数据</li>
<li>character_set_connection：服务端内部连接使用</li>
<li>character_set_results：服务端提供数据给客户端</li>
</ul>
<p>3、通常我们都是使用set names字符集来进行统一设置，而且是在<strong>建立连接之后操作数据之前就设置</strong></p>
<h3 id="5、总结-1"><a href="#5、总结-1" class="headerlink" title="5、总结"></a>5、总结</h3><p>1、字符集是所有编程语言里都必须面对的首要问题，必须在一开始就选择好字符集（去到企业后先问清楚）</p>
<ul>
<li>业务针对的符号</li>
<li>业务针对的范围</li>
</ul>
<p>2、乱码是编程中最基础要解决的问题，一旦数据产生了乱码，通常是不可逆操作</p>
<p>3、解决乱码问题其实本质就是统一字符集问题</p>
<ul>
<li>客户端字符集：<code>character_set_client</code></li>
<li>连接层字符集：<code>character_set_connection</code></li>
<li>结果集字符集：<code>character_set_results</code></li>
<li>简单统一方式：<code>set names 客户端字符集</code></li>
<li>存储字符集：不用考虑，因为数据库有强大的字符集转换能力，只要在开始设置好，保证后续数据不会超出字符集即可</li>
</ul>
<h2 id="3-2-校对集"><a href="#3-2-校对集" class="headerlink" title="3.2 校对集"></a>3.2 校对集</h2><h3 id="1、校对集概念"><a href="#1、校对集概念" class="headerlink" title="1、校对集概念"></a>1、校对集概念</h3><p><strong>校对集</strong>：collate/collation，即数据比较时对应的规则</p>
<ul>
<li>校对集依赖字符集</li>
<li>校对集的校对方式分为三种<ul>
<li>大小写不敏感：_ci，case insensitive（不区分大小写）</li>
<li>大小写敏感：_cs，case sensitive（区分大小写）</li>
<li>二进制比较：_bin，binary（区分大小写）</li>
</ul>
</li>
<li>校对集是在进行数据比较的时候触发</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、_ci，大小写不敏感</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">A 与 a 是相同的，不存在谁大谁小（系统会转换成一种）</span><br></pre></td></tr></table></figure>



<p>2、_cs，大小写敏感</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">A 与 a 有大小关系，所以不同（存储数值）</span><br></pre></td></tr></table></figure>



<p>3、_bin，二进制比较</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">A的二进制是01000001</span><br><span class="line">a的二进制是01100001</span><br><span class="line">二进制按位比较，所以不同</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、校对集是数据比较的规则</p>
<ul>
<li><p>校对集依赖字符集存在</p>
</li>
<li><p>每个字符集有多种校对规则</p>
</li>
</ul>
<p>2、校对规则一共有三种</p>
<ul>
<li>_ci：大小写不敏感，不区分大小写</li>
<li>_cs：大小写敏感，区分大小写</li>
<li>_bin：二进制比较（区分大小写）</li>
</ul>
<h3 id="2、校对集设置"><a href="#2、校对集设置" class="headerlink" title="2、校对集设置"></a>2、校对集设置</h3><p><strong>校对集设置</strong>：在创建数据表的时候创建校对规则</p>
<ul>
<li>校对规则可以在MySQL四层对象设计<ul>
<li>DBMS：系统配置</li>
<li>DB：数据库指定（库选项）</li>
<li>Table：表指定（表选项）</li>
<li>Field：字段指定（字段选项，一般不用）</li>
</ul>
</li>
<li>校对集从Field到DBMS继承；优先级Field最高</li>
<li>每个校对集都有字符集对应的默认规则</li>
<li>校对集设置语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">collate 校对集规则;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、查看MySQL支持的所有校对集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show collation;</span><br></pre></td></tr></table></figure>



<p>2、在数据库层设计校对集（常见）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db_4 charset utf8mb4 collate utf8mb4_bin;</span><br></pre></td></tr></table></figure>



<p>3、在数据表层设计校对集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_4(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(10)</span><br><span class="line">)charset utf8mb4 collate utf8mb4_bin;</span><br></pre></td></tr></table></figure>



<p>4、在字段层设计校对集（一般不常用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_5(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(10) collate utf8mb4_bin</span><br><span class="line">)charset utf8mb4;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、MySQL中四层对象都可以设置校对集</p>
<ul>
<li>DBMS：配置文件</li>
<li>DB：创建数据库时限定（设置）</li>
<li>Table：创建表示限定</li>
<li>Field：创建字段时限定</li>
</ul>
<p>2、校对集从Field到DBMS实现继承</p>
<p>3、校对集依赖字符集，且每个字符集都有默认的校对集（一般情况不需要设置）</p>
<h3 id="3、校对集应用"><a href="#3、校对集应用" class="headerlink" title="3、校对集应用"></a>3、校对集应用</h3><p><strong>校对集应用</strong>：触发校对规则的使用</p>
<ul>
<li>校对集的应用通常是通过<strong>数据比较</strong>触发：<code>order by 字段</code></li>
<li>数据表中数据一旦产生，校对集的修改就无效</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建校对规则数据表并插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建默认校对规则表（不区分大小写）</span><br><span class="line">create table t_4(</span><br><span class="line">    name varchar(1)</span><br><span class="line">)charset utf8mb4;</span><br><span class="line">insert into t_4 values(&#39;B&#39;);</span><br><span class="line">insert into t_4 values(&#39;A&#39;);</span><br><span class="line">insert into t_4 values(&#39;b&#39;);</span><br><span class="line">insert into t_4 values(&#39;a&#39;);</span><br><span class="line"></span><br><span class="line"># 创建二进制校对规则（区分大小写）</span><br><span class="line">create table t_5(</span><br><span class="line">    name varchar(1)</span><br><span class="line">)charset utf8mb4 collate utf8mb4_bin;</span><br><span class="line">insert into t_5 values(&#39;B&#39;);</span><br><span class="line">insert into t_5 values(&#39;A&#39;);</span><br><span class="line">insert into t_5 values(&#39;b&#39;);</span><br><span class="line">insert into t_5 values(&#39;a&#39;);</span><br></pre></td></tr></table></figure>



<p>2、触发校对：排序 order by</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_4 order by name; # 升序</span><br><span class="line">select * from t_5 order by name;</span><br></pre></td></tr></table></figure>



<p>3、数据已经存在的表重新修改校对规则无效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_5 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、校对集的应用不是主动触发，而是通过数据比较自动触发</p>
<p>2、校对集对应的数据一旦产生，那么就不可以修改数据表的校对规则</p>
<p>3、校对集通常使用字符集默认校对集，如果需要进行额外的比较应用（通常是区分大小写），那么需要在建表的时候设定好目标校对规则</p>
<h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p>1、校对集是数据比较的标准</p>
<p>2、校对集的校对规则都是依赖字符集存在的，不外乎三种规则</p>
<ul>
<li>_ci：不区分大小写</li>
<li>_cs：区分大小写</li>
<li>_bin：二进制比较（区分大小写）</li>
</ul>
<p>3、校对集的触发是自动的，只要数据在进行比较的时候就会自动触发设定的校对规则</p>
<ul>
<li>校对集的维护要在数据产生之前</li>
<li>数据产生之后校对集的修改将无效</li>
</ul>
<p>4、在进行数据表设计之前，要提前了解数据后续可能产生的比较形态，选择好合适的校对规则（一般都默认不区分大小写）</p>
<h1 id="4-MySQL数据库字段详解"><a href="#4-MySQL数据库字段详解" class="headerlink" title="4 MySQL数据库字段详解"></a>4 MySQL数据库字段详解</h1><h2 id="4-1-字段类型"><a href="#4-1-字段类型" class="headerlink" title="4.1 字段类型"></a>4.1 字段类型</h2><h3 id="1、字段类型作用"><a href="#1、字段类型作用" class="headerlink" title="1、字段类型作用"></a>1、字段类型作用</h3><p><strong>字段类型</strong>：MySQL中用来规定实际存储的数据格式</p>
<ul>
<li>字段类型在定义表结构时设定</li>
<li>设定好字段类型后，插入数据时必须与字段类型对应，否则数据错误</li>
<li>MySQL有四大数据类型<ul>
<li>整数类型</li>
<li>小数类型</li>
<li>字符串类型</li>
<li>时间日期类型</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>规定类型的字段只能插入相应的数据格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 正确数据类型插入</span><br><span class="line">insert into t_6 values(3,&#39;444111222211110101&#39;,&#39;Lily&#39;,&#39;Lee&#39;);</span><br><span class="line"></span><br><span class="line"># 错误数据类型插入</span><br><span class="line">insert into t_6 values(&#39;hello&#39;,&#39;444444222211110102&#39;,&#39;Lucy&#39;,&#39;Lu&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、字段类型的作用就是强制规范录入的数据格式</p>
<ul>
<li>规范数据的格式</li>
<li>保证数据的有效性</li>
</ul>
<p>2、MySQL中有四种数据类型规范</p>
<ul>
<li>整数类型：只能存储整数</li>
<li>小数类型：可以存储有效数值</li>
<li>字符串类型：存储字符串数据</li>
<li>时间日类类型：存储时间日期格式数据</li>
</ul>
<h3 id="2、整数类型"><a href="#2、整数类型" class="headerlink" title="2、整数类型"></a>2、整数类型</h3><p><strong>整数类型</strong>：有效的整数数据</p>
<ul>
<li>MySQL中为了<strong>数据空间</strong>的有效使用，设定了五种整数类型<ul>
<li>迷你整型：tinyint，使用<strong>1个字节</strong>存储整数，最多存储256个整数（-128~127）</li>
<li>短整型：smallint，使用<strong>2个字节</strong>存储整数</li>
<li>中整型：mediumint，使用<strong>3个字节</strong>存储整数</li>
<li>标准整型：int，使用<strong>4个字节</strong>存储整数</li>
<li>大整型：bigint，使用<strong>8个字节</strong>存储</li>
</ul>
</li>
<li>数值型存储在MySQL中分为有符号（有负数）和无符号（纯正数）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据的格式是存储整数</p>
<p>2、预估整数的范围，选择合适的整数类型</p>
<p>3、确定整数是否需要符号（负数区间）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、设计一个表记录个人信息：年龄、头发数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 年龄：没有负数，正常年龄也不超过200岁，迷你整型无符号即可</span><br><span class="line"># 头发数量：没有负数，大概在几百万根，所以标准整型无符号即可</span><br><span class="line">create table t_7(</span><br><span class="line">    age tinyint unsigned, # unsigned修饰整数，表示无符号（从0开始）</span><br><span class="line">    haircount int unsigned</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>

<p>2、设计一个表记录4S店的汽车销量信息：库存数量、销量、采购量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 4S店经常是先卖后进货，所以库存可能为负数，一个店铺的库存数通常不会太多，那么小整型即可</span><br><span class="line"># 销量通常全国一个月也就几万台，所以基本上小整型就够了，但是为了保证后续可能存在的爆发，那么中整型也是绝对够了的，而且不会是负数</span><br><span class="line"># 采购通常是正向采购，所以不会出现负数，而采购数量与销量持平就好</span><br><span class="line"></span><br><span class="line">create table t_8(</span><br><span class="line">    stock smallint,</span><br><span class="line">    sales mediumint unsigned,</span><br><span class="line">    purchase mediumint unsigned</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、整型是用来存储整数数据的</p>
<p>2、整数数据也需要根据业务大小来选择合适的存储方式</p>
<ul>
<li>迷你整型：存储数量不超过1个字节表示范围</li>
<li>小整型：存储数量不超过2个字节表示范围</li>
<li>中整型：存储数量不超过3个字节表示范围</li>
<li>整型：存储数量不超过4个字节表示范围</li>
<li>大整型：存储数量不超过8个字节表示范围</li>
</ul>
<p>3、数值型类型在MySQL中默认是有符号的，即有正负</p>
<ul>
<li>无符号需要使用unsigned修饰整型，即纯正数</li>
</ul>
<p>4、一般开发中不会太计较一个或者两个字节（不愿意算），所以tinyint和int居多，其他较少</p>
<h3 id="3、显示宽度"><a href="#3、显示宽度" class="headerlink" title="3、显示宽度"></a>3、显示宽度</h3><p><strong>显示宽度</strong>：int(L)，整数在数据库中显示的符号（数字+符号）个数</p>
<ul>
<li>显示宽度一般是类型能表示的最大值对应的数字个数（通过desc查看表字段显示）</li>
<li>显示宽度包含符号（如果允许为负数，<code>-</code>负号会增加一个宽度）</li>
<li>显示宽度可以主动控制：创建字段时加括号确定</li>
<li>显示宽度不会影响类型能表示的最大数值</li>
<li>可以通过<strong>zerofill</strong>让不够宽度的数值补充到对应宽度：在字段类型后使用zerofill</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、有符号和无符号对应的宽度不一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_9(</span><br><span class="line">    a tinyint,</span><br><span class="line">    b tinyint unsigned</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>

<p>2、可以主动控制显示宽度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_9 add c tinyint(2) unsigned;</span><br></pre></td></tr></table></figure>

<p>3、显示宽度不影响数据的大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_9 values(1,1,1); #小于显示宽度</span><br><span class="line">insert into t_9 values(100,100,100); #大于显示宽度</span><br></pre></td></tr></table></figure>

<p>4、可以通过erofill让小于显示宽度的数值前置补充0到显示宽度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_9 add d tinyint(2) zerofill; # 0填充只能针对正数</span><br><span class="line">insert into t_9 values(1,1,1,1);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、显示宽度是显示整型能表示的最多符号数量</p>
<p>2、显示宽度能主动设置，但是绝对不会改变类型本身能表示的数据大小</p>
<p>3、可以通过zerofill来强制让不够宽度的数据补充前置0来达到显示宽度</p>
<ul>
<li>zerofill默认要求整型为无符号</li>
<li>zerofill通常用来制作一些规范宽度的数据</li>
</ul>
<h3 id="4、小数类型（浮点型）"><a href="#4、小数类型（浮点型）" class="headerlink" title="4、小数类型（浮点型）"></a>4、小数类型（浮点型）</h3><p><strong>浮点数</strong>：float/double，存储不是特别精确的数值数据</p>
<ul>
<li>浮点数又称之为精度数据，分为两种<ul>
<li>单精度：float，使用4个字节存储，精度范围为6-7位有效数字</li>
<li>双精度：double，使用8个字节存储，精度范围为14-15位有效数字</li>
</ul>
</li>
<li>浮点数超过精度范围会自动进行<strong>四舍五入</strong></li>
<li>精度可以指定整数和小数部分<ul>
<li>默认不指定，整数部分不超过最大值，小数部分保留2位</li>
<li>可以指定：float/double(总长度,小数部分长度)</li>
</ul>
</li>
<li>可以使用科学计数法插入数据：AEB，A * 10 ^ B</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定当前设计的字段的数据为不精确型数据（或者小数）</p>
<p>2、确定数据的大小或者精度的要求范围</p>
<ul>
<li>6-7位有效数字使用float</li>
<li>14-15位有效数字使用double</li>
</ul>
<p>3、确定精度的分布：整数部分和小数部分</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、记录宇宙中恒星、行星的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数量属于不确定量级，所以精确的数据是无意义的，只能是个大概（绝大部分时候float就可以）</span><br><span class="line">create table t_10(</span><br><span class="line">    h_star float unsigned,</span><br><span class="line">    x_star float(20,0) unsigned</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_10 values(1234567890,1.2E10);</span><br></pre></td></tr></table></figure>



<p>2、记录商品的价格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 商品名字字符串</span><br><span class="line"># 商品价格一般都允许带小数</span><br><span class="line">create table t_11(</span><br><span class="line">    goods_name varchar(20),</span><br><span class="line">    goods_price float</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_11 values(&#39;Nokia3310&#39;,199.99);</span><br><span class="line">insert into t_11 values(&#39;Nokia6100&#39;,1999.9999);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、浮点数是用来记录一些不需要特别精确的数值或者小数数值的</p>
<ul>
<li>float：单精度，6-7位有效数字</li>
<li>double：双精度，14-15位有效数字</li>
</ul>
<p>2、浮点数能够表示很大的数值</p>
<p>3、浮点数可以指定整数部分和小数部分的有效数值区间</p>
<ul>
<li>float/double<ul>
<li>默认是整数不超过最大范围即可</li>
<li>小数部分保留2位有效数字</li>
</ul>
</li>
<li>float/double(有效数位,小数部分有效位)<ul>
<li>整数部分为有效数位 - 小数部分</li>
<li>数值如果超过整数部分就不让插入</li>
</ul>
</li>
</ul>
<p>4、因为浮点数会自动四舍五入，所以不要使用浮点数来存储对精度要求较高的数值</p>
<h3 id="5、小数类型（定点型）"><a href="#5、小数类型（定点型）" class="headerlink" title="5、小数类型（定点型）"></a>5、小数类型（定点型）</h3><p><strong>定点型</strong>：decimal，能够保证精度的小数</p>
<ul>
<li>不固定存储空间存储</li>
<li>每9个数字使用4个字节存储</li>
<li>定点型可以指定整数部分长度和小数部分长度<ul>
<li>默认不指定，10位有效整数，0位小数</li>
<li>可以指定：decimal(有效数位,小数部分数位)</li>
<li>有效数位不超过65个</li>
</ul>
</li>
<li>数据规范<ul>
<li>整数部分超出报错</li>
<li>小数部分超出四舍五入</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定小数是否需要保证精度</p>
<p>2、确定有效数位长度</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录个人资产情况：资产和负债</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 资产和负债应该都是精确的，小数部分可以到分</span><br><span class="line">create table t_12(</span><br><span class="line">    money decimal(14,2),</span><br><span class="line">    bet decimal(10,2)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_12 values(1111111111.12,1111111.999);</span><br><span class="line">insert into t_12 values(1111111111.12,99999999.999); # 错误：进位导致正数部分超过指定范围</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、定点数是用来存储精确的小数的</p>
<p>2、定点数可以指定长度</p>
<ul>
<li>decimal：默认<ul>
<li>整数部分为10位</li>
<li>小数部分为0</li>
</ul>
</li>
<li>decimal(有效位数,小数位数)<ul>
<li>整数部分为：有效位数 - 小数位数</li>
<li>有效数位不超过65个</li>
</ul>
</li>
</ul>
<p>3、定点数的存储模式不是固定长度，所以数据越大占用的存储空间越长</p>
<h3 id="6、字符串类型（定长型）"><a href="#6、字符串类型（定长型）" class="headerlink" title="6、字符串类型（定长型）"></a>6、字符串类型（定长型）</h3><p><strong>定长型</strong>：char(L)，指定固定长度的存储空间存储字符串</p>
<ul>
<li>定长是指定存储长度</li>
<li>定长的长度是字符而不是字节<ul>
<li>L的最大值是255</li>
<li>实际存储空间：L字符数 * 字符集对应字节数</li>
</ul>
</li>
<li>定长里存储的数据不能超过指定长度，但是可以小于指定长度</li>
<li>字符串数据使用单引号或者双引号包裹</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据类型为字符串（或不能用整数存储的超长数字符号）</p>
<p>2、确定数据长度基本一致（定长占用固定空间）</p>
<p>3、确定具体长度</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录个人信息：身份证信息和手机号码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 身份证为固定长度18位（数字）</span><br><span class="line"># 手机号码是11位固定长度（数字）</span><br><span class="line">create table t_13(</span><br><span class="line">    id_number char(18),</span><br><span class="line">    phone_number char(11)</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_13 values(&#39;440111999912120304&#39;,&#39;13512345678&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、定长是固定存储空间</p>
<ul>
<li>实际存储空间：L字符 * 字符集对应字节数</li>
</ul>
<p>2、定长对应的是字符长度，而不是字节长度</p>
<p>3、字符串数据需要使用引号包裹具体数据</p>
<p>4、定长的访问效率较高，但是空间利用率不高</p>
<ul>
<li><p>固定长度的数据使用定长</p>
</li>
<li><p>定长最大数据长度指定不超过255字符</p>
</li>
</ul>
<h3 id="7、字符串类型（变长型）"><a href="#7、字符串类型（变长型）" class="headerlink" title="7、字符串类型（变长型）"></a>7、字符串类型（变长型）</h3><p><strong>变长型</strong>：varchar(L)，根据实际存储的数据变化存储空间</p>
<ul>
<li>变长型的存储空间是由实际存储数据决定的</li>
<li>变长型的L也是指<strong>字符</strong>而不是字节<ul>
<li>L指定的是最大存储的数据长度</li>
<li>L最大值理论是65535</li>
<li>变长需要额外产生1-2个字节，用来记录实际数据的长度<ul>
<li>数据长度小于256个，多1个字节</li>
<li>数据长度大于256个，多2个字节</li>
</ul>
</li>
<li>实际存储空间：实际字符数 * 字符集对应字节数 + 记录长度</li>
</ul>
</li>
<li>变长数据不能超过定义的最大长度</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据类型为字符串</p>
<p>2、确定数据是不规则的数据</p>
<p>3、确定最大长度</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录个人信息：用户名、密码、姓名、身份证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 用户名不确定长度，最长不超过50个字符</span><br><span class="line"># 密码不确定长度，最潮超过15个字符</span><br><span class="line"># 姓名不确定长度，最长不超过10个字符</span><br><span class="line"># 身份证固定长度，18个字符</span><br><span class="line">create table t_14(</span><br><span class="line">    &#96;username&#96; varchar(50),</span><br><span class="line">    &#96;password&#96; varchar(15),</span><br><span class="line">    &#96;name&#96; varchar(10),</span><br><span class="line">    &#96;id_number&#96; char(18)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_14 values(&#39;username&#39;,&#39;password&#39;,&#39;name&#39;,&#39;444111999912121111&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、变长varchar是根据<strong>数据的长度实际计算存储空间</strong></p>
<p>2、变长需要规定数据的最大长度，理论长度为65535个字符</p>
<p>3、变长字符串能够更好的利用存储空间</p>
<p>4、变长字符串需要有额外1-2个字节存储数据长度</p>
<ul>
<li>不超过256个字符：1个字节</li>
<li>超过256个字符：2个字节</li>
</ul>
<p>5、变长字符串在读取时需要进行长度计算，所以效率没有定长字符串高</p>
<h3 id="8、字符串类型（文本字符串）"><a href="#8、字符串类型（文本字符串）" class="headerlink" title="8、字符串类型（文本字符串）"></a>8、字符串类型（文本字符串）</h3><p><strong>文本字符串</strong>：text/blob，专门用来存储较长的文本</p>
<ul>
<li>文本字符串通常在超过255个字符时使用</li>
<li>文本字符串包含两大类<ul>
<li>text：普通字符<ul>
<li>tinytext：迷你文本，不超过<code>2 ^ 8 -1</code>个字符</li>
<li>text：普通文本，不超过 <code>2 ^ 16 - 1</code>个字符</li>
<li>mediumtext：中型文本，不超过 <code>2 ^ 24 - 1</code> 个字符</li>
<li>longtext：长文本，不超过 <code>2 ^ 32 - 1</code> 个字符（4G）</li>
</ul>
</li>
<li>blob：二进制字符（与text类似）<ul>
<li>tinyblob</li>
<li>blob</li>
<li>mediumblob</li>
<li>longblob</li>
</ul>
</li>
</ul>
</li>
<li>文本字符串会自动根据文本长度选择适合的具体类型</li>
<li>一般在文本超过255个字符时，都会使用text（blob现在极少使用）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定类型为文本类型</p>
<p>2、确定数据长度可能超过255个字符</p>
<p>3、使用text</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录新闻信息：标题、作者和内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 标题一般不会超过50个字符，varchar</span><br><span class="line"># 作者一般不会超过10个字符：varchar</span><br><span class="line"># 内容通常都很长，使用text</span><br><span class="line">create table t_15(</span><br><span class="line">    author varchar(10),</span><br><span class="line">    title varchar(50),</span><br><span class="line">    content text</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_15 values(&#39;佚名&#39;,&#39;给联合国的一封信&#39;,&#39;给联合国的一封信...&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、文本类型是专门用来存储长文本的</p>
<ul>
<li>text：普通文本字符</li>
<li>blob：二进制文本字符</li>
</ul>
<p>2、一般文本长度超过255的（较长）都使用text</p>
<p>3、text/blob根据数据存储长度有很多种，但是一般使用text/blob，因为文本会根据数据长度自适应选择</p>
<h3 id="9、字符串类型（枚举）"><a href="#9、字符串类型（枚举）" class="headerlink" title="9、字符串类型（枚举）"></a>9、字符串类型（枚举）</h3><p><strong>枚举</strong>：一种映射存储方式，以较小的空间存储较多的数据</p>
<ul>
<li>枚举是在定义时确定可能出现的可能</li>
<li>枚举在定义后数据只能出现定义时其中的一种</li>
<li>枚举类似一种单选框</li>
<li>枚举使用1-2个字节存储，最多可以设计65535个选项</li>
<li>枚举实际存储是使用数值，映射对应的元素数据，从1开始</li>
<li>枚举语法：enum(元素1,元素2,…元素N)</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据是固定的几种数据之一</p>
<p>2、使用枚举穷举相应的元素</p>
<p>3、数据存储只能选择穷举中的元素之一</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、记录人群类型：小朋友、少年、青年、中年、老年，每个人实际只属于一种类别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 要保证未来数据只能出现在某种可能中，所以要先列出来，可以使用enum</span><br><span class="line">create table t_16(</span><br><span class="line">    type enum(&#39;小朋友&#39;,&#39;少年&#39;,&#39;青年&#39;,&#39;中年&#39;,&#39;老年&#39;)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_16 values(&#39;少年&#39;);</span><br><span class="line">insert into t_16 values(&#39;仙人&#39;);	# 不存在的数据不能插入</span><br></pre></td></tr></table></figure>



<p>2、enum是建立映射关系，然后实际存储是数字，数值是按照元素顺序从1开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可以使用字段 + 0来判定数据具体的效果（字符串转数值为0）</span><br><span class="line">select type,type + 0 from t_16;</span><br><span class="line">insert into t_16 values(5);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>流程原理</p>
</blockquote>
<p>1、枚举定义原理</p>
<table>
<thead>
<tr>
<th>枚举数据</th>
<th>映射值</th>
</tr>
</thead>
<tbody><tr>
<td>数据1</td>
<td>1</td>
</tr>
<tr>
<td>数据2</td>
<td>2</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>数据N</td>
<td>N（小于65535）</td>
</tr>
</tbody></table>
<p>2、数据存储（读取反过来）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(指令开始)--&gt;B[插入数据]</span><br><span class="line">B--&gt;C[读取映射关系&lt;br&gt;元素&#x3D;&#x3D;数值&lt;br&gt;数值&#x3D;&#x3D;数值]</span><br><span class="line">C--&gt;D[数值存储到字段]</span><br><span class="line">D--&gt;E((结束))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、枚举是在定义时确定可能出现的元素，而后数据只能出现规定的元素之一的数据类型</p>
<p>2、枚举的存储是一种映射关系，对元素进行顺序编号，实际存储的是编号</p>
<p>3、使用枚举的作用</p>
<ul>
<li>规范数据模型</li>
<li>优化存储空间</li>
</ul>
<h3 id="10、字符串类型（集合）"><a href="#10、字符串类型（集合）" class="headerlink" title="10、字符串类型（集合）"></a>10、字符串类型（集合）</h3><p><strong>集合</strong>：set，一种映射存储方式，以较小的空间存储较多的数据</p>
<ul>
<li>集合是在定义时确定可能出现的元素进行穷举</li>
<li>集合在定义后数据只能出现定义时其中的元素（可以是多个）</li>
<li>集合类似一种多选框</li>
<li>集合使用1-8个字节存储数据，最多可以设计64个元素</li>
<li>集合实际存储是使用数值（二进制位），映射对应的元素数据，每个元素对应一个比特位</li>
<li>集合语法：set(元素1,元素2,…元素N)</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据是固定的几种数据组合</p>
<p>2、使用集合穷举相应的元素</p>
<p>3、数据存储只能选择穷举中的元素组合（多个使用逗号分隔）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、记录个人的球类爱好，有篮球、足球、羽毛球、网球、乒乓球、排球、台球、冰球</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 爱好可以是多种，并非固定的，但是只能从规定的类型中选择</span><br><span class="line">create table t_17(</span><br><span class="line">    hobby set(&#39;足球&#39;,&#39;篮球&#39;,&#39;羽毛球&#39;,&#39;网球&#39;,&#39;乒乓球&#39;,&#39;排球&#39;,&#39;台球&#39;,&#39;冰球&#39;)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_17 values(&#39;足球&#39;);</span><br><span class="line">insert into t_17 values(&#39;冰球,台球,篮球&#39;);</span><br></pre></td></tr></table></figure>



<p>2、集合建立的也是映射关系，映射方式是每个元素对应一个字节的比特位，从左边开始第一个对应字节从右边开始的第一位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可以通过字段 + 0的方式查看存储的具体数值</span><br><span class="line">select hobby,hobby + 0 from t_17;</span><br><span class="line"></span><br><span class="line"># 可以通过插入数值来组合元素，但是需要确定对应的十进制转换成二进制有对应的元素对应</span><br><span class="line">insert into t_17 values(8);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> 8:00001000</span><br><span class="line"> </span><br><span class="line"> 1:00000001</span><br><span class="line"> </span><br><span class="line"> 冰球、台球、篮球</span><br><span class="line"> 11000010 &#x3D;&gt; 1 + 2 ^ 1 + 1 * 2 ^ 6 + 1 * 2 ^ 7 &#x3D; 2 + 64 + 128 &#x3D; 194</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>流程原理</p>
</blockquote>
<p>1、集合定义原理</p>
<table>
<thead>
<tr>
<th>集合数据</th>
<th>映射位</th>
</tr>
</thead>
<tbody><tr>
<td>数据1</td>
<td>00000001</td>
</tr>
<tr>
<td>数据2</td>
<td>00000010</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>数据8</td>
<td>10000000</td>
</tr>
</tbody></table>
<p>2、数据存储（读取反过来）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(指令开始)--&gt;B[插入数据]</span><br><span class="line">B--&gt;C[读取映射关系&lt;br&gt;元素选中&#x3D;&#x3D;位值为1&lt;br&gt;元素未选中&#x3D;&#x3D;位值为0]</span><br><span class="line">C--&gt;D[转化成十进制存储]</span><br><span class="line">D--&gt;E((结束))</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、集合是在定义时确定可能出现的元素，而后数据只能出现规定的元素数据类型</p>
<p>2、集合的存储是一种映射关系，每个元素对应字节中的一个位，实际存储的是编号</p>
<ul>
<li>数据存在：对应位为1</li>
<li>数据不存在：对应位为0</li>
</ul>
<p>3、使用集合的作用</p>
<ul>
<li>规范数据模型</li>
<li>优化存储空间</li>
</ul>
<h3 id="11、时间日期类型（年）"><a href="#11、时间日期类型（年）" class="headerlink" title="11、时间日期类型（年）"></a>11、时间日期类型（年）</h3><p><strong>年</strong>：year，MySQL中用来存储年份的类型</p>
<ul>
<li>MySQL中使用1个字节存储年份</li>
<li>year能够表示的范围是1901-2155年（256年）<ul>
<li>year的特殊值是：0000</li>
</ul>
</li>
<li>year允许用户使用两种方式设计（效果一样）<ul>
<li>year</li>
<li>year(4)</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定存储的数据是年份</p>
<p>2、确定年份的区间在1901-2155之间</p>
<p>3、使用year类型</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、记录个人的出生年份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_18(</span><br><span class="line">    y1 year,</span><br><span class="line">    y2 year(4)</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_18 values(1901,2155);</span><br></pre></td></tr></table></figure>



<p>2、Year类型允许使用2位数来插入，系统会自动匹配对应的年份</p>
<ul>
<li>69以前：系统加上2000</li>
<li>69以后：系统加上1900</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_18 values(69,70);</span><br></pre></td></tr></table></figure>



<p>3、Year类型的特殊值是0000，可以使用00或者0000插入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_18 values(00,0000);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、year类型是MySQL用来存储年份信息的</p>
<p>2、year使用1个字节，所以只能表示256个年号，表示区间为1901-2155年</p>
<p>3、year数据可以用两种方式插入</p>
<ul>
<li>直接插入4位年，1901-2155之间都可以</li>
<li>插入2位年，0-99之间，系统会自动以69和70为界限</li>
</ul>
<p>4、因为year字段表示的范围有限，所以通常会使用字符串来存储（牺牲空间换安全）</p>
<h3 id="12、时间日期类型（时间戳）"><a href="#12、时间日期类型（时间戳）" class="headerlink" title="12、时间日期类型（时间戳）"></a>12、时间日期类型（时间戳）</h3><p><strong>时间戳</strong>：timestamp，基于格林威治时间的时间记录</p>
<ul>
<li>MySQL中时间戳表现形式不是秒数，而是年月日时分秒格式<ul>
<li>YYYY-MM-DD HH:II::SS</li>
<li>YYYYMMDDHHIISS</li>
</ul>
</li>
<li>timestamp使用4个字节存储</li>
<li>timestamp的特点是所对应的记录不论哪个字段被更新，该字段都会更新到当前时间</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定类型需要使用年月日时分秒格式</p>
<p>2、确定当前字段需要记录数据的最近更新时间</p>
<p>3、使用timestamp时间戳</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、记录商品库存的最后更新时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_19(</span><br><span class="line">    goods_name varchar(10),</span><br><span class="line">    goods_inventory int unsigned,</span><br><span class="line">    change_time timestamp</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_19 values(&#39;Nokia3110&#39;,100,&#39;1971-01-01 00:00:00&#39;);</span><br><span class="line">insert into t_19 values(&#39;Nokia7100&#39;,100,&#39;19710101000000&#39;);</span><br></pre></td></tr></table></figure>



<p>2、timestamp会在自己所在的记录任何位置被修改时自动更新时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update t_19 set goods_inventory &#x3D; 90;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：在MySQL8以后，取消了timestamp的默认自动更新，如果需要使用，需要额外使用属性： on update current_timestamp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_19 add c_time timestamp on update current_timestamp;</span><br><span class="line"></span><br><span class="line">update t_19 set goods_inventory &#x3D; 80;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、timestamp是用以时间戳的形式来保存时间的</p>
<ul>
<li>时间戳算法是从格林威治时间开始</li>
<li>MySQL中存储的是年月日时分秒格式</li>
</ul>
<p>2、timestamp使用4个字节存储数据</p>
<ul>
<li>表示范围是1971年1月1日0时0分0秒-2155年12月31日23是59分59秒</li>
<li>timestamp可以使用0000-00-00 00:00:00</li>
</ul>
<p>3、timestamp一般用来记录数据变化的，其他时候通常用整型保存真正的时间戳</p>
<ul>
<li>timestamp在MySQL8中需要主动使用on update current_timestamp才会自动更新</li>
</ul>
<h3 id="13、时间日期类型（日期）"><a href="#13、时间日期类型（日期）" class="headerlink" title="13、时间日期类型（日期）"></a>13、时间日期类型（日期）</h3><p><strong>日期</strong>：date，用来记录年月日信息</p>
<ul>
<li>使用3个字节存储数据</li>
<li>存储日期的格式为：YYYY-MM-DD</li>
<li>存储的范围是：1001-01-01~9999-12-31</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定存储的数据格式为日期类格式</p>
<p>2、确定数据格式为YYYY-MM-DD</p>
<p>3、使用date类型</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录个人生日</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_20(</span><br><span class="line">    name varchar(10),</span><br><span class="line">    birth date</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_20 values(&#39;Jim&#39;,&#39;2000-12-12&#39;);</span><br><span class="line">insert into t_20 values(&#39;Tom&#39;,&#39;10011212&#39;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、日期date是用来存储YYYY-MM-DD格式的日期的</p>
<p>2、date用3个字节存储，存储区间是1000 - 9999年，跨度很大</p>
<p>3、date可以在需要存储日期的地方放心使用</p>
<h3 id="14、时间日期类型（日期时间）"><a href="#14、时间日期类型（日期时间）" class="headerlink" title="14、时间日期类型（日期时间）"></a>14、时间日期类型（日期时间）</h3><p><strong>日期时间</strong>：datetime，用来综合存储日期和时间</p>
<ul>
<li>使用8个字节存储数据</li>
<li>存储格式为：YYYY-MM-DD HH:II:SS</li>
<li>存储区间为：1000-01-01 00:00:00 到9999-12-31 23:59:59</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要存储的时间格式包含日期</p>
<p>2、确定存储格式为：YYYY-MM-DD HH:II:SS</p>
<p>3、使用datetime</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录个人具体的出生时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_21(</span><br><span class="line">    name varchar(10),</span><br><span class="line">    birth datetime</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_21 values(&#39;Jim&#39;,&#39;2000-12-12 12:12:12&#39;);</span><br><span class="line">insert into t_21 values(&#39;Tom&#39;,&#39;10011212182323&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、日期时间是综合存储日期和时间两部分的</p>
<p>2、日期时间datetime使用8个字节存储</p>
<p>3、datetime的存储区间为：1000-01-01 00:00:00 到 9999-12-12 23:59:59</p>
<p>4、实际开发中因为编程语言（PHP）的强大，实际存储的时候通常不会使用这种类型</p>
<ul>
<li>占用较大存储空间</li>
<li>处理不够灵活（固定格式）</li>
<li>使用int unsigned存储时间戳然后利用PHPdate进行格式处理</li>
</ul>
<h3 id="15、时间日期类型（时间）"><a href="#15、时间日期类型（时间）" class="headerlink" title="15、时间日期类型（时间）"></a>15、时间日期类型（时间）</h3><p><strong>时间</strong>：time，用来记录时间或者时间段</p>
<ul>
<li>使用3个字节存储数据</li>
<li>数据范围是 <code>-838:59:59</code> - <code>838:59:59</code></li>
<li>数据插入的格式分为两种<ul>
<li>时间格式：[H]HH:II:SS（[]表示可以没有）</li>
<li>时间段格式：D HH:II:SS（D表示天）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要存储的类型是时间格式</p>
<p>2、确定格式类型为time能表示的格式</p>
<p>3、使用time存储</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>记录用户登录的具体时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 具体登录时间可以使用时间戳（包含年月日时分秒信息）</span><br><span class="line"># 也可以时间datetime格式，或者date+time双字段格式（具体后面学习范式时会知道该怎么用）</span><br><span class="line">create table t_22(</span><br><span class="line">    login_time1 int unsigned,</span><br><span class="line">    login_time2 datetime,</span><br><span class="line">    login_date date,</span><br><span class="line">    login_time3 time</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_22 values(12345678,&#39;2000-12-12 12:12:12&#39;,&#39;2000-12-12&#39;,&#39;12:12:12&#39;);</span><br><span class="line">insert into t_22 values(1234567,&#39;2000-12-12 12:12:12&#39;,&#39;2000-12-12&#39;,&#39;3 12:12:12&#39;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、时间格式time主要用来记录时间点或者时间段</p>
<p>2、time类型通常被用来做时间段计算：如多少天后的什么时间点（可以理解为过期检查）</p>
<h3 id="16、总结"><a href="#16、总结" class="headerlink" title="16、总结"></a>16、总结</h3><p>1、字段类型是用来规范数据的格式的</p>
<p>2、MySQL中有很多类型用来规范数据格式</p>
<ul>
<li>整数类型（常用）<ul>
<li>常用类型：tinyint、int</li>
</ul>
</li>
<li>小数类型（常用）<ul>
<li>常用类型：decimal、float</li>
</ul>
</li>
<li>字符串类型（常用）<ul>
<li>常用类型：char、varchar、text</li>
</ul>
</li>
<li>时间日期类型（不常用：通常使用真正时间戳存储数据，然后PHP进行灵活解读）</li>
</ul>
<p>3、实际开发的时候，一定要仔细了解需求，根据需求判定好具体选用那种数据类型</p>
<ul>
<li>最原始的维护能够具有最大的通用性（选中类型）</li>
<li>最小的消耗能够解决全部的问题（巧妙利用存储空间）</li>
</ul>
<h2 id="4-2-属性"><a href="#4-2-属性" class="headerlink" title="4.2 属性"></a>4.2 属性</h2><h3 id="1、属性作用"><a href="#1、属性作用" class="headerlink" title="1、属性作用"></a>1、属性作用</h3><p><strong>属性</strong>：建立在字段类型之后，对字段除类型之外的其他约束</p>
<ul>
<li>属性是在定义表字段的时候针对每个字段进行属性设定</li>
<li>设定好的属性可以通过查看表字段desc进行查看</li>
<li>数据在进行增删改（写）操作时需要在满足字段的要求同时还要满足属性的要求</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>查看表属性：desc 表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc t_1;</span><br><span class="line"></span><br><span class="line"># Field：字段名字</span><br><span class="line"># Type：数据类型</span><br><span class="line"># Null：是否为空（属性）</span><br><span class="line"># Key：索引类型（属性）</span><br><span class="line"># Default：默认值（属性）</span><br><span class="line"># Extra：额外属性</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、属性是用来MySQL用来增加字段规范和约束的</p>
<p>2、数据的写操作必须严格满足字段类型和属性要求</p>
<p>3、用好属性能够提升数据的有效性，方便未来进行数据操作和数据分析（数据真实性和有效性）</p>
<h3 id="2、NULL属性"><a href="#2、NULL属性" class="headerlink" title="2、NULL属性"></a>2、NULL属性</h3><p><strong>NULL</strong>：数据是否允许为空</p>
<ul>
<li>默认情况下数据是允许为空的</li>
<li>不为空设计：Not Null</li>
<li>数据为空一般不具备运算和分析价值，所以通常数据都需要设定为Not Null（不区分大小写）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、数据类型确定</p>
<p>2、数据是否为空确定</p>
<ul>
<li>允许为空：不用考虑Null属性（默认为Null）</li>
<li>不允许为空：Not Null</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、用户信息表：用户名、密码、姓名、年龄、注册时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_23(</span><br><span class="line">    username varchar(50) not null,</span><br><span class="line">    password char(32) not null,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age tinyint unsigned,</span><br><span class="line">    reg_time int unsigned not null</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<p>2、如果字段不能为空（Not  Null），那么数据就必须满足条件：插入时不能为空的字段就需要主动提供值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_23 values(&#39;username&#39;,&#39;password&#39;,&#39;Jim&#39;,20,123456789);</span><br><span class="line"></span><br><span class="line"># 错误操作：reg_time不能为空，而默认为空，所以系统报错</span><br><span class="line">insert into t_23 (username,password) values(&#39;username&#39;,&#39;password&#39;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、Null/Not Null属性是用来限定数据是否为Null值的</p>
<ul>
<li>默认是允许为Null值</li>
<li>不允许为空：Not Null</li>
</ul>
<p>2、一般有效的数据都必须设定为Not Null来保证数据的有效性</p>
<h3 id="3、Default属性"><a href="#3、Default属性" class="headerlink" title="3、Default属性"></a>3、Default属性</h3><p><strong>默认值</strong>：default，在设计表字段的时候给定默认数据，在后续字段操作（数据新增）的时候系统没有检测到字段有数据的时候自动使用的值</p>
<ul>
<li>默认值在字段设计的时候使用（默认值需要满足数据类型规范）</li>
<li>默认值通常设计的是字段容易出现的数据<ul>
<li>一般字段的默认值默认是Null</li>
</ul>
</li>
<li>默认值触发<ul>
<li>在系统进行数据插入时自动检测触发</li>
<li>主动使用default关键字触发默认值</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定字段的数据类型</p>
<p>2、确定字段可能出现的数据会是某个经常出现的值</p>
<p>3、设定默认值</p>
<p>4、触发默认值</p>
<ul>
<li>自动触发：数据插入时不给字段赋值</li>
<li>手动触发：数据插入时主动使用default关键字</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、用户开户：银行卡账号、身份证号码、姓名、账户余额</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_24(</span><br><span class="line">    account varchar(19) not null,</span><br><span class="line">    id_card char(18) not null,</span><br><span class="line">    name varchar(20) not null,</span><br><span class="line">    money decimal(16,2) default 0.00 not null</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<p>2、默认值触发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认触发</span><br><span class="line">insert into t_24 (account,id_card,name) values(&#39;6226000000000001&#39;,&#39;44011120001212000x&#39;,&#39;Lily&#39;);</span><br><span class="line"></span><br><span class="line"># 主动触发</span><br><span class="line">insert into t_24 values(&#39;6226000000000002&#39;,&#39;440111200012120011&#39;,&#39;Tom&#39;,default);</span><br><span class="line">insert into t_24 values(&#39;6226000000000003&#39;,&#39;440111200012120022&#39;,&#39;Jim&#39;,100);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、每个字段都有默认值</p>
<ul>
<li>默认情况下基本为Null</li>
<li>主动设置后，默认值改变</li>
</ul>
<p>2、默认值是在设置表字段的时候添加</p>
<p>3、默认值触发</p>
<ul>
<li>自动触发</li>
<li>关键字手动触发</li>
</ul>
<p>4、默认值通常用于一些不重要的字段，但是会出现常用值（或者初始值一样）</p>
<h3 id="4、主键"><a href="#4、主键" class="headerlink" title="4、主键"></a>4、主键</h3><p><strong>主键</strong>：primary key，用来保证整张表中对应的字段永远不会出现重复数据</p>
<ul>
<li>主键在一张表中只能有一个</li>
<li>主键的另外一个特性是能够提升主键字段作为查询条件的效率（索引）</li>
<li>主键不能为空：Not Null（默认）</li>
<li><strong>逻辑主键</strong>：数据没有具体业务意义，纯粹是一种数值数据<ul>
<li>逻辑主键通常是整数：int</li>
<li>逻辑主键目的是方便检索和数据安全（不暴露数据真实信息）</li>
</ul>
</li>
<li>复合主键：多个字段共同组成不能重复的数据<ul>
<li>primary key(字段1,字段2,…字段N)</li>
<li>联合主键使用不多，一般也不会超过2个字段</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定字段数据具有唯一性</p>
<p>2、确定数据不允许为空</p>
<p>3、确定数据会经常用于数据检索（条件查询）</p>
<p>4、使用主键primary key</p>
<p>5、一般每张表都会使用一个逻辑主键（id）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、银行账户信息：账户、姓名、余额</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 银行账户具有唯一性，不能重复，也不允许为空</span><br><span class="line">create table t_25(</span><br><span class="line">    account varchar(17) primary key,</span><br><span class="line">    name varchar(20) not null,</span><br><span class="line">    money decimal(16,2) not null default 0.00</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line"># 复合主键</span><br><span class="line">create table t_26(</span><br><span class="line">    account varchar(17),</span><br><span class="line">    name varchar(20),</span><br><span class="line">    money decimal(16,2) not null default 0.00,</span><br><span class="line">    primary key(account,name)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line"># 一般使用逻辑主键</span><br><span class="line">create table t_27(</span><br><span class="line">    id int unsigned primary key,</span><br><span class="line">    account varchar(17) not null,</span><br><span class="line">    name varchar(20) not null,</span><br><span class="line">    money decimal(16,2) not null default 0.00</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<p>2、主键数据不允许重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_27 values(1,&#39;6226000000000001&#39;,&#39;Lily&#39;,default);</span><br><span class="line"></span><br><span class="line"># 错误：主键1已经存在</span><br><span class="line">insert into t_27 values(1,&#39;6226000000000002&#39;,&#39;Tom&#39;,default);</span><br><span class="line"></span><br><span class="line"># 联合主键就是联合字段加起来不重复即可</span><br><span class="line">insert into t_26 values(&#39;6226000000000001&#39;,&#39;Tom&#39;,default);</span><br><span class="line">insert into t_26 values(&#39;6226000000000002&#39;,&#39;Tom&#39;,default);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、主键的作用就是控制对应字段的数据具有唯一性（不能重复）</p>
<p>2、一张表只能有一个主键</p>
<p>3、虽然主键可以用来保证数据的唯一性，但是一般都是使用逻辑主键作为主键字段（保证唯一性还有其他方式，如唯一键）</p>
<p>4、通常也不怎么使用复合主键</p>
<h3 id="5、主键管理"><a href="#5、主键管理" class="headerlink" title="5、主键管理"></a>5、主键管理</h3><p><strong>主键管理</strong>：在创建表并且已经有数据后的维护</p>
<ul>
<li>删除主键</li>
<li>追加主键</li>
<li>修改主键（先删除后新增）</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、删除主键：主键只有一个，所以删除语法也比较特殊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_26 drop primary key;</span><br></pre></td></tr></table></figure>



<p>2、后期新增主键：如果是针对业务主键需要保证字段数据没有Null数据且没有数据重复（一般主键都会在表创建时维护好）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_26 add primary key(account,name);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、主键的使用通常是在创建表的时候就会指定好</p>
<p>2、主键的维护实际使用较少，主要涉及的操作是删除和新增</p>
<h3 id="6、自增长属性"><a href="#6、自增长属性" class="headerlink" title="6、自增长属性"></a>6、自增长属性</h3><p><strong>自增长</strong>：auto_increment，被修饰的字段在新增时，自动增长数据</p>
<ul>
<li>自增长只能是整数类型，而且对应的字段必须是一个索引（通常逻辑主键）</li>
<li>一张表只能有一个自动增长</li>
<li>自增长数据可以理解为一种默认值，如果主动给值，那么自动增长不会触发</li>
<li>自增长由两个变量控制<ul>
<li>初始值：<code>auto_increment_offset</code>，默认是1</li>
<li>步长：<code>auto_increment_increment</code>，默认值也是1</li>
<li>查看自增长控制：<code>show variables like &#39;auto_increment%&#39;;</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据类型为整型</p>
<p>2、确定数据需要有规则的变化</p>
<ul>
<li>从1开始</li>
<li>每次增长1</li>
<li>可以调整，但是通常有固定规则（一般不调整）</li>
</ul>
<p>3、必须是一个索引字段（逻辑主键）</p>
<p>4、使用auto_increment</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、记录学生信息：学号和姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 学生信息：学号自动增长</span><br><span class="line">create table t_28(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    stu_no int(8) zerofill not null,</span><br><span class="line">    stu_name varchar(20) not null</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<p>2、触发自增长</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用自增长（可以使用NULL或者default来触发）</span><br><span class="line">insert into t_28 values(null,1,&#39;Jim&#39;);</span><br><span class="line">insert into t_28 values(default,2,&#39;Tom&#39;);</span><br><span class="line"></span><br><span class="line"># 主动控制：自增长的值会从当前最大的值开始自动增长</span><br><span class="line">insert into t_28 values(10,3,&#39;Lily&#39;);</span><br><span class="line">insert into t_28 values(null,4,&#39;Lucy&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、自增长auto_increment一般是配合逻辑主键实现自动增长</p>
<ul>
<li>整型字段</li>
<li>存在索引（主键）</li>
</ul>
<p>2、自增长的触发是通过不给值（默认值）实现自动计算</p>
<p>3、自增长是根据当前表中自增长列最大值运算</p>
<p>4、一张表中只能有一个自增长</p>
<h3 id="7、自增长管理"><a href="#7、自增长管理" class="headerlink" title="7、自增长管理"></a>7、自增长管理</h3><p><strong>自增长管理</strong>：在某些特殊使用下，需要自增长按照需求实现</p>
<ul>
<li><p>修改表中自增长的值：让下次自增长按照指定值开始</p>
</li>
<li><p>修改自增长控制：调整自增长的变化</p>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、修改表中自增长的值，跳过一些值，直接从下次开始按照新的目标值出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_28 auto_increment &#x3D; 50;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：奇数会保留原值，偶数会自动加1（可能出现的情况）</p>
<p>2、修改自增长控制：步长和起始值（修改针对的是整个数据库，而非单张表）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set auto_increment_increment &#x3D; 2;	# 当前用户当前连接有效（局部）</span><br><span class="line">set @@auto_increment_increment &#x3D; 2;	# 所有用户一直有效（全局）</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、自增长通常不会修改，如果有规则要求必须修改，通常也会在数据库运行前修改好</p>
<p>2、如果碰到要修改操作的，通常会选择全局修改而不是局部修改</p>
<h3 id="8、唯一键"><a href="#8、唯一键" class="headerlink" title="8、唯一键"></a>8、唯一键</h3><p><strong>唯一键</strong>：unique key，用来维护数据的唯一性</p>
<ul>
<li>一个表中可以有多个唯一键</li>
<li>唯一键与主键的区别在于唯一键允许数据为Null（而且Null的数量不限）</li>
<li>唯一键与主键一样，可以提升字段数据当做条件查询的效率（索引）</li>
<li>复合唯一键：多个字段共同组成<ul>
<li>unique key(字段1,字段2,…字段N)</li>
<li>一般不会出现，最多2个字段组成</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据列具有唯一特性</p>
<p>2、确定数据列不用作为主键</p>
<p>3、确定数据会经常用于检索条件</p>
<p>4、唯一键字段是否允许数据为空</p>
<ul>
<li>为空：普通唯一键</li>
<li>不为空：not null（唯一键与主键效果一样）</li>
</ul>
<p>5、使用唯一键</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、用户表：用户名唯一，而且经常作为查询条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_29(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    username varchar(50) unique comment &#39;唯一键，可以直接在字段之后增加，使用unique关键字&#39;,</span><br><span class="line">    password char(32) not null</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_29 values(null,&#39;username&#39;,&#39;password&#39;);</span><br><span class="line">insert into t_29 values(null,Null,&#39;password&#39;);</span><br><span class="line">insert into t_29 values(null,Null,&#39;password&#39;);</span><br><span class="line"></span><br><span class="line"># 错误</span><br><span class="line">insert into t_29 values(null,&#39;username&#39;,&#39;password1&#39;);</span><br></pre></td></tr></table></figure>



<p>2、学生成绩表：一个学生只能有一个学科成绩，但是可以有多个学科</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 学号和学科编号共同组成唯一</span><br><span class="line">create table t_30(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    stu_name varchar(20) not null,</span><br><span class="line">    course varchar(20) not null,</span><br><span class="line">    score decimal(5,2),</span><br><span class="line">    unique key(stu_name,course)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_30 values(null,&#39;Jim&#39;,&#39;Math&#39;,50);</span><br><span class="line">insert into t_30 values(null,&#39;Jim&#39;,&#39;English&#39;,80);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、唯一键的目标是保证对应字段数据的唯一性</p>
<ul>
<li>唯一键不限定数据是否为Null（Null不参与唯一判定）</li>
<li>复合唯一键：允许多个字段共同组成唯一性</li>
</ul>
<p>2、唯一键能够弥补主键只有一个的特性（不限定数据量）</p>
<p>3、唯一键使用的位置应该要确保该字段数据会用作数据检索条件</p>
<h3 id="9、唯一键管理"><a href="#9、唯一键管理" class="headerlink" title="9、唯一键管理"></a>9、唯一键管理</h3><p><strong>唯一键管理</strong>：在表创建后对唯一键的管理</p>
<ul>
<li>删除唯一键：一张表中不止一个唯一键，所以删除方式是相对麻烦：<code>alter table 表名 drop index 唯一键名字；</code></li>
<li>新增唯一键：<code>alter table 表名 add unique key(字段列表)；</code></li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、删除表中已有的唯一键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_30 drop index &#96;stu_name&#96;;</span><br></pre></td></tr></table></figure>



<p>2、追加唯一键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_30 add unique key &#96;stu_course&#96; (stu_name,course);</span><br></pre></td></tr></table></figure>

<ul>
<li>追加唯一键要保证字段里的数据具有唯一性</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、唯一键一般也会在前期架构（创建表）时就会设置好</p>
<p>2、如果在后期数据庞大后进行数据库优化，可能会涉及到后期维护唯一键</p>
<p>3、唯一键的删除不能像主键那样删除，原因就是唯一键在表中不是唯一存在的，必须指定唯一键名字</p>
<h3 id="10、comment属性"><a href="#10、comment属性" class="headerlink" title="10、comment属性"></a>10、comment属性</h3><p><strong>描述</strong>：comment，是用文字描述字段的作用的</p>
<ul>
<li>comment代表的内容是对字段的描述<ul>
<li>方便以后自己了解字段的作用</li>
<li>方便团队了解字段的作用</li>
</ul>
</li>
<li>描述如果涉及到字符集（中文）一定要在创建表之前设置好客户端字符集（否则会出现描述乱码）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、字段命名不是特别简单（见名知意）</p>
<p>2、使用comment增加简易描述</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>学生成绩表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 学生成绩表中通常是存储学生学号</span><br><span class="line"># 学科通常也是学科代码</span><br><span class="line">create table t_31(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    stu_no varchar(10) not null comment &#39;学号&#39;,</span><br><span class="line">    course_no varchar(10) not null comment &#39;课程号&#39;,</span><br><span class="line">    score decimal(5,2) comment &#39;考试成绩&#39;,</span><br><span class="line">    unique key &#96;stu_course&#96; (stu_no,course_no) comment &#39;学号和课程号组成唯一键&#39;</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要查看描述信息，需要使用show create table查看</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、养成描述的良好习惯，为自己也为其他同事提供方便</p>
<p>2、并非所有字段都需要描述，但是对于自定义名字或者关联关系，都应该使用描述说清楚</p>
<h3 id="11、总结"><a href="#11、总结" class="headerlink" title="11、总结"></a>11、总结</h3><p>1、字段属性是基于字段类型对数据控制后，再进行其他控制（辅助加强字段类型对数据的控制）</p>
<p>2、巧妙的利用好字段属性，能够帮助我们更好的保证数据的有效性、安全性</p>
<p>3、字段属性与字段类型通常是搭配使用，常见的属性有</p>
<ul>
<li>主键（逻辑）+自增长</li>
<li>唯一键+Not Null（Null数据不参与运算，没有价值）</li>
<li>默认值以及default关键字的使用</li>
</ul>
<h2 id="4-3-数据库记录长度"><a href="#4-3-数据库记录长度" class="headerlink" title="4.3 数据库记录长度"></a>4.3 数据库记录长度</h2><p><strong>数据库记录长度</strong>：MySQL中规定一条记录所占用的存储长度最长不超过65535个<strong>字节</strong></p>
<ul>
<li>记录长度为表中所有字段预计占用的长度之和</li>
<li>所有字段只有允许Null存在，系统就会预留一个字节存储Null（多个Null也只要一个就好）</li>
<li>因为MySQL记录长度的存在，varchar永远达不到理论长度<ul>
<li>GBK存储：65535（字符） * 2 + 2 = 131072（字节）</li>
<li>UTF8存储：65535（字符） * 3 + 2 = 196607（字节）</li>
</ul>
</li>
<li>一般数据长度超过255个字符都会使用text/blob进行存储（数据存储不占用记录长度）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、字符串字段如果超过长度255字符，使用text/blob替代</p>
<p>2、所有字段是否有允许为Null的，如果有要占用1个字节</p>
<p>3、计算字段所占用的预计总长度不要超过65535个字节</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、GBK表能存储的最大varchar字符串长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_32(</span><br><span class="line">    content varchar(65535)</span><br><span class="line">)charset gbk;	# 错误</span><br><span class="line"></span><br><span class="line">create table t_32(</span><br><span class="line">    content varchar(32767)</span><br><span class="line">)charset gbk;	# 错误</span><br><span class="line"></span><br><span class="line">create table t_32(</span><br><span class="line">    content varchar(32766)</span><br><span class="line">)charset gbk;	</span><br></pre></td></tr></table></figure>



<p>2、UTF8表能存储的最大varchar字符串长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_33(</span><br><span class="line">    content varchar(65535)</span><br><span class="line">)charset utf8;	# 错误</span><br><span class="line"></span><br><span class="line">create table t_33(</span><br><span class="line">    content varchar(21844)</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<p>3、Null也要占用一个字节</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_34(</span><br><span class="line">    id tinyint,</span><br><span class="line">    content varchar(21844)</span><br><span class="line">)charset utf8;	# 错误</span><br><span class="line"></span><br><span class="line">create table t_34(</span><br><span class="line">    id tinyint not null,</span><br><span class="line">    content varchar(21844) not null</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、MySQL的记录长度是从设定表的时候就会检查所有字段加起来的预占用长度是否超过65535个字节</p>
<ul>
<li>超过：创建失败</li>
<li>不超过：创建成功</li>
</ul>
<p>2、创建表字段的时候要使用text/blob来避免长字符串出现，超过MySQL记录长度</p>
<p>3、Null是个细节，一条记录只要允许出现Null就会占用记录长度里的一个字节</p>
<h1 id="5-MySQL数据库设计规范"><a href="#5-MySQL数据库设计规范" class="headerlink" title="5 MySQL数据库设计规范"></a>5 MySQL数据库设计规范</h1><h2 id="5-1-关系型数据库设计范式"><a href="#5-1-关系型数据库设计范式" class="headerlink" title="5.1 关系型数据库设计范式"></a>5.1 关系型数据库设计范式</h2><p><strong>范式</strong>：Normal Format，符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度</p>
<ul>
<li><p>范式是离散数学里的概念</p>
</li>
<li><p>范式目标是在满足组织和存储的前提下使数据结构冗余最小化 </p>
</li>
<li><p>范式级别越高，表的级别就越标准</p>
</li>
<li><p>目前数据库应用到的范式有以下几层</p>
<ul>
<li>第一范式：1NF</li>
<li>第二范式：2NF</li>
<li>第三范式：3NF</li>
<li>逆规范化</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、一张员工表</p>
<table>
<thead>
<tr>
<th>工号</th>
<th>姓名</th>
<th>部门</th>
<th>入职时间</th>
</tr>
</thead>
<tbody><tr>
<td>0001</td>
<td>杨戬</td>
<td>武装部</td>
<td>0001-01-01</td>
</tr>
<tr>
<td>0002</td>
<td>李白</td>
<td>书院部</td>
<td>1500-12-12</td>
</tr>
</tbody></table>
<p>2、每个员工都是与部门挂钩的，但是部门不可能很多，所以上述表中会有很多数据重复，此时应该将部门单独维护出来，减少数据冗余</p>
<table>
<thead>
<tr>
<th>部门编号</th>
<th>部门名称</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>武装部</td>
</tr>
<tr>
<td>2</td>
<td>书院部</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>工号</th>
<th>姓名</th>
<th>部门编号</th>
<th>入职时间</th>
</tr>
</thead>
<tbody><tr>
<td>0001</td>
<td>杨戬</td>
<td>1</td>
<td>0001-01-01</td>
</tr>
<tr>
<td>0002</td>
<td>李白</td>
<td>2</td>
<td>1500-12-12</td>
</tr>
</tbody></table>
<p><strong>N个1和N个武装部占用的磁盘空间肯定是不一样的</strong></p>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、范式是一种数学理论，在关系型数据库上用来减少数据冗余</p>
<p>2、满足的范式越多，越符合高标准表设计</p>
<p>3、范式一共有6层，但是数据库的设计通常只要求满足3层即可</p>
<h3 id="1、第一范式1NF"><a href="#1、第一范式1NF" class="headerlink" title="1、第一范式1NF"></a>1、第一范式1NF</h3><p><strong>第一范式</strong>：1NF，数据字段设计时必须满足<strong>原子性</strong></p>
<ul>
<li>1NF要求字段数据是不需要拆分就可以直接应用</li>
<li>如果数据使用的时候需要进行拆分那么就违背1NF</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、设计的字段是否在使用的时候还需要再拆分？</p>
<p>2、将数据拆分到最小单位（使用），然后设计成字段</p>
<p>3、满足1NF</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、设计一张学生选修课成绩表</p>
<table>
<thead>
<tr>
<th>学生</th>
<th>性别</th>
<th>课程</th>
<th>教室</th>
<th>成绩</th>
<th>学习时间</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>PHP</td>
<td>101</td>
<td>100</td>
<td>2月1日,2月28日</td>
</tr>
<tr>
<td>李四</td>
<td>女</td>
<td>Java</td>
<td>102</td>
<td>90</td>
<td>3月1日,3月31日</td>
</tr>
<tr>
<td>张三</td>
<td>男</td>
<td>Java</td>
<td>102</td>
<td>95</td>
<td>3月1日,3月31日</td>
</tr>
</tbody></table>
<p>当前表的学习时间在使用的时候肯定是基于开始时间和结束时间的，而这种设计就会存在使用时的数据拆分，不满足原子性也就是1NF</p>
<p>2、满足1NF的设计：字段颗粒度应用层最小（不需要拆分）</p>
<table>
<thead>
<tr>
<th>学生</th>
<th>性别</th>
<th>课程</th>
<th>教室</th>
<th>成绩</th>
<th>开始时间</th>
<th>结束时间</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>PHP</td>
<td>101</td>
<td>100</td>
<td>2月1日</td>
<td>2月28日</td>
</tr>
<tr>
<td>李四</td>
<td>女</td>
<td>Java</td>
<td>102</td>
<td>90</td>
<td>3月1日</td>
<td>3月31日</td>
</tr>
<tr>
<td>张三</td>
<td>男</td>
<td>Java</td>
<td>102</td>
<td>95</td>
<td>3月1日</td>
<td>3月31日</td>
</tr>
</tbody></table>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、1NF就是要字段数据颗粒度最小，保证数据取出来使用的时候不用再拆分</p>
<p>2、1NF是满足数据表设计的最基础规范</p>
<h3 id="2、第二范式2NF"><a href="#2、第二范式2NF" class="headerlink" title="2、第二范式2NF"></a>2、第二范式2NF</h3><p><strong>第二范式</strong>：2NF，字段设计不能存在部分依赖</p>
<ul>
<li>部分依赖：首先表存在复合主键，其次有的字段不是依赖整个主键，而只是依赖主键中的一部分</li>
<li>部分依赖解决：让所有非主属性都依赖一个候选关键字<ul>
<li>最简单方式：取消复合主键（一般选用逻辑主键替代，但是本质依然是复合主键做主），所有非主属性都依赖主属性（逻辑主键）</li>
<li>正确方式：将部分依赖关系独立成表</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、表中是否存在复合主键？</p>
<p>2、其他字段是否存在依赖主键中的一部分？</p>
<p>3、如果存在部分依赖，将部分依赖的关系独立拆分成表</p>
<p>4、满足2NF</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、学生成绩表中学生和课程应该是决定性关系，因此属于主属性（主键）</p>
<table>
<thead>
<tr>
<th>学生（P）</th>
<th>性别</th>
<th>课程（P）</th>
<th>教室</th>
<th>成绩</th>
<th>开始时间</th>
<th>结束时间</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>PHP</td>
<td>101</td>
<td>100</td>
<td>2月1日</td>
<td>2月28日</td>
</tr>
<tr>
<td>李四</td>
<td>女</td>
<td>Java</td>
<td>102</td>
<td>90</td>
<td>3月1日</td>
<td>3月31日</td>
</tr>
<tr>
<td>张三</td>
<td>男</td>
<td>Java</td>
<td>102</td>
<td>95</td>
<td>3月1日</td>
<td>3月31日</td>
</tr>
</tbody></table>
<ul>
<li>成绩是由学生和课程决定的，是完全依赖主属性</li>
<li>性别只依赖学生（部分依赖）</li>
<li>教室、开始时间和结束时间依赖课程（部分依赖）</li>
</ul>
<p>2、解决方案：将学生信息维护到一张表，课程信息维护到一张表，成绩表取两个表的主属性即可</p>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th>Stu_id（P）</th>
<th>姓名</th>
<th>性别</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>女</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Stu_id是姓名的代指属性（逻辑主键，本质主键是姓名）</li>
<li>性别只依赖主属性</li>
</ul>
<p><strong>课程表</strong></p>
<table>
<thead>
<tr>
<th>Class_id（P）</th>
<th>课程</th>
<th>教室</th>
<th>开始时间</th>
<th>结束时间</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>PHP</td>
<td>101</td>
<td>2月1日</td>
<td>2月28日</td>
</tr>
<tr>
<td>2</td>
<td>Java</td>
<td>102</td>
<td>3月1日</td>
<td>3月31日</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Class_id是课程的代指属性（逻辑主键）</li>
<li>教室、开始时间和结束时间都依赖课程（主属性）</li>
</ul>
<p><strong>成绩表</strong></p>
<table>
<thead>
<tr>
<th>Stu_id（P）</th>
<th>Class_id（P）</th>
<th>成绩</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>100</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>90</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>95</td>
</tr>
</tbody></table>
<ul>
<li>Stu_id和Class_id共同组成主属性（复合主键）</li>
<li>成绩依赖Stu_id和Class_id本身，不存在部分依赖</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、2NF是在满足1NF的前提之上的</p>
<p>2、2NF的目标是取消表中存在的部分依赖</p>
<ul>
<li>主属性（主键）为复合主键才有可能存在</li>
<li>解决方案就是让部分依赖存在的关系独立成表（学生表和课程表），不存在部分依赖关系的独立成表（学生成绩表）</li>
</ul>
<p>3、2NF可以实现很大程度的数据冗余减少</p>
<h3 id="3、第三范式3NF"><a href="#3、第三范式3NF" class="headerlink" title="3、第三范式3NF"></a>3、第三范式3NF</h3><p><strong>第三范式</strong>：3NF，字段设计不能存在传递依赖</p>
<ul>
<li>传递依赖：字段某个非主属性不直接依赖主属性，而是通过依赖某个其他非主属性而传递到主属性之上</li>
<li>传递依赖解决：让依赖非主属性的字段与依赖字段独立成表</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定表中的所有字段都是依赖主属性的</p>
<p>2、如果存在不直接依赖主属性，而是通过依赖其他属性产生依赖的，形成独立的表</p>
<p>3、满足3NF</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、学生表：包括所在系信息</p>
<table>
<thead>
<tr>
<th>学号（P）</th>
<th>姓名</th>
<th>专业编号</th>
<th>专业名字</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>0001001</td>
<td>软件工程</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>0001002</td>
<td>土木工程</td>
</tr>
</tbody></table>
<ul>
<li>姓名和专业编号都依赖于学号（为学号提供信息支持）</li>
<li>专业名字依赖专业编号（为编号提供信息支持）</li>
<li>专业名字间接依赖学号：传递依赖</li>
<li>随着学生增加，专业名字会出现大量数据冗余</li>
</ul>
<p>2、解决方案：将存储传递依赖部分的字段（非主属性）独立成表，然后在需要使用相关信息的时候，引入即可</p>
<p><strong>专业表</strong></p>
<table>
<thead>
<tr>
<th>专业编号（P）</th>
<th>专业名字</th>
</tr>
</thead>
<tbody><tr>
<td>0001001</td>
<td>软件工程</td>
</tr>
<tr>
<td>0001002</td>
<td>土木工程</td>
</tr>
</tbody></table>
<ul>
<li>即使有更多的信息为专业提供支持也不存在传递关系</li>
</ul>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th>学号（P）</th>
<th>姓名</th>
<th>专业编号</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>0001001</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>0001002</td>
</tr>
</tbody></table>
<ul>
<li>姓名和专业编号都依赖学号（为学号提供信息支持）</li>
<li>没有其他字段是通过非主属性（专业编号）来依赖主属性的：没有传递依赖</li>
<li>学生再多，专业名字信息只需要维护一次，减少数据冗余</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、3NF目的是为了解决非主属性对主属性的传递依赖</p>
<p>2、让有关联关系的表独立成表就可以消除传递依赖，满足3NF</p>
<h3 id="4、逆规范化"><a href="#4、逆规范化" class="headerlink" title="4、逆规范化"></a>4、逆规范化</h3><p><strong>逆规范化</strong>：为了<strong>提升数据查询的效率</strong>而<strong>刻意违背范式的规则</strong></p>
<ul>
<li>逆规范化的目标是为了提升数据访问效率</li>
<li>所谓逆规范化就是减少表之间的关联查询（效率降低），刻意增加数据冗余</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、表中部分数据来源于其他表（通常只需要其他表的某个简单数据）</p>
<p>2、当前表会被<strong>高频次查询</strong></p>
<p>3、数据表<strong>数据量很大</strong></p>
<p>4、考虑使用逆规范化</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、学生成绩表需要经常查询，而且数据量很大，但是：</p>
<ul>
<li>成绩表中只有学号，显示的时候需要学生姓名（去学生表中连表查询）</li>
<li>成表表中只有课程号，显示的时候需要显示课程名（去课程表中连表查询）</li>
<li>逆规范化：将学生姓名和课程名在表中冗余维护（不满足2NF）</li>
</ul>
<table>
<thead>
<tr>
<th>学号（P）</th>
<th>学生姓名</th>
<th>课程号（P）</th>
<th>课程名字</th>
<th>成绩</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1</td>
<td>PHP</td>
<td>100</td>
</tr>
<tr>
<td>1</td>
<td>张三</td>
<td>2</td>
<td>Java</td>
<td>90</td>
</tr>
</tbody></table>
<ul>
<li>学生姓名部分依赖学号（主属性）：不满足2NF</li>
<li>学生姓名和课程名字会有大量数据冗余存在（不满足2NF导致）</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、逆规范化只有在数据量大，查询效率低下的时候为了提升查询效率而牺牲磁盘空间的一种做法</p>
<p>2、逆规范化后数据表的设计必然是不完全符合范式要求的（2NF/3NF）</p>
<h3 id="5、总结-2"><a href="#5、总结-2" class="headerlink" title="5、总结"></a>5、总结</h3><p>1、范式是关系型数据库设计借鉴用来<strong>减少数据冗余</strong>的</p>
<ul>
<li>1NF：数据字段的原子性，增强数据的可用性</li>
<li>2NF：取消字段的部分依赖，建立数据的关联性，减少数据冗余</li>
<li>3NF：取消字段的传递依赖，将相关实体独立划分，减少数据冗余</li>
<li>逆规范化：为了提升数据访问效率，刻意增加数据冗余（磁盘空间利用率与访问效率的矛盾）</li>
</ul>
<p>2、在进行数据表设计的时候，需要严格遵循范式规范</p>
<ul>
<li>基于规范设计数据表</li>
<li>在设计表中深入认知范式规范</li>
<li>熟练的基于业务设计数据表</li>
</ul>
<h2 id="5-2-表关系"><a href="#5-2-表关系" class="headerlink" title="5.2 表关系"></a>5.2 表关系</h2><p><strong>表关系</strong>：一个表代表一个实体，实体之间都有关联关系的</p>
<ul>
<li>根据范式的要求来设计表关系，减少数据冗余</li>
<li>根据实际需求来设计表关系，提升访问效率</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>设计一个简单新闻管理系统的数据库</p>
<ul>
<li><p>新闻信息表：id、标题、内容、发布时间、作者id（作者表主属性）、分类id（分类表主属性）、阅读量、推荐数</p>
</li>
<li><p>作者表：id、作者名字、作者来源id（来源表）</p>
</li>
<li><p>来源表：id、来源名字、来源描述</p>
</li>
<li><p>分类表：id、分类名字、分类级别（父分类id）</p>
</li>
<li><p>评论表：id、评论人id（评论表）、评论时间、评论内容（不回复）</p>
</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、表关系是体现数据实际联系的方式</p>
<p>2、表关系的设计好坏直接关联数据维护的准确性、有效性</p>
<p>3、良好的数据库设计有助于后期程序开发</p>
<h3 id="1、一对一关系"><a href="#1、一对一关系" class="headerlink" title="1、一对一关系"></a>1、一对一关系</h3><p><strong>一对一关系</strong>：一张表中的一条记录与另外一张表中有且仅有一条记录有关系</p>
<ul>
<li>一对一关系通常是用来将一张原本就是一体的表拆分成两张表<ul>
<li>频繁使用部分：常用字段</li>
<li>不常使用部分：生僻字段</li>
<li>使用相同的主键对应</li>
</ul>
</li>
<li>一对一关系设计较多使用在优化方面</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、一张表的数据字段较多且数据量较大</p>
<p>2、表中有部分字段使用频次较高，而另一部分较少使用</p>
<p>3、将常用字段和不常用字段拆分成两张表，使用同样的主键对应</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、学生信息表</p>
<table>
<thead>
<tr>
<th>学号（P）</th>
<th>姓名</th>
<th>性别</th>
<th>年龄</th>
<th>身高</th>
<th>体重</th>
<th>籍贯</th>
<th>政治面貌</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张飞</td>
<td>男</td>
<td>20</td>
<td>178</td>
<td>160</td>
<td>蜀</td>
<td>农民</td>
</tr>
<tr>
<td>2</td>
<td>武则天</td>
<td>女</td>
<td>21</td>
<td>168</td>
<td>110</td>
<td>唐</td>
<td>党员</td>
</tr>
</tbody></table>
<ul>
<li>以上数据表信息字段较多</li>
<li>姓名、性别、年龄属于常用字段，频繁查询</li>
</ul>
<p>2、一对一关系设计</p>
<ul>
<li>将常用字段取出，与学号组合成一张常用表</li>
<li>将不常用字段取出，与学号组合成一张不常用表</li>
<li>表与表数据对应关系：基于学号（唯一）是一对一关系</li>
</ul>
<p><strong>常用表</strong></p>
<table>
<thead>
<tr>
<th>学号（P）</th>
<th>姓名</th>
<th>性别</th>
<th>年龄</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张飞</td>
<td>男</td>
<td>20</td>
</tr>
<tr>
<td>2</td>
<td>武则天</td>
<td>女</td>
<td>21</td>
</tr>
</tbody></table>
<p><strong>不常用表</strong></p>
<table>
<thead>
<tr>
<th>学号（P）</th>
<th>身高</th>
<th>体重</th>
<th>籍贯</th>
<th>政治面貌</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>178</td>
<td>160</td>
<td>蜀</td>
<td>农民</td>
</tr>
<tr>
<td>2</td>
<td>168</td>
<td>110</td>
<td>唐</td>
<td>党员</td>
</tr>
</tbody></table>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、一对一关系的核心是两张表中记录匹配有且仅有一条匹配</p>
<p>2、一对一关系常用来进行分表，实现优化操作</p>
<p>3、因为一对一关系表通常有相同信息作为匹配条件，所以查询方式也比较方便</p>
<ul>
<li>连表操作：利用共有信息进行匹配，一并查出一条完整信息</li>
<li>多次查询：利用共有信息进行多表查询，利用程序组合成一条完整信息</li>
</ul>
<h3 id="2、一对多关系"><a href="#2、一对多关系" class="headerlink" title="2、一对多关系"></a>2、一对多关系</h3><p><strong>一对多关系</strong>：也叫多对一关系，一张表中的一条记录与另外一张表的多条记录对应，反过来另外一张表的多条记录只能对应当前表的一条记录</p>
<ul>
<li>一对多关系是实体中非常常见的一种关系，实体设计时也应用非常多</li>
<li>一对多关系的核心解决方案是如何让记录能够正确匹配到另外表中的数据<ul>
<li>一表设计：一表记录在另外一张表中有多条记录，所以无法记录多个字段（违背1NF）</li>
<li>多表设计：多表记录在另外一张表中只有一条记录，可以设置字段记录对应的主属性（通常主键）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定实体间的关系为一对多（多对一）关系</p>
<p>2、在多表中增加一个字段记录一表中对应的主属性</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、老师与学科间的关系：一个老师只能教一个学科，但是一个学科有多个老师教授，学科与老师形成的关系就是一对多（反过来老师与学科的关系就是多对一关系）</p>
<p><strong>老师表</strong>（多表）</p>
<table>
<thead>
<tr>
<th>老师ID（P）</th>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张老师</td>
<td>35</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>李老师</td>
<td>34</td>
<td>女</td>
</tr>
<tr>
<td>3</td>
<td>王老师</td>
<td>30</td>
<td>男</td>
</tr>
</tbody></table>
<p><strong>学科表</strong>（一表）</p>
<table>
<thead>
<tr>
<th>学科ID（P）</th>
<th>名字</th>
<th>课时长度</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>PHP</td>
<td>600</td>
</tr>
<tr>
<td>2</td>
<td>Java</td>
<td>800</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>以上两个实体没有体现彼此之间的关联关系</li>
<li>实际上讲师与学科肯定是有关联的</li>
</ul>
<p>2、在多表（讲师）中增加字段维护一表（学科）的关系型，形成多对一关系</p>
<table>
<thead>
<tr>
<th>老师ID（P）</th>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
<th>学科ID</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>35</td>
<td>男</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>李四</td>
<td>34</td>
<td>女</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>王五</td>
<td>30</td>
<td>男</td>
<td>2</td>
</tr>
</tbody></table>
<ul>
<li>基于新的讲师表与学科表产生了关联关系（多对一）</li>
<li>基于讲师表可以知道讲师所属学科</li>
<li>基于学科ID可以统计出不同学科的讲师数量</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、一对多关系设计是将实体的关系在表结构层进行强制关联（没有关系程序层也可以控制，但是会非常麻烦）</p>
<ul>
<li>便于连表操作</li>
<li>便于数据分析统计（数据库层）</li>
</ul>
<p>2、一对多关系的核心在于分析出表与表之间的关系</p>
<h3 id="3、多对多关系"><a href="#3、多对多关系" class="headerlink" title="3、多对多关系"></a>3、多对多关系</h3><p><strong>多对多关系</strong>：一张表中的一条记录对应另外一个表中多条记录，反过来一样</p>
<ul>
<li>多对多关系在实体中是最常见的关系</li>
<li>多对多关系是无法在自身表中维护对应表关系的（违背1NF），需要通过第三方表来实现将多对多关系变成多个多对一关系<ul>
<li>设计一个中间表：记录两张表之间的对应关系（主属性）</li>
<li>中间表与其他表都是多对一的关系</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定实体间的关系为多对多关系</p>
<p>2、设计中间表，记录两张表的对应关系</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、老师与学生之间的关系：一个老师会教授多个学生，一个学生也会听多个老师的课，所以实体关系是多对多关系</p>
<p><strong>老师表</strong></p>
<table>
<thead>
<tr>
<th>老师ID（P）</th>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张老师</td>
<td>35</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>李老师</td>
<td>34</td>
<td>女</td>
</tr>
<tr>
<td>3</td>
<td>王老师</td>
<td>30</td>
<td>男</td>
</tr>
</tbody></table>
<p><strong>学生表</strong></p>
<table>
<thead>
<tr>
<th>学生ID（P）</th>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小明</td>
<td>15</td>
<td>男</td>
</tr>
<tr>
<td>2</td>
<td>小红</td>
<td>14</td>
<td>女</td>
</tr>
<tr>
<td>3</td>
<td>小萌</td>
<td>14</td>
<td>女</td>
</tr>
</tbody></table>
<ul>
<li>以上实体没有从结构上体现表之间的关系</li>
</ul>
<p>2、设计一个中间表：老师与学生关系表，将老师与学生的对应关系对应上（多对一）</p>
<p><strong>中间表</strong></p>
<table>
<thead>
<tr>
<th>ID（P）</th>
<th>学生ID</th>
<th>老师ID</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td>3</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>3</td>
<td>3</td>
</tr>
</tbody></table>
<ul>
<li>中间表与老师表的对应关系是多对一：通过老师ID可以找到每一个上过课的老师</li>
<li>中间表与学生表的对应关系是多对一：通过学生ID可以找到每一个听过课的学生</li>
<li>老师找学生：老师表–》中间表（找出老师对应的学生ID）–》学生表（找出学生ID对应的学生信息）</li>
<li>学生找老师：学生表–》中间表（找出学生对应的老师ID）–》老师表（找出老师ID对应的老师信息）</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、多对多关系在表上不能直接维护（字段设计违背1NF）</p>
<p>2、多对多关系是将关系抽离形成中间关系表，形成多个多对一的关系</p>
<p>3、多对多关系是否建立主要看业务上是否存在数据要求，如果不存在数据需求，那么就没必要刻意设计</p>
<h3 id="4、总结-1"><a href="#4、总结-1" class="headerlink" title="4、总结"></a>4、总结</h3><p>1、表关系的设计是要遵循范式规范作为前提</p>
<p>2、表关系的设计是根据实体关系以及业务需求进行设计</p>
<ul>
<li>一对一关系：主要在于优化访问效率、传输效率</li>
<li>一对多关系：在于如何让实体间的联系在结构中体现（后期可以使用外键进行相关约束保证数据的有效性）</li>
<li>多对多关系：与一对多关系一样，清晰明了的体现实体间的结构联系</li>
</ul>
<p>3、在设计数据库的时候，要严格使用表关系来进行实体关联设计</p>
<ul>
<li>基于表关系来实现实体间的关联控制</li>
<li>在设计和应用表的时候提炼对表关系的认知</li>
<li>能够熟练的基于业务控制数据库的关系</li>
</ul>
<h1 id="6-MySQL高级SQL操作"><a href="#6-MySQL高级SQL操作" class="headerlink" title="6 MySQL高级SQL操作"></a>6 MySQL高级SQL操作</h1><p><strong>高级SQL操作</strong>：利用SQL指令的变化实现一些复杂业务的数据操作</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、统计不同班级的人数信息</p>
<ul>
<li><p>按照现有SQL操作，即便数据表已经存在数据，但是我们也无法通过SQL实现，只能取出来后通过其他代码对数据进行加工实现</p>
</li>
<li><p>通过高级SQL学习，我们就可以通过一条SQL指令完成操作</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),班级ID from 学生表 group by 班级ID;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、高级SQL操作能够帮助我们解决复杂的需求问题</p>
<p>2、在实际开发过程中，高级SQL操作占据的比例相当高</p>
<h2 id="6-1-数据新增"><a href="#6-1-数据新增" class="headerlink" title="6.1 数据新增"></a>6.1 数据新增</h2><h3 id="1、批量插入"><a href="#1、批量插入" class="headerlink" title="1、批量插入"></a>1、批量插入</h3><p><strong>批量插入</strong>：是一种优化数据逐条插入的方式</p>
<ul>
<li><p>批量插入数据的语法与简单数据插入的语法差不多</p>
</li>
<li><p>批量插入分为两种</p>
<ul>
<li>全字段批量插入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名 values(值列表1),(值列表2),...(值列表N);</span><br></pre></td></tr></table></figure>

<ul>
<li>部分字段批量插入（注意字段默认值）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名 (字段列表) values (值列表1),(值列表2),...(值列表N);</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、用户的操作涉及到多记录同时插入（通常数据批量导入）</p>
<p>2、组装成批量插入SQL指令</p>
<ul>
<li>字段为全字段（逻辑主键不存在没问题）：全字段批量插入SQL</li>
<li>部分字段：组织字段列表并检查其他字段是否允许默认值</li>
</ul>
<p>3、执行批量插入</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、批量插入学生成绩（t_30全字段）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_30 values(null,&#39;Tom&#39;,&#39;Computer&#39;,90),</span><br><span class="line">(null,&#39;Lily&#39;,&#39;Computer&#39;,92);</span><br></pre></td></tr></table></figure>



<p>2、批量插入学生考试信息（t_30不包含成绩）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_30 (stu_name,course) values(&#39;Tony&#39;,&#39;English&#39;),(&#39;Ray&#39;,&#39;Math&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、批量插入可以针对性解决数据的批量导入之类的业务</p>
<p>2、批量插入可以一次性解决多条数据插入，能够有效降低客户端占用问题，提升数据操作效率</p>
<ul>
<li>MySQL8以后默认有事务安全，即批量要么都成功要么都失败，不会出现部分问题</li>
</ul>
<h3 id="2、蠕虫复制"><a href="#2、蠕虫复制" class="headerlink" title="2、蠕虫复制"></a>2、蠕虫复制</h3><p><strong>蠕虫复制</strong>：从已有表中复制数据直接插入到另外一张表（同一张表）</p>
<ul>
<li>蠕虫复制的目标是<strong>快速增加表中的数据</strong><ul>
<li>实现表中数据复制（用于数据备份或者迁移）</li>
<li>实现数据的指数级递增（多用于测试）</li>
</ul>
</li>
<li>蠕虫复制语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名 [(字段列表)] select 字段列表 from 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意事项<ul>
<li>字段列表必须对应上</li>
<li>字段类型必须匹配上</li>
<li>数据冲突需要事先考虑</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定一张需要插入数据的表（一般与要蠕虫复制数据的表结构一致）</p>
<p>2、确定数据的来源表</p>
<ul>
<li>字段数量匹配</li>
<li>字段类型匹配</li>
<li>所选字段不存在冲突（数据可能是重复数据）</li>
</ul>
<p>3、使用蠕虫复制</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建一张新表，将t_30表中的数据迁移到新表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_35(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    stu_name varchar(20) not null,</span><br><span class="line">    course varchar(20) not null,</span><br><span class="line">    score decimal(5,2)</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_35 select * from t_30;</span><br></pre></td></tr></table></figure>



<p>2、快速让t_35表中的数据达到超过100条（重复执行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_35 (stu_name,course,score) select stu_name,course,score from t_35;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、蠕虫复制的目标就是批量利用已有数据来丰富表数据</p>
<ul>
<li>数据迁移：一次性复制表数据</li>
<li>数据增长：重复执行自我复制增长（数据测试使用）</li>
</ul>
<h3 id="3、主键冲突"><a href="#3、主键冲突" class="headerlink" title="3、主键冲突"></a>3、主键冲突</h3><p><strong>主键冲突</strong>：在数据进行插入时包含主键指定，而主键在数据表已经存在</p>
<ul>
<li><p>主键冲突的业务通常是发生在业务主键上（业务主键本身有业务意义）</p>
</li>
<li><p>主键冲突的解决方案</p>
<ul>
<li>忽略冲突：保留原始记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert ignore into 表名 [(字段列表)] values(值列表);</span><br></pre></td></tr></table></figure>

<ul>
<li>冲突更新：冲突后部分字段变成更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名 [(字段列表)] values(值列表) on duplicate key update 字段 &#x3D; 新值[,字段&#x3D;新值...];</span><br><span class="line"># 1、尝试新增</span><br><span class="line"># 2、更新</span><br></pre></td></tr></table></figure>

<ul>
<li>冲突替换：先删除原有记录，后新增记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace into 表名 [(字段列表)] values(值列表); # 效率没有insert高（需要检查是否冲突）</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定当前业务可能存在主键冲突</p>
<p>2、选择主键冲突的解决方案</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、用户名作为主键的用户注册（冲突不能覆盖）：username，password，regtime</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_36(</span><br><span class="line">    username varchar(50) primary key,</span><br><span class="line">    password char(32) not null,</span><br><span class="line">    regtime int unsigned not null</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_36 values(&#39;username&#39;,&#39;password&#39;,12345678);</span><br><span class="line"># 冲突忽略</span><br><span class="line">insert ignore into t_36 values(&#39;username&#39;,&#39;12345678&#39;,12345678);</span><br></pre></td></tr></table></figure>



<p>2、用户名作为主键的记录用户使用信息（不存在新增、存在则更新时间）：username，logintime</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_37(</span><br><span class="line">    username varchar(50) primary key,</span><br><span class="line">    logintime int unsigned</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_37 values(&#39;username&#39;,12345678);	# 当前时间戳</span><br><span class="line"></span><br><span class="line"># 冲突更新（替换部分字段数据）</span><br><span class="line">insert into t_37 values(&#39;username&#39;,12345678) on duplicate key update logintime &#x3D; unix_timestamp();	# 当前时间戳</span><br></pre></td></tr></table></figure>

<ul>
<li>如果主键不冲突：新增</li>
<li>如果主键冲突：更新指定字段</li>
<li>上述方式适用于字段较多，但是可能冲突时数据变化的字段较少</li>
</ul>
<p>3、用户名作为主键的记录用户使用信息（不存在新增、存在则更新全部）：username，logintime、clientinfo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_38(</span><br><span class="line">    username varchar(50) primary key,</span><br><span class="line">    logintime int unsigned,</span><br><span class="line">    clientinfo varchar(255) not null</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_38 values(&#39;username&#39;,unix_timestamp(),&#39;&#123;PC:chrome&#125;&#39;);</span><br><span class="line"></span><br><span class="line"># 替换插入</span><br><span class="line">replace into t_38 values(&#39;username&#39;,unix_timestamp(),&#39;&#123;phone:uc&#125;&#39;);</span><br></pre></td></tr></table></figure>

<ul>
<li>replace遇到主键重复就会先删除、后新增</li>
<li>如果有较多字段需要更新：建议使用替换</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、主键冲突的解决方案有三种，但是需要根据具体的业务来选择合适的方式</p>
<ul>
<li>忽略新数据：<code>insert ignore</code></li>
<li>更新部分数据：<code>insert ... on duplicate key update</code></li>
<li>全部替换：<code>replace into</code></li>
</ul>
<p>2、从效率上来讲，<code>insert into</code>不考虑冲突的效率最高，三种解决冲突的方式都会有效率下降（需要检索），其中三种本身的效率依次是：忽略新数据 &gt; 更新部分数据 &gt; 替换全部</p>
<h2 id="6-2-数据查询"><a href="#6-2-数据查询" class="headerlink" title="6.2 数据查询"></a>6.2 数据查询</h2><blockquote>
<p>小结</p>
</blockquote>
<p>1、数量掌握高级数据查询后，以前需要多次操作的业务基本都可以通过一些复杂SQL的编写实现一次性进行数据筛选提炼，从而达到一次性解决问题的要求</p>
<h3 id="1、查询选项"><a href="#1、查询选项" class="headerlink" title="1、查询选项"></a>1、查询选项</h3><p><strong>查询选项</strong>：用于对查询结果进行<strong>简单数据筛选</strong></p>
<ul>
<li>查询选项是在select关键字之后，有两个互斥值<ul>
<li>all：默认，表示保留所有记录</li>
<li>distinct：去重，重复的记录（所有字段都重复）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、查询的结果需要去除重复记录</p>
<p>2、使用distinct查询选项去重（默认就是all保留全部）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>查看商品表中所有品类的商品信息：重复的商品只保留一次（名字、价格、属性都一致）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_39(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    goods_name varchar(50) not null,</span><br><span class="line">    goods_price decimal(10,2) default 0.00,</span><br><span class="line">    goods_color varchar(20),</span><br><span class="line">    goods_weight int unsigned comment &#39;重量，单位克&#39;</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_39 values(null,&#39;mate10&#39;,5499.00,&#39;blue&#39;,320),</span><br><span class="line">(null,&#39;mate10&#39;,5499.00,&#39;gray&#39;,320),</span><br><span class="line">(null,&#39;nokia3301&#39;,1299,&#39;black&#39;,420);</span><br><span class="line"></span><br><span class="line"># 考虑所有字段的去重（不含逻辑主键）</span><br><span class="line">select distinct goods_name,goods_price,goods_color,goods_weight from t_39;</span><br><span class="line">select goods_name,goods_price,goods_color,goods_weight from t_39; # 保留所有</span><br><span class="line"></span><br><span class="line"># 不考虑颜色去重</span><br><span class="line">select distinct goods_name,goods_price,goods_weight from t_39;</span><br><span class="line">select all goods_name,goods_price,goods_weight from t_39;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、select选项主要是用来进行数据全保留或者去重选择的</p>
<ul>
<li>all：默认，保留全部（关键字可以没有）</li>
<li>distinct：手动选择，去重（针对所选字段构成的记录，而不是某个字段）</li>
</ul>
<p>2、distinct选项一般用于制作数据报表时使用</p>
<h3 id="2、字段选择-amp-别名"><a href="#2、字段选择-amp-别名" class="headerlink" title="2、字段选择&amp;别名"></a>2、字段选择&amp;别名</h3><p><strong>字段选择</strong>：根据实际需求选择的要获取数据的字段信息</p>
<ul>
<li>根据实际需求，明确所需要的字段名字，使用英文逗号<code>,</code>分隔</li>
<li>获取所有字段，使用星号<code>*</code>通配所有字段</li>
<li>字段数据可以不一定是来自数据源（select只要有结果即可）<ul>
<li>数据常量：<code>select 1</code></li>
<li>函数或者变量：<code>select unix_timestamp(),@@version</code> （@@是系统变量的前缀，后面跟变量名）</li>
</ul>
</li>
</ul>
<p><strong>字段别名</strong>：给字段取的临时名字</p>
<ul>
<li>字段别名使用as语法实现<ul>
<li>字段名 as 别名</li>
<li>字段名 别名</li>
</ul>
</li>
<li>字段别名的目的通常为了保护数据<ul>
<li>字段冲突：多张表同时操作有同名字段（系统默认覆盖），想保留全部</li>
<li>数据安全：对外提供数据不使用真实字段名字</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、明确需要查询的字段信息</p>
<ul>
<li>全部：<code>*</code></li>
<li>部分：确定字段列表</li>
</ul>
<p>2、确定存在数据冲突或者需要数据保护（通常可以理解为对外提供给别的系统访问）</p>
<ul>
<li>使用别名</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查询商品信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 全部查询</span><br><span class="line">select * from t_39;</span><br><span class="line"></span><br><span class="line"># 需求为商品名字和价格</span><br><span class="line">select goods_name,goods_price from t_39;</span><br><span class="line"></span><br><span class="line"># 别名使用</span><br><span class="line">select goods_name as gn,goods_price gp from t_39;</span><br></pre></td></tr></table></figure>

<p>2、不需要数据源的数据获取：select的表达式本身能算出结果）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取当前时间戳和版本号</span><br><span class="line">select unix_timestamp() as now,@@version as version,@@version;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、字段的选择只要在保证数据需求能实现的情况下，尽可能少使用<code>*</code>代替（MySQL优化）</p>
<ul>
<li>减少服务器的数据读取压力</li>
<li>减少网络传输压力</li>
<li>让客户端能够精确解析数据（不用大海捞针）</li>
</ul>
<p>2、字段别名的灵活使用一方面可以保证原始数据的安全，也可以为数据使用者提供便利</p>
<ul>
<li>同名字段覆盖问题（连表操作学习时会遇到）</li>
<li>原始字段保护</li>
<li>数据字段的简化</li>
</ul>
<p>3、select是SQL中用于取出数据的一种指令，这种指令未必一定需要从数据表取出数据，只要是本身能够有数据的表达式，都可以使用select获取</p>
<h3 id="3、数据源"><a href="#3、数据源" class="headerlink" title="3、数据源"></a>3、数据源</h3><p><strong>数据源</strong>：from关键字之后，数据的来源。只要最终结果是一个二维表，都可以当做数据源</p>
<ul>
<li>单表数据源：数据源就是一张表  <code>from 表名</code></li>
<li>多表数据源：数据来源是多张表（逗号分隔） <code>from  表名1,表名2,...表名N</code></li>
<li>子查询数据源：数据来源是一个查询结果 <code>from (select 字段列表 from 表名) as 别名</code><ul>
<li>数据源要求必须是一个<code>表</code></li>
<li>如果是查询结果必须给起一个表别名</li>
</ul>
</li>
<li>数据表也可以指定别名<ul>
<li>表名 as 别名</li>
<li>表名 别名</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、单表数据源：最简单的数据源，直接从一个数据表获取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_27;</span><br></pre></td></tr></table></figure>

<p>2、多表数据源：利用一张表的一条数据匹配另外一张表的所有记录，记录结果为：记录数 = 表1记录数 * 表2记录数；字段数 = 表1字段数 + 表2字段数（笛卡尔积）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_27,t_30;</span><br></pre></td></tr></table></figure>

<p>3、子查询数据源：数据来源是一个select对应的查询结果</p>
<ul>
<li>查询语句需要使用括号包裹</li>
<li>查询结果需要指定别名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from (select * from t_27,t_30) t; # 数据有冲突查不出来</span><br><span class="line">select * from (select * from t_27) as t;</span><br></pre></td></tr></table></figure>

<p>4、如果有时候名字较长或者使用不方便，可以利用表别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_30 as t;</span><br><span class="line"></span><br><span class="line">select t1.*,t2.stu_name from t_27 as t1,t_30 t2;</span><br></pre></td></tr></table></figure>

<ul>
<li>一般情况下别名设置是为了后续条件中可以直接使用别名</li>
<li>如果多表操作下，可以使用表别名来明确提取表字段</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据源是为查询、检索提供数据支持的，使用时需要明确指定</p>
<p>2、通常情况下数据源不会使用简单的多表数据源（笛卡尔积）</p>
<p>3、数据表的别名在负责SQL查询操作时非常有用，而且有些地方是必须使用（如子查询数据源）</p>
<h3 id="4、where子句"><a href="#4、where子句" class="headerlink" title="4、where子句"></a>4、where子句</h3><p><strong>where子句</strong>：跟在from数据源之后，对数据进行条件匹配</p>
<ul>
<li>where是在磁盘读取后，进入内存之前进行筛选<ul>
<li>不符合条件的数据不会进入内存</li>
</ul>
</li>
<li>where筛选的内容因为还没进入内存，所以数据是没有被加工过的<ul>
<li>字段别名不能在where中使用</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要查询的数据需要进行条件筛选</p>
<p>2、使用where进行数据筛选</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查询t_35表中学生为lily的成绩信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_35 where stu_name &#x3D; &#39;Lily&#39;;</span><br></pre></td></tr></table></figure>



<p>2、因为where是在磁盘取数据时进行条件筛选，此时数据没有进入内存，所以字段别名是无效的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 错误</span><br><span class="line">select stu_name name,score from t_35 where name &#x3D; &#39;Lily&#39;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、where是用来匹配条件筛选数据的</p>
<p>2、where是在数据从磁盘取出，还没进入内存前进行筛选：筛选过后合适的才会进入到内存（后续才能显示）</p>
<p>3、成熟的项目中几乎每次执行查询都是会使用条件查询的</p>
<h3 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h3><p><strong>运算符</strong>：用于进行运算的符号</p>
<ul>
<li>比较运算符<ul>
<li>&gt;（大于）、&lt;（小于）、=（等于）、&gt;=（大于等于）、&lt;=（小于等于）、&lt;&gt;（不等于）</li>
<li>between  A  and  B：A和B之间（A小于B），包括A和B本身（数值比较）</li>
<li>in (数据1,数据2,…数据N)：在列举的数据之中</li>
<li>like ‘pattern’：像上面样的，用于字符串比较<ul>
<li>_：单下划线，匹配对应位置的一个任意字符（ab_：ab开头+一个字符，匹配abc，ab1，但不能匹配abcd）</li>
<li>%：匹配当前位置（往后）任意数量任意字符（ab%：ab开头+任意数量任意字符，匹配abc，ab1，abcd）</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>and（逻辑与）、or（逻辑或）、not（逻辑非）</li>
</ul>
</li>
<li>null运算符<ul>
<li>is null（为空）、is not null（不为空）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要使用运算符进行运算</p>
<p>2、根据数据要求使用准确的运算符</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查询成绩不及格的所有学生信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 成绩条件：成绩是数值，又是比大小，可以直接使用比较运算符</span><br><span class="line">select * from t_35 where score &lt; 60;</span><br></pre></td></tr></table></figure>



<p>2、查询成绩在60-90间的学生信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 成绩条件：区间60到90，可以有两种解决方案</span><br><span class="line"></span><br><span class="line">select * from t_35 where score between 60 and 90;</span><br><span class="line">select * from t_35 where score &gt;&#x3D; 60 and score &lt;&#x3D; 90;</span><br></pre></td></tr></table></figure>



<p>3、查询还没有成绩的学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 成绩条件：成绩为null，所以不能用比较符号查，只能使用is null实现</span><br><span class="line">select * from t_35 where score is null;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、运算符可以用来进行字段数据运算，配合where进行条件筛选</p>
<p>2、基本运算符与其他编程语言都差不多，SQL中有几个特殊的要了解一下</p>
<ul>
<li>between and：一种&gt;= and &lt;=的便捷写法</li>
<li>in：用来做具体选择，类似于switch里的case</li>
<li>is null/is not null：字段值为Null的判定方式</li>
</ul>
<p>3、熟练应用的前提是不断熟练的使用，掌握每个运算符带来的结果和效果</p>
<h3 id="6、group-by子句"><a href="#6、group-by子句" class="headerlink" title="6、group by子句"></a>6、group by子句</h3><p><strong>group by子句</strong>：分组统计，根据某个字段将所有的<strong>结果分类</strong>，并进行<strong>数据统计分析</strong></p>
<ul>
<li>分组的目的不是为了显示数据，一定是为了统计数据</li>
<li>group by子句一定是出现在where子句之后（如果同时存在）</li>
<li>分组统计可以进行统计细分：先分大组，然后大组分小组</li>
<li>分组统计需要使用统计函数<ul>
<li>group_concat()：将组里的某个字段全部保留</li>
<li>any_value()：不属于分组字段的任意一个组里的值</li>
<li>count()：求对应分组的记录数量<ul>
<li>count(字段名)：统计某个字段值的数量（NULL不统计）</li>
<li>count(*)：统计整个记录的数量（较多）</li>
</ul>
</li>
<li>sum()：求对应分组中某个字段是和</li>
<li>max()/min()：求对应分组中某个字段的最大/最小值</li>
<li>avg()：求对应分组中某个字段的平均值</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要进行数据统计</p>
<p>2、确定统计对象：分组字段（可以多个）</p>
<p>3、确定要统计的数据形式：选择对应统计函数</p>
<p>4、分组统计</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建一张表，存储学生信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_40(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null,</span><br><span class="line">gender enum(&#39;男&#39;,&#39;女&#39;,&#39;保密&#39;),</span><br><span class="line">age tinyint unsigned not null,</span><br><span class="line">class_name varchar(10) not null comment &#39;班级名称&#39;</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_40 values(null,&#39;鸣人&#39;,&#39;男&#39;,18,&#39;木叶1班&#39;),</span><br><span class="line">(null,&#39;佐助&#39;,&#39;男&#39;,18,&#39;木叶1班&#39;),</span><br><span class="line">(null,&#39;佐井&#39;,&#39;男&#39;,19,&#39;木叶2班&#39;),</span><br><span class="line">(null,&#39;大蛇丸&#39;,&#39;男&#39;,28,&#39;木叶0班&#39;),</span><br><span class="line">(null,&#39;卡卡西&#39;,&#39;男&#39;,29,&#39;木叶0班&#39;),</span><br><span class="line">(null,&#39;小樱&#39;,&#39;女&#39;,18,&#39;木叶1班&#39;),</span><br><span class="line">(null,&#39;雏田&#39;,&#39;女&#39;,18,&#39;木叶1班&#39;),</span><br><span class="line">(null,&#39;我爱罗&#39;,&#39;男&#39;,19,&#39;木叶1班&#39;),</span><br><span class="line">(null,&#39;向日葵&#39;,&#39;女&#39;,6,&#39;木叶10班&#39;),</span><br><span class="line">(null,&#39;博人&#39;,&#39;男&#39;,8,&#39;木叶10班&#39;),</span><br><span class="line">(null,&#39;鼬&#39;,&#39;男&#39;,28,&#39;木叶0班&#39;);</span><br></pre></td></tr></table></figure>



<p>2、统计每个班的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),class_name from t_40 group by class_name;</span><br></pre></td></tr></table></figure>



<p>3、多分组：统计每个班的男女学生数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),class_name,gender from t_40 group by class_name,gender;</span><br></pre></td></tr></table></figure>



<p>4、统计每个班里的人数，并记录班级学生的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),group_concat(name),class_name from t_40 group by class_name;</span><br><span class="line">select count(*),any_value(name),class_name from t_40 group by class_name;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>分组原理</p>
</blockquote>
<p>以统计班级学生为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(获取数据后分组开始)--&gt;B[匹配班级名字分组]</span><br><span class="line">B--&gt;|木叶1班|C[木叶1班组&lt;br&gt;鸣人&lt;br&gt;佐助&lt;br&gt;小樱&lt;br&gt;雏田&lt;br&gt;我爱罗]</span><br><span class="line">B--&gt;|木叶2班|D[木叶2班组&lt;br&gt;佐井]</span><br><span class="line">B--&gt;|木叶0班|E[木叶0班组&lt;br&gt;大蛇丸&lt;br&gt;卡卡西&lt;br&gt;鼬]</span><br><span class="line">B--&gt;|木叶10班|F[木叶10班组&lt;br&gt;博人&lt;br&gt;向日葵]</span><br><span class="line">C--&gt;G[统计结果&lt;br&gt;只对结果负责&lt;br&gt;结果就是函数,而函数只对小组工作&lt;br&gt;木叶1班组5人 木叶2班组1人 木叶0班组3人 木叶10班组2人]</span><br><span class="line">D--&gt;G</span><br><span class="line">E--&gt;G</span><br><span class="line">F--&gt;G</span><br><span class="line">G--&gt;H[返回结果]</span><br><span class="line">H--&gt;I((分组结束))</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、分组与统计是不分离的，分组必然要用到统计，而统计一旦使用实际上就进行了分组</p>
<p>2、分组统计使用数据数据的查询只能依赖统计函数和被分组字段，而不能是其他字段（MySQL7以前可以，不过数据没意义：因为系统只保留组里的第一个）</p>
<p>3、group by子句有自己明确的位置：在where之后（where可以没有）</p>
<h3 id="7、回溯统计"><a href="#7、回溯统计" class="headerlink" title="7、回溯统计"></a>7、回溯统计</h3><p><strong>回溯统计</strong>：在进行分组时（通常是多分组），每一次结果的回溯都进行一次汇总统计</p>
<ul>
<li>回溯统计语法：在统计之后使用 <code>with rollup</code></li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要进行分组统计</p>
<p>2、确定是多分组统计</p>
<p>3、需要对每次分组结果进行汇总</p>
<p>4、使用回溯统计</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>统计每个班的男女同学数量，同时要知道班级人数总数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 只统计每个班的男女同学数量，没有班级汇总</span><br><span class="line">select count(*),class_name,gender,group_concat(name) from t_40 group by class_name,gender;</span><br><span class="line"></span><br><span class="line"># 汇总统计：回溯</span><br><span class="line">select count(*),class_name,gender,group_concat(name) from t_40 group by class_name,gender with rollup;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>回溯统计原理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(统计开始)--&gt;B[大分组:班级名字分组]</span><br><span class="line">B--&gt;|木叶1班|C[木叶1班组&lt;br&gt;鸣人&lt;br&gt;佐助&lt;br&gt;小樱&lt;br&gt;雏田&lt;br&gt;我爱罗]</span><br><span class="line">B--&gt;|木叶2班|D[木叶2班组&lt;br&gt;佐井]</span><br><span class="line">B--&gt;|木叶0班|E[木叶0班组&lt;br&gt;大蛇丸&lt;br&gt;卡卡西&lt;br&gt;鼬]</span><br><span class="line">B--&gt;|木叶10班|F[木叶10班组&lt;br&gt;博人&lt;br&gt;向日葵]</span><br><span class="line">C--&gt;G[小分组:性别分组]</span><br><span class="line">G--&gt;|男|H[木叶1班组:男&lt;br&gt;鸣人&lt;br&gt;佐助&lt;br&gt;我爱罗]</span><br><span class="line">G--&gt;|女|I[木叶1班组:女&lt;br&gt;小樱&lt;br&gt;雏田]</span><br><span class="line">D--&gt;J[小分组:性别分组]</span><br><span class="line">J--&gt;|男|K[木叶2班组:男&lt;br&gt;佐井]</span><br><span class="line">E--&gt;L[小分组:性别分组]</span><br><span class="line">L--&gt;|男|M[木叶0班组:男&lt;br&gt;大蛇丸&lt;br&gt;卡卡西&lt;br&gt;鼬]</span><br><span class="line">F--&gt;N[小分组:性别分组]</span><br><span class="line">N--&gt;|男|O[木叶10班组:男&lt;br&gt;博人]</span><br><span class="line">N--&gt;|女|P[木叶10班组:女&lt;br&gt;向日葵]</span><br><span class="line">H--&gt;Q[性别回溯&lt;br&gt;木叶1班组:NULL&lt;br&gt;鸣人&lt;br&gt;佐助&lt;br&gt;小樱&lt;br&gt;雏田&lt;br&gt;我爱罗]</span><br><span class="line">I--&gt;Q</span><br><span class="line">K--&gt;R[性别回溯&lt;br&gt;木叶2班组:NULL&lt;br&gt;佐井]</span><br><span class="line">M--&gt;S[性别回溯&lt;br&gt;木叶0班组:NULL&lt;br&gt;大蛇丸&lt;br&gt;卡卡西&lt;br&gt;鼬]</span><br><span class="line">O--&gt;T[性别回溯&lt;br&gt;木叶10班组:NULL&lt;br&gt;博人&lt;br&gt;向日葵]</span><br><span class="line">P--&gt;T</span><br><span class="line">Q--&gt;U[班级名字回溯&lt;br&gt;NULL:NULL&lt;br&gt;全部人]</span><br><span class="line">R--&gt;U</span><br><span class="line">S--&gt;U</span><br><span class="line">T--&gt;U</span><br><span class="line">U--&gt;V((回溯统计结束))</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结+</p>
</blockquote>
<p>1、回溯统计一般用在多字段分组中，用来统计各级分组的汇总数据</p>
<p>2、因为回溯统计会将对应的分组字段置空（不置空无法合并），所以回溯的数据还需要经过其他程序语言加工处理才能取出数据来</p>
<h3 id="8、分组排序"><a href="#8、分组排序" class="headerlink" title="8、分组排序"></a>8、分组排序</h3><p><strong>分组排序</strong>：在分组后统计结果时可以根据分组字段进行升序或者降序显示数据</p>
<ul>
<li>默认的系统就会自动对分组结果根据分组字段进行升序排序</li>
<li>可以设定分组结果的排序方式<ul>
<li>group by 字段名 [ASC]：升序排序（默认）</li>
<li>group by 字段名 DESC：降序排序</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定使用分组统计</p>
<p>2、需要对结果进行降序排序（升序不用管）</p>
<p>3、使用分组降序排序</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>对分组结果女性优先显示：gender为枚举，男值为1，女值为2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),class_name,gender,group_concat(name),any_value(name) from t_40 group by class_name,gender desc;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、分组排序是针对分组的结果，通过分组字段进行排序</p>
<p>2、一般情况下较少使用分组排序</p>
<h3 id="9、having子句"><a href="#9、having子句" class="headerlink" title="9、having子句"></a>9、having子句</h3><p><strong>having子句</strong>：类似于where子句，是用来进行条件筛选数据的</p>
<ul>
<li><p>having子句本身是针对<strong>分组统计结果进行条件筛选</strong>的</p>
</li>
<li><p>having子句必须出现在group by子句之后（如果同时存在）</p>
</li>
<li><p>having针对的数据是在内存里已经加载的数据</p>
</li>
<li><p>having几乎能做where能做的所有事，但是where却不一定</p>
<ul>
<li>字段别名（where针对磁盘数据，那时还没有）</li>
<li>统计结果（where在group by之前）</li>
<li>分组统计函数（having通常是针对group by存在的）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、前面有分组统计</p>
<p>2、需要针对分组统计后的结果进行数据筛选</p>
<p>3、使用having组织条件进行筛选</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、获取班级人数小于3的班级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) as &#96;count&#96;,class_name,group_concat(name) from t_40 group by class_name having &#96;count&#96; &lt; 3;</span><br><span class="line"></span><br><span class="line">select count(*) as &#96;count&#96;,class_name,group_concat(name) from t_40 group by class_name having count(*) &lt; 3; # 多用了一次函数（效率降低）</span><br><span class="line"></span><br><span class="line">select class_name,group_concat(name) from t_40 group by class_name having count(*) &lt; 3; # 没办法，前面没统计，只能自己统计</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、having也是用于数据筛选的，但是本质是针对分组统计，如果没有分组统计，不要使用having进行数据筛选</p>
<p>2、能用where解决问题的地方绝不使用having</p>
<ul>
<li>where针对磁盘读取数据，源头解决问题</li>
<li>where能够限制无效数据进入内存，内存利用率较高，而having是针对内存数据筛选</li>
</ul>
<h3 id="10、order-by子句"><a href="#10、order-by子句" class="headerlink" title="10、order by子句"></a>10、order by子句</h3><p><strong>order by子句</strong>：排序，根据某个指定的字段进行升序或者降序排序</p>
<ul>
<li>排序的参照物是校对集</li>
<li>order by子句在having子句字后（如果同时存在）</li>
<li>排序分为升序和降序：默认是升序<ul>
<li>order by 字段 [ASC]：升序</li>
<li>order by 字段 DESC：降序</li>
</ul>
</li>
<li>多字段排序：在根据某个字段排序好后，可以再细分排序</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要排序的字段</p>
<p>2、确定排序的方式：升序 or 降序</p>
<p>3、使用排序</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、单字段排序：给所有学生按照年纪大小升序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40 order by age;</span><br><span class="line">select * from t_40 order by age asc;</span><br></pre></td></tr></table></figure>

<p>2、多字段排序：先性别降序排序，然后按年龄升序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40 order by gender desc,age;</span><br><span class="line">select * from t_40 order by gender desc,age asc;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、排序是针对前面所得到的结果进行排序（已经进入到内存的数据）</p>
<p>2、多字段排序是在第一个字段排好序的情况下，不改变原来排序的基调后，再小范围排序（类似分组）</p>
<p>3、实际开发中排序的使用非常常见，尤其是在数值、时间上多见</p>
<h3 id="11、limit子句"><a href="#11、limit子句" class="headerlink" title="11、limit子句"></a>11、limit子句</h3><p><strong>limit子句</strong>：限制数据的获取数量（记录数）</p>
<ul>
<li>limit子句必须在order by子句之后（如果同时存在）</li>
<li>limit限制数量的方式有两种<ul>
<li>limit 数量：限制获取的数量（不保证一定能获取到指定数量）</li>
<li>limit 起始位置,数量：限制数据获取的位置以及数量（分页）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要对记录数进行限制</p>
<p>2、确定限制的方式：限定数量 or 限定位置+限定数量</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、获取t_40表中前3条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40 limit 3;</span><br></pre></td></tr></table></figure>

<p>2、获取t_40表中第3条以后的3条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40 limit 3,3;</span><br><span class="line">select * from t_40 limit 6,3;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、limit限制数量可以有效的减少服务器的压力和传输压力</p>
<p>2、常利用limit来实现分页获取数据</p>
<h3 id="12、总结"><a href="#12、总结" class="headerlink" title="12、总结"></a>12、总结</h3><p>1、查询操作是所有操作里使用的最多也是最终的操作</p>
<p>2、查询操作的完整语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select select选项 字段列表[别名]|* from 数据源[别名] where子句 group by子句 having子句 order by子句 limit 子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>各个位置的顺序不能调换</li>
<li>五子句（where、group by、having、order by、limit）可以没有，但是出现后一定要保证顺序</li>
<li>group by到最后都是针对已经加载带内存中的数据进行加工处理</li>
</ul>
<p>3、很多结构的组合其实可以达到同一效果，但是可能过程和效率会不同</p>
<h2 id="6-3-数据更新"><a href="#6-3-数据更新" class="headerlink" title="6.3 数据更新"></a>6.3 数据更新</h2><p><strong>限制更新</strong>：即更新时对更新的记录数进行限制</p>
<ul>
<li>限制更新通过limit来实现</li>
<li>限制更新其实是局部更新的一种手段，一般更多情况下是依据条件精确更新</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要进行批量更新：符合条件的部分</p>
<p>2、确定更新的数量</p>
<p>3、使用limit限制更新数量</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>对会员选3个发送10元红包（添加到账户）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_41(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    username varchar(50) not null unique,</span><br><span class="line">    password char(32) not null,</span><br><span class="line">    account decimal(10,2) default 0.00</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_41 values(null,&#39;username1&#39;,&#39;password&#39;,default),</span><br><span class="line">(null,&#39;username2&#39;,&#39;password&#39;,default),</span><br><span class="line">(null,&#39;username3&#39;,&#39;password&#39;,default),(null,&#39;username4&#39;,&#39;password&#39;,default),(null,&#39;username5&#39;,&#39;password&#39;,default);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update t_41 set account &#x3D; account + 10 limit 3;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、限制更新可以实现批量小范围操作</p>
<p>2、实际开发当中，极少出现这类操作，一般都愿意精准操作（利用where条件明确更新条件）</p>
<p>3、更新操作不可逆</p>
<h2 id="6-4-数据删除"><a href="#6-4-数据删除" class="headerlink" title="6.4 数据删除"></a>6.4 数据删除</h2><blockquote>
<p>学习目标：了解数据删除的其他规则，理解数据删除的危害</p>
</blockquote>
<ul>
<li>限制删除</li>
<li>清空数据</li>
</ul>
<h3 id="1、限制删除"><a href="#1、限制删除" class="headerlink" title="1、限制删除"></a>1、限制删除</h3><p><strong>限制删除</strong>：限制要删除的记录数</p>
<ul>
<li>使用limit限制删除数量</li>
<li>一般很少使用限制删除，通常是通过where条件精确删除</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要进行数据批量删除</p>
<p>2、确定通过where条件限定后无法完全满足删除条件</p>
<p>3、使用limit限制删除数量完成目标</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>删除没有账户余额的一个用户（当前用户量少，一般数量会大些）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from t_41 where account &#x3D; 0 limit 1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、限制删除本质也是删除，操作不可逆，谨慎使用</p>
<p>2、更愿意使用精确删除</p>
<h3 id="2、清空数据"><a href="#2、清空数据" class="headerlink" title="2、清空数据"></a>2、清空数据</h3><p><strong>清空数据</strong>：将表中的所有数据清除，并且将表的所有状态回到原始状态</p>
<ul>
<li>清空数据的本质是先删除表，后创建表</li>
<li>清空数据能够让表的一些变化状态回到原始状态<ul>
<li>自增长重新回到初始值</li>
</ul>
</li>
<li>清空语法： <code>truncate 表名</code></li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要删除表中所有数据</p>
<p>2、确定需要让表状态回到原始</p>
<p>3、truncate清空数据</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>清空用户数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truncate t_41;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、清空数据表是一种比delete更彻底的数据删除方式，所以使用之前必须要慎重</p>
<p>2、一般只会在开发阶段才会使用这种数据删除操作，如表数据发生错乱，或者业务发生变化</p>
<h1 id="7-MySQL多表操作"><a href="#7-MySQL多表操作" class="headerlink" title="7 MySQL多表操作"></a>7 MySQL多表操作</h1><blockquote>
<p>示例</p>
</blockquote>
<p>不管是大型还是小型项目，一个数据库里都会有N张表，表之间也通过一对一、多对一或者多对多关系进行关联：如新闻管理系统</p>
<p>作者表：id、用户名、密码</p>
<p>新闻表：id、标题、内容、发布时间、作者id</p>
<p>显示新闻的时候是肯定需要显示作者姓名的</p>
<ul>
<li>原始方式：查出新闻–&gt;查出作者ID–&gt;查出作者<ul>
<li>步骤多</li>
<li>如果是批量显示新闻就更麻烦</li>
</ul>
</li>
<li>多表操作：使用连接查询一条SQL搞定</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、多表操作是实际开发时经常遇到的解决问题的方案</p>
<p>2、多表操作能够在数据库层就实现大量数据的组合或者筛选</p>
<h2 id="7-1-联合查询"><a href="#7-1-联合查询" class="headerlink" title="7.1 联合查询"></a>7.1 联合查询</h2><h3 id="1、联合查询"><a href="#1、联合查询" class="headerlink" title="1、联合查询"></a>1、联合查询</h3><p><strong>联合查询</strong>：union，是指将多个查询结果合并成一个结果显示</p>
<ul>
<li>联合查询是针对查询结果的合并（多条select语句合并）</li>
<li>联合查询语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 查询【决定字段名字】</span><br><span class="line">    union 查询选项</span><br><span class="line">select 查询</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>联合查询要求：联合查询是结果联合显示<ul>
<li>多个联合查询的字段结果数量一致</li>
<li>联合查询的字段来源于第一个查询语句的字段</li>
</ul>
</li>
<li>查询选项：与select选项雷士<ul>
<li>all：保留所有记录</li>
<li>distinct：保留去重记录（默认）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要进行多个表数据的联合操作</p>
<ul>
<li>表结构一致</li>
<li>数据汇总</li>
</ul>
<p>2、确定数据的要求：全部保留 or 去重</p>
<p>3、使用联合查询</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建一个表与t_40，并插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_42 like t_40;</span><br><span class="line"></span><br><span class="line">insert into t_42 values(null,&#39;犬夜叉&#39;,&#39;男&#39;,200,&#39;神妖1班&#39;),</span><br><span class="line">(null,&#39;日暮戈薇&#39;,&#39;女&#39;,16,&#39;现代1班&#39;),</span><br><span class="line">(null,&#39;桔梗&#39;,&#39;女&#39;,88,&#39;法师1班&#39;),</span><br><span class="line">(null,&#39;弥勒&#39;,&#39;男&#39;,28,&#39;法师2班&#39;),</span><br><span class="line">(null,&#39;珊瑚&#39;,&#39;女&#39;,20,&#39;法师2班&#39;),</span><br><span class="line">(null,&#39;七宝&#39;,&#39;保密&#39;,5,&#39;宠物1班&#39;),</span><br><span class="line">(null,&#39;杀生丸&#39;,&#39;男&#39;,220,&#39;神妖1班&#39;),</span><br><span class="line">(null,&#39;铃&#39;,&#39;女&#39;,4,&#39;现代1班&#39;),</span><br><span class="line">(null,&#39;钢牙&#39;,&#39;男&#39;,68,&#39;神妖1班&#39;),</span><br><span class="line">(null,&#39;奈落&#39;,&#39;男&#39;,255,&#39;神妖1班&#39;),</span><br><span class="line">(null,&#39;神乐&#39;,&#39;女&#39;,15,&#39;神妖2班&#39;);</span><br></pre></td></tr></table></figure>

<ul>
<li>t_42与t_40结构一样，可以理解为因为数据量大拆分到了两个表中</li>
</ul>
<p>2、使用联合查询将两张表的数据拼接到一起显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40 </span><br><span class="line">union</span><br><span class="line">select * from t_42;</span><br></pre></td></tr></table></figure>



<p>3、联合查询选项默认是distinct</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40</span><br><span class="line">union </span><br><span class="line">select * from t_40;</span><br><span class="line"></span><br><span class="line">select * from t_40</span><br><span class="line">union all</span><br><span class="line">select * from t_40;</span><br></pre></td></tr></table></figure>



<p>4、联合查询不要求字段类型一致，只对数量要求一致，而且字段与第一条查询语句相关</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name from t_40</span><br><span class="line">union all</span><br><span class="line">select age from t_40;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：如果数据不能对应，那么查询没有意义</li>
</ul>
<p>5、如果使用where对数据进行筛选，where针对的是select指令，而不是针对union结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40 </span><br><span class="line">union all</span><br><span class="line">select * from t_42</span><br><span class="line">where gender &#x3D; &#39;女&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>where只针对第二条select有效</li>
<li>若要全部有效，需要select都使用where</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、union是负责将多次查询的结果统一拼凑显示</p>
<ul>
<li>记录数增加</li>
<li>字段数不变（第一条SQL指令决定）</li>
</ul>
<p>2、union常用方式</p>
<ul>
<li>因为数据量大分表存储，然后统一查看或者统计</li>
<li>根据不同维度对数据进行筛选，然后统一查看或者统计</li>
</ul>
<p>3、union默认是去重的，想要保留全部查询结果，需要使用union all</p>
<h3 id="2、联合查询排序"><a href="#2、联合查询排序" class="headerlink" title="2、联合查询排序"></a>2、联合查询排序</h3><p><strong>联合查询排序</strong>：针对联合查询的结果进行排序</p>
<ul>
<li>order by本身是对内存结果进行排序，union的优先级高于order by，所以order by默认是对union结果进行排序</li>
<li>如果想要对单独select的结果进行排序，需要两个步骤<ul>
<li>将需要排序的select指令进行括号包裹（括号里使用order by）</li>
<li>order by必须配合limit才能生效（limit一个足够大的数值即可）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要对联合查询进行排序</p>
<p>2、确定排序内容</p>
<ul>
<li>针对union结果排序</li>
<li>针对union前的select结果进行排序</li>
</ul>
<p>3、选择合适的排序方式</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、将t_40和t_42表的结果使用年龄降序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_40</span><br><span class="line">union all</span><br><span class="line">select * from t_42</span><br><span class="line">order by age desc; #针对的是整个union之后的结果</span><br></pre></td></tr></table></figure>



<p>2、t_40表按年龄降序排序，t_42表按年龄升序排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 无效方式</span><br><span class="line">(select * from t_40 order by age desc)</span><br><span class="line">union </span><br><span class="line">(select * from t_42 order by age);</span><br><span class="line"></span><br><span class="line"># 正确方式</span><br><span class="line">(select * from t_40 order by age desc limit 99999)</span><br><span class="line">union </span><br><span class="line">(select * from t_42 order by age desc limit 99999);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、联合排序需要区分排序的内容是select结果还是union结果</p>
<ul>
<li>union结果：在最后使用排序即可</li>
<li>select结构：需要针对select使用排序<ul>
<li>select必须使用括号包裹</li>
<li>select里的排序必须配合limit才会生效</li>
</ul>
</li>
</ul>
<h2 id="7-2-连接查询"><a href="#7-2-连接查询" class="headerlink" title="7.2 连接查询"></a>7.2 连接查询</h2><p><strong>连接查询</strong>：join，将两张表依据某个条件进行数据拼接</p>
<ul>
<li>join左右各一张表：join关键字左边的表叫左表，右边的表叫右表</li>
<li>连接查询的结果都是记录会保留左右表的所有字段（字段拼接）<ul>
<li>具体字段数据依据查询需求确定</li>
<li>表字段冲突需要使用表别名和字段别名区分</li>
</ul>
</li>
<li>不同的连表有不同的连接方式，对于结果的处理也不尽相同</li>
<li>连接查询不限定表的数量，可以进行多表连接，只是表的连接需要一个一个的连（A join B join C …）</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、连接查询就是通过字段拼接，把两张表的记录变成一条记录：字段数量增加</p>
<p>2、连接查询的目的是将分散在不同表的数据组合到一起，方便外部使用数据</p>
<h3 id="1、交叉连接"><a href="#1、交叉连接" class="headerlink" title="1、交叉连接"></a>1、交叉连接</h3><p><strong>交叉连接</strong>：cross join，不需要连接条件的连接</p>
<ul>
<li>交叉连接产生的结果就是笛卡尔积<ul>
<li>左表的每一条记录都会与右表的所有记录连接并保留</li>
</ul>
</li>
<li>交叉连接没有实际数据价值，只是丰富了连接查询的完整性</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>交叉连接t_41和t_42表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_41 cross join t_42; # t_41,t_42</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、笛卡尔积无意义，尽量避免出现</p>
<h3 id="2、内连接"><a href="#2、内连接" class="headerlink" title="2、内连接"></a>2、内连接</h3><p><strong>内连接</strong>：[inner] join，将两张表根据指定的条件连接起来，严格连接</p>
<ul>
<li>内连接是将一张表的每一条记录去另外一张表根据条件匹配<ul>
<li>匹配成功：保留连接的数据</li>
<li>匹配失败：都不保留</li>
</ul>
</li>
<li>内连接语法： <code>左表 join 右表 on 连接条件</code></li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要从多张表中获取数据组成记录</p>
<p>2、确定连接的要求是保留连接成功的，不成功的数据不要</p>
<p>3、使用内连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、设计学生表和专业表：学生对专业多对一关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 学生表</span><br><span class="line">create table t_43(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    course_no int</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_43 values(null,&#39;Student1&#39;,1),</span><br><span class="line">(null,&#39;Student2&#39;,1),</span><br><span class="line">(null,&#39;Student3&#39;,2),</span><br><span class="line">(null,&#39;Student4&#39;,3),</span><br><span class="line">(null,&#39;Student5&#39;,1),</span><br><span class="line">(null,&#39;Student6&#39;,default);</span><br><span class="line"></span><br><span class="line"># 专业表</span><br><span class="line">create table t_44(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null unique</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_44 values(null,&#39;Computer&#39;),(null,&#39;Software&#39;),(null,&#39;Network&#39;);</span><br></pre></td></tr></table></figure>



<p>2、获取已经选择了专业的学生信息，包括所选专业</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 学生和专业在两个表中，所以需要连表</span><br><span class="line"># 学生必须有专业，而专业也必须存在，所以是内连接</span><br><span class="line"># 连接条件：专业编号</span><br><span class="line"># 两张表有两个字段冲突：id、name，所以需要使用别名</span><br><span class="line">select t_43.*,t_44.name as course_name from t_43 inner join t_44 on t_43.course_no &#x3D; t_44.id;</span><br><span class="line"></span><br><span class="line"># 表名的使用也可以使用别名</span><br><span class="line">select s.*,c.name as c_name from t_43 as s inner join t_44 c on s.course_no &#x3D; c.id;</span><br></pre></td></tr></table></figure>

<ul>
<li>字段冲突的话在MySQL里倒是不影响，只是会同时存在，但是后续其他地方使用就不方便了</li>
</ul>
<blockquote>
<p>原理分析</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(连接开始&lt;br&gt;A inner join B on a.aid &#x3D; b.id)--&gt;B[连接条件循环匹配匹配&lt;br&gt;A表逐条取出记录与B表的每条记录匹配]</span><br><span class="line">B--&gt;|a.aid &#x3D; b.id|C[保留匹配结果&lt;br&gt;根据字段要求保留]</span><br><span class="line">C--&gt;|继续下一个|B</span><br><span class="line">B--&gt;E[全部匹配完毕]</span><br><span class="line">B--&gt;|a.aid &lt;&gt; b.id|D[放弃]</span><br><span class="line">D--&gt;|继续下一个|B</span><br><span class="line">E--&gt;F((取出所有匹配成功结果:结束))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、内连接匹配规则就是必须保证左表和右表同时存储连接关系，这样的数据才会保留</p>
<p>2、扩展：内连接可以没有on条件，那么得到的结果就是交叉连接（笛卡尔积），无意义</p>
<p>3、扩展：内连接的on关键字可以换成where，结果是一样（但是不建议使用）</p>
<h3 id="3、外连接"><a href="#3、外连接" class="headerlink" title="3、外连接"></a>3、外连接</h3><p><strong>外连接</strong>：outer join，是一种不严格的连接方式</p>
<ul>
<li>外连接分为两种<ul>
<li>左外连接（左连接）：left join</li>
<li>右外连接（右连接）：right join</li>
</ul>
</li>
<li>外连接有主表和从表之分<ul>
<li>左连接：左表为主表</li>
<li>右连接：右表为主表</li>
</ul>
</li>
<li>外连接是将主表的记录去匹配从表的记录<ul>
<li>匹配成功保留</li>
<li>匹配失败（全表）：也保留，只是从表字段置空</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定进行连表操作</p>
<p>2、确定要有数据保护，即表中数据匹配失败也要保留</p>
<p>3、确定主从表</p>
<p>4、选择对应外连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查出所有的学生信息，包括所在班级（左连接）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 主要数据是学生，而且是全部学生：外连接、且学生表是主表</span><br><span class="line">select s.*,c.name c_name from t_43 s left join t_44 c on s.course_no &#x3D; c.id;</span><br></pre></td></tr></table></figure>



<p>2、查出所有班级里的所有学生（右连接）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 主表是班级</span><br><span class="line">select s.*,c.name c_name from t_43 s right join t_44 c on s.course_no &#x3D; c.id;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、外连接与内连接的区别在于数据匹配失败的时候，外连接会保留一条记录</p>
<ul>
<li>主表数据保留</li>
<li>从表数据置空</li>
</ul>
<p>2、外连接不论是左连接还是右连接，字段的顺序不影响，都是先显示左表数据，后显示右表数据</p>
<p>3、外连接必须使用on作为连接条件（不能没有或者使用where替代）</p>
<h3 id="4、自然连接"><a href="#4、自然连接" class="headerlink" title="4、自然连接"></a>4、自然连接</h3><p><strong>自然连接</strong>：natural join，是一种自动寻找连接条件的连接查询</p>
<ul>
<li><p>自然连接不是一种特殊的连接方式，而是一种自动匹配条件的连接</p>
</li>
<li><p>自然连接包含自然内连接和自然外连接</p>
<ul>
<li>自然内连接：natural join</li>
<li>自然外连接：natural left/right join</li>
</ul>
</li>
<li><p>自然连接条件匹配模式：自动寻找相同字段名作为连接条件（字段名相同）</p>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、需要进行连表查询结果</p>
<p>2、连表查询的表字段能够直接关联（字段名字相同：非常高的表结构设计）</p>
<p>3、选择合适的连接方式：内连接 or 外连接</p>
<p>4、使用自然连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、自然连接t_43和t_44表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  * from t_43 natural join t_44;</span><br></pre></td></tr></table></figure>

<p>2、自然连接是不管字段是否有关系的，只管名字是否相同：如果想要自然连接成功，那么字段的设计就必须非常规范</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_45(</span><br><span class="line">    s_id int primary key auto_increment,</span><br><span class="line">    s_name varchar(50) not null,</span><br><span class="line">    c_id int comment &#39;课程id&#39;</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_45 select * from t_43;</span><br><span class="line"></span><br><span class="line">create table t_46(</span><br><span class="line">    c_id int primary key auto_increment,</span><br><span class="line">    c_name varchar(50) not null unique</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_46 select * from t_44;</span><br><span class="line"></span><br><span class="line"># 自然连接：条件只有一个相同的c_id</span><br><span class="line">select * from t_45 natural join t_46;</span><br></pre></td></tr></table></figure>

<ul>
<li>自然连接会将同名条件合并成一个字段（数据一样）</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、自然连接本身不是一种特别连接，是基于内连接、外连接和交叉连接实现自动条件匹配而已</p>
<ul>
<li>没有条件（没有同名字段）：交叉连接</li>
<li>有条件：内连接/外连接（看关键字使用）</li>
</ul>
<p>2、自然连接使用较少，因为一般情况下表的设计很难做到完全标准或者不会出现无关同名字段</p>
<h3 id="5、using关键字"><a href="#5、using关键字" class="headerlink" title="5、using关键字"></a>5、using关键字</h3><p><strong>using关键字</strong>：连接查询时如果是同名字段作为连接条件，using可以代替on出现（比on更好）</p>
<ul>
<li>using是针对同名字段（using(id) === A.id = B.id）</li>
<li>using关键字使用后会自动合并对应字段为一个</li>
<li>using可以同时使用多个字段作为条件</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、需要进行连表进行数据查询</p>
<p>2、两个表的连接条件字段同名</p>
<p>3、使用using关键字作为连接条件</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>查询t_45中所有的学生信息，包括所在班级名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select s.*,c.c_name from t_45 s left join t_46 c using(c_id);</span><br><span class="line">select * from t_45 s left join t_46 c using(c_id);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、using关键字用来简化同名条件字段的连接条件行为</p>
<p>2、using关键字与自然连接相似，但是比自然连接灵活，可以指定有效的同名连接条件，忽略无效的同名字段</p>
<h3 id="6、总结-1"><a href="#6、总结-1" class="headerlink" title="6、总结"></a>6、总结</h3><p>1、连接查询是实际开发过程中应用最多的查询方式</p>
<ul>
<li>很少出现单表查询操作</li>
<li>实体（表）间或多或少都是有关联的</li>
</ul>
<p>2、连接查询的效率肯定没有单表查询高</p>
<ul>
<li>逆规范化可以适当的运用来提升效率</li>
</ul>
<p>3、连接查询中使用的较多的就是内连接和外连接</p>
<h2 id="7-3-子查询"><a href="#7-3-子查询" class="headerlink" title="7.3 子查询"></a>7.3 子查询</h2><p><strong>子查询</strong>：sub query，通过select查询结果当做另外一条select查询的条件或者数据源</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>想查出某个专业的所有学生信息</p>
<ul>
<li>查询的目标是学生表</li>
<li>查询的条件在专业表</li>
</ul>
<p>按照以前的知识，可以产生两种解决方案：</p>
<p>1、分开查询</p>
<ul>
<li>从专业表通过名字查出专业id</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select c_id from t_46 where c_name &#x3D; &#39;专业名字&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>从学生表通过专业id取出学生信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_45 where c_id &#x3D; &#39;查出来的专业id&#39;;</span><br></pre></td></tr></table></figure>

<p>2、连表查询</p>
<ul>
<li>将学生表与专业表通过专业id相连</li>
<li>对整个连表结果通过where条件进行筛选</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select s.* from t_45 s right join t_46 c using(c_id) where c.c_name &#x3D; &#39;专业名字&#39;;</span><br></pre></td></tr></table></figure>

<p>从解决方案分析</p>
<p>1、分开查询数据量小，但是麻烦</p>
<p>2、连接查询方便，但是效率不高（先连后筛选）</p>
<p>如果能够将方案1变成一个简单的方式就好了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_45 where c_id &#x3D; (select c_id from t_46 where c_name &#x3D; &#39;专业名字&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>以上就是子查询</strong></p>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、子查询就是能够将一些具有先后顺序的查询组装到一个查询语句中，从而节省操作的过程，降低复杂程度</p>
<h3 id="1、子查询分类"><a href="#1、子查询分类" class="headerlink" title="1、子查询分类"></a>1、子查询分类</h3><p><strong>子查询分类</strong>：根据子查询<strong>出现的位置</strong>或者<strong>产生的数据效果</strong>分类</p>
<ul>
<li>位置分类<ul>
<li>from子查询：子查询出现在from后做数据源</li>
<li>where子查询：子查询出现在where后做数据条件</li>
</ul>
</li>
<li>按子查询得到的结果分类<ul>
<li>标量子查询：子查询返回的结果是一行一列（一个数据）</li>
<li>列子查询：子查询返回的结果是一列多行（一列数据）</li>
<li>行子查询：子查询返回的结果是一行多列</li>
<li>表子查询：子查询返回的结果是一个二维表</li>
<li>exists子查询：子查询返回的结果是布尔结果（验证型）</li>
</ul>
</li>
<li>子查询都需要使用括号 <code>()</code> 进行包裹，必要时需要对子查询结果进行别名处理（from子查询）</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、通常我们使用子查询结果定义分类</p>
<p>2、位置划分是包含子查询结果的</p>
<ul>
<li>from子查询对应表子查询（表子查询）</li>
<li>where子查询</li>
</ul>
<h3 id="2、标量子查询"><a href="#2、标量子查询" class="headerlink" title="2、标量子查询"></a>2、标量子查询</h3><p><strong>标量子查询</strong>：子查询返回的结果是一行一列，一个值</p>
<ul>
<li>标量子查询是用来做其他查询的条件的</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要从一张表中获取数据（可以是多张）</p>
<p>2、确定查询条件在当前查询表中无法实现但是可以从其他表中精确获得（只有一个）</p>
<p>3、使用标量子查询</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>获取Computer专业的所有学生</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据目标：学生表t_45</span><br><span class="line"># 条件：专业名字，不在t_45中，但是t_45中的专业id可以通过专业名字在另外一张表精确获得（一个值）</span><br><span class="line"></span><br><span class="line">select * from t_45 where c_id &#x3D; (select c_id from t_46 where c_name &#x3D; &#39;Computer&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、标量子查询通常用简单比较符号来制作条件的</p>
<h3 id="3、列子查询"><a href="#3、列子查询" class="headerlink" title="3、列子查询"></a>3、列子查询</h3><p><strong>列子查询</strong>：子查询返回的结果是一列多行</p>
<ul>
<li>列子查询通常是用来做查询条件的</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定要从一张表中获取数据（可以是多张）</p>
<p>2、确定查询条件在当前查询表中无法实现但是可以从其他表中精确获得（一个字段多个数据）</p>
<p>3、使用列子查询</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、获取所有有学生的班级信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据获取目标是班级信息</span><br><span class="line"># 数据获取条件是在学生表中的班级id，是多个</span><br><span class="line"></span><br><span class="line">select * from t_46 where c_id in (select distinct c_id from t_45 where c_id is not null);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、列子查询通常是作为外部主查询的条件，而且是使用in来进行判定</p>
<h3 id="4、行子查询"><a href="#4、行子查询" class="headerlink" title="4、行子查询"></a>4、行子查询</h3><p><strong>行子查询</strong>：子查询返回的结果是一行多列</p>
<ul>
<li>行子查询需要条件中构造行元素（多个字段组成查询匹配条件）<ul>
<li>(元素1,元素2,..元素N)</li>
</ul>
</li>
<li>行子查询通常也是用来作为主查询的结果条件</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定获取数据的条件不只是一个字段</p>
<p>2、确定数据条件的来源不在当前表中（也可以在当前表），但是可以通过条件精确获取到（一行多列）</p>
<p>3、使用行子查询</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>获取学生表中性别和年龄都与弥勒相同的学生信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询条件有多个：性别和年龄</span><br><span class="line"># 数据的条件的来源在另外一张表中</span><br><span class="line"></span><br><span class="line"># 解决思路：两个标量子查询</span><br><span class="line">select * from t_40 where gender &#x3D; (select gender from t_42 where name &#x3D; &#39;弥勒&#39;) and age &#x3D; (select age from t_42 where name &#x3D; &#39;弥勒&#39;);</span><br></pre></td></tr></table></figure>



<p>问题分析：以上查询解决了问题但是用到了两次子查询（效率降低），而且查询语句是一样的，只是字段不一样，可以使用行子查询解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 构建条件行元素(gender,age)</span><br><span class="line"></span><br><span class="line">select * from t_40 where (gender,age) &#x3D; (select gender,age from t_42 where name &#x3D; &#39;弥勒&#39;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、行子查询是可以使用多个标量子查询替代解决问题的，但是行子查询的效率会比多个标量要高。需要使用到行子查询的时候不会使用标量子查询来解决的</p>
<ul>
<li>如果数据来源不在一张表可以考虑使用多个标量子查询实现</li>
</ul>
<h3 id="5、表子查询"><a href="#5、表子查询" class="headerlink" title="5、表子查询"></a>5、表子查询</h3><p><strong>表子查询</strong>：子查询返回的结果是多行多列（二维表）</p>
<ul>
<li>表子查询多出现在from之后当做数据源（from子查询）</li>
<li>表子查询通常是为了想对数据进行一次加工处理，然后再交给外部进行二次加工处理</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、需要查询的数据通过一次SQL查询不能直接搞定（可能顺序关系导致）</p>
<p>2、如果先把结果加工后（多行多列），外部再来一层结果查询加工可以完成目标</p>
<p>3、使用表子查询</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>获取学生表中每个班级里年龄最大的学生信息（姓名、年龄、班级名字），然后按年龄降序排序显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 尝试直接解决</span><br><span class="line">select any_value(name),max(age) m_age,class_name from t_42 group by class_name order by m_age desc;</span><br></pre></td></tr></table></figure>

<ul>
<li>分组统计中any_value取的是分组后的第一条记录数据（犬夜叉），而我们要的是最大</li>
</ul>
<p>解决方案：要是在分组之前将所有班级里的学生本身是降序排序，那么分组的第一条数据就是满足条件的数据。但是问题是：order by必须出现在 group by之后，如何解决？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># order by必须在group by之前解决：就要想办法让order by在group by之前而且不在同一条select指令中（同一条无解）</span><br><span class="line"># 必须使用子查询解决在不用SQL中的问题，而子查询的结果应该是全部记录信息，所以应该是表子查询，而且是数据源</span><br><span class="line"></span><br><span class="line">select any_value(name),max(age),class_name from </span><br><span class="line">(select name,age,class_name from t_42 order by age desc) as t</span><br><span class="line">group by class_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>依然无效：原因是MySQL7以后若要子查询中的order by生效，需要像联合查询那样，让子查询带上limit</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select any_value(name),max(age),class_name from </span><br><span class="line">(select name,age,class_name from t_42 order by age desc limit 99999) as t</span><br><span class="line">group by class_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>因为order by在子查询的时候已经对结果进行过排序了，所以分组统计后最终结果也就不用再进行排序了，如果需要再进行排序，只要在最终结果后排序即可<ul>
<li>如果要用到字段排序，建议在外部查询select字段里使用别名（否则又要统计）</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select any_value(name),max(age) m_age,class_name from </span><br><span class="line">(select name,age,class_name from t_42 order by age desc limit 99999) as t</span><br><span class="line">group by class_name order by m_age;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、表子查询通常解决的问题是提供数据源</p>
<p>2、表子查询出现的业务</p>
<ul>
<li>一条select指令中所用到的子句顺序不能满足查询条件</li>
<li>数据的来源可能是多张数据表</li>
</ul>
<p>3、特别注意：在MySQL7以后，子查询中使用的order by子句需要配合limit才会生效</p>
<h3 id="6、exists子查询"><a href="#6、exists子查询" class="headerlink" title="6、exists子查询"></a>6、exists子查询</h3><p><strong>exists子查询</strong>：代入查询，将主表（外部查询）的每一行代入到子表（子查询表）进行校验</p>
<ul>
<li><p>子查询返回的结果是布尔结果</p>
<ul>
<li>成功返回true</li>
<li>失败返回false</li>
</ul>
</li>
<li><p>exists子查询通常是作为where条件使用</p>
<ul>
<li>where exists(子查询)</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定查询的数据来自主表</p>
<p>2、确定条件是需要去子表（其他表）进行验证：不需要去子表获取数据之类的</p>
<p>3、使用exists子查询</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>获取所有有学生的班级信息t_46</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取的数据是班级表t_46</span><br><span class="line"># 班级是否有学生需要在t_45中确认，并不需要t_45提供任何数据显示</span><br><span class="line"></span><br><span class="line">select * from t_46 c where exists(select c_id from t_45 where c.c_id &#x3D; c_id);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、exists子查询通常用来解决那种不需要数据但是需要去表中确认关系的查询问题</p>
<ul>
<li>在exists子查询中尽量少的选择字段（不建议使用*），因为都是无价值的</li>
</ul>
<h3 id="7、比较方式"><a href="#7、比较方式" class="headerlink" title="7、比较方式"></a>7、比较方式</h3><p><strong>比较方式</strong>：在子查询中可以使用一些特定的比较方式</p>
<ul>
<li><p>特定的比较方式都是基于比较符号一起使用</p>
</li>
<li><p>all：满足后面全部条件</p>
<ul>
<li>&gt; all(结果集)：数据要大于结果集中的全部数据</li>
</ul>
</li>
<li><p>any：满足任意条件</p>
<ul>
<li>= any(结果集)：数据只要与结果集中的任何一个元素相等</li>
</ul>
</li>
<li><p>some：满足任意条件（与any完全一样）</p>
</li>
<li><p>结果集：可以是直接的数据也可以是子查询结果（通常是列子查询）</p>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、找出t_40表中与t_42表中年龄相同的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据获取在t_40表</span><br><span class="line"># 数据条件在t_42表</span><br><span class="line"></span><br><span class="line"># 解决方案1：使用in列子查询</span><br><span class="line">select * from t_40 where age in (select distinct age from t_42);</span><br><span class="line"></span><br><span class="line"># 解决方案2：使用exists子查询</span><br><span class="line">select * from t_40 t1 where exists(select id from t_42 where t1.age &#x3D; age);</span><br><span class="line"></span><br><span class="line"># 解决方案3：使用any或者some匹配（列子查询）</span><br><span class="line">select * from t_40 where age &#x3D; some(select age from t_42);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、比较方式其实很多都可以实现替代，越精准的数据匹配方式效率就越高</p>
<h3 id="8、总结"><a href="#8、总结" class="headerlink" title="8、总结"></a>8、总结</h3><p>1、子查询通常使用较多的是标量子查询、列子查询和exists子查询</p>
<p>2、子查询的效率是比连接查询的效率要低的，要适当选择使用</p>
<ul>
<li>子查询是在主表的每一次记录匹配时都会执行一次（where子查询）<ul>
<li>主表数据大，子表数据小：影响较小</li>
<li>主表数据小，子表数据大：影响较大</li>
</ul>
</li>
<li>from子查询因为只执行一次，影响不大</li>
</ul>
<p>3、理论上来讲，不限制子查询的嵌套，但是考虑到效率的降低，不建议使用子查询嵌套</p>
<h1 id="8-MySQL安全管理"><a href="#8-MySQL安全管理" class="headerlink" title="8 MySQL安全管理"></a>8 MySQL安全管理</h1><p><strong>安全管理</strong>：用各种方式来确保数据库的安全和数据的安全</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>携程的数据库被程序员删库跑路…</p>
<ul>
<li>如果有用户管理，那么可以通过权限限制其没有权限删除</li>
<li>如果有数据备份，即便数据删除，也可以很快的实现数据还原，减小损失</li>
<li>…</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、安全管理是每一个接触数据库的人都应该考虑的问题，尤其是DBA（数据库管理员）</p>
<p>2、数据库安全的维度有很多</p>
<ul>
<li>管理安全：用户、权限、备份还原等</li>
<li>结构安全：外键、视图、事务等</li>
<li>执行层：预处理</li>
</ul>
<h2 id="8-1-外键约束"><a href="#8-1-外键约束" class="headerlink" title="8.1 外键约束"></a>8.1 外键约束</h2><h3 id="1、外键"><a href="#1、外键" class="headerlink" title="1、外键"></a>1、外键</h3><p><strong>外键</strong>：foreign key，表中指<strong>向外部表主键</strong>的字段定义成外键</p>
<ul>
<li>外键必须要通过语法指定才能称之为外键<ul>
<li>[constraint<code>外键名</code>] foreign key(当前表字段名) references 外部表(主键字段)</li>
</ul>
</li>
<li>外键构成条件<ul>
<li>外键字段必须与对应表的主键字段类型一致</li>
<li>外键字段本身要求是一个索引（创建外键会自动生成一个索引）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定表中字段与另外一张表存在关联关系</p>
<p>2、使用外键明确关联外表</p>
<p>3、外键约束成功</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建专业表和学生表，学生表中的专业id指向专业表id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_47(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null unique</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">create table t_48(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    c_id int comment &#39;指向t_46表中的id主键&#39;,</span><br><span class="line">    constraint &#96;c_id&#96; foreign key(c_id) references t_47(id)</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<p>2、外键可以不指定名字，系统会自动生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_49(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    c_id int,</span><br><span class="line">    foreign key(c_id) references t_47(id)</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、外键是需要保证字段与外部连接的主键字段一致的</p>
<p>2、一张表可以有多个外键，但是一个字段只能产生一个外键</p>
<h3 id="2、外键约束"><a href="#2、外键约束" class="headerlink" title="2、外键约束"></a>2、外键约束</h3><p><strong>外键约束</strong>：当表建立外键关系后，外键就会对主表（外键指向的表）和子表（外键所在的表）里的数据产生约束效果</p>
<ul>
<li>外键约束的是写操作（默认操作）<ul>
<li>新增：子表插入的数据对应的外键必须在主表存在</li>
<li>修改：主表的记录如果在子表存在，那么主表的主键不能修改（主键不能修改）</li>
<li>删除：主表的记录如果在子表存在，那么主表的主键不能删除</li>
<li>删除：主表的记录如果在子表存在，那么主表的主键不能删除</li>
</ul>
</li>
<li>外键约束控制：外键可以在定义时控制外键的约束作用<ul>
<li>控制类型<ul>
<li>on update：父表更新时子表的表现</li>
<li>on delete：父表删除时子表的表现</li>
</ul>
</li>
<li>控制方式<ul>
<li>cascade：级联操作，父表操作后子表跟随操作</li>
<li>set null：置空操作，父表操作后，子表关联的外键字段置空</li>
<li>restrict：严格模式，不允许父表操作（默认的）</li>
<li>no action：子表不管</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定表的外键关联关系</p>
<p>2、确定主表的约束控制</p>
<p>3、明确使用相应的约束控制</p>
<p>4、系统自动约束</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、子表不能插入主表不存在的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_48 values(null,&#39;Tony&#39;,2);	# 错误</span><br><span class="line"></span><br><span class="line">insert into t_47 values(null,&#39;English&#39;);</span><br><span class="line">insert into t_48 values(null,&#39;Peny&#39;,1);</span><br></pre></td></tr></table></figure>



<p>2、默认的外键产生后，主键不能更新被关联的主键字段或者删除被关联的主键记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 错误</span><br><span class="line">update t_47 set id &#x3D; 2;</span><br><span class="line">delete from t_47 where id &#x3D; 1;</span><br></pre></td></tr></table></figure>



<p>3、限制外键约束，一般使用更新级联，删除置空</p>
<ul>
<li>on update cascade：更新级联</li>
<li>on delete set null：删除置空</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_50(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null unique</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">create table t_51(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    c_id int, # 如果要允许置空，就不能not null</span><br><span class="line">    foreign key(c_id) references t_50(id) on update cascade on delete set null</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_50 values(null,&#39;Chinese&#39;),(null,&#39;Computer&#39;);</span><br><span class="line">insert into t_51 values(null,&#39;Tony&#39;,1),(null,&#39;Petter&#39;,2);</span><br></pre></td></tr></table></figure>



<ul>
<li>子表依然不允许插入父表不存在的外键</li>
<li>但是可以插入外键为Null的数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 错误</span><br><span class="line">insert into t_51 values(null,&#39;Lilei&#39;,3);</span><br><span class="line"></span><br><span class="line">insert into t_51 values(null,&#39;Lilei&#39;,NULL); # OK                               </span><br></pre></td></tr></table></figure>

<ul>
<li>父表的更新（主键）会让关联的外键自动级联更新</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update t_50 set id &#x3D; 3 where id &#x3D; 1;</span><br></pre></td></tr></table></figure>

<ul>
<li>父表的删除会让关联的外键自动自动置空</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from t_50 where id &#x3D; 3;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、外键约束对子表和父表都有约束</p>
<ul>
<li>子表约束：子表不能插入父表不存在的外键</li>
<li>父表约束<ul>
<li>更新约束（默认不允许）</li>
<li>删除约束（默认不允许）</li>
</ul>
</li>
<li>一般约束<ul>
<li>级联更新</li>
<li>删除置空</li>
</ul>
</li>
</ul>
<p>2、外键约束增强了数据的安全性和可靠性，但是会增加程序对于数据的不可控性，所以是实际开发中一般会通过程序逻辑控制来保证数据的完整性和安全性，外间使用较少</p>
<h3 id="3、外键管理"><a href="#3、外键管理" class="headerlink" title="3、外键管理"></a>3、外键管理</h3><p><strong>外键管理</strong>：在表创建后期维护外键</p>
<ul>
<li>新增外键</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add [constraint &#96;外建名&#96;] foreign key(外键字段) references 表名(主键) [on 外键约束]</span><br></pre></td></tr></table></figure>

<ul>
<li>删除外键</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名;</span><br></pre></td></tr></table></figure>

<ul>
<li>更新外键：先删除后新增</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、删除外键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_51 drop foreign key t_51_ibfk_1;	# 系统生成的外键</span><br></pre></td></tr></table></figure>



<p>2、追加外键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table t_51 add constraint &#96;t_51_50&#96; foreign key(c_id) references t_50(id);</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：追加外键需要保证外键字段里的值要么为Null，要么在父表中都能找到</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、外键的使用最好的创建表结构的时候就维护好，后期的维护对子表数据有要求</p>
<h2 id="8-2-事务安全"><a href="#8-2-事务安全" class="headerlink" title="8.2 事务安全"></a>8.2 事务安全</h2><h3 id="1、事务"><a href="#1、事务" class="headerlink" title="1、事务"></a>1、事务</h3><p><strong>事务</strong>：要做的某个事情</p>
<ul>
<li>计算机中的事务是指某个程序执行单元（写操作）</li>
<li>事务安全：当事务执行后，保障事务的执行是有效的，而不会导致数据错乱</li>
<li>事务安全通常针对的是一连串操作（多个事务）而产生的统一结果</li>
</ul>
<ul>
<li>MySQL中默认的写操作是直接写入的<ul>
<li>执行写操作SQL</li>
<li>同步到数据表</li>
</ul>
</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>银行转账：从A账户转账到B账户</p>
<p>创建数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_52(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    account decimal(10,2) default 0.00</span><br><span class="line">)charset utf8;</span><br><span class="line"></span><br><span class="line">insert into t_52 values(null,&#39;Tom&#39;,10000),(null,&#39;Lucy&#39;,100);</span><br></pre></td></tr></table></figure>



<p>转账：Tom向Lucy转账，一定是分为两步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Tom扣钱</span><br><span class="line">update t_52 set account &#x3D; account - 1000 where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># Lucy收钱</span><br><span class="line">update t_52 set account &#x3D; account + 1000 where id &#x3D; 2;</span><br></pre></td></tr></table></figure>

<ul>
<li>以上两步必须都成功转账才能叫成功</li>
<li>两步操作无法确保哪一步会出问题（尤其是第二步）</li>
<li>为了保障两步都成功才能叫事务安全</li>
</ul>
<blockquote>
<p>事务安全原理</p>
</blockquote>
<p>事务安全是在操作前告知系统，接下来所有的操作都暂<strong>不同步到数据表</strong>，而是记录到<strong>事务日志</strong>，指导后续所有操作都成功，再进行同步；否则取消所有操作</p>
<p>以上述转账为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(转账开始)--&gt;B[开启事务]</span><br><span class="line">B--&gt;C&#123;事务1:Tom转出1000&#125;</span><br><span class="line">C--&gt;|成功|D[记录到事务日志]</span><br><span class="line">C--&gt;|失败|G</span><br><span class="line">D--&gt;E&#123;事务2:Lucy转入1000&#125;</span><br><span class="line">D--&gt;|失败|G</span><br><span class="line">E--&gt;|成功|F[记录到事务日志]</span><br><span class="line">F--&gt;G[关闭事务&lt;br&gt;成功:提交事务 同步到数据表\清除事务日志&lt;br&gt;失败:回滚事务 清除事务日志]</span><br><span class="line">G--&gt;H((结束))</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、事务的目的就是为了保障连续操作的一致性，保证结果的完整性</p>
<p>2、事务的原理是通过将操作结果暂时保存在事务日志中，等所有操作的结果都是成功的，然后一并同步到数据表</p>
<h3 id="2、事务处理"><a href="#2、事务处理" class="headerlink" title="2、事务处理"></a>2、事务处理</h3><p><strong>事务处理</strong>：利用自动或者手动方式实现事务管理</p>
<ul>
<li>自动事务处理：系统默认，操作结束直接同步到数据表（事务关闭状态）<ul>
<li>系统控制：变量 autocommit（值为ON，自动提交）</li>
</ul>
</li>
<li>手动事务处理<ul>
<li>开启事务： <code>start transaction</code></li>
<li>关闭事务<ul>
<li>提交事务：<code>commit</code>（同步到数据表同时清空日志数据）</li>
<li>回滚事务：<code>rollback</code>（清空日志数据）</li>
</ul>
</li>
</ul>
</li>
<li>事务回滚：在长事务执行中，可以在某个已经成功的节点处设置回滚点，后续回滚的话可以回到某个成功点<ul>
<li>设置回滚点：<code>savepoint 回滚点名字</code></li>
<li>回滚到回滚点：<code>rollback to 回滚点名字</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定操作需要使用到事务操作</p>
<p>2、开启事务</p>
<p>3、执行事务</p>
<ul>
<li>如果需要回滚点设置：设置回滚点</li>
<li>如果需要回滚：回滚到回滚点</li>
</ul>
<p>4、结束事务</p>
<ul>
<li>成功提交事务：同步到数据表，清空事务日志</li>
<li>失败回滚事务：清空事务日志</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、手动事务：启用事务转账，成功提交事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line"># Tom扣钱</span><br><span class="line">update t_52 set account &#x3D; account - 1000 where id  &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># Lucy收钱</span><br><span class="line">update t_52 set account &#x3D; account + 1000 where id  &#x3D; 2;</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>



<p>2、手动事务：启用事务转账，成功提交事务（回滚点）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启事务</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line"># Tom扣钱</span><br><span class="line">update t_52 set account &#x3D; account - 1000 where id&#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 设置回滚点</span><br><span class="line">savepoint sp1;</span><br><span class="line"></span><br><span class="line"># Lucy收钱</span><br><span class="line">update t_52 set account &#x3D; account + 10000 where id&#x3D; 2;</span><br><span class="line"></span><br><span class="line"># 操作失败回到回滚点</span><br><span class="line">rollback to sp1;</span><br><span class="line"></span><br><span class="line"># Lucy收钱</span><br><span class="line">update t_52 set account &#x3D; account + 1000 where id&#x3D; 2;</span><br><span class="line"></span><br><span class="line"># 提交事务</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>



<p>3、自动事务</p>
<ul>
<li>Mysql默认是自动提交事务的：所以事务一旦发生就会立即写入到数据表（不能多个事务一起完成任务）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;autocommit&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭自动提交事务（当前设置级别用户级：当前用户档次连接有效）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set autocommit &#x3D; 0;	</span><br></pre></td></tr></table></figure>

<ul>
<li>手动提交事务</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into t_52 values(null,&#39;Liu&#39;,1000);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、事务处理要应用到多次写操作组成的大事务中，如金融安全等</p>
<p>2、事务处理通常都会使用手动控制事务，没必要去修改原本的自动提交的机制，开启所有事务</p>
<p>3、扩展：事务处理的支持是有条件的</p>
<ul>
<li>存储引擎需要为InnoDB</li>
</ul>
<h3 id="3、事务特点"><a href="#3、事务特点" class="headerlink" title="3、事务特点"></a>3、事务特点</h3><p><strong>事务特点</strong>：事务处理具有ACID四大特性</p>
<ul>
<li>原子性（Atomicity ）：一个事务操作是一个整体，不可拆分，要么都成功，要么都失败</li>
<li>一致性（Consistency）：事务执行之前和执行之后都必须处于一致性状态，数据的完整性没有被破坏（事务逻辑的准确性）</li>
<li>隔离性（Isolation ）：事务操作过程中，其他事务不可见</li>
<li>持久性（Durability ）：事务一旦提交，结果不可改变</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、事务特点需要在对应事务操作时，结合多个用户来看才能看的完整和亲切</p>
<p>2、扩展</p>
<ul>
<li><strong>事务锁</strong>：当一个事务开启时，另外一个事务是不能对当前事务锁占用的数据进行操作的<ul>
<li>行所：当前事务只占用了一行（id精确检索数据），那么其他事务可以操作其他行数据</li>
<li>表所：当前事务占用了整张表（like扫码整个表），那么其他事务对整张表都不能操作</li>
</ul>
</li>
<li><strong>脏读</strong>：一个事务在对某个数据进行操作但尚未提交，而另外一个事务读到了这个“历史”数据其实已经被修改</li>
</ul>
<h2 id="8-3-预处理"><a href="#8-3-预处理" class="headerlink" title="8.3 预处理"></a>8.3 预处理</h2><h3 id="1、预处理"><a href="#1、预处理" class="headerlink" title="1、预处理"></a>1、预处理</h3><p><strong>预处理</strong>：prepare statement，一种预先编译SQL指令的方式（然后命令执行）</p>
<ul>
<li>预处理不同于直接处理，是将要执行的SQL指令先发送给服务器编译，然后通过指令执行<ul>
<li>发送预处理：<code>prepare 预处理名字 from &#39;要执行的SQL指令&#39;</code></li>
<li>执行预处理：<code>execute 预处理名字</code></li>
</ul>
</li>
<li>预处理管理<ul>
<li>预处理属于<strong>会话级别</strong>：即当前用户当次连接有效（断开会被服务器清理掉）</li>
<li>删除预处理：<code>deallocate | drop prepare 预处理名字</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、要执行的SQL指令想使用预处理</p>
<ul>
<li>重复执行的指令</li>
<li>涉及数据安全的指令</li>
</ul>
<p>2、发送预处理指令</p>
<p>3、执行预处理</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、查询学生的SQL指令需要重复执行很多次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 普通操作</span><br><span class="line">select * from t_42;</span><br><span class="line"></span><br><span class="line"># 预处理操作：发送预处理</span><br><span class="line">prepare p1 from &#39;select * from t_42&#39;;</span><br><span class="line"></span><br><span class="line"># 预处理操作：执行预处理</span><br><span class="line">execute p1;</span><br><span class="line"></span><br><span class="line"># 删除预处理</span><br><span class="line">deallocate  prepare p1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>预处理原理</p>
</blockquote>
<p>普通处理和预处理对比</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A(普通处理)--&gt;B[接收SQL指令]</span><br><span class="line">B--&gt;C[编译SQL]</span><br><span class="line">C--&gt;D[执行SQL]</span><br><span class="line">D--&gt;E((返回结果))</span><br><span class="line"></span><br><span class="line">A1(预处理)--&gt;B1[接收预处理指令]</span><br><span class="line">B1--&gt;C1[编译预处理指令]</span><br><span class="line">C1--&gt;D1&#123;是否执行&#125;</span><br><span class="line">D1--&gt;|execute&lt;br&gt;以后都不需要执行接收SQL和编译SQL|E1[执行SQL&lt;br&gt;可重复执行]</span><br><span class="line">D1--&gt;|不执行|F1</span><br><span class="line">E1--&gt;F1((返回结果))</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、预处理就是把要执行的结构（SQL指令）提前发送给服务器端，服务器进行编译但不执行，等待执行指令后才执行</p>
<p>2、预处理的作用</p>
<ul>
<li>性能优化<ul>
<li>效率优化：同样的SQL不用每次都进行编译（编译耗时）<ul>
<li>普通处理：每次都需要编译</li>
<li>预处理：编译一次</li>
</ul>
</li>
<li>网络传输优化：复杂的SQL指令只需要传输一次<ul>
<li>普通处理：每次都需要网络传输SQL指令</li>
<li>预处理：传输一次SQL指令，以后都是执行指令</li>
</ul>
</li>
</ul>
</li>
<li>安全：有效防止SQL注入（外部通过数据的特殊使用使得SQL的执行方式改变）<ul>
<li>普通处理：直接发送给服务器执行（容易出现SQL注入）</li>
<li>预处理：发送的是结构，数据是后期执行传入（传入协议不一样，数据安全性高）</li>
</ul>
</li>
</ul>
<h3 id="2、预处理传参"><a href="#2、预处理传参" class="headerlink" title="2、预处理传参"></a>2、预处理传参</h3><p><strong>预处理传参</strong>：在执行预处理的时候传入<strong>预处理需要的可变数据</strong></p>
<ul>
<li><p>一般预处理都不会是固定死的SQL指令，而是具有一些数据可变的执行（条件）</p>
<ul>
<li>可变数据的位置使用占位符 <code>?</code> 占位</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prepare 预处理名字 from &#96;预处理指令 变化部分使用?替代&#96;</span><br></pre></td></tr></table></figure></li>
<li><p>在执行预处理的时候将实际数据传进去代替占位符执行SQL</p>
<ul>
<li>数据存储到变量（预处理传入的值必须是变量保存的）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set @变量名 &#x3D; 值</span><br></pre></td></tr></table></figure>

<ul>
<li>使用using关键字传参</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execute 预处理名字 using @变量名</span><br></pre></td></tr></table></figure>

<ul>
<li>数据传入的顺序与预处理中占位符的顺序一致</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、同样的SQL指令要执行N次，但是条件不一致</p>
<p>2、使用预处理占位符发送预处理指令</p>
<p>3、设定变量保存要传入的数据</p>
<p>4、执行预处理，携带变量参数</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>向t_40表中插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 准备预处理：涉及参数</span><br><span class="line">prepare t_40_insert from &#39;insert into t_40 values(null,?,?,?,?)&#39;;</span><br><span class="line"></span><br><span class="line"># 设置变量并传入参数</span><br><span class="line">set @name &#x3D; &#39;药师兜&#39;;</span><br><span class="line">set @gender &#x3D; &#39;男&#39;;</span><br><span class="line">set @age &#x3D; 23;</span><br><span class="line">set @class_name &#x3D; &#39;木叶1班&#39;;</span><br><span class="line"></span><br><span class="line"># 执行预处理</span><br><span class="line">execute t_40_insert using @name,@gender,@age,@class_name;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、预处理传参是实际应用预处理时最常见的方式</p>
<p>2、预处理指令可以适用于增删改查各种指令</p>
<p>3、如果预处理的指令不是在一次连接中重复使用，那么预处理反而会降低效率。所以预处理的执行如果不是考虑到安全因素，那么一定是SQL需要重复执行</p>
<h2 id="8-4-视图"><a href="#8-4-视图" class="headerlink" title="8.4 视图"></a>8.4 视图</h2><h3 id="1、视图"><a href="#1、视图" class="headerlink" title="1、视图"></a>1、视图</h3><p><strong>视图</strong>：view，一种由select指令组成的<strong>虚拟表</strong></p>
<ul>
<li>视图是虚拟表，可以使用表管理（结构管理）<ul>
<li>为视图提供数据的表叫做基表</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建视图</span><br><span class="line">create view 视图名字 as select指令;</span><br><span class="line"></span><br><span class="line"># 访问视图：一般都是查询</span><br><span class="line">select *&#x2F;字段名 from 视图名字;</span><br></pre></td></tr></table></figure>

<ul>
<li>视图有结构，但不存储数据<ul>
<li>结构：select选择的字段</li>
<li>数据：访问视图时执行的select指令</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要使用视图提供数据</p>
<ul>
<li>数据来源是多张表</li>
<li>对外部系统提供数据支撑（保护基表数据）</li>
</ul>
<p>2、使用视图</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、需要对外提供一个学生详情的数据，经常使用：可以利用视图实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对外提供数据，要保护数据本身的安全</span><br><span class="line"># 需要长期使用</span><br><span class="line"></span><br><span class="line"># 创建视图</span><br><span class="line">create view v_student_info as select * from t_45 left join t_46 using(c_id);</span><br><span class="line"># 使用视图：像表一样使用</span><br><span class="line">select * from v_student_info;</span><br></pre></td></tr></table></figure>



<p>2、有些复杂的SQL又是经常用到的，如多张表的连表操作：可以利用视图实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 院系表</span><br><span class="line">create table t_53(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_53 values(null,&#39;语言系&#39;),(null,&#39;考古系&#39;);</span><br><span class="line"></span><br><span class="line"># 专业表</span><br><span class="line">create table t_54(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    s_id int not null comment &#39;学院id&#39;</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_54 values(null,&#39;English&#39;,1),(null,&#39;Chinese&#39;,1);</span><br><span class="line"></span><br><span class="line"># 学生表</span><br><span class="line">create table t_55(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    s_id int not null comment &#39;专业Id&#39;</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into t_55 values(null,&#39;Lilei&#39;,2),(null,&#39;Mark&#39;,2),(null,&#39;Tony&#39;,1);</span><br><span class="line"></span><br><span class="line"># 获取所有学生的明细信息</span><br><span class="line">select stu.*,sub.name as sub_name,sub.s_id as sch_id,sch.name as sch_name from t_55 as stu left join t_54 sub on stu.s_id &#x3D; sub.id left join t_53 sch on sub.s_id &#x3D; sch.id;</span><br><span class="line"></span><br><span class="line"># 以视图保存这类复杂指令，后续可以直接访问视图</span><br><span class="line">create view v_student_detail as select stu.*,sub.name as sub_name,sub.s_id as sch_id,sch.name as sch_name from t_55 as stu left join t_54 sub on stu.s_id &#x3D; sub.id left join t_53 sch on sub.s_id &#x3D; sch.id;</span><br><span class="line"></span><br><span class="line">select * from v_student_detail;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、视图是用来提供数据支持的，是由select指令组成的结构</p>
<ul>
<li>存在结构</li>
<li>不存在数据（数据是使用时调用select指令动态获取数据）</li>
</ul>
<p>2、视图的目的</p>
<ul>
<li>方便提供全面数据：可以根据需求组织数据，而实际上不会在数据库产生数据冗余</li>
<li>数据安全：视图本质是来源于数据基表，但是对外可以保护基本的数据结构</li>
</ul>
<h3 id="2、视图管理"><a href="#2、视图管理" class="headerlink" title="2、视图管理"></a>2、视图管理</h3><p><strong>视图管理</strong>：对视图结构的管理</p>
<ul>
<li>视图查看：显示视图结构和具体视图信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;	# 查看全部视图</span><br><span class="line">show create table&#x2F;view 视图名字;	# 查看视图创建指令</span><br><span class="line">desc 视图名字;	 # 查看视图结构</span><br></pre></td></tr></table></figure>

<ul>
<li>视图修改：更改视图逻辑</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更改视图</span><br><span class="line">alter view 视图名 as 新的查询指令;</span><br><span class="line">create or replace view 视图名 as 新的查询指令;	# 创建新的或者替换新的</span><br></pre></td></tr></table></figure>

<ul>
<li>视图删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop view 视图名; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>示例</p>
</blockquote>
<p>1、查看全部视图和视图明细</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;	# 查看全部表，包括视图</span><br><span class="line">desc v_student_detail;	# 查看视图结构</span><br><span class="line">show create view v_student_detail;	# 查看视图创建明细</span><br></pre></td></tr></table></figure>



<p>2、修改视图：重置视图数据逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter view v_student_info as select t1.s_name,t2.c_name from t_45 t1 left join t_46 t2 using(c_id);</span><br><span class="line">create or replace view v_student_info as select t1.s_name,t2.c_name from t_45 t1 left join t_46 t2 using(c_id);</span><br></pre></td></tr></table></figure>



<p>3、删除视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop view v_student_info;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、视图操作与表操作类似，通常情况下不会经常的去修改维护，而是会在一开始就维护好</p>
<p>2、视图管理可以与表一样对结构进行管理</p>
<h3 id="3、视图数据操作"><a href="#3、视图数据操作" class="headerlink" title="3、视图数据操作"></a>3、视图数据操作</h3><p><strong>视图数据操作</strong>：直接对视图进行写操作（增删改）然后实现基表数据的变化</p>
<ul>
<li>视图所有的数据操作都是最终对基表的数据操作</li>
<li>视图操作条件<ul>
<li>多基表视图：不允许操作（增删改都不行）</li>
<li>单基表视图：允许增删改<ul>
<li>新增条件：视图的字段必须包含基表中所有不允许为空的字段</li>
</ul>
</li>
<li>with check option：操作检查规则<ul>
<li>默认不需要这个规则（创建视图时指定）：视图操作只要满足前面上述条件即可</li>
<li>增加此规则：视图的数据操作后，必须要保证该视图还能把通过视图操作的数据查出来（否则失败）</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、根据需求确定需要使用视图</p>
<p>2、确定允许视图进行数据操作（通常用户权限设定，且是单基表视图）</p>
<p>3、确定视图数据的操作是否需要操作检查（有where条件筛选，且只对新增和更新有影响）</p>
<ul>
<li>需要：增加with check option</li>
<li>不需要</li>
</ul>
<p>4、使用视图进行数据操作（最终数据写落点是基表）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、增加一个单表视图和多表视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create view v_student_1 as select s_id,s_name from t_45;</span><br><span class="line">create view v_student_2 as select s.*,c.c_name from t_45 s left join t_46 c using(c_id);</span><br><span class="line">create or replace view v_student_3 as select * from t_45 where c_id is not null with check option;</span><br></pre></td></tr></table></figure>



<p>2、新增数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into v_student_1 values(null,&#39;student7&#39;);	# 正确：视图包含所有必有字段</span><br><span class="line">insert into v_student_2 values(null,&#39;student8&#39;,null,null); # 错误：不可插入</span><br><span class="line">insert into v_student_3 values(null,&#39;student8&#39;,null);	# 错误：check option，因为第三个字段c_id为NULL，不符合视图筛选条件，查不出来</span><br><span class="line">insert into v_student_3 values(null,&#39;Student9&#39;,1);	# 正确</span><br></pre></td></tr></table></figure>



<p>3、更新数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update v_student_1 set s_name &#x3D; &#39;boy&#39; where s_id &#x3D; 8;</span><br><span class="line">update v_student_2 set s_name &#x3D; &#39;boy&#39; where s_id &#x3D; 7; # 错误：不可修改</span><br><span class="line">update v_student_3 set c_id &#x3D; null where s_id &#x3D; 1;	  # 错误：check option，修改后c_id为null，变得不符合视图筛选条件了</span><br><span class="line">update v_student_3 set s_name &#x3D; &#39;boy&#39; where s_id &#x3D; 1; # 正确</span><br></pre></td></tr></table></figure>



<p>4、删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from v_student_1 where s_id &#x3D; 2;</span><br><span class="line">delete from v_student_2 where s_id &#x3D; 3;	# 错误：不可删除</span><br><span class="line">delete from v_student_3 where s_id &#x3D; 1;	# 可以删除，说明with check option不影响删除操作</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、视图数据操作一般情况下是不允许的，通常之所以对外提供视图就提供数据的只读操作</p>
<p>2、视图数据操作与视图的基表数量和字段有关</p>
<ul>
<li>多基表视图不允许任何写操作</li>
<li>单基表视图允许更新和删除、根据情况允许新增（视图包含基表中所有不允许为空字段）</li>
</ul>
<p>3、with check option是针对有where条件的视图组成有效，需要手动选择是否增加该选项</p>
<ul>
<li>视图数据的新增、修改后，必须与原来的查询结果是一致的（新增一定要能在视图中看到）</li>
<li>视图数据的删除不受with check option影响</li>
<li>视图数据的新增、修改都是针对当前视图能查出来的，否则既不报错也不生效</li>
<li>with check option还可以更复杂，如果有兴趣可以深入的了解一下</li>
</ul>
<h3 id="4、视图算法"><a href="#4、视图算法" class="headerlink" title="4、视图算法"></a>4、视图算法</h3><p><strong>视图算法</strong>：指视图在执行过程中对于内部的select指令的处理方式</p>
<ul>
<li>视图算法在创建视图时指定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create ALGORITHM &#x3D; 算法 view 视图名字 as select指令;</span><br></pre></td></tr></table></figure>

<ul>
<li>视图算法一共有三种<ul>
<li>undefined：默认的，未定义算法，即系统自动选择算法</li>
<li>merge：合并算法，就是将视图外部查询语句跟视图内部select语句合并后执行，效率高（系统优先选择）</li>
<li>temptable：临时表算法，即系统将视图的select语句查出来先得出一张临时表，然后外部再查询（temptable算法视图不允许写操作）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定使用视图</p>
<p>2、确定视图算法：考虑视图内部SQL指令中的子句使用情况</p>
<p>3、创建视图并使用视图</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建三种不同算法视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create algorithm &#x3D; undefined view v_student_4 as select * from t_42 order by age desc;</span><br><span class="line">create algorithm &#x3D; merge view v_student_5 as select * from t_42 order by age desc;</span><br><span class="line">create algorithm &#x3D; temptable view v_student_6 as select * from t_42 order by age desc;</span><br></pre></td></tr></table></figure>

<p>2、使用视图：为了体现算法效果，给视图增加分组效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),any_value(name),any_value(age),class_name,max(age) from v_student_4 group by class_name;</span><br><span class="line">select count(*),any_value(name),any_value(age),class_name,max(age) from v_student_5 group by class_name;</span><br><span class="line">select count(*),any_value(name),any_value(age),class_name,max(age) from v_student_6 group by class_name;</span><br></pre></td></tr></table></figure>

<p>3、临时表算法的视图不能进行数据插入操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into v_student_6 values(null,&#39;冥加&#39;,&#39;男&#39;,100,&#39;神妖1班&#39;); # 错误：不可插入</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、视图算法是用来结合外部外的查询指令的优化思路，主要的优化方式有两种</p>
<ul>
<li>merge：合并算法，将视图的select与外部select合并成一条，然后执行一次（效率高）</li>
<li>temptable：临时表算法，视图的指令单独执行得到一个二维表，然后外部select再执行（安全）</li>
<li>undefined：未定义算法是一种系统自动选择的算法，系统偏向于选择merge算法</li>
</ul>
<p>2、一般在设计视图的时候要考虑到视图算法的可行性，通常视图中如果出现了order by排序的话，就要考虑使用temptable算法</p>
<ul>
<li>只要merge以后，不会导致数据因为子句的先后顺序而混乱（order by与group by的顺序混乱容易出问题）</li>
</ul>
<h2 id="8-5-数据备份与还原"><a href="#8-5-数据备份与还原" class="headerlink" title="8.5 数据备份与还原"></a>8.5 数据备份与还原</h2><p><strong>备份</strong>：backup，将数据或者结构按照一定的格式存储到另外一个文件中，以保障阶段数据的完整性和安全性</p>
<ul>
<li>将当前正确数据进行数据保存</li>
<li>备份通常是有固定的时间节点</li>
</ul>
<p><strong>还原</strong>：restore，在当前数据出问题的情况下，将之前备份的数据替换掉当前数据，保证系统的持续、正确的运行</p>
<ul>
<li>基于备份进行数据还原</li>
<li>备份还原不一定能够保证所有损失挽回</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、数据的备份与还原是作为一个正常运行的数据库必须做的事情</p>
<ul>
<li>确保数据的安全</li>
<li>将数据出错的风险降低到最小</li>
</ul>
<p>2、数据库的备份与还原是作为一个DBA最基本的技术要求（开发者也要会）</p>
<h3 id="1、表数据备份"><a href="#1、表数据备份" class="headerlink" title="1、表数据备份"></a>1、表数据备份</h3><p><strong>表数据备份</strong>：单独针对表里的<strong>数据部分</strong>进行备份（数据导出）</p>
<ul>
<li>将数据从表中查出，按照一定格式存储到外部文件<ul>
<li>字段格式化：fields<ul>
<li>terminated by：字段数据结束后使用的符号，默认是空格</li>
<li>enclosed by：字段数据包裹，默认什么都没有</li>
<li>escaped by：特殊字符的处理，默认是转义</li>
</ul>
</li>
<li>行格式化：lines<ul>
<li>terminated by：行结束符号，默认是\n，自动换行</li>
<li>starting by：行开始符号，默认没有</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段列表|*  into outfile 外部文件路径 </span><br><span class="line">    [fields terminated by 格式 enclosed by 格式]</span><br><span class="line">    [lines terminated by 格式 starting by 格式]</span><br><span class="line">from 数据表;</span><br></pre></td></tr></table></figure>

<ul>
<li>表数据备份不限定数据的来源是一张表还是多张表（可以连表）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要对表数据进行导出处理（备份），而且不需要考虑字段名字</p>
<p>2、确定导出的数据的处理</p>
<ul>
<li>字段处理（可以默认）</li>
<li>行处理（可以默认）</li>
</ul>
<p>3、执行表数据导出</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、将t_40表的数据按照默认的方式导出到文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * into outfile  &#39;D:&#x2F;t_40.csv&#39; from t_40;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果系统提示：secure-file-priv问题，说明配置没有允许进行文件的导入导出。需要在配置文件里（my.ini）配置好这个配置项：secure-file-priv = 数据导入导出路径/不指定值（重启MySQL生效）</li>
</ul>
<p>2、将t_40表的数据按照指定格式导出到文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name,gender,age,class_name into outfile &#39;D:&#x2F;t_40_self.csv&#39;</span><br><span class="line">    fields terminated by &#39;-&#39; enclosed by &#39;&quot;&#39;</span><br><span class="line">    lines starting by &#39;GO:&#39;</span><br><span class="line">from t_40;</span><br></pre></td></tr></table></figure>



<p>3、多表数据导出：t_45连接t_46表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * into outfile &#39;D:&#x2F;t_45_46.csv&#39; from t_45 left join t_46 using(c_id);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、表数据备份是一种将表中的数据按照一定的格式导出到外部文件进行保存</p>
<ul>
<li>数据取出后方便进行加工管理</li>
<li>SQL有不同的语法，但是数据的识别是一致的，所以方便进行数据库间的切换</li>
</ul>
<p>2、表数据备份通常是为了进行数据加工后存入回表中，或者到其他表</p>
<p>3、目前比较少用这种方式进行数据备份</p>
<h3 id="2、表数据还原"><a href="#2、表数据还原" class="headerlink" title="2、表数据还原"></a>2、表数据还原</h3><p><strong>表数据还原</strong>：将<strong>符合数据表结构</strong>的数据导入到数据表中（数据导入）</p>
<ul>
<li>将一定格式的数据按照一定的解析方式解析成符合表字段格式的数据导入到数据表<ul>
<li>字段处理</li>
<li>行处理</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data infile &#39;数据文件所在路径&#39; into table 表名</span><br><span class="line">    [fields terminated by 格式 enclosed by 格式]</span><br><span class="line">    [lines terminated by 格式 starting by 格式]</span><br><span class="line">    [(字段列表)];	# 如果是部分表字段，那么必须将字段列表放到最后</span><br></pre></td></tr></table></figure>

<ul>
<li>数据文件来源<ul>
<li>表数据备份的数据文件</li>
<li>外部获取或者制作的符合格式的数据</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、数据文件里的数据满足数据表的字段要求</p>
<ul>
<li>数据类型</li>
<li>字段对应数（自增长id、可以为空字段除外）</li>
</ul>
<p>2、数据文件里的数据可以通过字段加工、行加工处理满足表字段要求</p>
<p>3、使用数据导入</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、将t_40.csv数据导入到db_3数据库中的一个与t_40表结构一致的表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_40 like db_2.t_40;</span><br><span class="line"></span><br><span class="line">load data infile &#39;D:&#x2F;t_40.csv&#39; into table t_40; # 有可能因为字符集出现问题           </span><br><span class="line">load data infile &#39;D:&#x2F;t_40.csv&#39; into table t_40 charset utf8; </span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：数据加载的时候需要注意外部数据的字符集，在加载的时候需要指定字符集为外部文件数据格式，在表后增加字符集<code>charset 外部文件数据字符集</code></p>
<p>2、将t_40_self文件里的数据导入到db_3.t_40表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data infile &#39;D:&#x2F;t_40_self.csv&#39; into table t_40 charset utf8 fields terminated by &#39;-&#39; enclosed by &#39;&quot;&#39; lines starting by &#39;GO:&#39; (name,gender,age,class_name) ;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、表数据还原其实是将外部符合条件的数据，按照一定的格式要求导入到数据表中</p>
<p>2、数据导入可以解决不同格式数据或者不同数据库产品间的数据互相导入到对应数据库产品的问题</p>
<p>3、目前较少使用这种方式进行数据导入：数据的生成应该是业务产生，而不是人工参与（破坏数据的客观有效性，使得数据不真实）</p>
<h3 id="3、文件备份"><a href="#3、文件备份" class="headerlink" title="3、文件备份"></a>3、文件备份</h3><p><strong>文件备份</strong>：直接对数据表进行文件保留，属于物理备份</p>
<ul>
<li>文件备份操作简单，直接将数据表（或者数据库文件夹）进行保存迁移</li>
<li>MySQL中不同表存储引擎产生的文件不一致，保存手段也不一致<ul>
<li>InnoDB：表结构文件在ibd文件中，数据和索引存储在外部统一的ibdata文件中(Mysql7以前话是frm后缀)</li>
<li>MyIsam：每张表的数据、结构和索引都是独立文件，直接找到三个文件迁移即可</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、设定备份时间节点</p>
<p>2、设定备份文件存储位置</p>
<p>3、确定备份表的存储引擎</p>
<p>4、根据节点进行文件备份：将文件转移（复制）到其他存储位置</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、MyIsam表的文件备份：找到三个文件，复制迁移</p>
<ul>
<li>sdi：表结构文件</li>
<li>MYI：索引文件</li>
<li>MYD：数据文件</li>
</ul>
<p>2、InnoDB表的文件备份：找到两个文件，复制迁移</p>
<ul>
<li>ibd：表结构文件</li>
<li>ibdata：所有InnoDB数据文件</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、文件备份是一种简单粗暴的数据备份方式，是直接将数据文件打包管理的方式</p>
<ul>
<li>MyIsam存储引擎相对比较适合文件备份，因为MyIsam存储引擎表文件独立，不关联其他表</li>
<li>InnoDB不适合文件备份，因为不管是备份一张表还是全部数据表，都需要备份整个数据存储文件ibdata（适合整库迁移）</li>
</ul>
<p>2、文件备份方式非常占用磁盘空间</p>
<h3 id="4、文件还原"><a href="#4、文件还原" class="headerlink" title="4、文件还原"></a>4、文件还原</h3><p><strong>文件还原</strong>：利用备份的文件，替换出现问题的文件，还原到备份前的良好状态</p>
<ul>
<li><p>直接将备份的文件放到对应的位置即可</p>
</li>
<li><p>文件还原影响</p>
<ul>
<li>MyIsam存储引擎：单表备份，单表还原，不影响其他任何数据</li>
<li>InnoDB存储引擎：单表结构，整库数据，只适合整库备份还原，否则会影响其他InnoDB存储表</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、找到出问题的数据文件</p>
<ul>
<li>MyIsam：表结构、表数据、表索引三个文件（删掉即可）</li>
<li>InnoDB：表结构、整库数据表ibdata（删掉）</li>
</ul>
<p>2、将备份数据放到相应删除的文件位置</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、MyIsam数据备份表的数据迁移：单表迁移到不同数据库</p>
<p>2、InnoDB数据备份完成整个数据库的迁移（包括数据库用户信息）</p>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、文件备份的还原通常使用较少</p>
<ul>
<li>数据备份占用空间大，这种备份方式就少</li>
<li>InnoDB的备份是针对整个数据库里所有InnoDB表，还原会覆盖掉所有不需要还原的表</li>
</ul>
<p>2、文件备份与还原通常可以在数据迁移的情况下使用</p>
<ul>
<li>MyIsam：独立表的迁移（现在很少用，myisam很少用）</li>
<li>InnoDB：整个数据库的迁移</li>
</ul>
<h3 id="5、SQL备份"><a href="#5、SQL备份" class="headerlink" title="5、SQL备份"></a>5、SQL备份</h3><p><strong>SQL备份</strong>：将数据库的数据以SQL指令的形式保存到文件当中，属于逻辑备份</p>
<ul>
<li><p>SQL备份是利用Mysqldump.exe客户端实现备份</p>
</li>
<li><p>SQL备份是将备份目标（数据表）以SQL指令形式，从表的结构、数据和其他信息保存到文件</p>
<p><code>mysqldump.exe -h -P -u -p [备份选项] 数据库名字 [数据表列表] &gt; SQL文件路径</code></p>
</li>
<li><p>备份选项很多，常见的主要是数据库的备份多少</p>
<ul>
<li>全库备份：<code>--all-databases</code> 所有数据库的所有表，也不需要指定数据库名字</li>
<li>单库备份：<code>[--databases] 数据库</code> 指定数据库里的所有表（后面不要给表名）</li>
<li>部分表（单表）备份：<code>数据库名字 表1[ 表2...表N]</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定备份的时间：通常是有规则的时间备份</p>
<p>2、确定备份的目标级别：全库、单库、数据表</p>
<p>3、使用mysqldump实现备份</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、全库备份（借助于Windows下的cmd访问mysqldump.exe，当前用户使用root账号）</p>
<p><code>mysqldump.exe -uroot -proot --all-databases &gt; D:/mysql.sql</code></p>
<p>2、单库备份</p>
<p><code>mysqldump -uroot -proot --databases db_2 &gt; D:/db_2.sql</code></p>
<p>3、单表备份（没有创建数据库的指令）</p>
<p><code>mysqldump -uroot -proot db_2 t_40 t_42 &gt; D:/t_40_42.sql</code></p>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、SQL备份是一般更新频次不高的数据库的常用备份方式</p>
<p>2、SQL备份是将数据表（库）以SQL指令形式进行备份</p>
<ul>
<li>结构指令：表创建（库创建）</li>
<li>数据指令：insert数据</li>
</ul>
<p>3、SQL备份能够完成的备份结构和数据，而结构和数据又是独立的，所以比较方便用作备份和还原</p>
<ul>
<li>SQL备份比较耗费时间和占用性能，建议在闲时进行备份（用户不活跃时）</li>
<li>SQL备份可以根据数据表的重要性进行频次区分备份</li>
</ul>
<h3 id="6、SQL还原"><a href="#6、SQL还原" class="headerlink" title="6、SQL还原"></a>6、SQL还原</h3><p><strong>SQL还原</strong>：在需要用到SQL备份数据时，想办法让SQL执行，从而实现备份数据的还原</p>
<ul>
<li>SQL还原可以使用Mysql.exe进行操作</li>
</ul>
<p><code>mysql.exe -h -P -u -p [数据库名字] &lt; SQL文件路径</code></p>
<ul>
<li>SQL还原可以在进入到数据库之后利用SQL指令还原</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source SQL文件路径;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定数据库（表）需要进行数据还原</p>
<ul>
<li>数据错乱</li>
<li>数据不完整</li>
</ul>
<p>2、找到对应节点的SQL备份文件</p>
<p>3、SQL还原</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、使用mysql客户端对db_2的数据文件进行单库还原（通常针对数据库）</p>
<p><code>mysql.exe -uroot -p &lt; D:/db_2.sql</code></p>
<ul>
<li>注意：如果不是库备份，那么需要指定数据库才能执行的</li>
</ul>
<p><code>mysql.exe -uroot -p db_2 &lt; D:/t_40_42.sql</code></p>
<p>2、在进入数据库之后，使用source指令还原SQL备份（通常针对表）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source D:&#x2F;t_40_42.sql;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、SQL还原是利用SQL备份文件，触发SQL指令执行，从而恢复到指定时间点的结构和数据</p>
<p>2、SQL还原不能百分百保证数据库的数据不受影响</p>
<ul>
<li>SQL备份通常不具有实时性（一般都会有时间间断）</li>
</ul>
<h3 id="7、总结-1"><a href="#7、总结-1" class="headerlink" title="7、总结"></a>7、总结</h3><p>1、数据的备份与还原是作为数据库管理者和使用者都应该掌握的一项技能</p>
<ul>
<li>保障数据安全</li>
<li>保证系统正常运行</li>
<li>保障公司和客户的利益</li>
</ul>
<p>2、数据库备份与还原的方式很多，每一种都有自己的特点和适用点，需要我们熟练区分和选择</p>
<ul>
<li>表数据备份与还原：适用于数据导出和导入，数据具有结构，但是不包含字段和类型</li>
<li>文件备份与还原：简洁方便，但是需要区分存储引擎InnoDB和MyIsam（InnoDB不适合进行文件备份）</li>
<li>SQL备份与还原：不限定存储引擎，随时随地可以备份，不过备份和还原的效率都比较低（完整备份）</li>
</ul>
<p>3、数据库的备份与还原是一门学问，所以不同的企业、业务都会选择不同的备份策略，也有可能使用交叉策略备份来确保数据的安全，而且一般会将备份文件与运行环境分离开来以确保数据真正的隔离和安全。</p>
<h2 id="8-6-用户管理"><a href="#8-6-用户管理" class="headerlink" title="8.6 用户管理"></a>8.6 用户管理</h2><h3 id="1、账号管理"><a href="#1、账号管理" class="headerlink" title="1、账号管理"></a>1、账号管理</h3><p><strong>账号管理</strong>：根据项目的需求设置和管理账号</p>
<ul>
<li>账号是权限依赖的对象，先有账号才有权限</li>
<li>MySQL中账号的组成分为两个部分：用户名 @ 主机地址（root@localhost）<ul>
<li>用户名为用户登录时的名字</li>
<li>主机地址：是允许账号所在客户端的访问的客户端IP（如上述root只能在服务器本机通过客户端访问）</li>
</ul>
</li>
<li>账号管理<ul>
<li>创建账号：<code>create user 用户名@主机地址 identified by &#39;明文密码&#39;;</code></li>
<li>删除账号：<code>drop user 用户名@主机地址</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、根据项目要求创建用户</p>
<p>2、根据项目要求删除用户</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、根据项目情况，跟不同的项目组创建不同的账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># A团队只允许在公司访问服务器，公司IP为163.177.151.110</span><br><span class="line">create user &#96;admin&#96;@&#96;163.177.151.110&#96; identified by &#39;admin123&#39;;</span><br><span class="line"></span><br><span class="line"># B团队不限定负责数据库管理，不限定工作地点</span><br><span class="line">create user &#96;admin&#96; identified by &#39;admin321&#39;;</span><br></pre></td></tr></table></figure>



<p>2、开发任务结束，A团队的任务已经完成，不需要进行数据库操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user &#96;admin&#96;@&#96;163.177.151.110&#96;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、账号管理是用户管理的基础，但是账号管理也只是用户管理的一部分</p>
<ul>
<li>账号管理是要考虑数据安全因素划分</li>
<li>账号管理单独应用较少，一般都要配合权限控制</li>
<li>账号管理也是DBA对于数据库管理的一种重要手段：根据项目划分账号</li>
<li>大的项目或者大的数据库服务器上几乎不会给开发使用root账号（权限太大）</li>
</ul>
<h3 id="2、权限管理"><a href="#2、权限管理" class="headerlink" title="2、权限管理"></a>2、权限管理</h3><p><strong>权限管理</strong>：对账号进行权限的支持与回收</p>
<ul>
<li><p>账号创建之初除了登录是没有其他操作权限的</p>
</li>
<li><p>账号的管理通常需要配合权限的使用</p>
<ul>
<li>赋权：给账号绑定相应的权限 <code>grant 权限列表 on 数据库|*.数据表|* to 用户名@主机地址 </code></li>
<li>回收：将账号已有的权限回收 <code>revoke 权限列表 on 数据库|*.数据表|* from 用户名@主机地址 </code></li>
<li>刷新权限：<code>flush privileges</code></li>
<li>查看权限：<code>show grants for 用户名@主机地址</code></li>
</ul>
</li>
<li><p>MySQL提供的权限列表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Privilege</th>
<th>Grant Table Column</th>
<th>Context</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td>
<td>Synonym for “all privileges”</td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td>
<td><code>Alter_priv</code></td>
<td>Tables</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td>
<td><code>Alter_routine_priv</code></td>
<td>Stored routines</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td>
<td><code>Create_priv</code></td>
<td>Databases, tables, or indexes</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td>
<td><code>Create_role_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td>
<td><code>Create_routine_priv</code></td>
<td>Stored routines</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td>
<td><code>Create_tablespace_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td>
<td><code>Create_tmp_table_priv</code></td>
<td>Tables</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td>
<td><code>Create_user_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td>
<td><code>Create_view_priv</code></td>
<td>Views</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td>
<td><code>Delete_priv</code></td>
<td>Tables</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td>
<td><code>Drop_priv</code></td>
<td>Databases, tables, or views</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td>
<td><code>Drop_role_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td>
<td><code>Event_priv</code></td>
<td>Databases</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td>
<td><code>Execute_priv</code></td>
<td>Stored routines</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td>
<td><code>File_priv</code></td>
<td>File access on server host</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td>
<td><code>Grant_priv</code></td>
<td>Databases, tables, or stored routines</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td>
<td><code>Index_priv</code></td>
<td>Tables</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td>
<td><code>Insert_priv</code></td>
<td>Tables or columns</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td>
<td><code>Lock_tables_priv</code></td>
<td>Databases</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td>
<td><code>Process_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td>
<td>See <code>proxies_priv</code> table</td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td>
<td><code>References_priv</code></td>
<td>Databases or tables</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td>
<td><code>Reload_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td>
<td><code>Repl_client_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td>
<td><code>Repl_slave_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td>
<td><code>Select_priv</code></td>
<td>Tables or columns</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td>
<td><code>Show_db_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td>
<td><code>Show_view_priv</code></td>
<td>Views</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td>
<td><code>Shutdown_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td>
<td><code>Super_priv</code></td>
<td>Server administration</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td>
<td><code>Trigger_priv</code></td>
<td>Tables</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td>
<td><code>Update_priv</code></td>
<td>Tables or columns</td>
</tr>
<tr>
<td><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td>
<td>Synonym for “no privileges”</td>
<td>Server administration</td>
</tr>
</tbody></table>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、创建新的用户账号</p>
<p>2、根据需求赋予/回收指定数据库（一般整库）或者指定数据表的操作权限</p>
<p>3、刷新权限</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、给用户admin@localhost分配权限：db_2下所有表的所有权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#96;admin&#96;@&#96;localhost&#96; identified by &#39;123456&#39;;</span><br><span class="line">grant all privileges on db_2.* to &#96;admin&#96;@&#96;localhost&#96;;</span><br></pre></td></tr></table></figure>



<p>2、给用户admin分配权限：db_2下的查看视图权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select on db_2.v_student_1 to &#96;admin1&#96;;</span><br><span class="line">grant select on db_2.v_student_2 to &#96;admin1&#96;;</span><br><span class="line">grant select on db_2.v_student_3 to &#96;admin1&#96;;</span><br><span class="line">grant select on db_2.v_student_4 to &#96;admin1&#96;;</span><br><span class="line">grant select on db_2.v_student_5 to &#96;admin1&#96;;</span><br><span class="line">grant select on db_2.v_student_6 to &#96;admin1&#96;;</span><br></pre></td></tr></table></figure>



<p>3、回收权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果用户不要了，可以直接删除用户，保留用户不给权限，就回收全部权限</span><br><span class="line">revoke all on db_2.* from &#96;admin&#96;@&#96;localhost&#96;;</span><br><span class="line"></span><br><span class="line"># 针对单独授权表的权限回收：只能针对表进行操作</span><br><span class="line">revoke select on db_2.v_student_1 from &#96;admin1&#96;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、权限管理是整个用户管理的核心：账号只能让用户能够连接服务器，而权限管理才能给用户提供各类操作</p>
<p>2、权限的操作是根据使用账号的用户需要出发的</p>
<ul>
<li>DBA用户通常可以分配整个数据库所有库的权限：all on *.*</li>
<li>项目管理级别的用户可以针对所负责项目的权限：all on 数据库.*（多个项目分配多次）</li>
<li>项目开发者用户可以针对所负责项目模块的权限：权限列表 on 数据库.表名/*（如果是跨项目分配多次）</li>
<li>常用的开发者权限有：<ul>
<li>create、alter、drop：库、表结构操作</li>
<li>insert、select、update、delete：数据操作</li>
<li>references：外键权限</li>
<li>index：索引</li>
</ul>
</li>
</ul>
<p>3、扩展：可以直接使用赋权创建新用户（MySQL7以上不允许这么操作）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select on db_2.* to &#96;user&#96;@&#96;localhost&#96; with grant option;</span><br></pre></td></tr></table></figure>



<h3 id="3、角色管理"><a href="#3、角色管理" class="headerlink" title="3、角色管理"></a>3、角色管理</h3><p><strong>角色管理</strong>：role，即根据角色来分配权限，然后用户只需要关联角色即可（分配角色）：Mysql8以后才有的</p>
<ul>
<li>角色的存在可以更方便的用户维护多个具有相同权限的用户（核心价值）</li>
<li>角色相关操作和语法<ul>
<li>创建角色：<code>create role 角色名字1[,角色名字2,...角色名字N]</code>（可批量创建）</li>
<li>分配权限：<code>grant 权限列表 on 数据库|*.数据表|* to 角色名字</code></li>
<li>绑定角色：<code>grant 角色名字 to 用户名@主机地址</code></li>
<li>撤销角色：<code>revoke 角色名字 from 用户名@主机地址</code></li>
<li>回收角色权限：<code>revoke 权限列表 on 数据库|*.数据表|* from 角色名字</code></li>
<li>删除角色：<code>drop role 角色名字1[,角色名字2,...角色名字N]</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p><strong>关联角色</strong></p>
<p>1、创建角色</p>
<p>2、确定角色的权限：给角色分配权限</p>
<p>3、将角色分配给用户（和第2步可以没有先后关系）</p>
<p><strong>取关角色</strong></p>
<p>1、权限过大：回收角色权限</p>
<p>2、放弃角色：删除角色</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建用户角色，分配给具有同样权限的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建角色（角色与用户名很相似）</span><br><span class="line">create role developer,app_read,app_write;</span><br><span class="line"></span><br><span class="line"># 给角色分配权限</span><br><span class="line">grant all on db_2.* to developer;</span><br><span class="line">grant select on db_2.* to app_read;</span><br><span class="line">grant insert,update,delete on db_2.* to app_write;</span><br><span class="line"></span><br><span class="line"># 创建用户，并分配角色给用户</span><br><span class="line">create user &#39;admin1&#39;@&#39;%&#39; identified by &#39;1234&#39;;</span><br><span class="line">create user &#39;admin2&#39;@&#39;%&#39; identified by &#39;1234&#39;;</span><br><span class="line">create user &#39;admin3&#39;@&#39;%&#39; identified by &#39;1234&#39;;</span><br><span class="line"></span><br><span class="line">grant developer to &#39;admin1&#39;@&#39;%&#39;;</span><br><span class="line">grant app_read to &#39;admin2&#39;@&#39;%&#39;,&#39;admin1&#39;@&#39;%&#39;; # 允许批量给用户分配角色</span><br><span class="line">grant app_write to &#39;admin3&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：虽然权限已经最终关联到用户，但是用户并不能真正使用权限，还需要权限分配者每次登陆服务器时激活角色：<code>set default role all  to 用户名@主机地址</code>（一次只能激活一个角色）</p>
<ul>
<li>激活之后对应的用户需要退出之后重新登录才行</li>
</ul>
<p>2、回收角色权限或者角色</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 回收角色权限</span><br><span class="line">revoke insert,delete on db_2.* from app_write;</span><br><span class="line"></span><br><span class="line"># 回收角色</span><br><span class="line">revoke app_read from &#39;admin2&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line"># 删除角色</span><br><span class="line">drop role developer;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、角色管理是利用角色与权限关联，实现角色批量关联用户</p>
<ul>
<li>方便权限的重复利用</li>
<li>方便相同权限用户的批量维护</li>
</ul>
<p>2、角色的使用需要角色创建者（有权限的就行）激活角色才能使用（关联角色的用户需要重新登录才会生效）</p>
<h1 id="9-PHP操作MySQL数据库"><a href="#9-PHP操作MySQL数据库" class="headerlink" title="9 PHP操作MySQL数据库"></a>9 PHP操作MySQL数据库</h1><h2 id="9-1-PHP扩展"><a href="#9-1-PHP扩展" class="headerlink" title="9.1 PHP扩展"></a>9.1 PHP扩展</h2><p><strong>PHP扩展</strong>：PHP中提供了一些PHP本身做不到，但是通过更底层的实现可以帮助PHP解决需求的外部支持</p>
<ul>
<li>PHP的外部支持在PHP安装目录下的ext文件夹下（extension扩展）</li>
<li>PHP的外部支持通常以dll（Windows下，动态链接库）结尾</li>
<li>PHP需要应用扩展就需要在配置文件中（php.ini）加载对应的动态链接库<ul>
<li>扩展路径：extension_dir</li>
<li>扩展名称：extension</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定需要使用的外部扩展的名字</p>
<p>2、确定外部扩展所在的路径（通常是统一放到ext目录下）</p>
<p>3、修改配置文件</p>
<ul>
<li>扩展路径（一次性修改）</li>
<li>扩展名称（按需加载）</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>在PHP中开启MySQLi数据库扩展，允许PHP实现数据库操作</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">;配置路径</span></span><br><span class="line"><span class="attr">extension_dir</span> = <span class="string">&quot;D:/server/php7/ext&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;开启mysqli扩展，将mysqli前面的注释去掉</span></span><br><span class="line"><span class="attr">extension</span>=php_mysqli</span><br></pre></td></tr></table></figure>

<ul>
<li>PHP的配置文件已经加载到Apache，要生效，需要重启Apache</li>
</ul>
<blockquote>
<p>小结</p>
</blockquote>
<p>1、扩展是PHP用来实现一些复杂功能时所要用到的其他技术体系</p>
<ul>
<li>扩展在必要时才加载</li>
<li>扩展加载分为两个部分<ul>
<li>扩展路径</li>
<li>扩展名字</li>
</ul>
</li>
</ul>
<p>2、PHP配置文件的修改要及时的重启服务器才会生效</p>
<h2 id="9-2-MySQLi扩展"><a href="#9-2-MySQLi扩展" class="headerlink" title="9.2 MySQLi扩展"></a>9.2 MySQLi扩展</h2><p><strong>MySQLi扩展</strong>：PHP提供的一套包含面向过程和面向对象两种方式实现的MySQL数据库操作</p>
<ul>
<li>PHP加载了MySQLi扩展后，PHP就可以充当MySQL的客户端<ul>
<li>连接认证服务器</li>
<li>发送SQL指令</li>
<li>接收SQL执行结果</li>
<li>解析结果</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、测试PHP加载MySQLi是否成功（PHPinfo()函数）</p>
<p>2、使用MySQLi提供的连接认证函数连接认证（mysqli_connect()函数）</p>
<p>3、检查连接信息（mysqli_connect_error()函数）</p>
<p>4、执行SQL操作</p>
<ul>
<li>新增操作</li>
<li>删除操作</li>
<li>查询操作</li>
<li>修改操作</li>
</ul>
<p>5、关闭连接（mysqli_close()函数）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>PHP操作MySQLi实现数据库的连接认证和关闭</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpinfo();	<span class="comment"># 查看PHP是否加载mysqli成功（测试使用，非正式代码）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、连接认证</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost:3306&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、错误检查</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>) <span class="keyword">die</span>(mysqli_connect_error());</span><br><span class="line"><span class="comment"># iconv函数可以实现字符集转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、其他操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、关闭连接</span></span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、mysqli提供的扩展里有很多函数可以帮助我们解决相应问题</p>
<p>2、PHP充当了mysql的客户端来操作服务器</p>
<ul>
<li>连接认证：错误检查</li>
<li>数据操作：错误检查</li>
<li>关闭连接</li>
</ul>
<h2 id="9-3-MySQLi常用函数"><a href="#9-3-MySQLi常用函数" class="headerlink" title="9.3 MySQLi常用函数"></a>9.3 MySQLi常用函数</h2><ul>
<li>mysqli_connect：连接认证，正确返回连接对象，失败返回false</li>
<li>mysqli_connect_error：连接时错误获取错误信息</li>
<li>mysqli_select_db：选择数据库，失败返回false，成功返回true</li>
<li>mysqli_set_charset：设置客户端字符集</li>
<li>mysqli_query：执行SQL指令，第一个参数为连接对象，第二个参数为SQL指令<ul>
<li>失败返回false</li>
<li>成功<ul>
<li>写操作返回true</li>
<li>读操作返回一个结果集对象</li>
</ul>
</li>
</ul>
</li>
<li>mysqli_insert_id：上一步新增操作产生的自增长id</li>
<li>mysqli_affected_rows：上一个操作（写）受影响的行数</li>
<li>mysqli_num_rows：当前结果集对象（读）中记录数</li>
<li>mysqli_fetch_assoc：从当前结果集中查询出一条记录，返回一个关联数组<ul>
<li>结果集指针与数组指针一样移动</li>
</ul>
</li>
<li>mysqli_fetch_row：从当前结果集中查询出一条记录，返回一个索引数组</li>
<li>mysqli_fetch_all：从结果集中取出所有记录，返回二维数组</li>
<li>mysqli_errno：上述所有操作（读写）出现错误的编号</li>
<li>mysqli_error：上述所有操作出现错误的信息</li>
<li>mysqli_free_result：释放当前查询得到的结果集</li>
<li>mysqli_close：断开当前连接</li>
</ul>
<h2 id="9-4-新增数据"><a href="#9-4-新增数据" class="headerlink" title="9.4 新增数据"></a>9.4 新增数据</h2><p><strong>新增数据</strong>：利用mysqli扩展将数据写入到数据库</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、收集用户数据和新增需求</p>
<p>2、连接认证数据库</p>
<p>3、设置字符集</p>
<p>4、选择数据库</p>
<p>5、组织新增SQL指令，确认是否需要获取自增长id</p>
<p>6、发送给数据库（mysqli_query函数）</p>
<p>7、判定执行指令的执行情况</p>
<ul>
<li>mysqli_errno：错误编号</li>
<li>mysqli_error：错误信息</li>
</ul>
<p>8、获取自增长id（确定需要获取），否则返回受影响的行数</p>
<p>9、新增完成，关闭连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>新增一个学生信息入库到db_2表中的t_40表中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、接收数据（通常外部传入，需要验证）</span></span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;自来也&#x27;</span>;</span><br><span class="line"><span class="variable">$gender</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="variable">$age</span> = <span class="number">30</span>;</span><br><span class="line"><span class="variable">$class_name</span> = <span class="string">&#x27;木叶0班&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、连接认证数据库并处理可能出现的错误信息</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,mysqli_connect_error()));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、设置字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、选择数据库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&#x27;db_2&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、组织SQL指令</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into t_40 values(null,&#x27;<span class="subst">$name</span>&#x27;,&#x27;<span class="subst">$gender</span>&#x27;,<span class="subst">$age</span>,&#x27;<span class="subst">$class_name</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="comment"># 确定是否返回自增长id</span></span><br><span class="line"><span class="variable">$auto_id</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、执行SQL写入数据库</span></span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"><span class="comment"># if($res === false) die(mysqli_error($conn));</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、返回结果</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$auto_id</span>)) <span class="keyword">echo</span> mysqli_insert_id(<span class="variable">$conn</span>);	<span class="comment"># 自增长ID</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> mysqli_affected_rows(<span class="variable">$conn</span>);				<span class="comment"># 受影响的行数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、关闭连接</span></span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、新增数据主要是利用mysqli_query执行写操作，然后得出受影响行数，必要时进行自增长id获取（在执行mysqli_query之后）</p>
<p>2、无论何时，我们都需要对进行的操作进行结果验证（凡是涉及到的数据存在外部来源时）</p>
<h2 id="9-5-更新数据"><a href="#9-5-更新数据" class="headerlink" title="9.5 更新数据"></a>9.5 更新数据</h2><p><strong>更新数据</strong>：利用MySQLi扩展，将已有数据进行更新入库</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、收集用户更新的数据信息并验证</p>
<p>2、连接认证数据库</p>
<p>3、设置字符集</p>
<p>4、选择数据库</p>
<p>5、组织更新SQL指令</p>
<p>6、发送给数据库（mysqli_query函数）</p>
<p>7、判定执行指令的执行情况</p>
<ul>
<li>mysqli_errno：错误编号</li>
<li>mysqli_error：错误信息</li>
</ul>
<p>8、返回受影响的行数</p>
<p>9、更新完成，关闭连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>将所有db_2库中t_40表中所有人的年龄都+1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、接收数据（通常外部传入，需要验证）</span></span><br><span class="line"><span class="comment"># 当前需求来自内部，不需要外部数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、连接认证数据库并处理可能出现的错误信息</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,mysqli_connect_error()));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、设置字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、选择数据库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&#x27;db_2&#x27;</span>) <span class="keyword">or</span> dir(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、组织SQL指令</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update t_40 set age = age + 1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、执行SQL写入数据库</span></span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span> === <span class="literal">false</span>) <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、返回结果</span></span><br><span class="line"><span class="keyword">echo</span> mysqli_affected_rows(<span class="variable">$conn</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、关闭连接</span></span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、更新操作通常是用户已有数据上的编辑后提交实现</p>
<p>2、更新操作较少出现全部更新，一般都是个别数据更新或者批量更新，都是需要进行where条件指定的</p>
<h2 id="9-6-删除数据"><a href="#9-6-删除数据" class="headerlink" title="9.6 删除数据"></a>9.6 删除数据</h2><p><strong>删除数据</strong>：利用MySQLi扩展，将已有数据从数据表删除</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、收集用户删除的数据信息并验证（通常有权限验证）</p>
<p>2、连接认证数据库</p>
<p>3、设置字符集</p>
<p>4、选择数据库</p>
<p>5、如果有必要，需要验证要删除的数据在数据库是否存在</p>
<p>6、组织删除SQL指令</p>
<p>7、发送给数据库（mysqli_query函数）</p>
<p>8、判定执行指令的执行情况</p>
<ul>
<li>mysqli_errno：错误编号</li>
<li>mysqli_error：错误信息</li>
</ul>
<p>9、返回受影响的行数</p>
<p>10、删除完成，关闭连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>删除db_2库里t_45表中没有班级的学生</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、接收数据（通常外部传入，需要验证）</span></span><br><span class="line"><span class="comment"># 当前需求来自内部，不需要外部数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、连接认证数据库并处理可能出现的错误信息</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,mysqli_connect_error()));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、设置字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、选择数据库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&#x27;db_2&#x27;</span>) <span class="keyword">or</span> dir(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、组织SQL指令</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;delete from t_45 where c_id is null&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、执行SQL写入数据库</span></span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、返回结果</span></span><br><span class="line"><span class="keyword">echo</span> mysqli_affected_rows(<span class="variable">$conn</span>);;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、关闭连接</span></span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、删除操作与更新操作本质是一样的，都是写操作（包括新增），只是业务层面上有一些区别</p>
<ul>
<li>新增：用户需要提交全部数据（数据最多，无主键，自增长）</li>
<li>更新：用户提交部分更新数据（数据较少，有主键，更新条件）</li>
<li>删除：用户一般是点击或者选择执行（只有主键）</li>
</ul>
<p>2、很多时候，重要的业务数据一般对用户提供删除操作，但是实际并不删除：设置一个字段，用来记录是否删除（最终删除演变成更新操作）</p>
<h2 id="9-7-查询数据"><a href="#9-7-查询数据" class="headerlink" title="9.7 查询数据"></a>9.7 查询数据</h2><p><strong>查询数据</strong>：利用MySQLi扩展，从数据库查询出数据，并进行浏览器显示（变成浏览器能够识别的格式）</p>
<ul>
<li>数据查询逻辑<ul>
<li>mysqli_query将数据查询出来，此时是一个结果集对象（PHP和浏览器都不可识别）</li>
<li>利用结果集查询mysqli_fetch系列函数将结果集翻译出来，此时是一个数组（PHP能识别）</li>
<li>PHP将数组按照指定格式解析到HTML中（浏览器能识别）</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、根据需求确定要获取的数据来源</p>
<p>2、连接认证数据库</p>
<p>3、设置字符集</p>
<p>4、选择数据库</p>
<p>5、组织查询SQL指令</p>
<p>6、发送给数据库（mysqli_query函数）</p>
<p>7、判定执行指令的执行情况</p>
<ul>
<li>mysqli_errno：错误编号</li>
<li>mysqli_error：错误信息</li>
</ul>
<p>8、解析查询结果集</p>
<ul>
<li>索引数组：mysqli_fetch_row()：不包含字段名</li>
<li>关联数组：mysqli_fetch_assoc()：包含字段名（数组下标：使用较多）</li>
</ul>
<p>9、释放结果集资源：mysqli_free_result()</p>
<p>10、实现数据输出</p>
<p>11、查询完成，关闭连接</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>获取db_2库里t_40表中所有学生信息并显示在表格里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、接收数据：查询条件，当前没有条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、连接认证数据库并处理可能出现的错误信息</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,mysqli_connect_error()));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、设置字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、选择数据库</span></span><br><span class="line">mysqli_select_db(<span class="variable">$conn</span>,<span class="string">&#x27;db_2&#x27;</span>) <span class="keyword">or</span> dir(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、组织SQL指令</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from t_40&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、执行SQL查出所有数据</span></span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span> === <span class="literal">false</span>) <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、解析结果</span></span><br><span class="line"><span class="variable">$one</span> = mysqli_fetch_assoc(<span class="variable">$res</span>);	<span class="comment"># 取出一条记录</span></span><br><span class="line">                                                          </span><br><span class="line"><span class="comment"># 取出全部：循环</span></span><br><span class="line"><span class="variable">$lists</span> = [];</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$one</span> = mysqli_fetch_assoc(<span class="variable">$res</span>))&#123;</span><br><span class="line">    <span class="variable">$lists</span>[] = <span class="variable">$one</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、释放结果集资源</span></span><br><span class="line">mysqli_free_result(<span class="variable">$res</span>);</span><br><span class="line">                                                          </span><br><span class="line"><span class="comment"># 9、关闭连接</span></span><br><span class="line">mysqli_close(<span class="variable">$conn</span>);</span><br><span class="line">                                                          </span><br><span class="line"><span class="comment"># 10、输出表格</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;table&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;tr&gt;&lt;td&gt;id&lt;/td&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;性别&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;td&gt;班级&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$lists</span> <span class="keyword">as</span> <span class="variable">$one</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;<span class="subst">&#123;$one[&#x27;id&#x27;]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$one[&#x27;name&#x27;]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$one[&#x27;gender&#x27;]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$one[&#x27;age&#x27;]&#125;</span>&lt;/td&gt;&lt;td&gt;<span class="subst">&#123;$one[&#x27;class_name&#x27;]&#125;</span>&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/table&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、查询操作是数据库操作最常见的操作</p>
<ul>
<li>查询得到的结果不能直接被PHP接续，是一种结果集</li>
<li>结果集需要通过MySQLi提供的函数进行解析，取出里面的数据变成PHP可以理解的数据</li>
</ul>
<h2 id="9-8-总结"><a href="#9-8-总结" class="headerlink" title="9.8 总结"></a>9.8 总结</h2><p>1、PHP要操作数据库是通过扩展实现的，MySQLi扩展是目前通用的一种面向过程的MySQL扩展（也支持面向对象）</p>
<p>2、扩展的使用本质是使用扩展里提供的函数来帮助我们解决需求问题</p>
<ul>
<li>连接认证数据库：mysqli_connect</li>
<li>设置字符集：mysqli_set_charset</li>
<li>选择数据库：mysqli_select_db</li>
<li>执行SQL指令：mysqli_query</li>
<li>判定执行结果，获取错误信息：mysqli_errno/mysqli_error</li>
<li>新增获取自增长id：mysqli_insert_id</li>
<li>写操作获取受影响的行数：mysqli_affected_rows</li>
<li>解析查询结果：<strong>mysqli_fetch_assoc</strong>/mysqli_fetch_row</li>
<li>释放结果集资源：mysqli_free_result</li>
<li>关闭连接资源：mysqli_close</li>
</ul>
<p>3、不管是写操作还是读操作，每一次SQL操作有一些过程是相同的，应该进行封装实现代码复用</p>
<ul>
<li>数据库的连接认证以及错误处理（包括字符集和数据库选择）</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成功返回连接，失败返回false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&amp;<span class="variable">$error</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>,<span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>,<span class="variable">$port</span> = <span class="string">&#x27;3306&#x27;</span>,<span class="variable">$charset</span> = <span class="string">&#x27;utf8&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 连接认证</span></span><br><span class="line">    <span class="variable">$conn</span> = @mysqli_connect(<span class="variable">$host</span>,<span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$dbname</span>,<span class="variable">$port</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判定：连接失败，将错误信息记录下来，并返回false</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$conn</span>) &#123;</span><br><span class="line">        <span class="variable">$error</span> = iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,mysqli_connect_error());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置字符集</span></span><br><span class="line">    <span class="keyword">if</span>(!mysqli_set_charset(<span class="variable">$conn</span>,<span class="variable">$charset</span>))&#123;</span><br><span class="line">        <span class="variable">$error</span> = mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回正确结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$conn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SQL的执行和错误检测，以及错误处理</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQL执行，返回执行结果，执行失败返回false，并记录错误信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$sql</span>,&amp;<span class="variable">$error</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行失败</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$error</span> = mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回执行结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据的查询操作（一条记录和多条记录）</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询：分为一条记录查询或者多条记录查询</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$sql</span>,&amp;<span class="variable">$error</span>,<span class="variable">$all</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 调用执行函数</span></span><br><span class="line">    <span class="variable">$res</span> = execute(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判定结果</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析结果</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$all</span>)&#123;</span><br><span class="line">        <span class="comment"># 获取全部结果</span></span><br><span class="line">        <span class="variable">$lists</span> = [];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>))&#123;</span><br><span class="line">            <span class="variable">$lists</span>[] = <span class="variable">$res</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$lists</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># 获取一条结果</span></span><br><span class="line">        <span class="keyword">return</span> mysqli_fetch_assoc(<span class="variable">$res</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>写操作封装</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写操作：考虑是否需要获取自增长id</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$sql</span>,&amp;<span class="variable">$error</span>,<span class="variable">$insert</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 默认操作为删改操作（不需要自增长ID的操作）</span></span><br><span class="line">    <span class="variable">$res</span> = execute(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判定结果</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 针对用户需求判定</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$insert</span>) <span class="keyword">return</span> mysqli_insert_id(<span class="variable">$conn</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> mysqli_affected_rows(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-新闻管理系统"><a href="#10-新闻管理系统" class="headerlink" title="10 新闻管理系统"></a>10 新闻管理系统</h1><h2 id="10-1-表单传值"><a href="#10-1-表单传值" class="headerlink" title="10.1 表单传值"></a>10.1 表单传值</h2><h3 id="1、表单传值"><a href="#1、表单传值" class="headerlink" title="1、表单传值"></a>1、表单传值</h3><p><strong>表单传值</strong>：通过HTML表单，实现数据在浏览器端录入，并传递给后端语言</p>
<ul>
<li>表单传值是一种数据的传递方式</li>
<li>表单传值有多种，但是在网站应用里通常使用两种<ul>
<li>GET传值</li>
<li>POST传值</li>
</ul>
</li>
<li>表单传值给服务器做动态数据支撑提供了必要条件<ul>
<li>数据可以从浏览器端存储到服务器（数据新增）</li>
<li>数据可以通过浏览器让服务器进行数据筛选（数据查询）</li>
</ul>
</li>
<li>表单传值需要用到表单元素<ul>
<li>form表单：用来包裹多个表单元素一并提交</li>
<li>input表单元素<ul>
<li>text：文本数据</li>
<li>password：密文数据</li>
<li>textarea：长文本数据</li>
<li>hidden：隐藏数据</li>
<li>submit：提交按钮</li>
</ul>
</li>
<li>下拉框表单：select</li>
<li>按钮选择<ul>
<li>radio：单选框（互斥选框）</li>
<li>CheckBox：多选框</li>
</ul>
</li>
<li>url传值<ul>
<li>a标签：直接在请求链接后使用 ? + 数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定浏览器传值给服务器</p>
<p>2、选择传值的方式</p>
<ul>
<li>url传值：a标签</li>
<li>form表单传值：表单元素</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、url传值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;login.php?username&#x3D;XXX&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<p>2、表单传值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   	&lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;#提交对象：login.php&quot; method&#x3D;&quot;GET&#x2F;POST&quot;&gt;</span><br><span class="line">            用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">            密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、表单传值是利用HTML里的表单元素收集用户数据，或者是提供url绑定数据</p>
<ul>
<li>form表单：通常是用户提交写入的数据</li>
<li>url绑定：通常是系统提供的数据，然后让用户点击操作</li>
</ul>
<p>2、表单传值打通了用户与服务器的数据关系，允许用户将自己的数据提交给服务器，从而有了服务器的可操作空间 </p>
<h3 id="2、POST传值"><a href="#2、POST传值" class="headerlink" title="2、POST传值"></a>2、POST传值</h3><p><strong>POST传值</strong>：通过form表单使用post方式，将数据从浏览器以<strong>肉眼不可见</strong>形式传输给服务器</p>
<ul>
<li>POST传值必须使用form表单<ul>
<li>form表单的属性method的值为post（不区分大小写）</li>
<li>所有需要提交给服务器的数据元素都必须在form表单内部</li>
</ul>
</li>
<li>要提交的表单元素本身必须拥有name属性（无name属性无法提交）</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、form表单method属性使用post</p>
<p>2、根据需要提交的数据的数量和类型选择合适的form表单元素</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、提交用户登录信息：用户名和密码信息，提交给login.php处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   	&lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;login.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">            密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<p>2、提交新闻信息入库：标题、作者、内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   	&lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;insert.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            标题：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;title&quot;&gt;</span><br><span class="line">            作者：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;author&quot;&gt;</span><br><span class="line">            内容：&lt;textarea name&#x3D;&quot;content&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、post提交数据是基于form表单，只能通过form表单实现</p>
<p>2、post提交的数据不会在浏览器的地址栏出现，是为了让数据的安全性增加</p>
<p>3、post的原始意义在于数据的提交入库：也就是说通过post提交的数据通常是要进行数据库的写操作的（安全要求除外）</p>
<h3 id="3、GET传值"><a href="#3、GET传值" class="headerlink" title="3、GET传值"></a>3、GET传值</h3><p><strong>GET传值</strong>：将浏览器的数据以<strong>肉眼可见</strong>的形式提交给服务器</p>
<ul>
<li>GET传值可以通过form表单实现也可以通过url直接实现<ul>
<li>form表单：method属性使用GET（要提交的元素必须有name属性）</li>
<li>URL：直接在a标签href属性里增加要传递的数据</li>
</ul>
</li>
<li>GET传值的数据可以在浏览器地址栏里看到</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定使用GET方式传递数据</p>
<p>2、选择合适的传值方式</p>
<ul>
<li>form表单method为GET提交多个数据</li>
<li>a标签href属性提交数据：index.php?name=value&amp;name=value…</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、使用form表单提交检索数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;check.php&quot; action&#x3D;&quot;get&quot;&gt;</span><br><span class="line">            商品名字：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;goods_name&quot;&gt;</span><br><span class="line">            商品颜色：&lt;select name&#x3D;&quot;goods_color&quot;&gt;</span><br><span class="line">                &lt;option value&#x3D;1&gt;红色&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option value&#x3D;2&gt;绿色&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;option value&#x3D;3&gt;蓝色&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;&#x2F;select&gt;</span><br><span class="line">        	&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;查询&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<p>2、使用url传值：要删除的数据（新闻）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;delete.php?id&#x3D;1&quot;&gt;太平洋竟然漏水&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;delete.php?id&#x3D;2&quot;&gt;珠穆朗玛峰长高了&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;delete.php?id&#x3D;3&quot;&gt;白令海峡结冰了&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;delete.php?id&#x3D;4&quot;&gt;北极熊去南极找企鹅&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;delete.php?id&#x3D;5&quot;&gt;百慕大又双叕沉船&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、GET传值是会让用户能够直接在地址栏里看到具体的数据信息的</p>
<p>2、GET传值的目的，通常是为了将数据提交给服务器用户数据的查询操作（提交的数据通常是查询条件）</p>
<p>3、GET不会传输特别重要的数据信息</p>
<h3 id="4、PHP接收表单数据"><a href="#4、PHP接收表单数据" class="headerlink" title="4、PHP接收表单数据"></a>4、PHP接收表单数据</h3><p><strong>PHP接收表单数据</strong>：PHP将用户通过表单传递的数据变成PHP可识别的数据和可操作的方式</p>
<ul>
<li>PHP接收数据的系统行为，自动接收（PHP语言为了开发者使用方便）</li>
<li>PHP接收数据有三种方式，每一种方式都是表单元素的name属性的值作为数组元素下标，具体数据作为数组元素的值<ul>
<li>$_GET：接收浏览器GET方式传递的数据</li>
<li>$_POST：接收浏览器POST方式传递的数据</li>
<li>$_REQUEST：接收浏览器GET和POST提交的数据<ul>
<li>POST与GET如果有同名表单（名字），POST会覆盖GET</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、明确浏览器数据提交的方式：开发者后台定义后，不受浏览器端用户控制</p>
<p>2、选择合适的PHP接收方式</p>
<p>3、在浏览器请求的PHP脚本中使用PHP接收指令</p>
<p>4、通过数组下标（表单元素名字）访问数据（提交的值）</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、接收用户登录提交的信息：login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户是POST提交，所以应该使用$_POST或者$_REQUEST接收</span></span><br><span class="line">var_dump(<span class="variable">$_GET</span>,<span class="variable">$_POST</span>,<span class="variable">$_REQUEST</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出数据加工</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br></pre></td></tr></table></figure>



<p>2、接收用户的删除信息：delete.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全接收方式</span></span><br><span class="line"><span class="variable">$id</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]) ? intval(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]) : <span class="number">0</span>;</span><br><span class="line"><span class="comment"># isset判定是为了让脚本在没有真正接到数据时不会报错，从而不友好</span></span><br><span class="line"><span class="comment"># intval是因为id通常是逻辑的，需要加工成整型，这样可以防止外部进行SQL攻击</span></span><br><span class="line"><span class="comment"># 默认值0是为了方便后续进行判定，因为逻辑主键不会存在0的</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、PHP提供了三种方式接收用户提交的普通表单数据</p>
<ul>
<li>$_GET：接收浏览器GET方式传递的数据</li>
<li>$_POST：接收浏览器POST方式传递的数据</li>
<li>$_REQUEST：接收浏览器GET和POST提交的数据（因为覆盖所以不安全）</li>
</ul>
<p>2、接收数据时要考虑到数据的安全性</p>
<ul>
<li>恶意访问：isset进行存在性判定</li>
<li>数据乱写：类型转换保证数据安全</li>
<li>数据判定：保证数据的可靠性再进行服务器其他操作（提升服务器的有效工作效率）</li>
</ul>
<h2 id="10-2-新闻管理系统"><a href="#10-2-新闻管理系统" class="headerlink" title="10.2 新闻管理系统"></a>10.2 新闻管理系统</h2><h3 id="1、数据库设计"><a href="#1、数据库设计" class="headerlink" title="1、数据库设计"></a>1、数据库设计</h3><p><strong>数据库设计</strong>：根据要做的系统分析出内部存在的实体以及实体间的联系，然后创建对应的表来实现需求里复杂的关系</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、分析找出需求中存在的实体（确定表数量）</p>
<p>2、找出实体本身应该存在的信息（确定表内在属性）</p>
<p>3、找出实体间的关联关系（确定表关系）</p>
<p>4、必要时确定表关系的约束性（外键、唯一键等）</p>
<p>5、创建数据库</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、一个新闻管理系统应该包含的信息如下</p>
<ul>
<li>新闻发布者：作者author</li>
<li>新闻本身：news</li>
<li>新闻分类：category</li>
<li>发布者来源：新闻平台platform</li>
<li>评论信息：comment</li>
<li>用户管理：user</li>
</ul>
<p><strong>简易新闻管理系统</strong>：作者、新闻</p>
<p>2、确定试题内在联系（简易新闻管理系统）</p>
<ul>
<li>作者：作者id、名字、所属平台</li>
<li>新闻：新闻id，标题、内容、发布时间</li>
</ul>
<p>3、确定实体间的关联关系（简易新闻管理系统）</p>
<ul>
<li>新闻：作者id</li>
</ul>
<p>4、创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 数据库</span><br><span class="line">create database news charset utf8;</span><br><span class="line"></span><br><span class="line"># 创建数据表</span><br><span class="line">create table news.author(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(50) not null,</span><br><span class="line">    platform varchar(50) comment &#39;发布平台&#39;</span><br><span class="line">)charset utf8;</span><br><span class="line">insert into news.author values(null,&#39;佚名&#39;,&#39;佚名自媒体&#39;),</span><br><span class="line">(null,&#39;留白&#39;,&#39;海上自媒体&#39;),(null,&#39;花田错&#39;,&#39;音乐自媒体&#39;);</span><br><span class="line"></span><br><span class="line">create table news.news(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    title varchar(50) not null comment &#39;新闻标题&#39;,</span><br><span class="line">    content text not null comment &#39;新闻内容&#39;,</span><br><span class="line">    a_id int unsigned not null comment &#39;作者id&#39;,</span><br><span class="line">    publish int unsigned not null comment &#39;发布时间&#39;</span><br><span class="line">)charset utf8;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、根据需求设计数据库实际上是一个经验活，需要做的多之后才知道具体该怎么划分和设计，但是总的步骤是不变的</p>
<ul>
<li>确定实体数量（表）</li>
<li>确定实体内在关联（字段）</li>
<li>确定实体间关系（外联）</li>
<li>设置数据库</li>
</ul>
<p>2、数据库的设计就是看上去平台可能不大，但是实际涉及的实体数量和字段却很多。大型项目的实体数量和字段数量是非常多的</p>
<h3 id="2、新增新闻"><a href="#2、新增新闻" class="headerlink" title="2、新增新闻"></a>2、新增新闻</h3><p><strong>新增新闻</strong>：用户通过新增表单实现新闻入库</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定访问新增表单的url：用户直接访问（add.php）</p>
<ul>
<li><p>获取作者信息</p>
</li>
<li><p>PHP加载HTML文件进行表单展示</p>
</li>
</ul>
<p>2、确定表单的提交方式和提交对象</p>
<ul>
<li>method：post提交</li>
<li>action：将来处理新闻新增的PHP文件：insert.php</li>
<li>显示作者信息</li>
</ul>
<p>3、PHP接收用户提交的数据</p>
<ul>
<li>安全接收</li>
<li>数据逻辑验证</li>
</ul>
<p>4、PHP操作数据库</p>
<ul>
<li>连接认证（选择数据库）</li>
<li>字符集设置</li>
<li>安全验证</li>
</ul>
<p>5、组织SQL入库</p>
<ul>
<li>组织SQL指令</li>
<li>执行SQL指令</li>
<li>安全验证SQL执行</li>
</ul>
<p>6、提示操作结果</p>
<ul>
<li>正确：跳转到列表页</li>
<li>错误：回到新增页面</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<p>1、创建add.php，然后加载添加新闻的表单</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包含模板文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;news_add.html&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>2、修改资源：静态资源（js、css）和表单资源</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;insert.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;news_title&quot;</span>&gt;</span>新闻标题<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;news_title&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;news_author&quot;</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;a_id&quot;</span>&gt;</span>作者名字<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;news_content&quot;</span>&gt;</span>新闻内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-block&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、在add.php中，加载新增表单之前要获取所有作者信息（假设作者是注册的）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接认证</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_connect_error());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有数据</span></span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="string">&#x27;select id,name from author&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出数据</span></span><br><span class="line"><span class="variable">$authors</span> = [];</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>))&#123;</span><br><span class="line">    <span class="variable">$authors</span>[] = <span class="variable">$row</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含模板文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;news_add.html&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>4、在模板中显示所有的作者信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;insert.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;news_title&quot;&gt;新闻标题&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;title&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&#39;news_title&#39;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--正常不用增加这一栏，一般需要用户登录才能发表--&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;news_author&quot;&gt;作者&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;author&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&#39;news_author&#39;&gt;</span><br><span class="line">        &lt;select name&#x3D;&quot;author&quot;&gt;</span><br><span class="line">            &lt;?php foreach($authors as $author):?&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;&lt;?php echo $author[&#39;id&#39;];?&gt;&quot;&gt;&lt;?php echo $author[&#39;name&#39;];?&gt;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;?php endforeach;?&gt;</span><br><span class="line">        &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;news_content&quot;&gt;新闻内容&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;textarea class&#x3D;&quot;form-control&quot; name&#x3D;&quot;content&quot; rows&#x3D;&quot;12&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button class&#x3D;&quot;btn btn-primary btn-block&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>5、创建insert.php接收数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line"><span class="variable">$title</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$a_id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;author&#x27;</span>] ?? <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全判定（简单判定）</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$title</span>) || <span class="keyword">empty</span>(<span class="variable">$content</span>))&#123;</span><br><span class="line">    <span class="comment"># 错误跳转重来</span></span><br><span class="line">    header(<span class="string">&#x27;refresh:3;url=add.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;新闻标题和内容都不能为空！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6、连接认证数据库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接认证</span></span><br><span class="line"><span class="variable">$conn</span> = @mysqli_connect(<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="string">&#x27;3306&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_connect_error());</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字符集</span></span><br><span class="line">mysqli_set_charset(<span class="variable">$conn</span>,<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error(<span class="variable">$conn</span>));</span><br></pre></td></tr></table></figure>

<p>7、组织数据入库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据入库：时间戳可以使用mysql自动生成，也可以使用PHP生成好放进去（建议生成好）</span></span><br><span class="line"><span class="variable">$publish</span> = time();</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into news values(null,&#x27;<span class="subst">&#123;$title&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$content&#125;</span>&#x27;,<span class="subst">&#123;$a_id&#125;</span>,<span class="subst">&#123;$publish&#125;</span>)&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure>

<p>8、判定结果，然后处理</p>
<ul>
<li>正确跳转到列表页（首页）：index.php</li>
<li>失败回到新增页面：add.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判定数据</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;refresh:2;url=index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;新闻：&#x27;</span> . <span class="variable">$title</span> . <span class="string">&#x27; 新增成功！&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&#x27;refresh:3;url=add.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;新闻：&#x27;</span> . <span class="variable">$title</span> . <span class="string">&#x27;新增失败！&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后可以不用使用exit终止脚本了</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、新增的核心逻辑是分成两个部分的</p>
<ul>
<li>提供新增表单：让用户可以提供数据</li>
<li>提供新增处理：接收用户数据后安全入库</li>
</ul>
<p>2、表单页面通常属于HTML文件，一般情况下，我们都不会让浏览器直接访问HTML文件，而是访问对应的PHP文件，由PHP去选择是加载HTML文件还是进行其他逻辑处理</p>
<p>3、新增要考虑成功后的逻辑</p>
<ul>
<li>成功后去到列表：提示成功即可，也不需要获取成功操作的其他数据</li>
<li>成功后去到查看详情页：需要获取到当前操作成功的id，然后带着id去请求另外一个实现详情页的文件（PHP文件）</li>
</ul>
<h3 id="3、封装"><a href="#3、封装" class="headerlink" title="3、封装"></a>3、封装</h3><p><strong>封装</strong>：将需要重复使用的代码或者某些特定的功能使用函数进行管理</p>
<ul>
<li>根据业务需求对操作进行封装，后续只需要直接对文件进行包含，然后对函数调用即可</li>
<li>业务封装主要是根据数据库的操作需求实现各类封装<ul>
<li>初始化</li>
<li>数据新增</li>
<li>数据编辑（更新和删除）</li>
<li>数据查询</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、初始化封装：连接认证、数据库选择、字符集设置</p>
<p>2、SQL指令执行封装：错误处理</p>
<p>3、自动更新封装：提供数据自动构造更新指令，实现更新</p>
<p>4、自动查询操作：提供查询条件，自动构造查询指令，实现查询</p>
<p>5、普通查询：用户自己组装SQL指令</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>1、初始化封装（Sql.php）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化功能：连接认证、选择数据库、设定字符集</span></span><br><span class="line"><span class="comment"># 成功返回连接对象，失败返回false，错误记录在错误参数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span>,<span class="variable">$dbname</span>,&amp;<span class="variable">$error</span>,<span class="variable">$host</span> = <span class="string">&#x27;localhost&#x27;</span>,<span class="variable">$port</span> = <span class="string">&#x27;3306&#x27;</span>,<span class="variable">$charset</span> = <span class="string">&#x27;utf8&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 连接认证</span></span><br><span class="line">    <span class="variable">$conn</span> = @mysqli_connect(<span class="variable">$host</span>,<span class="variable">$user</span>,<span class="variable">$pass</span>,<span class="variable">$dbname</span>,<span class="variable">$port</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 验证错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$conn</span>)&#123;</span><br><span class="line">        <span class="variable">$error</span> = iconv(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,mysqli_connect_error());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置字符集</span></span><br><span class="line">    <span class="keyword">if</span>(!mysqli_set_charset(<span class="variable">$conn</span>,<span class="variable">$charset</span>))&#123;</span><br><span class="line">        <span class="variable">$error</span> = mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$conn</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、SQL指令执行封装</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部传入SQL，负责执行也验证SQL语法问题，成功返回结果，失败返回false，错误记录在错误参数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$sql</span>,&amp;<span class="variable">$error</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 执行SQL</span></span><br><span class="line">    <span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判定</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span> === <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="variable">$error</span> = mysqli_error(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回执行的正确结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以上操作也是普通的写操作</li>
</ul>
<p>3、简易自动更新</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户提供要更新的数据和主键id，自动组装SQL</span></span><br><span class="line"><span class="comment"># 成功返回受影响的行数，失败返回false（0表示没有更新）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auto_update</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$data</span>,<span class="variable">$table</span>,&amp;<span class="variable">$error</span>,<span class="variable">$id</span> = <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 组织更新部分数据：字段名 = 值</span></span><br><span class="line">    <span class="variable">$set</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="variable">$set</span> .= <span class="variable">$k</span> . <span class="string">&quot;=&#x27;<span class="subst">&#123;$v&#125;</span>&#x27;,&quot;</span>;</span><br><span class="line">    &#125; <span class="comment"># title = &#x27;title&#x27;,content = &#x27;content&#x27;,</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 清除多余的右侧逗号</span></span><br><span class="line">    <span class="variable">$set</span> = rtrim(<span class="variable">$set</span>,<span class="string">&#x27;,&#x27;</span>);	<span class="comment"># $set : title = &#x27;title&#x27;,content = &#x27;content&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 组织更新指令</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;update <span class="subst">&#123;$table&#125;</span> set <span class="subst">&#123;$set&#125;</span> &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 组装where条件（id不为0才组织）：要求主键字段名字必须为ID</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$id</span>) <span class="variable">$sql</span> .= <span class="string">&#x27; where id = &#x27;</span> . <span class="variable">$id</span>;	</span><br><span class="line">    <span class="comment"># update 表名 set title = &#x27;title&#x27;,content = &#x27;content&#x27; where id = 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行</span></span><br><span class="line">    <span class="keyword">if</span>(query(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>))</span><br><span class="line">        <span class="keyword">return</span> mysqli_affected_rows(<span class="variable">$conn</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>4、简易自动查询</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 系统提供查询条件（只能是=比较和and逻辑运算），可以查询一条记录或者多条记录</span></span><br><span class="line"><span class="comment"># 成功返回数组（多条二维数组，一条一维数组）失败返回false，错误记录在参数中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auto_read</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$table</span>,&amp;<span class="variable">$error</span>,<span class="variable">$where</span> = [],<span class="variable">$all</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 组装查询条件：默认永远为真</span></span><br><span class="line">    <span class="variable">$where_clause</span> = <span class="string">&#x27; where 1 &#x27;</span>;	<span class="comment"># where 1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$where</span>)&#123;		<span class="comment"># 空数组自动转换成布尔false</span></span><br><span class="line">        <span class="comment"># 解析条件</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$where</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">            <span class="variable">$where_clause</span> .= <span class="string">&#x27; and &#x27;</span> . <span class="variable">$k</span> . <span class="string">&quot; = &#x27;<span class="subst">$v</span>&#x27; &quot;</span>;</span><br><span class="line">        &#125;  <span class="comment"># where 1 and title = &#x27;news&#x27; ...      </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 组织完整SQL</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from <span class="subst">&#123;$table&#125;</span> <span class="subst">&#123;$where_clause&#125;</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$res</span> = query(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判定执行结果</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span> === <span class="literal">false</span>) <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判定获取一条还是多条</span></span><br><span class="line">    <span class="variable">$lists</span> = [];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$all</span>)&#123;</span><br><span class="line">        <span class="comment"># 获取多条，二维数组存储</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>))&#123;</span><br><span class="line">            <span class="variable">$lists</span>[] = <span class="variable">$row</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># 获取一条，一维数组存储</span></span><br><span class="line">        <span class="variable">$lists</span> = mysqli_fetch_assoc(<span class="variable">$res</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 释放资源，返回结果</span></span><br><span class="line">    mysqli_free_result(<span class="variable">$res</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lists</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>5、普通查询</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户提供SQL指令，可以查询一条或者多条记录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$conn</span>,<span class="variable">$sql</span>,&amp;<span class="variable">$error</span>,<span class="variable">$all</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment"># 执行SQL，并判定结果</span></span><br><span class="line">    <span class="variable">$res</span> = query(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span> === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析结果集</span></span><br><span class="line">    <span class="variable">$lists</span> = [];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$all</span>)&#123;</span><br><span class="line">        <span class="comment"># 多条数据：二维数组</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable">$row</span> = mysqli_fetch_assoc(<span class="variable">$res</span>))&#123;</span><br><span class="line">            <span class="variable">$lists</span>[] = <span class="variable">$row</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># 一条数据：一维数组</span></span><br><span class="line">        <span class="variable">$lists</span> = mysqli_fetch_assoc(<span class="variable">$res</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 释放资源，返回结果</span></span><br><span class="line">    mysqli_free_result(<span class="variable">$res</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$lists</span>;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、封装是为了代码能够更好的实现复用</p>
<ul>
<li>复用性</li>
<li>灵活性</li>
</ul>
<p>2、封装需要考虑封装事务的独立性，不要试图用一个函数去解决一个很大的问题</p>
<h3 id="4、新闻列表"><a href="#4、新闻列表" class="headerlink" title="4、新闻列表"></a>4、新闻列表</h3><p><strong>新闻列表</strong>：将新闻信息从数据库取出，然后在模板中显示</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、新增列表处理文件：index.php</p>
<p>2、在PHP中根据模板显示的要求，获取相应的数据</p>
<p>3、PHP加载显示数据的模板</p>
<p>4、在模板中使用PHP输出相应的数据</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、创建首页（列表页）处理脚本index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示新闻列表</span></span><br></pre></td></tr></table></figure>



<p>2、根据模板显示要求获取数据信息：新闻id、标题、内容、作者名字、发布时间</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载封装的数据库操作文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;sql.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成初始化操作</span></span><br><span class="line"><span class="variable">$conn</span> = connect(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>);</span><br><span class="line"><span class="comment"># 判定结果</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>) <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组织数据SQL，获取数据（手动组织：需要连表）</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select n.*,a.name from news n left join author a on n.a_id = a.id&quot;</span>;</span><br><span class="line"><span class="variable">$news</span> = read(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>3、加载模板</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载首页模板</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;news_index.html&#x27;</span>;	<span class="comment"># 注意路径</span></span><br></pre></td></tr></table></figure>

<p>4、在模板中对应位置显示对应的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php foreach($news as $n):?&gt;</span><br><span class="line">    &lt;!-- 列表项开始 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;news-list-item&quot;&gt;</span><br><span class="line">        &lt;!-- 作者以及发布时间 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;author-time&quot;&gt; &lt;span&gt;&lt;?php echo $n[&#39;name&#39;];?&gt;&lt;&#x2F;span&gt; 发表于 &lt;span&gt;&lt;?php echo date(&#39;Y-m-d H:i:s&#39;,$n[&#39;publish&#39;]);?&gt;&lt;&#x2F;span&gt; &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 新闻详情 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;news-des&quot;&gt;</span><br><span class="line">        	&lt;!-- 新闻标题 --&gt;</span><br><span class="line">            &lt;h3 class&#x3D;&quot;news-title&quot; style&#x3D;&#39;float: left;&#39;&gt;</span><br><span class="line">            	&lt;i&gt;&lt;&#x2F;i&gt;&lt;a href&#x3D;&quot;02-新闻详情页.html&quot;&gt;&lt;?php echo $n[&#39;title&#39;];?&gt;&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;h3&gt;</span><br><span class="line"></span><br><span class="line">         	&lt;!-- 编辑,删除 --&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;operate&quot;&gt;</span><br><span class="line">            	&lt;a href&#x3D;&quot;04-新闻修改页.html&quot;&gt;编辑&lt;&#x2F;a&gt;&amp;nbsp;&amp;nbsp;&lt;a href&#x3D;&quot;#&quot; onclick&#x3D;&quot;return confirm(&#39;你确认要删除本条新闻吗?&#39;)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div style&#x3D;&#39;clear:both&#39;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 新闻内容 --&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;news-content-des ellipsis&quot;&gt;&lt;?php echo $n[&#39;content&#39;];?&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- 列表项结束 --&gt;</span><br><span class="line">&lt;?php endforeach;?&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、显示数据的核心逻辑是获取数据、显示数据</p>
<h3 id="5、编辑新闻"><a href="#5、编辑新闻" class="headerlink" title="5、编辑新闻"></a>5、编辑新闻</h3><p><strong>编辑新闻</strong>：将已有的新闻取出来，然后再次进行加工操作，并提交更新到服务器</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、提供操作链接：编辑通常是针对单条记录，需要在列表页针对每一条记录制作对应的编辑链接</p>
<p>2、后台新增接收编辑的PHP脚本：edit.php</p>
<ul>
<li>接收要编辑的新闻信息</li>
<li>从数据库取出要编辑的新闻</li>
<li>加载编辑模板（表单）</li>
<li>显示编辑取出来的新闻</li>
</ul>
<p>3、用户编辑数据后提交到update.php</p>
<ul>
<li>接收用户提交的信息<ul>
<li>被编辑的内容（要入库）</li>
<li>不可编辑的内容（条件匹配）</li>
</ul>
</li>
<li>数据安全性验证</li>
<li>组织更新指令更新入库（自动更新）</li>
</ul>
<p>4、根据执行结果提示用户操作信息并进行跳转</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、修改列表页，增加编辑链接：需要传入要编辑的新闻id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 编辑,删除 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;operate&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;edit.php?id&#x3D;&lt;?php echo $n[&#39;id&#39;];?&gt;&quot;&gt;编辑&lt;&#x2F;a&gt;&amp;nbsp;&amp;nbsp;&lt;a href&#x3D;&quot;#&quot; onclick&#x3D;&quot;return confirm(&#39;你确认要删除本条新闻吗?&#39;)&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>2、增加edit.php脚本，实现新闻的获取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收要获取的新闻id</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] ?? <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$id</span>) &#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=<span class="subst">&#123;$_SERVER[&#x27;HTTP_REFERER&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;当前要编辑的新闻不存在！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新闻数据</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;sql.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span> = connect(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>);</span><br><span class="line"><span class="comment"># 判定结果</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$error</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动查询</span></span><br><span class="line"><span class="variable">$news</span> = auto_read(<span class="variable">$conn</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>,[<span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$id</span>]);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$news</span>)&#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;当前要编辑的新闻不存在！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、加载模板</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载模板</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;news_edit.html&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>4、在模板中显示要编辑的数据：id必须传，但是需要隐藏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;update.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;id&quot; value&#x3D;&quot;&lt;?php echo $news[&#39;id&#39;];?&gt;&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                 &lt;label for&#x3D;&quot;news_title&quot;&gt;新闻标题&lt;&#x2F;label&gt;</span><br><span class="line">                 &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;title&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&#39;news_title&#39; value&#x3D;&#39;&lt;?php echo $news[&#39;title&#39;];?&gt;&#39;&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">             &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                 &lt;label for&#x3D;&quot;news_content&quot;&gt;新闻内容&lt;&#x2F;label&gt;</span><br><span class="line">                 &lt;textarea class&#x3D;&quot;form-control&quot; name&#x3D;&quot;content&quot; rows&#x3D;&quot;12&quot;&gt;&lt;?php echo $news[&#39;content&#39;]?&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">             &lt;button class&#x3D;&quot;btn btn-danger btn-block&quot;&gt;修改&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>5、后台增加update.php 用于处理用户提交的表单</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收数据：数组接收可能修改的数据（下标与表字段名一致）</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;title&#x27;</span>] 	= <span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;content&#x27;</span>]= <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判定</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$data</span>[<span class="string">&#x27;title&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$data</span>[<span class="string">&#x27;content&#x27;</span>]))&#123;</span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=edit.php?id=&#x27;</span> . <span class="variable">$id</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;标题和内容都不能为空！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动更新</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;sql.php&#x27;</span>;</span><br><span class="line"><span class="variable">$conn</span> = connect(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>);</span><br><span class="line"><span class="comment"># 判定结果</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$error</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = auto_update(<span class="variable">$conn</span>,<span class="variable">$data</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>,<span class="variable">$id</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>6、根据更新结果进行跳转</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果判定</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=detail.php?id=&#x27;</span>.<span class="variable">$id</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;更新成功！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment"># 是没有要更新的数据</span></span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;没有要更新的数据！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、编辑操作是所有增删改查里步骤最复杂的一个</p>
<h3 id="6、删除新闻"><a href="#6、删除新闻" class="headerlink" title="6、删除新闻"></a>6、删除新闻</h3><p><strong>删除新闻</strong>：对已有新闻从数据库指定移出</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、提供操作链接：删除通常是针对单条记录，需要在列表页针对每一条记录制作对应的删除链接（需要明确要删除的数据的参数）</p>
<p>2、后台新增实现删除的PHP脚本：delete.php</p>
<ul>
<li>接收要删除的记录参数（通常是主键）</li>
<li>必要时进行数据安全验证</li>
<li>组织SQL指令执行删除操作</li>
</ul>
<p>3、根据删除结果进行跳转提示</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、修改列表页，增加删除链接：需要传入要删除的新闻id</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 编辑,删除 --&gt;</span><br><span class="line">&lt;div class=&quot;operate&quot;&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;edit.php?id=&lt;?php echo <span class="subst">$n</span>[&#x27;id&#x27;];?&gt;&quot;</span>&gt;编辑&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=<span class="string">&quot;delete.php?id=&lt;?php echo <span class="subst">$n</span>[&#x27;id&#x27;];?&gt;&quot;</span> onclick=<span class="string">&quot;return confirm(&#x27;你确认要删除本条新闻吗?&#x27;)&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>一般删除会做一个前端安全限定：js的确认验证</li>
</ul>
<p>2、后台增加一个delete.php实现数据的删除操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] ?? <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$id</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;当前要删除的新闻不存在！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现数据库操作</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;sql.php&#x27;</span>;</span><br><span class="line"><span class="variable">$conn</span> = connect(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>);</span><br><span class="line"><span class="comment"># 判定结果</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$error</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除操作</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;delete from news where id = <span class="subst">&#123;$id&#125;</span>&quot;</span>;</span><br><span class="line"><span class="variable">$res</span> = query(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判定下执行结果</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)</span><br><span class="line">    <span class="variable">$res</span> = mysqli_affected_rows(<span class="variable">$connn</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$error</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;删除成功！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">&quot;Refresh:3;url=index.php&quot;</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;删除失败！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、删除操作是增删改查里本质最简单的一种业务，但是实际开发中删除操作却是非常谨慎的</p>
<ul>
<li>删除不可逆</li>
<li>数据的删除不利于大数据分析</li>
</ul>
<p>2、实际实现中，一般的业务数据可以删除，但是比较重要的数据虽然给用户的感觉是删除，但是实际上数据库里并不会删除</p>
<ul>
<li>数据表增加字段记录状态</li>
<li>数据查询时根据状态来进行数据筛选</li>
<li>数据删除时只要改变状态不让普通查询可查即可</li>
</ul>
<h3 id="7、查看新闻"><a href="#7、查看新闻" class="headerlink" title="7、查看新闻"></a>7、查看新闻</h3><p><strong>查看新闻</strong>：用户通过点击新闻标题查看新闻详细信息</p>
<blockquote>
<p>步骤</p>
</blockquote>
<p>1、找到列表页中出现新闻标题的位置</p>
<p>2、给每一个标题增加一个访问链接：后台处理文件detail.php</p>
<p>3、给每个请求追加具体新闻信息id</p>
<p>4、后台detail.php接收要查看的新闻数据：id</p>
<p>5、从数据库查询新闻信息：按模板显示需求</p>
<p>6、加载显示新闻详情的模板</p>
<p>7、显示数据</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、显示新闻详情</p>
<ul>
<li>在新闻列表页增加标题点击链接，请求detail.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 新闻标题 --&gt;</span><br><span class="line">&lt;h3 class&#x3D;&quot;news-title&quot; style&#x3D;&#39;float: left;&#39;&gt;</span><br><span class="line">    &lt;i&gt;&lt;&#x2F;i&gt;&lt;a href&#x3D;&quot;detail.php?id&#x3D;&lt;?php echo $n[&#39;id&#39;];?&gt;&quot;&gt;&lt;?php echo $n[&#39;title&#39;];?&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;h3&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在后台增加detail.php获取新闻信息，加载新闻详情模板</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收新闻id</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] ?? <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$id</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;非法访问！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新闻数据</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;Sql.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span> = connect(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;news&#x27;</span>,<span class="variable">$error</span>);</span><br><span class="line"><span class="comment"># 判定结果</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$conn</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$error</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select n.*,a.name from news n left join author a on n.a_id = a.id where n.id = <span class="subst">&#123;$id&#125;</span>&quot;</span>;</span><br><span class="line"><span class="variable">$news</span> = read(<span class="variable">$conn</span>,<span class="variable">$sql</span>,<span class="variable">$error</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$news</span>)&#123;</span><br><span class="line">    header(<span class="string">&#x27;Refresh:3;url=index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;您所访问的新闻不存在！&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模板</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;news_detail.html&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>在模板中显示新闻信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;news-list-item&quot; style&#x3D;&#39;border-bottom: none;&#39;&gt;</span><br><span class="line">    &lt;!-- 新闻标题 --&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;news-title&quot;&gt;&lt;?php echo $news[&#39;title&#39;];?&gt;&lt;&#x2F;h3&gt; </span><br><span class="line">    &lt;!-- 作者以及发布时间 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;author-time&quot;&gt; &lt;span&gt;&lt;?php echo $news[&#39;name&#39;]?&gt;&lt;&#x2F;span&gt; 发表于 &lt;span&gt;&lt;?php echo date(&#39;Y-m-d H:i:s&#39;,$news[&#39;publish&#39;]);?&gt;&lt;&#x2F;span&gt; &lt;&#x2F;div&lt;!-- 新闻详情 --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;news-des&quot;&gt;</span><br><span class="line">                    	</span><br><span class="line">        &lt;!-- 新闻内容 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;news-content-des&quot;&gt;&lt;?php echo $news[&#39;content&#39;]?&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>1、显示详情的话通常是通过列表进入，然后给出点击链接实现</p>
<p>2、数据显示往往比较简单：保证数据查询是到位的</p>
<h3 id="8、分页"><a href="#8、分页" class="headerlink" title="8、分页"></a>8、分页</h3><p><strong>分页</strong>：将数据按照一种类似于页码的逻辑呈现，用户通过不同页码看到的数据不同</p>
<ul>
<li>分页里有几个核心需要关注的数据<ul>
<li>总记录数：决定页码数量的有效记录数</li>
<li>每页显示量：每一个页面里要显示的记录数</li>
<li>总页数：总记录数 / 每页显示量</li>
<li>当前页码：进行数据筛选的最关键标志</li>
</ul>
</li>
<li>分页的逻辑有两大类<ul>
<li>服务器数据分页：服务器在获取数据时，只获取当前用户需要页面的数据<ul>
<li>减少服务器压力</li>
<li>减少网络传输延迟</li>
</ul>
</li>
<li>JS脚本分页：服务器不管分页，一次性提交所有数据给浏览器，JS通过脚本控制每次显示的数据量<ul>
<li>减少请求次数</li>
<li>减少用户分页点击时等待时间</li>
</ul>
</li>
</ul>
</li>
<li>服务器端实现分页，通常是通过数据库的limit来实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit 0,3;		# 显示前3条</span><br><span class="line">limit 3,6;		# 显示第二个3条</span><br></pre></td></tr></table></figure>

<ul>
<li>分页的效果通常是浏览器上给用户提供一排页码点击链接，用户点击哪个就访问对应页面的数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;page&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;首页&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;上一页&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;1&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;2&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&#39;current&#39;&gt;3&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;4&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;5&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;下一页&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;末页&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>步骤</p>
</blockquote>
<p>1、确定分页模式（通常使用数据库分页）</p>
<p>2、确定分页效果：参照京东分页逻辑</p>
<ul>
<li>有上一页和下一页<ul>
<li>如果已经是第一页：那么上一页不可用（或者没有）</li>
<li>如果已经是最后一页：那么下一页不可用（或者没有）</li>
</ul>
</li>
<li>一共最多显示7个可点击数字页面<ul>
<li>如果总页数小于等于7页：显示所有页码：1，2，3，4，5，6，7</li>
<li>如果总页数大于7页，显示当前页码左右连贯5页（左右各两页）<ul>
<li>当前页码小于等于5：显示前7页，最后增加一个<code>...</code>表示有更多页码：1，2，3，4，5，6，7，…</li>
<li>当前页码大于5页：显示前2页（1和2），然后跟<code>...</code>，然后显示当前页连贯5页：1，2，…<ul>
<li>如果当前页码已经属于最后3页内，显示最后5页数据：1，2，…，6，7，8，9，10</li>
<li>如果当前页码小于最后3页，那么最后增加一个<code>...</code>表示有更多页码：1，2，…，5，6，7，8，9，…</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3、确定分页链接方式</p>
<ul>
<li>前端设计者已经设计好，针对设计好的进行动态化即可</li>
<li>前端没有提供，一般提供一个ul列表+a标签实现</li>
</ul>
<p>4、在后台实现分页点击的字符串逻辑</p>
<p>5、在前端页面分页处显示后台设计的分页逻辑</p>
<blockquote>
<p>示例</p>
</blockquote>
<p>1、使用京东分页逻辑实现分页，使用前端设计好的a标签形式设计分页字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在所有数据分页都是请求index.php，所以需要在index.php开始处增加页码获取信息（包含每页访问的数量定义）</span></span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] ?? <span class="number">1</span>;</span><br><span class="line"><span class="variable">$pagecount</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取满足条件的数据的总记录数（在获取列表之前：因为不需要获取全部数据了）</span></span><br><span class="line"><span class="variable">$count_sql</span> = <span class="string">&#x27;select count(*) as total from news&#x27;</span>;</span><br><span class="line"><span class="variable">$res</span> = read(<span class="variable">$conn</span>,<span class="variable">$count_sql</span>,<span class="variable">$error</span>);		<span class="comment"># 执行</span></span><br><span class="line"><span class="variable">$count</span> = <span class="variable">$res</span>[<span class="string">&#x27;total&#x27;</span>] ?? <span class="number">0</span>;				<span class="comment"># 取出记录（如果没有那就是0）</span></span><br><span class="line"><span class="variable">$pages</span> = ceil(<span class="variable">$count</span> / <span class="variable">$pagecount</span>);			<span class="comment"># 总页数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算页码数据：使用limit限制</span></span><br><span class="line"><span class="variable">$offset</span> = (<span class="variable">$page</span> - <span class="number">1</span>) * <span class="variable">$pagecount</span>;</span><br><span class="line"><span class="variable">$limit</span> = <span class="string">&quot; limit <span class="subst">$offset</span>,<span class="subst">$pagecount</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼凑原来获取数据的SQL，使得数据分页效果实现</span></span><br><span class="line"><span class="comment"># 连接查询之后，系统会默认按照连接条件进行升序排序，需要调整为新闻id升序排序</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select n.*,a.name from news n left join author a on n.a_id = a.id order by n.id &quot;</span> . <span class="variable">$limit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生分页链接信息</span></span><br><span class="line"><span class="variable">$pageinfo</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=1&#x27;&gt;首页&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判定是否需要上一页</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$page</span> != <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable">$prev</span> = <span class="variable">$page</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$prev&#125;</span>&#x27;&gt;上一页&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼凑数字逻辑部分：以页码总数先划分</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$pages</span> &lt;= <span class="number">7</span>)&#123;</span><br><span class="line">    <span class="comment"># 显示所有页码，也不需要...</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span> &lt;= <span class="variable">$pages</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="comment"># 判定当前页码是否被选中：增加样式</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$page</span> == <span class="variable">$i</span>) <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a class=&#x27;current&#x27; href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;        </span><br><span class="line">        <span class="keyword">else</span> <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment"># 当前页码在前5页：显示前7页，外加...</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$page</span> &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span> &lt;= <span class="number">7</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="comment"># 判定当前页是否被选中：选中需要增加css样式</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$page</span> == <span class="variable">$i</span>) <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a class=&#x27;current&#x27; href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 追加...</span></span><br><span class="line">        <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href =&#x27;javascript:return false;&#x27; onclick=&#x27;return false;&#x27;&gt;...&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment"># 当前页码大于5：显示前2页和...</span></span><br><span class="line">        <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=1&#x27;&gt;1&lt;/a&gt;&quot;</span>;</span><br><span class="line">    	<span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=2&#x27;&gt;2&lt;/a&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href =&#x27;javascript:return false;&#x27; onclick=&#x27;return false;&#x27;&gt;...&lt;/a&gt;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 判定当前页码是否已经到达最后三页：不需要后序...</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$page</span> &gt; <span class="variable">$pages</span> - <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment"># 显示最后5页</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="variable">$pages</span> - <span class="number">4</span>;<span class="variable">$i</span> &lt;= <span class="variable">$pages</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="comment"># 判定当前页是否被选中：选中需要增加css样式</span></span><br><span class="line">            	<span class="keyword">if</span>(<span class="variable">$page</span> == <span class="variable">$i</span>) <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a class=&#x27;current&#x27; href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">            	<span class="keyword">else</span> <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment"># 显示中间5页，并追加...</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="variable">$page</span> - <span class="number">2</span>;<span class="variable">$i</span> &lt;= <span class="variable">$page</span> + <span class="number">2</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="comment"># 判定当前页是否被选中：选中需要增加css样式</span></span><br><span class="line">            	<span class="keyword">if</span>(<span class="variable">$page</span> == <span class="variable">$i</span>) <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a class=&#x27;current&#x27; href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">            	<span class="keyword">else</span> <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$i&#125;</span>&#x27;&gt;<span class="subst">&#123;$i&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 追加...</span></span><br><span class="line">            <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href =&#x27;javascript:return false;&#x27; onclick=&#x27;return false;&#x27;&gt;...&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判定是否需要增加下一页</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$page</span> != <span class="variable">$pages</span>)&#123;</span><br><span class="line">    <span class="variable">$next</span> = <span class="variable">$page</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$next&#125;</span>&#x27;&gt;下一页&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 末页</span></span><br><span class="line"><span class="variable">$pageinfo</span> .= <span class="string">&quot;&lt;a href=&#x27;index.php?page=<span class="subst">&#123;$pages&#125;</span>&#x27;&gt;末页&lt;/a&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>2、在模板上显示计算好的分页链接，代替原来的a标签分页</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 分页 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;page&quot;&gt;</span><br><span class="line">    &lt;?php echo $pageinfo;?&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<p>1、分页后台数据筛选分为两个核心部分</p>
<ul>
<li>数据分页：利用limit实现数据的分页获取</li>
<li>逻辑分页：利用逻辑部分实现分页链接，让用户可以访问不同分页数据</li>
</ul>
<h3 id="9、项目完善和总结"><a href="#9、项目完善和总结" class="headerlink" title="9、项目完善和总结"></a>9、项目完善和总结</h3><p>1、项目完善：各类链接地址修改</p>
<p>2、项目总结</p>
<ul>
<li>前端提供好静态页面</li>
<li>根据静态页设计好数据库</li>
<li>PHP进行逻辑处理<ul>
<li>数据加工</li>
<li>数据库操作（增删改查）</li>
<li>数据显示</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>斐波那契数列的若干解法</title>
    <url>/undefined/a81fa04d/</url>
    <content><![CDATA[<blockquote>
<p>转载y总的分享</p>
</blockquote>
<span id="more"></span>



<p>今天来给大家介绍几个在面试中常用的、求解斐波那契数列问题的方法。</p>
<p>首先定义斐波那契数列问题：</p>
<blockquote>
<p>定义 $a_0 = 1$, $a_1 = 1$, $a_n = a_{n-1} + a_{n-2}$，求 $a_n$ 是多少。<br>为了避免考虑整数溢出问题，我们求 $a_n % p$ 的值，$p=10^9+7$。</p>
</blockquote>
<h2 id="算法1"><a href="#算法1" class="headerlink" title="算法1"></a>算法1</h2><p>递归。<br>递归计算的节点个数是 $O(2^n)$ 的级别的，存在大量重复计算。<br>时间复杂度是 $O(2^n)$，一秒内大约能算到第三四十项。</p>
<h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>)) % MOD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="算法2"><a href="#算法2" class="headerlink" title="算法2"></a>算法2</h2><p>记忆化搜索。<br>开一个大数组记录中间结果，如果一个状态被计算过，则直接查表，否则再递归计算。<br>总共有 $n$ 个状态，计算每个状态的复杂度是 $O(1)$，所以时间复杂度是 $O(n)$。<br>一秒内算 $n=10^7$ 毫无压力，但由于是递归计算，递归层数太多会爆栈，大约只能算到 $n=10^5$ 级别。</p>
<h3 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++ 代码"></a>C++ 代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[n]) <span class="keyword">return</span> a[n];</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    a[n] = <span class="built_in">f2</span>(n - <span class="number">1</span>) + <span class="built_in">f2</span>(n - <span class="number">2</span>);</span><br><span class="line">    a[n] %= MOD;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="算法3"><a href="#算法3" class="headerlink" title="算法3"></a>算法3</h2><p>递推。<br>开一个大数组，记录每个数的值。用循环递推计算。<br>总共计算 $n$ 个状态，所以时间复杂度是 $O(n)$。<br>但需要开一个长度是 $n$ 的数组，内存将成为瓶颈，当 $n=10^8$ 时，需要的内存是 $\frac{4 * 10^8}{1024 \times 1024} \approx 381MB$。<br>分子中乘4是因为C++中 <code>int</code> 类型占4字节。</p>
<h3 id="C-代码-2"><a href="#C-代码-2" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">        a[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="算法4"><a href="#算法4" class="headerlink" title="算法4"></a>算法4</h2><p>递归+滚动变量。<br>仔细观察我们会发现，递推时我们只需要记录前两项的值即可，没有必要记录所有值，所以我们可以用滚动变量递推。<br>时间复杂度还是 $O(n)$，但空间复杂度变成了 $O(1)$。</p>
<h3 id="C-代码："><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, z;</span><br><span class="line">    x = y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        z = (x + y) % MOD;</span><br><span class="line">        x = y;</span><br><span class="line">        y = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="算法5"><a href="#算法5" class="headerlink" title="算法5"></a>算法5</h2><p>矩阵运算 + 快速幂。</p>
<p>快速幂算法的模板可以参考<a href="https://www.acwing.com/blog/content/24/">这里</a>。<br>用算法4我们1秒内最多可以算到 $10^8$ 级别，那当 $n$ 更大时该怎么办呢？<br>可以先利用矩阵运算的性质将通项公式变成幂次形式，然后用平方倍增（快速幂）的方法求解第 $n$ 项。</p>
<p>首先我们定义向量<br>$$<br>\begin{equation}<br>X_n = \begin{array}{ccc}<br>[a_n &amp; a_{n-1}]<br>\end{array}<br>, 边界：<br>X_1 = \begin{array}{ccc}<br>[a_1 &amp; a_0]<br>\end{array}<br>\end{equation}<br>$$</p>
<p>然后我们可以找出矩阵：<br>$$<br>\begin{equation}<br>A = \left [ \begin{array}{ccc}<br>1 &amp; 1 \<br>1 &amp; 0<br>\end{array} \right ]<br>\end{equation}<br>$$</p>
<p>则有：<br>$$<br>X_n = X_{n-1} \times A<br>$$</p>
<p>所以：</p>
<p>$$<br>X_n = X_1 \times A^{n-1}<br>$$</p>
<p>由于矩阵具有结合律，所以我们可以先求出 $A^{n-1} % P$，然后再用 $X_1$ 左乘，即可求出 $X_n$，向量 $X_n$ 的第一个元素就是 $a_n$。</p>
<p>时间复杂度分析：快速幂的时间复杂度是 $O(logn)$，所以算法5的时间复杂度也是 $O(logn)$。</p>
<h3 id="C-代码-3"><a href="#C-代码-3" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">2</span>], <span class="keyword">int</span> b[][<span class="number">2</span>], <span class="keyword">int</span> c[][<span class="number">2</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp[][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> x = temp[i][j] + (<span class="keyword">long</span> <span class="keyword">long</span>)a[i][k] * b[k][j];</span><br><span class="line">                temp[i][j] = x % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">            c[i][j] = temp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f_final</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res[][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> t[][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) <span class="built_in">mul</span>(res, t, res);</span><br><span class="line">        <span class="built_in">mul</span>(t, t, t);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> r = c[i] + (<span class="keyword">long</span> <span class="keyword">long</span>)x[j] * res[j][i];</span><br><span class="line">            c[i] = r % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n ;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f_final</span>(n) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法学习</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯</title>
    <url>/undefined/90f1d201/</url>
    <content><![CDATA[<blockquote>
<p> acwing蓝桥杯班</p>
</blockquote>
<span id="more"></span>



<h1 id="1-教学计划与递归"><a href="#1-教学计划与递归" class="headerlink" title="1 教学计划与递归"></a>1 教学计划与递归</h1><h2 id="1-1-由数据范围反推算法复杂度以及算法内容"><a href="#1-1-由数据范围反推算法复杂度以及算法内容" class="headerlink" title="1.1 由数据范围反推算法复杂度以及算法内容"></a>1.1 由数据范围反推算法复杂度以及算法内容</h2><p>一般ACM或者笔试题的时间限制是1秒或2秒。<br>在这种情况下，C++代码中的操作次数控制在 $10^7 \sim 10^8$ 为最佳。</p>
<p>下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</p>
<ol>
<li>$n \le 30$：指数级别, dfs+剪枝，状态压缩dp</li>
<li>$n \le 100$ =&gt; $O(n^3)$：floyd，dp，高斯消元</li>
<li>$n \le 1000$ =&gt; $O(n^2)$，$O(n^2logn)$：dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford</li>
<li>$n \le 10000$ =&gt; $O(n * \sqrt n)$：块状链表、分块、莫队</li>
<li>$n \le 100000$ =&gt; $O(nlogn)$：各种sort，线段树、树状数组、set/map、heap、拓扑排序、dijkstra+heap、prim+heap、Kruskal、spfa、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树</li>
<li>$n \le 1000000$ =&gt; $O(n)$：以及常数较小的 $O(nlogn)$ 算法 =&gt; 单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，常数比较小的 $O(nlogn)$ 的做法：sort、树状数组、heap、dijkstra、spfa</li>
<li>$n \le 10000000$ =&gt; $O(n)$：双指针扫描、kmp、AC自动机、线性筛素数</li>
<li>$n \le 10^9$ =&gt; $O(\sqrt n)$：判断质数</li>
<li>$n \le 10^{18}$ =&gt; $O(logn)$：最大公约数，快速幂，数位DP</li>
<li>$n \le 10^{1000}$ =&gt; $O((logn)^2)$：高精度加减乘除</li>
<li>$n \le 10^{100000}$ =&gt; $O(logk \times loglogk)，k表示位数$：高精度加减、FFT/NTT</li>
</ol>
<blockquote>
<p>注：这里的log指的是以2为底的对数；</p>
</blockquote>
<h2 id="1-2-常用的头文件"><a href="#1-2-常用的头文件" class="headerlink" title="1.2 常用的头文件"></a>1.2 常用的头文件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-关于输入输出"><a href="#1-3-关于输入输出" class="headerlink" title="1.3 关于输入输出"></a>1.3 关于输入输出</h2><p>输入输出规模较大的问题，推荐用scanf，printf；规模较小的问题，用cin，cout较为简洁</p>
<h2 id="1-4-递归"><a href="#1-4-递归" class="headerlink" title="1.4 递归"></a>1.4 递归</h2><ul>
<li>递归即自己调用自己</li>
</ul>
<h3 id="所有递归-⇒-递归搜索树"><a href="#所有递归-⇒-递归搜索树" class="headerlink" title="所有递归 ⇒ 递归搜索树"></a>所有递归 ⇒ 递归搜索树</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/2222743-20210315155158877-741947158.png" alt="img"></p>
<h3 id="例：斐波那契数列"><a href="#例：斐波那契数列" class="headerlink" title="例：斐波那契数列"></a>例：斐波那契数列</h3><p>设 f(n) = {1，2，3，5，8，……}</p>
<p>n = 1，f(1) = 1；n = 2，f(2) = 1；n ⩾ 3，f(n) = f(n−1) + f(n−2)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">f</span>(n) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-例题"><a href="#1-5-例题" class="headerlink" title="1.5 例题"></a>1.5 例题</h2><h3 id="92-递归实现指数型枚举"><a href="#92-递归实现指数型枚举" class="headerlink" title="92. 递归实现指数型枚举"></a>92. 递归实现指数型枚举</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>从 1∼n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p>
<p><strong>输入格式</strong></p>
<p>输入一个整数 n。</p>
<p><strong>输出格式</strong></p>
<p>每行输出一种方案。</p>
<p>同一行内的数必须升序排列，相邻两个数用恰好 1 个空格隔开。</p>
<p>对于没有选任何数的方案，输出空行。</p>
<p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p>
<p><strong>数据范围</strong></p>
<p>1⩽n⩽15</p>
<p><strong>输入样例</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p><strong>输出样例</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul>
<li>数据范围为1⩽n⩽15，所以可以用时间复杂度为$O(2^n)$的算法来做；</li>
<li>对于1∼n这n个数，每个数有 选/不选 两种情况，所以总共的方案数即为$2^n$，又因为输出方案（方案长度最多为 n），故总的时间复杂度为$O(n2^n)$；</li>
<li>递归（即DFS），最重要的是顺序，即找一个顺序，可以把所有方案不重不漏地找出来；</li>
<li>从1∼n，依此考虑每个数 选/不选；</li>
</ul>
<blockquote>
<p>例：n=3时的递归搜索树</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/2222743-20210315155145014-1971697820.png"></p>
<ul>
<li>状态（即每个数 选/不选）可以开一个长度为n的数组来记录；</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> st[N];  <span class="comment">// 状态，记录每个位置当前的状态，0表示没考虑，1表示已选，2表示没选</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span> (st[i] == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>);  <span class="comment">// 第一个分支，不选</span></span><br><span class="line">    st[u] = <span class="number">0</span>;  <span class="comment">// 恢复现场</span></span><br><span class="line"></span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>);  <span class="comment">// 第二个分支，选</span></span><br><span class="line">    st[u] = <span class="number">0</span>;  <span class="comment">// 恢复现场</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行时间： 32 ms</span></span><br><span class="line"><span class="comment">运行空间： 856 KB </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="如果要将方案记录下来"><a href="#如果要将方案记录下来" class="headerlink" title="如果要将方案记录下来"></a>如果要将方案记录下来</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> st[N];  <span class="comment">// 状态：记录每个位置当前的状态，0表示还没考虑，1表示选它，2表示不选它</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ways;  <span class="comment">//ways代表方案</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; n) &#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;way;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="comment">//记录方案</span></span><br><span class="line">            <span class="keyword">if</span> (st[i] == <span class="number">1</span>)</span><br><span class="line">                way.<span class="built_in">push_back</span>(i);</span><br><span class="line">        ways.<span class="built_in">push_back</span>(way);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    st[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">    st[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ways.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ways[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ways[i][j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行时间： 89 ms</span></span><br><span class="line"><span class="comment">运行空间： 3084 KB</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="94-递归实现排列型枚举"><a href="#94-递归实现排列型枚举" class="headerlink" title="94. 递归实现排列型枚举"></a>94. 递归实现排列型枚举</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>把 1∼n 这 n 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p>
<p><strong>输入格式</strong></p>
<p>一个整数 n。</p>
<p><strong>输出格式</strong></p>
<p>按照从小到大的顺序输出所有方案，每行 1个。</p>
<p>首先，同一行相邻两个数用一个空格隔开。</p>
<p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p>
<p><strong>数据范围</strong></p>
<p>1⩽n⩽9</p>
<p><strong>输入样例</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p><strong>输出样例</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure>

<h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><ul>
<li>数据范围为1⩽n⩽9，9!=326880，因此时间复杂度大约为O(n×n!)⇒DFS；</li>
</ul>
<blockquote>
<p>字典序：</p>
<p>A:a1,a2,⋯,an</p>
<p>B:b1,b2,⋯,bm</p>
<p>ai&lt;bi 或 ai不存在但bi存在 ⇒A&lt;B</p>
<p>ai&gt;bi 或 bi不存在但ai存在 ⇒A&gt;B</p>
<p>n=m并且an=bm⇒A=B</p>
</blockquote>
<ul>
<li><p>全排列问题一般有两种枚举方式：</p>
<p>**1.**依此枚举每个数放哪个位置；</p>
<p>**2.**依此枚举每个位置放哪个数；</p>
</li>
</ul>
<blockquote>
<p>对**2.**的例：n=3时的递归搜索树</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220223023705361.png" alt="image-20220223023705361"></p>
<p>上图保证了（相对意义上的）左子树的方案 字典序一定小于 右子树的方案；</p>
</blockquote>
<ul>
<li>开一个长度为n的数组来记录状态；</li>
</ul>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> state[N];  <span class="comment">// 0表示还没放数，1~n表示放了哪个数</span></span><br><span class="line"><span class="keyword">bool</span> used[N];  <span class="comment">// true表示用过，false表示还没用过</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; n) &#123;  <span class="comment">// 边界</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, state[i]);  <span class="comment">// 打印方案</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 依次枚举每个分支，即当前位置可以填哪些数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">            state[u] = i;</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">            state[u] = <span class="number">0</span>;</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行时间： 373 ms</span></span><br><span class="line"><span class="comment">运行空间： 7000 KB </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="分析时间复杂度"><a href="#分析时间复杂度" class="headerlink" title="分析时间复杂度"></a>分析时间复杂度</h4><ul>
<li>需要递归n层；</li>
<li>第一层时间复杂度为O(n)；（一个<code>for</code>循环）</li>
<li>第二层时间复杂度为O(n×n)；（由第一层衍生出n个分支，每个分支一个<code>for</code>循环）</li>
<li>第三层时间复杂度为O(n×n−1×n)；（由第二层衍生出n−1个分支）</li>
<li>⋯⋯</li>
<li>倒数第二层时间复杂度为O(n!×n)；</li>
<li>最后一层时间复杂度为O(n!×n)；（最后一层有n!个结点，且需要输出方案）</li>
</ul>
<p>总的时间复杂度为O[n(1+n+n(n−1)+n(n−1)(n−2)+⋯+n!)]</p>
<p>相当于P0n+P1n+P2n+⋯+Pnn⩾n!</p>
<p>原式相当于：</p>
<p>n(n!+n!1+n!1×2+n!1×2×3+⋯n!(n−1)!)</p>
<p>对其进行放缩：</p>
<p>原始⩽n(n!+n!1+n!2+n!4+n!8⋯n!(n−1)!)⩽n×n!(1+1+12+14+18+⋯)⩽3n!</p>
<p>故整个时间复杂度小于等于O(n×n!)</p>
<h3 id="717-简单斐波那契"><a href="#717-简单斐波那契" class="headerlink" title="717. 简单斐波那契"></a>717. 简单斐波那契</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>以下数列 <code>0 1 1 2 3 5 8 13 21 ...</code> 被称为斐波纳契数列。</p>
<p>这个数列从第 3 项开始，每一项都等于前两项之和。</p>
<p>输入一个整数 N，请你输出这个序列的前 N 项。</p>
<p><strong>输入格式</strong></p>
<p>一个整数 N。</p>
<p><strong>输出格式</strong></p>
<p>在一行中输出斐波那契数列的前 N 项，数字之间用空格隔开。</p>
<p><strong>数据范围</strong></p>
<p>0 &lt; N &lt; 46</p>
<p><strong>输入样例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>注意一下条件判断，否则会超时</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> st[N] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (st[n] == <span class="number">0</span>)</span><br><span class="line">        st[n] = <span class="built_in">dfs</span>(n - <span class="number">1</span>) + <span class="built_in">dfs</span>(n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> st[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="95-费解的开关"><a href="#95-费解的开关" class="headerlink" title="95. 费解的开关"></a>95. 费解的开关</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>你玩过“拉灯”游戏吗？</p>
<p>25 盏灯排成一个 5×5 的方形。</p>
<p>每一个灯都有一个开关，游戏者可以改变它的状态。</p>
<p>每一步，游戏者可以改变某一个灯的状态。</p>
<p>游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>
<p>我们用数字 1 表示一盏开着的灯，用数字 0 表示关着的灯。</p>
<p>下面这种状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10111</span><br><span class="line">01101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>在改变了最左上角的灯的状态后将变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>再改变它正中间的灯后状态将变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11001</span><br><span class="line">11001</span><br><span class="line">10100</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在 6 步以内使所有的灯都变亮。</p>
<p><strong>输入格式</strong></p>
<p>第一行输入正整数 n，代表数据中共有 n 个待解决的游戏初始状态。</p>
<p>以下若干行数据分为 n 组，每组数据有 5 行，每行 5 个字符。</p>
<p>每组数据描述了一个游戏的初始状态。</p>
<p>各组数据间用一个空行分隔。</p>
<p><strong>输出格式</strong></p>
<p>一共输出 n 行数据，每行有一个小于等于 6 的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>
<p>对于某一个游戏初始状态，若 6 步以内无法使所有灯变亮，则输出 −1。</p>
<p><strong>数据范围</strong></p>
<p>0&lt;n≤500</p>
<p><strong>输入样例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">00111</span><br><span class="line">01011</span><br><span class="line">10001</span><br><span class="line">11010</span><br><span class="line">11100</span><br><span class="line"></span><br><span class="line">11101</span><br><span class="line">11101</span><br><span class="line">11110</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line"></span><br><span class="line">01111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line"><span class="deletion">-1</span></span><br></pre></td></tr></table></figure>

<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-6-习题"><a href="#1-6-习题" class="headerlink" title="1.6 习题"></a>1.6 习题</h2><h3 id="93-递归实现组合型枚举"><a href="#93-递归实现组合型枚举" class="headerlink" title="93. 递归实现组合型枚举"></a>93. 递归实现组合型枚举</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>从 1∼n 这 n 个整数中随机选出 m 个，输出所有可能的选择方案。</p>
<p><strong>输入格式</strong></p>
<p>两个整数 n,m,在同一行用空格隔开。</p>
<p><strong>输出格式</strong></p>
<p>按照从小到大的顺序输出所有方案，每行 1 个。</p>
<p>首先，同一行内的数升序排列，相邻两个数用一个空格隔开。</p>
<p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如 <code>1 3 5 7</code> 排在 <code>1 3 6 8</code> 前面）。</p>
<p><strong>数据范围</strong></p>
<p>n&gt;0,<br>0≤m≤n ,<br>n+(n−m)≤25</p>
<p><strong>输入样例：</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">5</span> </span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">5</span> </span><br></pre></td></tr></table></figure>

<p><strong>思考题</strong>：如果要求使用非递归方法，该怎么做呢？</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><ul>
<li><p>画递归树：依次枚举每个位置的数是多少</p>
</li>
<li><p>不重复，人为规定顺序（限制从小到大排序）=&gt; 局部 =&gt; 只需保证每次新加的数大于前面的一个数</p>
</li>
<li><p>树 =&gt; dfs 参数：(1)三个位置：way[N]；(2)当前枚举到哪个位置，形参u；(3)start 当前最小可以从哪个数枚举</p>
</li>
</ul>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> way[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, way[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">        way[u] = i;</span><br><span class="line">        <span class="built_in">dfs</span>(u + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">        way[u] = <span class="number">0</span>; <span class="comment">// 恢复现场</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	运行时间182ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="剪枝优化"><a href="#剪枝优化" class="headerlink" title="剪枝优化"></a>剪枝优化</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> way[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u - <span class="number">1</span> + n - start + <span class="number">1</span> &lt; m)  <span class="comment">// 剪枝</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, way[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= n; i++) &#123;</span><br><span class="line">        way[u] = i;</span><br><span class="line">        <span class="built_in">dfs</span>(u + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">        way[u] = <span class="number">0</span>; <span class="comment">// 恢复现场</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	运行时间60ms</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="1209-带分数"><a href="#1209-带分数" class="headerlink" title="1209.带分数"></a>1209.带分数</h3><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><p>100 可以表示为带分数的形式：100=3+69258/714</p>
<p>还可以表示为：100=82+3546/197</p>
<p>注意特征：带分数中，数字 1∼9 分别出现且只出现一次（不包含 0）。</p>
<p>类似这样的带分数，100 有 11 种表示法。</p>
<p><strong>输入格式</strong></p>
<p>一个正整数。</p>
<p><strong>输出格式</strong></p>
<p>输出输入数字用数码 1∼9 不重复不遗漏地组成带分数表示的全部种数。</p>
<p><strong>数据范围</strong></p>
<p>1≤N&lt;106</p>
<p><strong>输入样例1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100</span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">105</span><br></pre></td></tr></table></figure>

<p><strong>输出样例2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul>
<li><p>暴力枚举搜索方案：枚举全排列；枚举a，b的位数（即a，b，c的位数）；判断等式是否成立</p>
<p>n=a+b/c</p>
</li>
<li><p>优化：cn=ca+b</p>
<p>枚举a，枚举c，枚举b是否成立（嵌套的dfs）</p>
</li>
</ul>
<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">bool</span> st[N], backup[N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = n * c - a * c;</span><br><span class="line">    <span class="keyword">if</span> (!a || !b || !c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(backup, st, <span class="built_in"><span class="keyword">sizeof</span></span>(st));  <span class="comment">// 把st数组的值复制到backup数组中去</span></span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = b % <span class="number">10</span>;  <span class="comment">// 取个位</span></span><br><span class="line">        b /= <span class="number">10</span>;  <span class="comment">// 把个位删掉</span></span><br><span class="line">        <span class="keyword">if</span> (!x || backup[x]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        backup[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (!backup[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_c</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> a, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(a, c)) ans++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs_c</span>(u + <span class="number">1</span>, a, c * <span class="number">10</span> + i);</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_a</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(a) <span class="built_in">dfs_c</span>(u, a, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs_a</span>(u + <span class="number">1</span>, a * <span class="number">10</span> + i);</span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs_a</span>(<span class="number">0</span>, <span class="number">0</span>);  <span class="comment">// 枚举了几个数，a的值</span></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="116-飞行员兄弟"><a href="#116-飞行员兄弟" class="headerlink" title="116.飞行员兄弟"></a>116.飞行员兄弟</h3><h4 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h4><p>“飞行员兄弟”这个游戏，需要玩家顺利的打开一个拥有 16 个把手的冰箱。</p>
<p>已知每个把手可以处于以下两种状态之一：打开或关闭。</p>
<p>只有当所有把手都打开时，冰箱才会打开。</p>
<p>把手可以表示为一个 4×4 的矩阵，您可以改变任何一个位置 [i,j] 上把手的状态。</p>
<p>但是，这也会使得第 i 行和第 j 列上的所有把手的状态也随着改变。</p>
<p>请你求出打开冰箱所需的切换把手的次数最小值是多少。</p>
<p><strong>输入格式</strong></p>
<p>输入一共包含四行，每行包含四个把手的初始状态。</p>
<p>符号 <code>+</code> 表示把手处于闭合状态，而符号 <code>-</code> 表示把手处于打开状态。</p>
<p>至少一个手柄的初始状态是关闭的。</p>
<p><strong>输出格式</strong></p>
<p>第一行输出一个整数 N，表示所需的最小切换把手次数。</p>
<p>接下来 N 行描述切换顺序，每行输出两个整数，代表被切换状态的把手的行号和列号，数字之间用空格隔开。</p>
<p><strong>注意</strong>：如果存在多种打开冰箱的方式，则按照优先级整体从上到下，同行从左到右打开。</p>
<p><strong>数据范围</strong></p>
<p>1≤i,j≤4</p>
<p><strong>输入样例：</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">-+--</span><br><span class="line">----</span><br><span class="line">----</span><br><span class="line">-+--</span><br></pre></td></tr></table></figure>

<p><strong>输出样例：</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">4</span></span><br></pre></td></tr></table></figure>

<h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1208-翻硬币"><a href="#1208-翻硬币" class="headerlink" title="1208. 翻硬币"></a>1208. 翻硬币</h3><h4 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h4><p>小明正在玩一个“翻硬币”的游戏。</p>
<p>桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。</p>
<p>比如，可能情形是：<code>**oo***oooo</code></p>
<p>如果同时翻转左边的两个硬币，则变为：<code>oooo***oooo</code></p>
<p>现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</p>
<p>我们约定：把翻动相邻的两个硬币叫做一步操作。</p>
<p><strong>输入格式</strong></p>
<p>两行等长的字符串，分别表示初始状态和要达到的目标状态。</p>
<p><strong>输出格式</strong></p>
<p>一个整数，表示最小操作步数</p>
<p><strong>数据范围</strong></p>
<p>输入字符串的长度均不超过100。<br>数据保证答案一定有解。</p>
<p><strong>输入样例1：</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">**</span></span><br><span class="line"><span class="strong">o**</span><span class="strong">**o**</span><span class="strong">**</span></span><br></pre></td></tr></table></figure>

<p><strong>输出样例1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p><strong>输入样例2：</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*o<span class="strong">**o**</span>*</span>o<span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span>o**</span><span class="emphasis">*o<span class="strong">**o**</span>*</span></span><br></pre></td></tr></table></figure>

<p><strong>输出样例2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2-二分和前缀和"><a href="#2-二分和前缀和" class="headerlink" title="2 二分和前缀和"></a>2 二分和前缀和</h1><h2 id="2-1-二分"><a href="#2-1-二分" class="headerlink" title="2.1 二分"></a>2.1 二分</h2><p>思想：</p>
<ul>
<li>确定一个区间，使得目标值一定在区间中</li>
<li>找一个性质，满足：性质具有二段性；答案是二段性的分界点</li>
</ul>
<h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid * mid &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮点数二分不需要考虑mid是否+1，else后是否+1。</li>
<li>没有固定的浮点数序列，因此要考虑精度eps，一般比题目要求多1位小数就行</li>
<li>需要自己确定l和r的值，即查找范围</li>
</ul>
<h2 id="2-2-前缀和"><a href="#2-2-前缀和" class="headerlink" title="2.2 前缀和"></a>2.2 前缀和</h2><h1 id="3-数学和简单DP"><a href="#3-数学和简单DP" class="headerlink" title="3 数学和简单DP"></a>3 数学和简单DP</h1><h1 id="4-枚举、模拟与排序"><a href="#4-枚举、模拟与排序" class="headerlink" title="4 枚举、模拟与排序"></a>4 枚举、模拟与排序</h1><h1 id="5-树状数组与线段树"><a href="#5-树状数组与线段树" class="headerlink" title="5 树状数组与线段树"></a>5 树状数组与线段树</h1><h1 id="6-双指针、BFS与图论"><a href="#6-双指针、BFS与图论" class="headerlink" title="6 双指针、BFS与图论"></a>6 双指针、BFS与图论</h1><h1 id="7-贪心"><a href="#7-贪心" class="headerlink" title="7 贪心"></a>7 贪心</h1><h1 id="8-数论"><a href="#8-数论" class="headerlink" title="8 数论"></a>8 数论</h1><h1 id="9-复杂DP"><a href="#9-复杂DP" class="headerlink" title="9 复杂DP"></a>9 复杂DP</h1><h1 id="10-疑难杂题"><a href="#10-疑难杂题" class="headerlink" title="10 疑难杂题"></a>10 疑难杂题</h1>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>语法基础</title>
    <url>/undefined/36d3508b/</url>
    <content><![CDATA[<blockquote>
<p>acwing语法基础课笔记，结合柳婼的pdf</p>
</blockquote>
<span id="more"></span>

<h1 id="1-变量、输入输出、表达式与顺序语句"><a href="#1-变量、输入输出、表达式与顺序语句" class="headerlink" title="1 变量、输入输出、表达式与顺序语句"></a>1 变量、输入输出、表达式与顺序语句</h1><h2 id="1-1-常用头文件"><a href="#1-1-常用头文件" class="headerlink" title="1.1 常用头文件"></a>1.1 常用头文件</h2><ul>
<li><code>iostream</code>包括<code>cin</code>、<code>cout</code>、<code>scanf</code>、<code>printf</code></li>
<li><code>cstdio</code>包括<code>scanf</code>、<code>printf</code></li>
<li><code>cmath</code>，相当于C语言里面的<code>math.h</code></li>
<li><code>cctype</code>，相当于C语言里面的<code>ctype.h</code></li>
<li><code>cstring</code>，相当于C语言里面的<code>string.h</code></li>
<li>万能头文件<code>bits/stdc++.h</code></li>
</ul>
<h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><ul>
<li>bool</li>
<li>int 2B</li>
<li>long 4B</li>
<li>long long 8B</li>
<li>float 6~7位小数，4B</li>
<li>double 15~16位小数，8B</li>
<li>long double 16B</li>
</ul>
<h2 id="1-3-字符的读入"><a href="#1-3-字符的读入" class="headerlink" title="1.3 字符的读入"></a>1.3 字符的读入</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c%c&quot;</span>, &amp;a, &amp;b);      <span class="comment">// 会把空格读入</span></span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;              <span class="comment">// 会忽略中间的空格（1个或多个）</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-OJ系统的输出格式问题"><a href="#1-4-OJ系统的输出格式问题" class="headerlink" title="1.4 OJ系统的输出格式问题"></a>1.4 OJ系统的输出格式问题</h2><ul>
<li>忽略每一行末尾的空格</li>
<li>忽略输出结果最后的换行符</li>
</ul>
<h2 id="1-5-max数学表达式的理解"><a href="#1-5-max数学表达式的理解" class="headerlink" title="1.5 max数学表达式的理解"></a>1.5 max数学表达式的理解</h2><p>$max=\frac{a+b+\vert a-b\vert}{2}$</p>
<p>因为 “ 短 + 二者之差 = 长 ”</p>
<p>所以有 “ 长 + （ 短 + 二者之差 ）= 长 + 长 = 2 * 长 ”</p>
<h1 id="2-scanf-printf语法及判断语句"><a href="#2-scanf-printf语法及判断语句" class="headerlink" title="2 scanf/printf语法及判断语句"></a>2 scanf/printf语法及判断语句</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//代码优化</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//代码优化</span></span><br></pre></td></tr></table></figure>

<p>判断浮点数是否为0：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">!x</span><br></pre></td></tr></table></figure>

<h1 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3 循环语句"></a>3 循环语句</h1><h2 id="3-1-输入函数返回值的妙用"><a href="#3-1-输入函数返回值的妙用" class="headerlink" title="3.1 输入函数返回值的妙用"></a>3.1 输入函数返回值的妙用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cin &gt;&gt; x &amp;&amp; x &gt; <span class="number">0</span>) &#123;...&#125;         <span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">if</span>(cin &gt;&gt; x, x &gt; <span class="number">0</span>) &#123;...&#125;           <span class="comment">// 写法2。与写法1不同的是，这里的if语句不考虑&quot;cin &gt;&gt; x&quot;的返回值。&quot;cin &gt;&gt; x&quot;仅做执行，然后抛弃其返回值，最后对判断x &gt; 0。即等价于&quot;cin &gt;&gt; x; if(x &gt; 0) &#123;...&#125;&quot;，可以节省1行。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) &amp;&amp; x &gt; <span class="number">0</span>) &#123;...&#125;  <span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), x &gt; <span class="number">0</span>) &#123;...&#125;    <span class="comment">// 写法2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x)) &#123;...&#125;          <span class="comment">// 判断是否非法输入（EOF），用于文件读取</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-逗号运算符"><a href="#3-2-逗号运算符" class="headerlink" title="3.2 逗号运算符"></a>3.2 逗号运算符</h2><p>C++的<code>,</code>运算符对逗号前后的表达式进行运算，然后舍弃前一个表达式的返回值，仅仅返回最后一个表达式的返回值，例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>, 表达式<span class="number">2</span>, 表达式<span class="number">3</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">表达式<span class="number">1</span>;</span><br><span class="line">表达式<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>


<p>节省了2行代码</p>
<h1 id="4-数组"><a href="#4-数组" class="headerlink" title="4 数组"></a>4 数组</h1><h2 id="4-1-浮点数比较问题"><a href="#4-1-浮点数比较问题" class="headerlink" title="4.1 浮点数比较问题"></a>4.1 浮点数比较问题</h2><p>C++中，表达式$\sqrt{3}\times \sqrt{3} == 3$并不成立，由于浮点数精读损失，应该用$\vert\sqrt{3}\times\sqrt{3}-3\vert\leq eps$去判断，eps一般取$10^{−6}$</p>
<h2 id="4-2-高精度运算的数组大小问题"><a href="#4-2-高精度运算的数组大小问题" class="headerlink" title="4.2 高精度运算的数组大小问题"></a>4.2 高精度运算的数组大小问题</h2><p>计算$2^N$时，可用lg2N估算数组长度</p>
<h2 id="4-3-cstring一些函数用法"><a href="#4-3-cstring一些函数用法" class="headerlink" title="4.3 cstring一些函数用法"></a>4.3 cstring一些函数用法</h2><p>memset赋值是按字节赋值，因此只有赋予-1和0时才与预期一致。其最后一个参数的单位是Byte</p>
<p>memset(arr, 0, n * sizeof(int))</p>
<p>memset(arr, -1, n * sizeof(int))</p>
<p>sizeof可不加括号，即可这样使用sizeof a，其返回单位是Byte</p>
<p>memcpy用于拷贝数组，格式为memcpy(dest，src，izeof(src))</p>
<h2 id="4-4-数组初始化的坑"><a href="#4-4-数组初始化的坑" class="headerlink" title="4.4 数组初始化的坑"></a>4.4 数组初始化的坑</h2><p>在函数内定义的数组不会自动初始化为0，都是随机数，例如main函数里。而在函数外定义的数组会自动初始化为0。</p>
<h1 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5 字符串"></a>5 字符串</h1><h2 id="5-1-读取字符串的方法"><a href="#5-1-读取字符串的方法" class="headerlink" title="5.1 读取字符串的方法"></a>5.1 读取字符串的方法</h2><p>C语言方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);    <span class="comment">// 不能读取含空格、换行符的字符串</span></span><br><span class="line"><span class="built_in">gets</span>(s);           <span class="comment">// 能读取含空格的字符串，同时自动去掉换行符\n</span></span><br><span class="line"><span class="built_in">fgets</span>(s, N, stdin);<span class="comment">// 能读取含空格的字符串，但不会去掉换行符\n。【注意】</span></span><br></pre></td></tr></table></figure>

<p>C++方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; str;             <span class="comment">// 不能读取含空格、换行符的字符串</span></span><br><span class="line"><span class="built_in">getline</span>(cin, str);       <span class="comment">// 能读取含空格的字符串，同时自动去掉换行符\n</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-字符串操作"><a href="#5-2-字符串操作" class="headerlink" title="5.2 字符串操作"></a>5.2 字符串操作</h2><p>C语言方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>      <span class="comment">// 或&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="built_in">strlen</span>(a);              <span class="comment">// O(N)复杂度，使用前最好用变量保存字符串长度。统计的长度不包括`\0`</span></span><br><span class="line"><span class="built_in">strcat</span>(a, b);           <span class="comment">// 把字符串b拼接到a之后，拼接后的字符串保存在a中</span></span><br><span class="line"><span class="built_in">strcmp</span>(a, b);           <span class="comment">// 根据字典排序比较字符串</span></span><br><span class="line"><span class="built_in">strcpy</span>(b, a);           <span class="comment">// 把字符串a的内容拷贝到字符串b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++) &#123;...&#125;      <span class="comment">// 遍历字符串</span></span><br></pre></td></tr></table></figure>

<p>C++方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;           <span class="comment">// 构造重复字符的字符串</span></span><br><span class="line">str.<span class="built_in">empty</span>();                <span class="comment">// 判空</span></span><br><span class="line">str.<span class="built_in">size</span>();                 <span class="comment">// 长度，与stelen()不同的是，这个复杂度是O(1)，不用额外的变量保存</span></span><br><span class="line">str.<span class="built_in">c_str</span>();                <span class="comment">// 转成char数组，此时才可用printf输出</span></span><br><span class="line">str.<span class="built_in">substr</span>(begin, length);   <span class="comment">// 子串</span></span><br><span class="line">str.<span class="built_in">pop_back</span>();             <span class="comment">// 删除最后一个字符</span></span><br><span class="line">str.<span class="built_in">length</span>();               <span class="comment">// 有几个字符就是长度多少，不存在char[]里面的什么末尾的结束符之类的</span></span><br><span class="line"><span class="comment">// 字符串比较&quot;&gt;&quot;、&quot;&lt;&quot;</span></span><br><span class="line"><span class="comment">// 字符串拼接&quot;+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch : str) &#123;...&#125;   <span class="comment">// 遍历（不可修改字符）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> &amp;ch : str) &#123;...&#125;  <span class="comment">// 遍历（可修改字符）</span></span><br></pre></td></tr></table></figure>

<p>注意：使用<code>+</code>对字符串拼接时，要求左右两边至少有一个string对象，即<code>str = &quot;a&quot; + &quot;b&quot;;</code>会报错。</p>
<h2 id="5-3-字符串流"><a href="#5-3-字符串流" class="headerlink" title="5.3 字符串流"></a>5.3 字符串流</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">string s;</span><br><span class="line"><span class="function">stringstream <span class="title">ssin</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(ssin &gt;&gt; s) &#123;...&#125;      <span class="comment">// 按空格拆分s，例如英语句子拆分单词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用如下代码代替</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; word) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-char数组难点"><a href="#5-4-char数组难点" class="headerlink" title="5.4 char数组难点"></a>5.4 char数组难点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">4</span>] = &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>] = &#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;          <span class="comment">// 最后一个位置会补\0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;          <span class="comment">// 输出&quot;C++D++&quot;，因为字符数组a不会自动添加&#x27;\0&#x27;，cout会读取到b的部分</span></span><br></pre></td></tr></table></figure>

<h1 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h1><h2 id="6-1-函数中的数组参数"><a href="#6-1-函数中的数组参数" class="headerlink" title="6.1 函数中的数组参数"></a>6.1 函数中的数组参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    cout &lt;&lt; <span class="keyword">sizeof</span> a &lt;&lt; endl;           <span class="comment">// 4B * 10 = 40B</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">size</span>(a) &lt;&lt; endl;            <span class="comment">// 8B，虽然函数f能修改实参a的内容，但其本质是一个不同的数组指针指向数组的内存空间，故对函数内的数组参数a调用sizeof，返回的是数组指针的长度。在64位系统中，指针的长度等于64b=8B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-默认参数值"><a href="#6-2-默认参数值" class="headerlink" title="6.2 默认参数值"></a>6.2 默认参数值</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span> </span>&#123;...&#125;     <span class="comment">// 需要默认值的变量只能放在靠后的位置</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-内联"><a href="#6-3-内联" class="headerlink" title="6.3 内联"></a>6.3 内联</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;...&#125;           <span class="comment">// 编译时把函数体复制到调用函数的位置，减少函数跳转次数</span></span><br></pre></td></tr></table></figure>

<p><code>fgets</code>的坑：</p>
<p><code>fgets</code>会读入<code>\n</code>，因此遍历字符串时，应当用<code>for (int i = 0; str[i] != &#39;\n&#39;; i++)</code>，而不能用 <code>for (int i = 0; str[i]; i++)</code></p>
<h1 id="7-结构体、类、指针与引用"><a href="#7-结构体、类、指针与引用" class="headerlink" title="7 结构体、类、指针与引用"></a>7 结构体、类、指针与引用</h1><h2 id="7-1-结构体"><a href="#7-1-结构体" class="headerlink" title="7.1 结构体"></a>7.1 结构体</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node* next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _val): <span class="built_in">val</span>(_val), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;        <span class="comment">// 编译更快</span></span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _val) &#123;</span><br><span class="line">        vall = _val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Node* p = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>注意：链表中的头结点指的是链表第一个结点的<strong>地址</strong>，而不是结点本身。</p>
<h2 id="7-2-类"><a href="#7-2-类" class="headerlink" title="7.2 类"></a>7.2 类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;;          <span class="comment">// 注意类末尾要加分号！</span></span><br></pre></td></tr></table></figure>

<p><strong>类与结构体的区别：</strong></p>
<ul>
<li>结构体默认是public</li>
<li>类默认是private</li>
</ul>
<p><strong>Leetcode式模板：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="8-STL容器、位运算与常用库函数"><a href="#8-STL容器、位运算与常用库函数" class="headerlink" title="8 STL容器、位运算与常用库函数"></a>8 STL容器、位运算与常用库函数</h1><h2 id="8-1-数组类容器"><a href="#8-1-数组类容器" class="headerlink" title="8.1 数组类容器"></a>8.1 数组类容器</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a><code>vector</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;      <span class="comment">// 一维数组</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; b[N];   <span class="comment">// 二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">a[k];           <span class="comment">// 取值</span></span><br><span class="line">a.<span class="built_in">size</span>();       <span class="comment">// 长度</span></span><br><span class="line">a.<span class="built_in">empty</span>();      <span class="comment">// 判空</span></span><br><span class="line">a.<span class="built_in">clear</span>();      <span class="comment">// 清空</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">front</span>();              <span class="comment">// 读取第1个元素</span></span><br><span class="line">a.<span class="built_in">back</span>();               <span class="comment">// 读取最后1个元素</span></span><br><span class="line">a.<span class="built_in">push_back</span>(x);          <span class="comment">// 在末尾插入元素</span></span><br><span class="line"><span class="keyword">int</span> x = a.<span class="built_in">pop_back</span>();    <span class="comment">// 删除末尾元素并返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* p = <span class="built_in">lower_bound</span>(a, a + a.<span class="built_in">size</span>(), x);       <span class="comment">// 查找数组在指定范围内大于等于x的元素地址（要求数组有序）</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="built_in">upper_bound</span>(a, a + a.<span class="built_in">size</span>(), x);       <span class="comment">// 查找数组在指定范围内大于x的元素地址（要求数组有序）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="built_in">lower_bound</span>(a, a + a.<span class="built_in">size</span>(), x); - a;   <span class="comment">// 查找数组在指定范围内大于等于x的元素下标（要求数组有序）</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="built_in">upper_bound</span>(a, a + a.<span class="built_in">size</span>(), x); - a;   <span class="comment">// 查找数组在指定范围内大于x的元素下标（要求数组有序）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;...&#125;                            <span class="comment">// 方式1，通过a[i]读取元素值</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator i = a.<span class="built_in">begin</span>(); i &lt; a.<span class="built_in">end</span>(); i++) &#123;...&#125;     <span class="comment">// 方式2（迭代器），通过*i读取元素值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = a.<span class="built_in">begin</span>(); i &lt; a.<span class="built_in">end</span>(); i++) &#123;...&#125;                     <span class="comment">// 方式3（迭代器简化版）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x : a) &#123;...&#125;                                             <span class="comment">// 方式4，通过x读取元素值</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>vector</code>是变长数组，类似<code>java</code>的<code>ArrayList</code></li>
<li><code>a.begin()</code>返回的是vector第1个元素的<strong>地址</strong>，而<code>a.end()</code>返回的是最后一个元素的下一个位置的<strong>地址</strong></li>
<li><code>a.end() - a.begin() == a.size()</code></li>
<li><code>*a.begin() == a[0]</code></li>
</ul>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a><code>queue</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************</span></span><br><span class="line"><span class="comment">** 普通队列queue</span></span><br><span class="line"><span class="comment">***************************************************/</span></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">q.<span class="built_in">push</span>(x);              <span class="comment">// 入队（末尾插入元素）</span></span><br><span class="line"><span class="keyword">int</span> x = q.<span class="built_in">pop</span>();         <span class="comment">// 出队（删除第1个元素）</span></span><br><span class="line">a.<span class="built_in">front</span>();              <span class="comment">// 查看队头元素</span></span><br><span class="line">a.<span class="built_in">back</span>();               <span class="comment">// 查看队尾元素</span></span><br><span class="line"><span class="comment">// a.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************</span></span><br><span class="line"><span class="comment">** 优先队列（堆）</span></span><br><span class="line"><span class="comment">***************************************************/</span></span><br><span class="line"><span class="comment">// 元素为基本类型</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; a;                                  <span class="comment">// 大根堆</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; b;          <span class="comment">// 小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素为自定义类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rec</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大根堆需要自定义类重载&lt;号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Rec&amp; t) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; t.a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 小根堆需要自定义类重载&gt;号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt; (<span class="keyword">const</span> Rec&amp; t) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; t.a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;Rec&gt; a;                                  <span class="comment">// 大根堆</span></span><br><span class="line">priority_queue&lt;Rec, vector&lt;Rec&gt;, greater&lt;Rec&gt;&gt; b;          <span class="comment">// 小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">a.<span class="built_in">push</span>(x);              <span class="comment">// 插入元素（位置不确定）</span></span><br><span class="line">a.<span class="built_in">top</span>();                <span class="comment">// 查看堆顶元素（大根堆是最大值，小根堆是最小值）</span></span><br><span class="line">a.<span class="built_in">pop</span>();                <span class="comment">// 删除堆顶元素（大根堆是最大值，小根堆是最小值）</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>队列没有clear()方法</li>
<li>优先队列插入时无序，输出时有序</li>
<li>优先队列存储自定义类型时，需要重载运算符<ul>
<li>大根堆重载&lt;</li>
<li>小根堆重载&gt;</li>
</ul>
</li>
</ul>
<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a><code>stack</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">s.<span class="built_in">push</span>(x);          <span class="comment">// 入栈</span></span><br><span class="line">s.<span class="built_in">top</span>();            <span class="comment">// 查看栈顶</span></span><br><span class="line">s.<span class="built_in">pop</span>();            <span class="comment">// 出栈（不放回出栈元素！）</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>stack</code>的<code>pop()</code>方法不像<code>java</code>返回栈顶元素！</p>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a><code>deque</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">q[i]                <span class="comment">// 随机访问</span></span><br><span class="line">q.<span class="built_in">begin</span>();          <span class="comment">// 队头元素地址，用*q.begin()读取元素</span></span><br><span class="line">q.<span class="built_in">end</span>();            <span class="comment">// 队尾元素地址，用*q.end()读取元素</span></span><br><span class="line">q.<span class="built_in">front</span>();          <span class="comment">// 队头元素值</span></span><br><span class="line">q.<span class="built_in">back</span>();           <span class="comment">// 队尾元素值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">push_back</span>();        <span class="comment">// 队尾插入元素</span></span><br><span class="line"><span class="built_in">push_front</span>();       <span class="comment">// 队头插入元素</span></span><br><span class="line"><span class="built_in">pop_back</span>();         <span class="comment">// 队尾删除元素</span></span><br><span class="line"><span class="built_in">pop_front</span>();        <span class="comment">// 队头插入元素</span></span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s;             <span class="comment">// 集合</span></span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; ms;       <span class="comment">// 多重集合（允许元素重复）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line">s.<span class="built_in">claer</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">begin</span>();</span><br><span class="line">s.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">insert</span>(x);</span><br><span class="line">s.<span class="built_in">find</span>(x);              <span class="comment">// 返回迭代器，可用if(s.find(x) == s.end())判断是否存在元素x</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>(x);        <span class="comment">// 返回大于等于x的最小元素的迭代器</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>(x);        <span class="comment">// 返回大于x的最小元素的迭代器</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">erase</span>(x);             <span class="comment">// 删除x并返回迭代器</span></span><br><span class="line">s.<span class="built_in">count</span>(x);             <span class="comment">// 统计x出现的次数（普通集合只会返回0或1，多重集合可能返回大于1的数）</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>自定义类要求重载&lt;</li>
<li><code>find()</code>、<code>erase()</code>、<code>lower_bound()</code>和<code>upper_bound()</code>都是<code>O(logn)</code>复杂度</li>
<li><code>count()</code>是<code>O(k+logn)</code>复杂度</li>
</ul>
<h3 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a><code>unordered_set</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line">unordered_set&lt;<span class="keyword">int</span>&gt; s;           <span class="comment">// 哈希表</span></span><br><span class="line">unordered_multiset&lt;<span class="keyword">int</span>&gt; s;</span><br></pre></td></tr></table></figure>

<h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a><code>bitset</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二进制串</span></span><br><span class="line">bitset s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">s.<span class="built_in">count</span>();      <span class="comment">// 1的个数</span></span><br><span class="line">s.<span class="built_in">set</span>(p);       <span class="comment">// 第p位设为1</span></span><br><span class="line">s.<span class="built_in">reset</span>(p);     <span class="comment">// 第p位设为0</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>bitset</code>元素支持位运算符<code>&amp;</code>、<code>|</code>和<code>~</code>等等</li>
<li>求x的第k位二进制数：<code>x &gt;&gt; k &amp; 1</code></li>
<li>求x从右起的第1个1：<code>lowbit(x) = x &amp; -x;</code><ul>
<li>实际上是原码和补码做与操作</li>
<li>例如<code>110110</code>返回<code>10</code>，<code>11000</code>返回<code>1000</code></li>
</ul>
</li>
</ul>
<h2 id="8-2-有序对容器"><a href="#8-2-有序对容器" class="headerlink" title="8.2 有序对容器"></a>8.2 有序对容器</h2><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a><code>pair</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a = &#123;<span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b = <span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">a[<span class="string">&quot;a&quot;</span>] = <span class="number">4</span>;     <span class="comment">// 类似数组的操作</span></span><br><span class="line">m.<span class="built_in">insert</span>();</span><br><span class="line">m.<span class="built_in">find</span>();</span><br></pre></td></tr></table></figure>

<h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a><code>unordered_map</code></h3><p>哈希映射，效率更高</p>
<h2 id="8-3-algorithm库"><a href="#8-3-algorithm库" class="headerlink" title="8.3 algorithm库"></a>8.3 algorithm库</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">reverse</span>(a, a + a.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line"><span class="built_in">unique</span>(a, a + a.<span class="built_in">size</span>());                        <span class="comment">// 返回去重后最后一个元素的地址</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="built_in">unique</span>(a, a + a.<span class="built_in">size</span>()) - a;             <span class="comment">// 去重后数组的长度</span></span><br><span class="line">a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());     <span class="comment">// 真删除重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打乱</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());                       <span class="comment">// 升序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());         <span class="comment">// 降序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a - b;&#125;              <span class="comment">// 自定义比较方法</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);                      <span class="comment">// 自定义排序</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><code>random_shuffle()</code>常结合<code>ctime</code>的<code>srand( time(0) )</code>使用</li>
<li><code>unique</code>并没有真的删除重复元素，它仅将重复的元素放到非重复元素部分的后边</li>
</ul>
<h2 id="8-4-cctype头文件中的函数"><a href="#8-4-cctype头文件中的函数" class="headerlink" title="8.4 cctype头文件中的函数"></a>8.4 cctype头文件中的函数</h2><p>判断元素是否属于某个类型</p>
<p><code>isalpha</code> 大小写字母</p>
<p><code>islower</code> 小写字母</p>
<p><code>isupper</code> 大写字母</p>
<p><code>isdigit</code> 数字</p>
<p><code>isalnum</code> 大小写字母，数字</p>
<p><code>isblank</code> space 和 \t</p>
<p><code>isspace</code> space 和 \t，\n，\r</p>
<p><code>tolower</code> 转换为小写字母</p>
<p><code>toupper</code> 转换为大写字母</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法基础</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0笔记</title>
    <url>/undefined/84d0b9c9/</url>
    <content><![CDATA[<blockquote>
<p>vue2.0学习笔记</p>
</blockquote>
<span id="more"></span>
<p>Vue 的核心库只关注视图层，方便与第三方库或既有项目整合。</p>
<p>HTML + CSS + JS : 视图 ： 给用户看，刷新后台给的数据</p>
<p>网络通信 ： axios</p>
<p>页面跳转 ： vue-router</p>
<p>状态管理：vuex</p>
<p>Vue-UI : ICE , Element UI</p>
<h1 id="1-前端核心分析"><a href="#1-前端核心分析" class="headerlink" title="1 前端核心分析"></a>1 前端核心分析</h1><h2 id="1-1-VUE-概述"><a href="#1-1-VUE-概述" class="headerlink" title="1.1 VUE 概述"></a>1.1 VUE 概述</h2><p>Vue (读音/vju/, 类似于view)是一套用于构建用户界面的==渐进式==（意味着你可以将Vue作为你应用的一部分嵌套其中）框架，发布于2014年2月。与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库(如: vue-router: 跳转，vue-resource: 通信，vuex:管理)或既有项目整合</p>
<h2 id="1-2-前端三要素"><a href="#1-2-前端三要素" class="headerlink" title="1.2 前端三要素"></a>1.2 前端三要素</h2><ul>
<li>HTML (结构) :超文本标记语言(Hyper Text Markup Language) ，决定网页的结构和内容</li>
<li>CSS (表现) :层叠样式表(Cascading Style sheets) ，设定网页的表现样式</li>
<li>JavaScript (行为) :是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行,用于控制网页的行为</li>
</ul>
<h2 id="1-3-JavaScript框架"><a href="#1-3-JavaScript框架" class="headerlink" title="1.3 JavaScript框架"></a>1.3 JavaScript框架</h2><ul>
<li><p>jQuery: 大家熟知的JavaScript框架，优点是简化了DOM操作，缺点是DOM操作太频繁,影响前端性能;在前端眼里使用它仅仅是为了兼容IE6、7、8;</p>
</li>
<li><p>Angular: Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发;对后台程序员友好，对前端程序员不太友好;最大的缺点是版本迭代不合理(如: 1代-&gt; 2代，除了名字，基本就是两个东西;截止发表博客时已推出了Angular6)</p>
</li>
<li><p>React: Facebook出品，一款高性能的JS前端框架;特点是提出了新概念[虚拟DOM]用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率;缺点是使用复杂，因为需要额外学习一门[JSX] 语言;</p>
</li>
<li><p>Vue:一款渐进式JavaScript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular (模块化)和React (虚拟DOM)的优点;</p>
</li>
<li><p>Axios :前端通信框架;因为Vue 的边界很明确，就是为了处理DOM,所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互;当然也可以直接选择使用jQuery提供的AJAX通信功能;</p>
</li>
</ul>
<p>前端三大框架：Angular、React、Vue</p>
<h1 id="2-第一个Vue程序"><a href="#2-第一个Vue程序" class="headerlink" title="2 第一个Vue程序"></a>2 第一个Vue程序</h1><h2 id="2-1-什么是MVVM"><a href="#2-1-什么是MVVM" class="headerlink" title="2.1 什么是MVVM"></a>2.1 什么是MVVM</h2><blockquote>
<p> MVVM (Model-View-ViewModel) 是一种软件架构设计模式，由微软WPF (用于替代WinForm，以前就是用这个技术开发桌面应用程序的)和Silverlight (类似于Java Applet,简单点说就是在浏览器上运行的WPF)的架构师Ken Cooper和Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由John Gossman (同样也是WPF和Silverlight的架构师)于2005年在他的博客上发表。</p>
</blockquote>
<p>MVVM 源自于经典的MVC (ModI-View-Controller) 模式。MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用，其作用如下:</p>
<ul>
<li>该层向上与视图层进行双向数据绑定</li>
<li>向下与Model层通过接口请求进行数据交互</li>
</ul>
<h2 id="2-2-为什么要使用MVVM"><a href="#2-2-为什么要使用MVVM" class="headerlink" title="2.2 为什么要使用MVVM"></a>2.2 为什么要使用MVVM</h2><p>MVVM模式和MVC模式一样，主要目的是分离视图(View)和模型(Model),有几大好处：</p>
<ul>
<li>低耦合:视图(View)可以独立于Model变化和修改,一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>
<li>可复用:你可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑。</li>
<li>独立开发:开发人员可以专注于业务逻辑和数据的开发(ViewModel),设计人员可以专注于页面设计。</li>
<li>可测试:界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。</li>
</ul>
<h2 id="2-3-Vue-是-MVVM-模式的实现者"><a href="#2-3-Vue-是-MVVM-模式的实现者" class="headerlink" title="2.3 Vue 是 MVVM 模式的实现者"></a>2.3 Vue 是 MVVM 模式的实现者</h2><ul>
<li><p>Model : 模型层（数据层）。在这里表示JavaScript对象，数据可能是固定的思数据, 更多的是来自服务器, 从网络上请求下来的数据</p>
</li>
<li><p>View : 视图层，在这里表示DOM （HTML操作的元素），给用户展示各种信息</p>
</li>
<li><p>ViewModel : 视图模型层，连接视图和数据的中间件，Vue.js就是MVVM中的ViewModel层的实现者，在MVVM架构中，是不允许数据和视图直接通信的，只能通过ViewModel来通信，而ViewModel就是定义了一个Observer观察者</p>
</li>
</ul>
<p>VM作用：</p>
<p>1 ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</p>
<p>2 ViewModel 能够监听到视图的变化，并能够通知数据发生改变</p>
<p>至此，我们就明白了，Vue.js 就是一个MVVM的实现者，他的核心就是实现了DOM监听与数据绑定</p>
<h2 id="2-4-Vue安装方式"><a href="#2-4-Vue安装方式" class="headerlink" title="2.4 Vue安装方式"></a>2.4 Vue安装方式</h2><p><strong>方式一. 直接CDN引入</strong></p>
<p>可以选择引入开发环境版本 / 生产环境版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 开发环境版本, 包含了帮助的命令行警告</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdeliver.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 生产环境版本, 优化了尺寸和速度</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdeliver.net/npm/vue&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二. 下载和引入</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 开发环境</span><br><span class="line">https:<span class="regexp">//</span>vuejs.org<span class="regexp">/js/</span>vue.js</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 生产环境</span><br><span class="line">https:<span class="regexp">//</span>vuejs.org<span class="regexp">/js/</span>vue.min.js</span><br></pre></td></tr></table></figure>

<p><strong>方式三. NPM安装</strong></p>
<p>通过webpack和CLI的使用</p>
<h1 id="3-Vue基本语法"><a href="#3-Vue基本语法" class="headerlink" title="3 Vue基本语法"></a>3 Vue基本语法</h1><p>模板语法：</p>
<p>创建Vue, options可以放什么</p>
<ul>
<li>el</li>
<li>data</li>
<li>methods</li>
<li>computed</li>
<li>生命周期函数<br>…</li>
</ul>
<h2 id="3-1-v-bind"><a href="#3-1-v-bind" class="headerlink" title="3.1 v-bind"></a>3.1 v-bind</h2><p>现在数据和DOM已经被建立了关联，所有的东西都是响应式的。我们在控制台操作对象的属性，界面可以实时更新。</p>
<p> 我们可以使用v-bind来绑定元素属性！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>鼠标悬停几秒钟查看此处动态绑定的提示信息！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-v-if-v-else"><a href="#3-2-v-if-v-else" class="headerlink" title="3.2 v-if v-else"></a>3.2 v-if v-else</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">       data: &#123;</span><br><span class="line"><span class="javascript">           type: <span class="string">&quot;A&quot;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-v-for"><a href="#3-3-v-for" class="headerlink" title="3.3 v-for"></a>3.3 v-for</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        姓名：&#123;&#123;item.name&#125;&#125;，年龄：&#123;&#123;item.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;wangwu&quot;</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>官方推荐, 使用v-for的时候, 加上一个 key属性</p>
<p>key的作用是为了高效的更新虚拟DOM，key要具有唯一性</p>
<h2 id="3-4-v-on-事件绑定"><a href="#3-4-v-on-事件绑定" class="headerlink" title="3.4 v-on 事件绑定"></a>3.4 v-on 事件绑定</h2><p>作用: 绑定事件监听<br>简写: @<br>写法:</p>
<ul>
<li>没有参数的情况下, 可以不写(); 如果方法本身有一个参数, 会默认将原生事件event参数传递进去</li>
<li>如果传入某个参数, 同时需要event时, 可以通过$event传入时间</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;你点我干嘛？&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//方法必须绑定在Vue的Methods对象中，v-on:事件</span></span></span><br><span class="line"><span class="javascript">            sayHi: (<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-插值操作-Mustache"><a href="#3-5-插值操作-Mustache" class="headerlink" title="3.5 插值操作 Mustache"></a>3.5 插值操作 Mustache</h2><p>Mustache语法 (双大括号)<br>可以直接写变量<br>可以写简单的表达式</p>
<h2 id="3-6-v-once"><a href="#3-6-v-once" class="headerlink" title="3.6 v-once"></a>3.6 v-once</h2><p>后面不需要跟任何表达式<br>表示元素和组件只渲染一次, 不会随着数据的改变而变化</p>
<h2 id="3-7-v-html"><a href="#3-7-v-html" class="headerlink" title="3.7 v-html"></a>3.7 v-html</h2><p>后面往往跟一个string类型<br>会将string的html解析出来并渲染</p>
<h2 id="3-8-v-text"><a href="#3-8-v-text" class="headerlink" title="3.8 v-text"></a>3.8 v-text</h2><p>与Mustache相似, 一般不用, 不灵活</p>
<h2 id="3-9-v-pre"><a href="#3-9-v-pre" class="headerlink" title="3.9 v-pre"></a>3.9 v-pre</h2><p>用于跳过这个元素和它子元素的编译过程, 用于显示原本的Mustache语法</p>
<h2 id="3-10-v-cloak"><a href="#3-10-v-cloak" class="headerlink" title="3.10 v-cloak"></a>3.10 v-cloak</h2><p>在某些情况下, 我们浏览器可能会直接显示出未编译的Mustache标签</p>
<h2 id="3-11-v-show"><a href="#3-11-v-show" class="headerlink" title="3.11 v-show"></a>3.11 v-show</h2><p>当条件为false的时<br>v-if: 指令的元素, 不会渲染到dom中<br>v-show: dom增加一个行内样式display: none</p>
<h1 id="4-Vue双向绑定-v-model"><a href="#4-Vue双向绑定-v-model" class="headerlink" title="4 Vue双向绑定 v-model"></a>4 Vue双向绑定 v-model</h1><h2 id="4-1-什么是双向绑定"><a href="#4-1-什么是双向绑定" class="headerlink" title="4.1 什么是双向绑定"></a>4.1 什么是双向绑定</h2><p>Vue.js是一个MVVM框架，即数据双向绑定,即当数据发生变化的时候,视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是Vue.js的精髓之处了。</p>
<p> 值得注意的是，我们所说的数据双向绑定，一定是对于UI控件来说的，非UI控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>
<h2 id="4-2-为什么要实现数据的双向绑定"><a href="#4-2-为什么要实现数据的双向绑定" class="headerlink" title="4.2 为什么要实现数据的双向绑定"></a>4.2 为什么要实现数据的双向绑定</h2><p>在Vue.js 中，如果使用vuex ，实际上数据还是单向的，之所以说是数据双向绑定，这是用的UI控件来说，对于我们处理表单，Vue.js的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项,方便跟踪;局部性数据流使用双向，简单易操作。</p>
<h2 id="4-3-在表单中使用双向数据绑定"><a href="#4-3-在表单中使用双向数据绑定" class="headerlink" title="4.3 在表单中使用双向数据绑定"></a>4.3 在表单中使用双向数据绑定</h2><p>你可以用<code>v-model</code>指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及<code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但<code>v-model</code>本质上不过是语法糖。它负责监听户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p> <strong>注意：v-model会忽略所有元素的value、checked、selected特性的初始值而总是将Vue实例的数据作为数据来源，你应该通过JavaScript在组件的data选项中声明。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>value:&#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            selected: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="5-Vue组件"><a href="#5-Vue组件" class="headerlink" title="5 Vue组件"></a>5 Vue组件</h1><h2 id="5-1-注册组件基本步骤"><a href="#5-1-注册组件基本步骤" class="headerlink" title="5.1 注册组件基本步骤"></a>5.1 注册组件基本步骤</h2><ol>
<li>调用Vue.extend()方法 - 创建组件构造器</li>
<li>调用Vue.component()方法 - 注册组件</li>
<li>在Vue实例的作用范围内 - 使用组件</li>
</ol>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    //使用组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//创建组件构造器</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">    template: &#x27;</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, cpnC)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-局部组件"><a href="#5-2-局部组件" class="headerlink" title="5.2 局部组件"></a>5.2 局部组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">    template: &#x27;</span><br><span class="line"><span class="handlebars"><span class="xml">    	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        	<span class="tag">&lt;<span class="name">p</span>&gt;</span>模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        my-cpn: cpnC</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h1 id="6-Axios通信"><a href="#6-Axios通信" class="headerlink" title="6 Axios通信"></a>6 Axios通信</h1><h2 id="6-1-什么是Axios"><a href="#6-1-什么是Axios" class="headerlink" title="6.1 什么是Axios"></a>6.1 什么是Axios</h2><p>功能强大的网络请求库</p>
<p>Axios是一个开源的可以用在浏览器端和<code>NodeJS</code> 的异步通信框架，她的主要作用就是实现AJAX异步通信，其功能特点如下:</p>
<ul>
<li><p>从浏览器中创建<code>XMLHttpRequests</code></p>
</li>
<li><p>从node.js创建http请求</p>
</li>
<li><p>支持Promise API [JS中链式编程]</p>
</li>
<li><p>拦截请求和响应</p>
</li>
<li><p>转换请求数据和响应数据</p>
</li>
<li><p>取消请求</p>
</li>
<li><p>自动转换JSON数据</p>
</li>
<li><p>客户端支持防御XSRF (跨站请求伪造)</p>
</li>
</ul>
<p>GitHub: <a href="https://github.com/">https://github.com/</a> axios/axios<br>中文文档: <a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p>
<h2 id="6-2-为什么要使用Axios"><a href="#6-2-为什么要使用Axios" class="headerlink" title="6.2 为什么要使用Axios"></a>6.2 为什么要使用Axios</h2><p>由于<code>Vue.js</code>是一个视图层框架且作者(尤雨溪) 严格准守SoC (关注度分离原则)，所以<code>Vue.js</code>并不包含Ajax的通信功能，为了解决通信问题，作者单独开发了一个名为<code>vue-resource</code>的插件，不过在进入2.0 版本以后停止了对该插件的维护并推荐了<code>Axios</code> 框架。少用jQuery，因为它操作Dom太频繁 !</p>
<p>模拟Json数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;weg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;https://www.baidu.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;文苑路&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;南京&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bilibili&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;baidu&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cqh video&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.4399.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>点我进入<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入axios--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            items: [<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Php&#x27;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//data:vm的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//data():vm方法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//请求的返回参数,必须和json字符串一样</span></span></span><br><span class="line">               info:&#123;</span><br><span class="line"><span class="javascript">                   name: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                   age: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                   sex: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                   url: <span class="literal">null</span>,</span></span><br><span class="line">                   address: &#123;</span><br><span class="line"><span class="javascript">                       street: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                       city: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                       country: <span class="literal">null</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//钩子函数，链式编程，ES6新特性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&quot;../data.json&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> (<span class="built_in">this</span>.info=res.data))</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-Vue计算属性"><a href="#6-3-Vue计算属性" class="headerlink" title="6.3 Vue计算属性"></a>6.3 Vue计算属性</h2><p>计算属性的重点突出在属性两个字上(属性是名词)，首先它是个属性其次这个属性有计算的能力(计算是动词)，这里的计算就是个函数;简单点说，它就是一个能够将计算结果缓存起来的属性(将行为转化成了静态的属性)，仅此而已;可以想象为缓存！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>currentTime1: &#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>currentTime2: &#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,world!&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            currentTime1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now(); <span class="comment">// 返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//计算属性：methods，computed 方法名不能重名，重名字后，只会调用methods的方法</span></span></span><br><span class="line"><span class="javascript">            currentTime2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 返回一个时间戳</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论:<br> 调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢?此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点,计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销;</p>
</blockquote>
<h1 id="7-内容分发-slot"><a href="#7-内容分发-slot" class="headerlink" title="7 内容分发 slot"></a>7 内容分发 slot</h1><p>在Vue.js中我们使用 元素作为承载分发内容的出口，作者称其为插槽，可以应用在组合组件的场景中;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in todoItems&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//slot 插槽 这个组件要定义在前面不然出不来数据</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//属性</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//标题</span></span></span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;图书馆系列图书&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//列表</span></span></span><br><span class="line"><span class="javascript">            todoItems: [<span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;水浒传&#x27;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="8-自定义事件内容分发"><a href="#8-自定义事件内容分发" class="headerlink" title="8 自定义事件内容分发"></a>8 自定义事件内容分发</h1><p> 通过以上代码不难发现，数据项在Vue的实例中，但删除操作要在组件中完成，那么组件如何才能删除Vue实例中的数据呢?此时就涉及到参数传递与事件分发了，Vue为我们提供了自定义事件的功能很好的帮助我们解决了这个问题;</p>
<p> 使用<code>this.$emit (‘自定义事件名’,参数)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in todoItems&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//slot 插槽 这个组件要定义在前面不然出不来数据</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//属性</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            remove: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.$emit 自定义事件分发</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//标题</span></span></span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;图书馆系列图书&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//列表</span></span></span><br><span class="line"><span class="javascript">            todoItems: [<span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;水浒传&#x27;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            removeItems: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;删除了&quot;</span>+<span class="built_in">this</span>.todoItems[index]+<span class="string">&quot;OK&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.todoItems.splice(index,<span class="number">1</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="9-第一个vue-cli项目"><a href="#9-第一个vue-cli项目" class="headerlink" title="9 第一个vue-cli项目"></a>9 第一个vue-cli项目</h1><h2 id="9-1-什么是vue-cli"><a href="#9-1-什么是vue-cli" class="headerlink" title="9.1 什么是vue-cli"></a>9.1 什么是vue-cli</h2><p>vue-cli 官方提供的一个脚手架,用于快速生成一个 vue 的项目模板;</p>
<p> 预先定义好的目录结构及基础代码，就好比咱们在创建 Maven 项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架,我们的开发更加的快速;</p>
<p> <strong>主要功能：</strong></p>
<ul>
<li>统一的目录结构</li>
<li>本地调试</li>
<li>热部署</li>
<li>单元测试</li>
<li>集成打包上线</li>
</ul>
<h2 id="9-2-需要的环境"><a href="#9-2-需要的环境" class="headerlink" title="9.2 需要的环境"></a>9.2 需要的环境</h2><ul>
<li>Node.js : <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li>
</ul>
<p>安装就无脑下一步就好,安装在自己的环境目录下</p>
<ul>
<li>Git : <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>镜像:<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></li>
</ul>
<p><strong>确认nodejs安装成功:</strong></p>
<p>cmd 下输入 <code>node -v</code>,查看是否能够正确打印出版本号即可!<br>cmd 下输入 <code>npm-v</code>,查看是否能够正确打印出版本号即可!<br>这个npm,就是一个软件包管理工具,就和linux下的apt软件安装差不多!</p>
<blockquote>
<p>npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具。通过 npm 可以安装、共享、分发代码,管理项目依赖关系。</p>
</blockquote>
<p><strong>安装 Node.js 淘宝镜像加速器（cnpm）</strong></p>
<p>这样子的话,下载会快很多~</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 就是全局安装</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line"><span class="comment"># 若安装失败，则将源npm源换成淘宝镜像</span></span><br><span class="line"><span class="comment"># 因为npm安装插件是从国外服务器下载，受网络影响大</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 然后再执行</span></span><br><span class="line">npm install cnpm -g</span><br></pre></td></tr></table></figure>

<p>安装的位置:C:\Users\Administrator\AppData\Roaming\npm</p>
<h2 id="9-3-安装vue-cli"><a href="#9-3-安装vue-cli" class="headerlink" title="9.3 安装vue-cli"></a>9.3 安装vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在命令台输入</span></span><br><span class="line">cnpm install vue-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否安装成功</span></span><br><span class="line">vue list</span><br></pre></td></tr></table></figure>

<h2 id="9-4-第一个-vue-cli-应用程序"><a href="#9-4-第一个-vue-cli-应用程序" class="headerlink" title="9.4 第一个 vue-cli 应用程序"></a>9.4 第一个 vue-cli 应用程序</h2><p>创建一个Vue项目,我们随便建立一个空的文件夹在电脑上。</p>
<p> 我这里在D盘下新建一个目录D:\Project\vue-study;</p>
<p>创建一个基于 webpack 模板的 vue 应用程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的 myvue 是项目名称，可以根据自己的需求起名</span></span><br><span class="line"></span><br><span class="line">vue init webpack myvue</span><br></pre></td></tr></table></figure>


<p>一路都选择no即可;</p>
<p> 初始化并运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myvue</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>


<p> 执行完成后,目录多了很多依赖</p>
<h1 id="10-Webpack"><a href="#10-Webpack" class="headerlink" title="10 Webpack"></a>10 Webpack</h1><p> WebPack 是一款<strong>模块加载器兼打包工具</strong>，它能把各种资源，如 JS、JSX、ES6、SASS、LESS、图片等<strong>都作为模块来处理和使用</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.6.0 -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>


<p> 测试安装成功: 输入以下命令有版本号输出即为安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure>

<h2 id="10-1-什么是Webpack"><a href="#10-1-什么是Webpack" class="headerlink" title="10.1 什么是Webpack"></a>10.1 什么是Webpack</h2><p>本质上，webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler)。当webpack处理应用程序时，它会递归地构建一个依赖关系图(dependency graph),其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle.<br> Webpack是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时再异步加载。通过loader转换，任何形式的资源都可以当做模块，比如CommonsJS、AMD、ES6、 CSS、JSON、CoffeeScript、LESS等;<br> 伴随着移动互联网的大潮，当今越来越多的网站已经从网页模式进化到了WebApp模式。它们运行在现代浏览器里，使用HTML5、CSS3、ES6 等新的技术来开发丰富的功能，网页已经不仅仅是完成浏览器的基本需求; WebApp通常是一个SPA (单页面应用) ，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的JS代码，这给前端的开发流程和资源组织带来了巨大挑战。<br> 前端开发和其他开发工作的主要区别，首先是前端基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器的，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p>
<h2 id="10-2-使用Webpack"><a href="#10-2-使用Webpack" class="headerlink" title="10.2 使用Webpack"></a>10.2 使用Webpack</h2><p>1 先创建一个包 交由idea打开 会生成一个.idea文件 那么就说明该文件就交由idea负责</p>
<p>2 在idea中创建modules包，再创建hello.js,hello.js 暴露接口 相当于Java中的类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露一个方法</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;狂神说ES6&lt;/h1&gt;&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 创建main.js 当作是js主入口 , main.js 请求hello.js 调用sayHi()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi()</span><br></pre></td></tr></table></figure>

<p>4 在主目录创建webpack-config.js , webpack-config.js 这个相当于webpack的配置文件</p>
<p>enrty请求main.js的文件</p>
<p>output是输出的位置和名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./modules/main.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;./js/bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5 在idea命令台输入webpack命令（idea要设置管理员启动）</p>
<p>6 完成上述操作之后会在主目录生成一个dist文件，生成的js文件夹路径为<code>/ dist/js/bundle.js</code></p>
<p>7 在主目录创建<code>index.html</code> 导入<code>bundle.js</code><br>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="11-vue-router路由"><a href="#11-vue-router路由" class="headerlink" title="11 vue-router路由"></a>11 vue-router路由</h1><p> Vue Router是Vue.js官方的路由管理器（路径跳转）。它和Vue.js的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有:</p>
<ul>
<li><p>嵌套的路由/视图表</p>
</li>
<li><p>模块化的、基于组件的路由配置</p>
</li>
<li><p>路由参数、查询、通配符</p>
</li>
<li><p>基于Vue.js过渡系统的视图过渡效果</p>
</li>
<li><p>细粒度的导航控制</p>
</li>
<li><p>带有自动激活的CSS class的链接</p>
</li>
<li><p>HTML5历史模式或hash模式，在IE9中自动降级</p>
</li>
<li><p>自定义的滚动条行为</p>
</li>
</ul>
<h2 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h2><p>基于第一个vue-cli进行测试学习;先查看node_modules中是否存在 vue-router<br> vue-router 是一个插件包，所以我们还是需要用 npm/cnpm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>

<p> 安装完之后去<code>node_modules</code>路径看看是否有vue-router信息 有的话则表明安装成功。</p>
<h2 id="11-2-vue-router-demo实例"><a href="#11-2-vue-router-demo实例" class="headerlink" title="11.2 vue-router demo实例"></a>11.2 vue-router demo实例</h2><ol>
<li><p>将之前案例由vue-cli生成的案例用idea打开</p>
</li>
<li><p>清理不用的东西 assert下的logo图片 component定义的helloworld组件 我们用自己定义的组件</p>
</li>
<li><p>清理代码 以下为清理之后的代码 src下的App.vue 和main.js以及根目录的index.html<br>这三个文件的关系是 index.html 调用main.js 调用App.vue</p>
</li>
</ol>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>myvue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>App.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;h1&gt;迪师傅&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;kuang&quot;&gt;Kuang&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在components目录下创建一个自己的组件Content,Test,Main(这两个和Content内容一样的就不放示例代码了</li>
</ol>
<p>Content.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;内容&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Content&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装路由,在src目录下,新建一个文件夹 : router,专门存放路由 index.js(默认配置文件都是这个名字)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&quot;../components/Content&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../components/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Kuang <span class="keyword">from</span> <span class="string">&quot;../components/Kuang&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component: Content</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/kuang&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;kuang&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component: Kuang</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在main.js中配置路由</li>
</ol>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在App.vue中使用路由</p>
<p>App.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;h1&gt;迪师傅&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;kuang&quot;&gt;Kuang&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>启动测试一下 ： npm run dev</p>
</li>
<li><p>项目结构图&amp;运行效果图</p>
</li>
</ol>
<h1 id="12-vue-ElementUI"><a href="#12-vue-ElementUI" class="headerlink" title="12 vue + ElementUI"></a>12 vue + ElementUI</h1><p>根据之前创建vue-cli项目一样再来创建一个新项目</p>
<p>1 创建一个名为 hello-vue 的工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack hello-vue</span><br></pre></td></tr></table></figure>

<p>2 安装依赖，我们需要安装 vue-router、element-ui、sass-loader 和node-sass 四个插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入工程目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> hello-vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 vue-router</span></span><br><span class="line"></span><br><span class="line">npm install vue-router --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 element-ui</span></span><br><span class="line"></span><br><span class="line">npm i element-ui -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 SASS 加载器</span></span><br><span class="line"></span><br><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动测试</span></span><br><span class="line"></span><br><span class="line">npm run dev	</span><br></pre></td></tr></table></figure>

<p>3 Npm命令解释</p>
<ol>
<li><p>npm install moduleName：安装模块到项目目录下</p>
</li>
<li><p>npm install -g moduleName：-g 的意思是将模块安装到全局，具体安装到磁盘的哪个位置，要看 npm config prefix的位置</p>
</li>
<li><p>npm install moduleName -save：–save的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖，-S为该命令的缩写</p>
</li>
<li><p>npm install moduleName -save-dev：–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写</p>
</li>
</ol>
<p>4 创建成功后用idea打开，并删除净东西 创建views和router文件夹用来存放视图和路由</p>
<p>5 在views创建Main.vue</p>
<p>Main.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Main&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>6 在views中创建Login.vue视图组件</p>
<p>Login.vue:（用的ElementUI中的代码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref&#x3D;&quot;loginForm&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class&#x3D;&quot;login-title&quot;&gt;欢迎登录&lt;&#x2F;h3&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;账号&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入账号&quot; v-model&#x3D;&quot;form.username&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot; v-model&#x3D;&quot;form.password&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; v-on:click&#x3D;&quot;onSubmit(&#39;loginForm&#39;)&quot;&gt;登录&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      title&#x3D;&quot;温馨提示&quot;</span><br><span class="line">      :visible.sync&#x3D;&quot;dialogVisible&quot;</span><br><span class="line">      width&#x3D;&quot;30%&quot;</span><br><span class="line">      :before-close&#x3D;&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;dialogVisible &#x3D; false&quot;&gt;确 定&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-dialog&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Login&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          username: &#39;&#39;,</span><br><span class="line">          password: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 表单验证，需要在 el-form-item 元素中增加 prop 属性</span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [</span><br><span class="line">            &#123;required: true, message: &#39;账号不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line">            &#123;required: true, message: &#39;密码不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">    </span><br><span class="line">        &#x2F;&#x2F; 对话框显示和隐藏</span><br><span class="line">        dialogVisible: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit(formName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 为表单绑定验证功能</span><br><span class="line">        this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            &#x2F;&#x2F; 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span><br><span class="line">            this.$router.push(&quot;&#x2F;main&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.dialogVisible &#x3D; true;</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">  .login-box &#123;</span><br><span class="line">    border: 1px solid #DCDFE6;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line">    box-shadow: 0 0 25px #909399;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .login-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto 40px auto;</span><br><span class="line">    color: #303133;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>7 创建路由</p>
<p>在 router 目录下创建一个名为 index.js 的 vue-router 路由配置文件</p>
<p>index.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>8 在main.js中配置相关</p>
<p>main.js是index.html调用的 所以前面注册的组件要在这里导入</p>
<p><strong>一定不要忘记扫描路由配置并将其用到new Vue中</strong></p>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">//扫描路由配置</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">//导入elementUI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"><span class="comment">//导入element css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(router);</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),<span class="comment">//ElementUI规定这样使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>9 在App.vue中配置显示视图</p>
<p>App.vue :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>10 测试运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 测试：在浏览器打开 <a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></p>
<p>如果出现错误: 可能是因为sass-loader的版本过高导致的编译错误，当前最高版本是8.0.2，需要退回到7.3.1 ；</p>
<p>去package.json文件里面的 “sass-loader”的版本更换成7.3.1，然后重新cnpm install就可以了；</p>
</blockquote>
<h1 id="13-路由嵌套"><a href="#13-路由嵌套" class="headerlink" title="13 路由嵌套"></a>13 路由嵌套</h1><p> 嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。</p>
<h2 id="13-1-Demo"><a href="#13-1-Demo" class="headerlink" title="13.1 Demo"></a>13.1 Demo</h2><p>1 创建用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件；</p>
<p>Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;UserProfile&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>2 在用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件；</p>
<p>List.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户列表&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;UserList&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>3 修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下：</p>
<p>Main.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside width&#x3D;&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;用户管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;!--插入的地方--&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;profile&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;!--插入的地方--&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;内容管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;分类管理&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;内容列表&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">        &lt;&#x2F;el-menu&gt;</span><br><span class="line">      &lt;&#x2F;el-aside&gt;</span><br><span class="line">  &lt;el-container&gt;</span><br><span class="line">    &lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">      &lt;el-dropdown&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;el-icon-setting&quot; style&#x3D;&quot;margin-right: 15px&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">        &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">      &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">    &lt;&#x2F;el-header&gt;</span><br><span class="line">    &lt;el-main&gt;</span><br><span class="line">      &lt;!--在这里展示视图--&gt;</span><br><span class="line">      &lt;router-view &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;el-main&gt;</span><br><span class="line">  &lt;&#x2F;el-container&gt;</span><br><span class="line">&lt;&#x2F;el-container&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Main&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #B3C0D1;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>4 配置嵌套路由修改 router 目录下的 index.js 路由配置文件，使用children放入main中写入子模块，代码如下</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">&quot;../views/user/List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserProfile <span class="keyword">from</span> <span class="string">&quot;../views/user/Profile&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      <span class="comment">//路由嵌套</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>,<span class="attr">component</span>: UserProfile&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/list&#x27;</span>,<span class="attr">component</span>: UserList&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>5 路由嵌套效果图</p>
<h1 id="14-参数传递"><a href="#14-参数传递" class="headerlink" title="14 参数传递"></a>14 参数传递</h1><h2 id="14-1-Demo"><a href="#14-1-Demo" class="headerlink" title="14.1 Demo"></a>14.1 Demo</h2><p>1 前端传递参数</p>
<p> 此时我们在Main.vue中的route-link位置处 to 改为了 :to，是为了将这一属性当成对象使用，注意 router-link 中的 name 属性名称 一定要和 路由中的 name 属性名称 匹配，因为这样 Vue 才能找到对应的路由路径；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--name：传组件名 params：传递参数，需要绑定对象：v-bind--&gt;</span><br><span class="line">&lt;router-link v-bind:to&#x3D;&quot;&#123;name: &#39;UserProfile&#39;, params: &#123;id: 1&#125;&#125;&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>

<p>2 修改路由配置，增加props：true属性</p>
<p> 主要是router下的index.js中的 path 属性中增加了 :id 这样的占位符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">  component: UserProfile,</span><br><span class="line">  props:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 前端显示</p>
<p>在要展示的组件Profile.vue中接收参数</p>
<p>Profile.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    个人信息</span><br><span class="line">    &#123;&#123; id &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      props: [&#39;id&#39;],</span><br><span class="line">      name: &quot;UserProfile&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>4 运行</p>
<h2 id="14-2-组件重定向"><a href="#14-2-组件重定向" class="headerlink" title="14.2 组件重定向"></a>14.2 组件重定向</h2><p>重定向的意思大家都明白，但 Vue 中的重定向是作用在路径不同但组件相同的情况下，比如：<br> 在router下面index.js的配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">  component: Main</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/goHome&#x27;</span>,</span><br><span class="line">  redirect: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 说明：这里定义了两个路径，一个是 /main ，一个是 /goHome，其中 /goHome 重定向到了 /main 路径，由此可以看出重定向不需要定义组件；</p>
</blockquote>
<p>使用的话，只需要在Main.vue设置对应路径即可；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;goHome&quot;&gt;回到首页&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;&#x2F;el-menu-item&gt;</span><br></pre></td></tr></table></figure>

<h1 id="15-路由钩子与异步请求"><a href="#15-路由钩子与异步请求" class="headerlink" title="15 路由钩子与异步请求"></a>15 路由钩子与异步请求</h1><h2 id="15-1-路由模式与-404"><a href="#15-1-路由模式与-404" class="headerlink" title="15.1 路由模式与 404"></a>15.1 路由模式与 404</h2><p>==路由模式有两种==</p>
<ul>
<li><p>hash：路径带 # 符号，如 <a href="http://localhost/#/login">http://localhost/#/login</a></p>
</li>
<li><p>history：路径不带 # 符号，如 <a href="http://localhost/login">http://localhost/login</a></p>
</li>
</ul>
<p>修改路由配置，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>404界面：</p>
<p>1 创建一个NotFound.vue视图组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;404,你的页面走丢了&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;NotFound&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>2 修改路由配置index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">   path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">   component: NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15-2-路由钩子与异步请求"><a href="#15-2-路由钩子与异步请求" class="headerlink" title="15.2 路由钩子与异步请求"></a>15.2 路由钩子与异步请求</h2><p><code>beforeRouteEnter</code>：在进入路由前执行<br><code>beforeRouteLeave</code>：在离开路由前执行</p>
<p>在Profile.vue中写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;UserProfile&quot;,</span><br><span class="line">  beforeRouteEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">    next()</span><br><span class="line">&#125;,</span><br><span class="line">  beforeRouteLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>参数说明:</p>
<ul>
<li><p>to：路由将要跳转的路径信息</p>
</li>
<li><p>from：路径跳转前的路径信息</p>
</li>
<li><p>next：路由的控制参数</p>
</li>
<li><p>next() 跳入下一个页面</p>
</li>
<li><p>next(’/path’) 改变路由的跳转方向，使其跳到另一个路由</p>
</li>
<li><p>next(false) 返回原来的页面</p>
</li>
<li><p>next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例</p>
</li>
</ul>
<h2 id="15-3-在钩子函数中使用异步请求"><a href="#15-3-在钩子函数中使用异步请求" class="headerlink" title="15.3 在钩子函数中使用异步请求"></a>15.3 在钩子函数中使用异步请求</h2><p>1 安装 Axios</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save vue-axios</span><br></pre></td></tr></table></figure>

<p>2 main.js引用 Axios</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>

<p>3 准备数据 ： 只有<strong>我们的 static 目录下的文件是可以被访问到的</strong>，所以我们就把静态文件放入该目录下。<br>数据和之前用的json数据一样 需要的去上述axios例子里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态数据存放的位置</span></span><br><span class="line"><span class="keyword">static</span>/mock/data.json</span><br></pre></td></tr></table></figure>

<p>4 在 beforeRouteEnter 中进行异步请求</p>
<p>Profile.vue:</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//第二种取值方式</span></span><br><span class="line">  <span class="comment">// props:[&#x27;id&#x27;],</span></span><br><span class="line">  name: <span class="string">&quot;UserProfile&quot;</span>,</span><br><span class="line">  <span class="comment">//钩子函数 过滤器</span></span><br><span class="line">  beforeRouteEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//加载数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>)</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//进入路由之前执行getData方法</span></span><br><span class="line">      vm.getData()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>)</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//axios</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    getData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:8080/static/mock/data.json&#x27;</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5 执行</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新特性</title>
    <url>/undefined/de81bfb9/</url>
    <content><![CDATA[<blockquote>
<p>ES6新特性</p>
</blockquote>
<span id="more"></span>

<p>很好的文档：</p>
<p><a href="https://es6.ruanyifeng.com/">ES6 入门教程 - ECMAScript 6入门 (ruanyifeng.com)</a></p>
<h1 id="1-let关键字"><a href="#1-let关键字" class="headerlink" title="1 let关键字"></a>1 let关键字</h1><p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p>
<p>1 不允许重复声明</p>
<p>2 块儿级作用域</p>
<p>3 不存在变量提升</p>
<p>4 不影响作用域链</p>
<p><font color=red><strong>应用场景：以后声明变量使用let就对了</strong></font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b,c,d;</span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 变量不能重复声明</span></span><br><span class="line"><span class="comment">// let star = &#x27;罗志祥&#x27;;</span></span><br><span class="line"><span class="comment">// let star = &#x27;小猪&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 块儿级作用域  全局, 函数, eval</span></span><br><span class="line"><span class="comment">// if else while for </span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     let girl = &#x27;周扬青&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(girl);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 不存在变量提升</span></span><br><span class="line"><span class="comment">// console.log(song);</span></span><br><span class="line"><span class="comment">// let song = &#x27;恋爱达人&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 不影响作用域链</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(school);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例：点击 DIV 换色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>点击 DIV 换色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .item &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="built_in">rgb</span>(<span class="number">42</span>, <span class="number">156</span>, <span class="number">156</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>点击切换颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取div元素对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> items = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;item&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//遍历并绑定事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;items.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//修改当前元素的背景颜色</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.style.background = &#x27;pink&#x27;;</span></span></span><br><span class="line"><span class="javascript">                items[i].style.background = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-const关键字"><a href="#2-const关键字" class="headerlink" title="2 const关键字"></a>2 const关键字</h1><p>const 关键字用来声明常量，const 声明有以下特点</p>
<p>1 声明必须赋初始值</p>
<p>2 标识符一般为大写</p>
<p>3 不允许重复声明</p>
<p>4 值不允许修改</p>
<p>5 块儿级作用域</p>
<p><font color=red><strong>注意: 对象属性修改和数组元素变化不会触发const错误</strong></font></p>
<p><strong><font color=red>应用场景：声明对象类型使用 const，非对象类型声明选择 let</font></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> SCHOOL = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 一定要赋初始值</span></span><br><span class="line"><span class="comment">// const A;</span></span><br><span class="line"><span class="comment">//2. 一般常量使用大写(潜规则)</span></span><br><span class="line"><span class="comment">// const a = 100;</span></span><br><span class="line"><span class="comment">//3. 常量的值不能修改</span></span><br><span class="line"><span class="comment">// SCHOOL = &#x27;ATGUIGU&#x27;;</span></span><br><span class="line"><span class="comment">//4. 块儿级作用域</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     const PLAYER = &#x27;UZI&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(PLAYER);</span></span><br><span class="line"><span class="comment">//5. 对于数组和对象的元素修改, 不算做对常量的修改, 不会报错</span></span><br><span class="line"><span class="keyword">const</span> TEAM = [<span class="string">&#x27;UZI&#x27;</span>,<span class="string">&#x27;MXLG&#x27;</span>,<span class="string">&#x27;Ming&#x27;</span>,<span class="string">&#x27;Letme&#x27;</span>];</span><br><span class="line"><span class="comment">// TEAM.push(&#x27;Meiko&#x27;);</span></span><br></pre></td></tr></table></figure>

<h1 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3 变量的解构赋值"></a>3 变量的解构赋值</h1><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;张学友&#x27;</span>, <span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="string">&#x27;郭富城&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [zhang, liu, li, guo] = arr;</span><br><span class="line"><span class="comment">//对象的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> lin = &#123;</span><br><span class="line"> name: <span class="string">&#x27;林志颖&#x27;</span>,</span><br><span class="line"> tags: [<span class="string">&#x27;车手&#x27;</span>, <span class="string">&#x27;歌手&#x27;</span>, <span class="string">&#x27;小旋风&#x27;</span>, <span class="string">&#x27;演员&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name, tags&#125; = lin;</span><br><span class="line"><span class="comment">//复杂解构</span></span><br><span class="line"><span class="keyword">let</span> wangfei = &#123;</span><br><span class="line"> name: <span class="string">&#x27;王菲&#x27;</span>,</span><br><span class="line"> age: <span class="number">18</span>,</span><br><span class="line"> songs: [<span class="string">&#x27;红豆&#x27;</span>, <span class="string">&#x27;流年&#x27;</span>, <span class="string">&#x27;暧昧&#x27;</span>, <span class="string">&#x27;传奇&#x27;</span>],</span><br><span class="line"> history: [</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;窦唯&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;李亚鹏&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;谢霆锋&#x27;</span>&#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">songs</span>: [one, two, three], <span class="attr">history</span>: [first, second, third]&#125; = </span><br><span class="line">wangfei;</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</strong></font></p>
<h1 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4 模板字符串"></a>4 模板字符串</h1><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p>
<p>1 字符串中可以出现换行符</p>
<p>2 可以使用 ${xxx} 形式输出变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">// 变量拼接</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;王宁&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;star&#125;</span>在前几年离开了开心麻花`</span>;</span><br></pre></td></tr></table></figure>

<h1 id="5-简化对象写法"><a href="#5-简化对象写法" class="headerlink" title="5 简化对象写法"></a>5 简化对象写法</h1><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> slogon = <span class="string">&#x27;永远追求行业更高标准&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> improve = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;可以提高你的技能&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性和方法简写</span></span><br><span class="line"><span class="keyword">let</span> atguigu = &#123;</span><br><span class="line"> name,</span><br><span class="line"> slogon,</span><br><span class="line"> improve,</span><br><span class="line"> <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;可以改变你&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注意：对象简写形式简化了代码，所以以后用简写就对了</strong></font></p>
<h1 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6 箭头函数"></a>6 箭头函数</h1><p>ES6 允许使用「箭头」（=&gt;）定义函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 通用写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> arg1 + arg2 + arg3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>箭头函数的注意点:</p>
<p>1 如果形参只有一个，则小括号可以省略</p>
<p>2 函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果</p>
<p>3 箭头函数 this 指向声明时所在作用域下 this 的值</p>
<p>4 箭头函数不能作为构造函数实例化</p>
<p>5 不能使用 arguments</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2. 省略小括号的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> num * <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3. 省略花括号的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn3 = <span class="function"><span class="params">score</span> =&gt;</span> score * <span class="number">20</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 4. this 指向声明时所在作用域中 this 的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn4 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line"> name: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> fn5 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> fn5();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注意：箭头函数不会更改</strong> <strong>this</strong> <strong>指向，用来指定回调函数会非常合适</strong></font></p>
<h1 id="7-rest参数"><a href="#7-rest参数" class="headerlink" title="7 rest参数"></a>7 rest参数</h1><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用与 arguments 类似</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* rest 参数必须是最后一个形参</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(a,b,args);</span><br><span class="line">&#125;</span><br><span class="line">minus(<span class="number">100</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注意：****rest</strong> <strong>参数非常适合不定个数参数函数的场景</strong></font></p>
<h1 id="8-spread扩展运算符"><a href="#8-spread扩展运算符" class="headerlink" title="8 spread扩展运算符"></a>8 spread扩展运算符</h1><p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开数组</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">let</span> tfboys = [<span class="string">&#x27;德玛西亚之力&#x27;</span>,<span class="string">&#x27;德玛西亚之翼&#x27;</span>,<span class="string">&#x27;德玛西亚皇子&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(...tfboys)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> skillOne = &#123;</span><br><span class="line"> q: <span class="string">&#x27;致命打击&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillTwo = &#123;</span><br><span class="line"> w: <span class="string">&#x27;勇气&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillThree = &#123;</span><br><span class="line"> e: <span class="string">&#x27;审判&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillFour = &#123;</span><br><span class="line"> r: <span class="string">&#x27;德玛西亚正义&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> gailun = &#123;...skillOne, ...skillTwo,...skillThree,...skillFour&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="9-Symbol"><a href="#9-Symbol" class="headerlink" title="9 Symbol"></a>9 Symbol</h1><h2 id="9-1-Symbol基本使用"><a href="#9-1-Symbol基本使用" class="headerlink" title="9.1 Symbol基本使用"></a>9.1 Symbol基本使用</h2><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。</p>
<p>Symbol 特点</p>
<p>1 Symbol 的值是唯一的，用来解决命名冲突的问题</p>
<p>2 Symbol 值不能与其他数据进行运算</p>
<p>3 Symbol 定义的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys 来获取对象的所有键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s1, <span class="keyword">typeof</span> s1);</span><br><span class="line"><span class="comment">//添加标识的 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2_2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s2 === s2_2);</span><br><span class="line"><span class="comment">//使用 Symbol for 定义</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3_2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s3 === s3_2);</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注: 遇到唯一性的场景时要想到Symbol</strong></font></p>
<h2 id="9-2-Symbol内置值"><a href="#9-2-Symbol内置值" class="headerlink" title="9.2 Symbol内置值"></a>9.2 Symbol内置值</h2><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。</p>
<p>1 Symbol.hasInstance </p>
<p>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</p>
<p>2 Symbol.isConcatSpreadable</p>
<p>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</p>
<p>3 Symbol.species </p>
<p>创建衍生对象时，会使用该属性</p>
<p>4 Symbol.match </p>
<p>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</p>
<p>5 Symbol.replace </p>
<p>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</p>
<p>6 Symbol.search </p>
<p>当该对象被 str.search (myObject)方法调用时，会返回该方法的返回值。</p>
<p>7 Symbol.split </p>
<p>当该对象被 str.split(myObject)方法调用时，会返回该方法的返回值。</p>
<p>8 Symbol.iterator </p>
<p>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</p>
<p>9 Symbol.toPrimitive </p>
<p>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p>
<p>10 Symbol. toStringTag </p>
<p>在该对象上面调用 toString 方法时，返回该方法的返回值</p>
<p>11 Symbol. unscopables </p>
<p>该对象指定了使用 with 关键字时，哪些属性会被 with环境排除。</p>
<h1 id="10-迭代器"><a href="#10-迭代器" class="headerlink" title="10 迭代器"></a>10 迭代器</h1><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。</p>
<p>1 ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</p>
<p>2 原生具备 iterator 接口的数据(可用 for of 遍历)</p>
<p>​    a) Array</p>
<p>​    b) Arguments</p>
<p>​    c) Set</p>
<p>​    d) Map</p>
<p>​    e) String</p>
<p>​    f) TypedArray</p>
<p>​    g) NodeList</p>
<p>3 工作原理</p>
<p>​    a) 创建一个指针对象，指向当前数据结构的起始位置</p>
<p>​    b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</p>
<p>​    c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</p>
<p>​    d) 每调用 next 方法返回一个包含 value 和 done 属性的对象</p>
<p><font color=red><strong>注: 需要自定义遍历数据的时候，要想到迭代器。</strong></font></p>
<h1 id="11-生成器"><a href="#11-生成器" class="headerlink" title="11 生成器"></a>11 生成器</h1><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾巴&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;真奇怪&#x27;</span>; &#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure>

<p>代码说明：</p>
<p>1 * 的位置没有限制</p>
<p>2 生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到yield 语句后的值</p>
<p>3 yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next方法，执行一段代码</p>
<p>4 next 方法可以传递实参，作为 yield 语句的返回值</p>
<h1 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12 Promise"></a>12 Promise</h1><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>
<p>1 Promise 构造函数: Promise (excutor) {}</p>
<p>2 Promise.prototype.then 方法</p>
<p>3 Promise.prototype.catch 方法</p>
<h1 id="13-Set"><a href="#13-Set" class="headerlink" title="13 Set"></a>13 Set</h1><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p>
<p>1 size </p>
<p>返回集合的元素个数</p>
<p>2 add </p>
<p>增加一个新元素，返回当前集合</p>
<p>3 delete 删除元素，返回 boolean 值</p>
<p>4 has </p>
<p>检测集合中是否包含某个元素，返回 boolean 值</p>
<p>5 clear </p>
<p>清空集合，返回 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空集合</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">//创建一个非空集合</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//集合属性与方法</span></span><br><span class="line"><span class="comment">//返回集合的元素个数</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.size);</span><br><span class="line"><span class="comment">//添加新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.add(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.delete(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//检测是否存在某个值</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.has(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//清空集合</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.clear());</span><br></pre></td></tr></table></figure>



<h1 id="14-Map"><a href="#14-Map" class="headerlink" title="14 Map"></a>14 Map</h1><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历。Map 的属性和方法：</p>
<p>1 size </p>
<p>返回 Map 的元素个数</p>
<p>2 set </p>
<p>增加一个新元素，返回当前 Map</p>
<p>3 get </p>
<p>返回键名对象的键值</p>
<p>4 has </p>
<p>检测 Map 中是否包含某个元素，返回 boolean 值</p>
<p>5 clear </p>
<p>清空集合，返回 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空 map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">//创建一个非空 map</span></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line"> [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;尚硅谷&#x27;</span>],</span><br><span class="line"> [<span class="string">&#x27;slogon&#x27;</span>,<span class="string">&#x27;不断提高行业标准&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">//属性和方法</span></span><br><span class="line"><span class="comment">//获取映射元素的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.size);</span><br><span class="line"><span class="comment">//添加映射值</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.set(<span class="string">&#x27;age&#x27;</span>, <span class="number">6</span>));</span><br><span class="line"><span class="comment">//获取映射值</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.get(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line"><span class="comment">//检测是否有该映射</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.has(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line"><span class="comment">//清除</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.clear());</span><br></pre></td></tr></table></figure>

<h1 id="15-class类"><a href="#15-class类" class="headerlink" title="15 class类"></a>15 class类</h1><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p>知识点：</p>
<p>1 class 声明类</p>
<p>2 constructor 定义构造函数初始化</p>
<p>3 extends 继承父类</p>
<p>4 super 调用父级构造方法</p>
<p>5 static 定义静态方法和属性</p>
<p>6 父类方法可以重写</p>
<p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"> <span class="comment">//构造方法</span></span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">brand, color, price</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.brand = brand;</span><br><span class="line"> <span class="built_in">this</span>.color = color;</span><br><span class="line"> <span class="built_in">this</span>.price = price;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//对象方法</span></span><br><span class="line"> <span class="function"><span class="title">call</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话!!!&#x27;</span>)</span><br><span class="line"> &#125; &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">brand, color, price, screen, pixel</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>(brand, color, price);</span><br><span class="line"> <span class="built_in">this</span>.screen = screen;</span><br><span class="line"> <span class="built_in">this</span>.pixel = pixel;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//子类方法</span></span><br><span class="line"> <span class="function"><span class="title">photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以拍照!!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以玩游戏!!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//方法重写</span></span><br><span class="line"> <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以进行视频通话!!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//静态方法</span></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以运行程序&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以建立连接&#x27;</span>)</span><br><span class="line"> &#125; &#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">const</span> Nokia = <span class="keyword">new</span> Phone(<span class="string">&#x27;诺基亚&#x27;</span>, <span class="string">&#x27;灰色&#x27;</span>, <span class="number">230</span>);</span><br><span class="line"><span class="keyword">const</span> iPhone6s = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">6088</span>, </span><br><span class="line"><span class="string">&#x27;4.7inch&#x27;</span>,<span class="string">&#x27;500w&#x27;</span>);</span><br><span class="line"><span class="comment">//调用子类方法</span></span><br><span class="line">iPhone6s.playGame();</span><br><span class="line"><span class="comment">//调用重写方法</span></span><br><span class="line">iPhone6s.call();</span><br><span class="line"><span class="comment">//调用静态方法</span></span><br><span class="line">SmartPhone.run();</span><br></pre></td></tr></table></figure>

<h1 id="16-数值拓展"><a href="#16-数值拓展" class="headerlink" title="16 数值拓展"></a>16 数值拓展</h1><h2 id="16-1-二进制和八进制"><a href="#16-1-二进制和八进制" class="headerlink" title="16.1 二进制和八进制"></a>16.1 二进制和八进制</h2><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示。</p>
<h2 id="16-2-Number-isFinite-与-Number-isNaN"><a href="#16-2-Number-isFinite-与-Number-isNaN" class="headerlink" title="16.2 Number.isFinite() 与 Number.isNaN()"></a>16.2 Number.isFinite() 与 Number.isNaN()</h2><p>Number.isFinite() 用来检查一个数值是否为有限的</p>
<p>Number.isNaN() 用来检查一个值是否为 NaN</p>
<h2 id="16-3-Number-parseInt-与-Number-parseFloat"><a href="#16-3-Number-parseInt-与-Number-parseFloat" class="headerlink" title="16.3 Number.parseInt() 与 Number.parseFloat()"></a>16.3 Number.parseInt() 与 Number.parseFloat()</h2><p>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变。</p>
<h2 id="16-4-Math-trunc"><a href="#16-4-Math-trunc" class="headerlink" title="16.4 Math.trunc"></a>16.4 Math.trunc</h2><p>用于去除一个数的小数部分，返回整数部分。</p>
<h2 id="16-5-Number-isInteger"><a href="#16-5-Number-isInteger" class="headerlink" title="16.5 Number.isInteger"></a>16.5 Number.isInteger</h2><p>Number.isInteger() 用来判断一个数值是否为整数</p>
<h1 id="17-对象拓展"><a href="#17-对象拓展" class="headerlink" title="17 对象拓展"></a>17 对象拓展</h1><p>ES6 新增了一些 Object 对象的方法</p>
<p>1 Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）</p>
<p>2 Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象</p>
<p>3 __proto__、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型</p>
<h1 id="18-模块化"><a href="#18-模块化" class="headerlink" title="18 模块化"></a>18 模块化</h1><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p>
<h2 id="18-1-模块化的好处"><a href="#18-1-模块化的好处" class="headerlink" title="18.1 模块化的好处"></a>18.1 模块化的好处</h2><p>模块化的优势有以下几点：</p>
<p>1 防止命名冲突</p>
<p>2 代码复用</p>
<p>3 高维护性</p>
<h2 id="18-2-模块化规范产品"><a href="#18-2-模块化规范产品" class="headerlink" title="18.2 模块化规范产品"></a>18.2 模块化规范产品</h2><p>ES6 之前的模块化规范有：</p>
<p>1 CommonJS =&gt; NodeJS、Browserify</p>
<p>2 AMD =&gt; requireJS</p>
<p>3 CMD =&gt; seaJS</p>
<h2 id="18-3-ES6模块化语法"><a href="#18-3-ES6模块化语法" class="headerlink" title="18.3 ES6模块化语法"></a>18.3 ES6模块化语法</h2><p>模块功能主要由两个命令构成：export 和 import。 </p>
<ul>
<li><p>export 命令用于规定模块的对外接口</p>
</li>
<li><p>import 命令用于输入其他模块提供的功能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax笔记</title>
    <url>/undefined/48d9bd16/</url>
    <content><![CDATA[<blockquote>
<p>AJAX学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-Ajax概述"><a href="#1-Ajax概述" class="headerlink" title="1 Ajax概述"></a>1 Ajax概述</h1><h2 id="1-1-AJAX-简介"><a href="#1-1-AJAX-简介" class="headerlink" title="1.1 AJAX 简介"></a>1.1 AJAX 简介</h2><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong><br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p>
<h2 id="1-2-XML-简介"><a href="#1-2-XML-简介" class="headerlink" title="1.2 XML 简介"></a>1.2 XML 简介</h2><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。</p>
<p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>现在已经被JSON 取代了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;孙悟空&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">18</span>,<span class="attr">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-AJAX-的特点"><a href="#1-3-AJAX-的特点" class="headerlink" title="1.3 AJAX 的特点"></a>1.3 AJAX 的特点</h2><h3 id="1-3-1-AJAX-的优点"><a href="#1-3-1-AJAX-的优点" class="headerlink" title="1.3.1 AJAX 的优点"></a>1.3.1 AJAX 的优点</h3><p>可以无需刷新页面而与服务器端进行通信<br>允许你根据用户事件来更新部分页面内容</p>
<h3 id="1-3-2-AJAX-的缺点"><a href="#1-3-2-AJAX-的缺点" class="headerlink" title="1.3.2 AJAX 的缺点"></a>1.3.2 AJAX 的缺点</h3><p>1 没有浏览历史，不能回退<br>2 存在跨域问题(同源)<br>3 SEO 不友好</p>
<h1 id="2-HTTP相关问题"><a href="#2-HTTP相关问题" class="headerlink" title="2 HTTP相关问题"></a>2 HTTP相关问题</h1><h2 id="2-1-MDN-文档"><a href="#2-1-MDN-文档" class="headerlink" title="2.1 MDN 文档"></a>2.1 MDN 文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p>
<h2 id="2-2-HTTP-请求交互的基本过程"><a href="#2-2-HTTP-请求交互的基本过程" class="headerlink" title="2.2 HTTP 请求交互的基本过程"></a>2.2 HTTP 请求交互的基本过程</h2><p><img src="https://raw.githubusercontent.com/jiucheng120/clouding/master/data/2021/20211127160931.png"></p>
<p>1 前后应用从浏览器端向服务器发送HTTP 请求(请求报文)<br>2 后台服务器接收到请求后, 调度服务器应用处理请求文<br>3 向浏览器端返回HTTP响应(响应报文)</p>
<p>浏览器端接收到响应, 解析显示响应体/调用监视回调</p>
<h2 id="2-3-HTTP-请求报文"><a href="#2-3-HTTP-请求报文" class="headerlink" title="2.3 HTTP 请求报文"></a>2.3 HTTP 请求报文</h2><h3 id="2-3-1-请求行"><a href="#2-3-1-请求行" class="headerlink" title="2.3.1 请求行"></a>2.3.1 请求行</h3><p><code>method url</code><br><code>GET /product_detail?id=2</code><br><code>POST /login</code></p>
<h3 id="2-3-2-多个请求头"><a href="#2-3-2-多个请求头" class="headerlink" title="2.3.2 多个请求头"></a>2.3.2 多个请求头</h3><p><code>Host: www.baidu.com</code><br><code>Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;</code><br><code>Content-Type: application/x-www-form-urlencoded 或者application/json</code></p>
<h3 id="3-3-3-请求体"><a href="#3-3-3-请求体" class="headerlink" title="3.3.3 请求体"></a>3.3.3 请求体</h3><p><code>username=tom&amp;pwd=123</code><br><code>&#123;&quot;username&quot;: &quot;tom&quot;, &quot;pwd&quot;: 123&#125;</code></p>
<h2 id="2-4-HTTP-响应报文"><a href="#2-4-HTTP-响应报文" class="headerlink" title="2.4 HTTP 响应报文"></a>2.4 HTTP 响应报文</h2><p>1 响应状态行: status statusText<br>2 多个响应头<br><code>Content-Type: text/html;charset=utf-8</code><br><code>Set-Cookie: BD_CK_SAM=1;path=/</code><br>3 响应体<br><code>html 文本/json 文本/js/css/图片...</code></p>
<h2 id="2-5-post-请求体参数格式"><a href="#2-5-post-请求体参数格式" class="headerlink" title="2.5 post 请求体参数格式"></a>2.5 post 请求体参数格式</h2><p>1 <code>Content-Type: application/x-www-form-urlencoded;charset=utf-8</code><br>用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接<br>例如: <code>name=%E5%B0%8F%E6%98%8E&amp;age=12</code><br>2 <code>Content-Type: application/json;charset=utf-8</code><br>用于 json 字符串参数<br>例如: <code>&#123;&quot;name&quot;: &quot;%E5%B0%8F%E6%98%8E&quot;, &quot;age&quot;: 12&#125; Content-Type: multipart/form-data</code><br>用于文件上传请求</p>
<h2 id="2-6-常见的响应状态码"><a href="#2-6-常见的响应状态码" class="headerlink" title="2.6 常见的响应状态码"></a>2.6 常见的响应状态码</h2><p><code>200 OK</code> 请求成功。一般用于GET 与POST 请求<br><code>201 Created</code> 已创建。成功请求并创建了新的资源<br><code>401 Unauthorized</code> 未授权/请求要求用户的身份认证<br><code>404 Not Found</code> 服务器无法根据客户端的请求找到资源<br><code>500 Internal Server Error</code> 服务器内部错误，无法完成请求</p>
<h2 id="2-7-不同类型的请求及其作用"><a href="#2-7-不同类型的请求及其作用" class="headerlink" title="2.7 不同类型的请求及其作用"></a>2.7 不同类型的请求及其作用</h2><p>1 <code>GET</code>: 从服务器端读取数据（查）<br>2 <code>POST</code>: 向服务器端添加新数据 （增）<br>3 <code>PUT</code>: 更新服务器端已经数据 （改）<br>4 <code>DELETE</code>: 删除服务器端数据 （删）</p>
<h2 id="2-8-API-的分类"><a href="#2-8-API-的分类" class="headerlink" title="2.8 API 的分类"></a>2.8 API 的分类</h2><p>1 REST API: restful （Representational State Transfer (资源)表现层状态转化）<br>(1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>(2) 同一个请求路径可以进行多个操作<br>(3) 请求方式会用到GET/POST/PUT/DELETE</p>
<p>2 非REST API: restless<br>(1) 请求方式不决定请求的CRUD 操作<br>(2) 一个请求路径只对应一个操作<br>(3) 一般只有GET/POST</p>
<h2 id="2-9-一般http请求与ajax请求的区别"><a href="#2-9-一般http请求与ajax请求的区别" class="headerlink" title="2.9 一般http请求与ajax请求的区别"></a>2.9 一般http请求与ajax请求的区别</h2><p>1 ajax请求 是一种特别的 http请求<br>2 对服务器端来说, 没有任何区别, 区别在浏览器端<br>3 浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求<br>4 浏览器端接收到响应<br>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面<br>(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</p>
<h1 id="3-原生AJAX-的基本使用-XHR"><a href="#3-原生AJAX-的基本使用-XHR" class="headerlink" title="3 原生AJAX 的基本使用 XHR"></a>3 原生AJAX 的基本使用 XHR</h1><h2 id="3-0-准备工作"><a href="#3-0-准备工作" class="headerlink" title="3.0 准备工作"></a>3.0 准备工作</h2><h3 id="3-0-1-安装node-js"><a href="#3-0-1-安装node-js" class="headerlink" title="3.0.1 安装node.js"></a>3.0.1 安装node.js</h3><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<h3 id="3-0-2-安装express（服务端框架）"><a href="#3-0-2-安装express（服务端框架）" class="headerlink" title="3.0.2 安装express（服务端框架）"></a>3.0.2 安装express（服务端框架）</h3><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p>
<p>1 初始化环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>

<p>2 下载express包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<p>3 编写js代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  设置响应</span></span><br><span class="line">  response.send(<span class="string">&quot;Hello Express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>4 运行js程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node .\01express使用.js</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jiucheng120/clouding/master/data/2021/20211127162437.png" alt="20210209165304650"></p>
<p>5 打开网页显示页面</p>
<p>6 调试程序可以查看请求和响应</p>
<h3 id="3-0-3-安装nodemon自动重启工具"><a href="#3-0-3-安装nodemon自动重启工具" class="headerlink" title="3.0.3 安装nodemon自动重启工具"></a>3.0.3 安装nodemon自动重启工具</h3><p>文件内容有修改自动重新启动服务<br><a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a></p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure>


<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ndoemon server.js</span><br></pre></td></tr></table></figure>

<h2 id="3-1-理解"><a href="#3-1-理解" class="headerlink" title="3.1 理解"></a>3.1 理解</h2><p>1 使用XMLHttpRequest (XHR)对象可以与服务器交互, 也就是发送ajax 请求<br>2 前端可以获取到数据，而无需让整个的页面刷新。<br>3 这使得Web 页面可以只更新页面的局部，而不影响用户的操作。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br><code>XMLHttpRequest</code>，AJAX 的所有操作都是通过该对象进行的</p>
<h2 id="3-2-核心对象使用步骤"><a href="#3-2-核心对象使用步骤" class="headerlink" title="3.2 核心对象使用步骤"></a>3.2 核心对象使用步骤</h2><h3 id="3-2-1-创建XMLHttpRequest-对象"><a href="#3-2-1-创建XMLHttpRequest-对象" class="headerlink" title="3.2.1 创建XMLHttpRequest 对象"></a>3.2.1 创建XMLHttpRequest 对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-设置请求信息（请求方法和url）"><a href="#3-2-2-设置请求信息（请求方法和url）" class="headerlink" title="3.2.2 设置请求信息（请求方法和url）"></a>3.2.2 设置请求信息（请求方法和url）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line">xhr.open(method, url);</span><br><span class="line"><span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-发送请求"><a href="#3-2-3-发送请求" class="headerlink" title="3.2.3 发送请求"></a>3.2.3 发送请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.send(body) <span class="comment">//get请求不传 body 参数，只有post请求使用</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-4-接收响应（事件绑定，处理服务端返回的结果）"><a href="#3-2-4-接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="3.2.4 接收响应（事件绑定，处理服务端返回的结果）"></a>3.2.4 接收响应（事件绑定，处理服务端返回的结果）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//xhr.responseXML 接收 xml格式 的响应数据</span></span><br><span class="line"><span class="comment">//xhr.responseText 接收 文本格式 的响应数据</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> text = xhr.responseText;</span><br><span class="line">        <span class="built_in">console</span>.log(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-使用案例"><a href="#3-3-使用案例" class="headerlink" title="3.3 使用案例"></a>3.3 使用案例</h2><h3 id="3-3-1-GET-请求"><a href="#3-3-1-GET-请求" class="headerlink" title="3.3.1 GET 请求"></a>3.3.1 GET 请求</h3><p>点击返回响应信息</p>
<p>创建两个文件，浏览器端使用的html文件和服务器端使用的js文件</p>
<p>服务器端 server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line">app.get(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头 设置允许跨域</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体</span></span><br><span class="line">  response.send(<span class="string">&quot;Hello Ajax&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听服务</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<p>前端页面 html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax GET 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #result &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#90b</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取button元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 创建对象 </span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 初始化 设置请求方法和url</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3. 发送</span></span></span><br><span class="line">      xhr.send();</span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 事件绑定 处理服务端返回的结果</span></span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断 (服务端返回了所有的结果)</span></span></span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//判断响应状态码 200  404  403 401 500</span></span></span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理结果 行 头 空行 体</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 响应</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;状态码&#x27;</span>, xhr.status); <span class="comment">// 状态码</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;状态字符串&#x27;</span>, xhr.statusText); <span class="comment">// 状态字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;所有响应头&#x27;</span>, xhr.getAllResponseHeaders()); <span class="comment">// 所有响应头</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;响应体&#x27;</span>, xhr.response); <span class="comment">// 响应体</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//设置 result 的文本</span></span></span><br><span class="line">        	result.innerHTML=xhr.response;</span><br><span class="line"><span class="javascript">      	  &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">      	  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>GET 请求设置请求参数</strong></p>
<p>设置url参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-POST请求"><a href="#3-3-2-POST请求" class="headerlink" title="3.3.2 POST请求"></a>3.3.2 POST请求</h3><p>鼠标放到div中，发post请求，将响应体放在div中呈现</p>
<p>server.js添加post</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许跨域</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体</span></span><br><span class="line">  response.send(<span class="string">&quot;Hello Ajax POST&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>post.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax POST 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #result &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#903</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取元素对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 绑定事件</span></span></span><br><span class="line"><span class="javascript">    result.addEventListener(<span class="string">&quot;mouseover&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 创建对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 初始化 设置类型（请求方式）与url</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3. 发送   设置请求参数（请求体）</span></span></span><br><span class="line"><span class="javascript">      xhr.send(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 事件绑定</span></span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断</span></span></span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;=200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理服务端返回的结果</span></span></span><br><span class="line">            result.innerHTML = xhr.response;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>设置请求头信息</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置请求体内容的类型</span></span><br><span class="line">xhr.setRequesHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-from-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">// 自定义头信息</span></span><br><span class="line">xhr.setRequesHeader(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ykyk&#x27;</span>);</span><br></pre></td></tr></table></figure>


<p>server.js中设置响应头允许自定义请求头 post改成all</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-json数据请求"><a href="#3-4-json数据请求" class="headerlink" title="3.4 json数据请求"></a>3.4 json数据请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许跨域</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许自定义头信息</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 响应一个数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 对 对象 进行 字符串 转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="comment">// 设置响应体 </span></span><br><span class="line">  response.send(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #result &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#89b</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 绑定键盘按下事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// *2*.(自动转换) 设置响应体数据的类型(自动转换)</span></span></span><br><span class="line"><span class="javascript">      xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/json-server&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送</span></span></span><br><span class="line">      xhr.send();</span><br><span class="line"><span class="javascript">      <span class="comment">// 事件绑定</span></span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.response);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 手动对数据转化 (字符串再转换成json)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// let data = JSON.parse(xhr.response); //转换成json</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// result.innerHTML = data.name;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// *2*. (自动转换)自动转换(自动转换)</span></span></span><br><span class="line"><span class="javascript">            result.innerHTML = xhr.response.name; <span class="comment">//已经自动变成json</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-请求超时与网络异常"><a href="#3-5-请求超时与网络异常" class="headerlink" title="3.5 请求超时与网络异常"></a>3.5 请求超时与网络异常</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超时设置 （2秒）</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;网络超时，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;网络异常，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-取消请求"><a href="#3-6-取消请求" class="headerlink" title="3.6 取消请求"></a>3.6 取消请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动取消</span></span><br><span class="line">xhr.abort()</span><br></pre></td></tr></table></figure>

<h2 id="3-7-请求重复发送问题"><a href="#3-7-请求重复发送问题" class="headerlink" title="3.7 请求重复发送问题"></a>3.7 请求重复发送问题</h2><h2 id="3-8-解决-IE-缓存问题"><a href="#3-8-解决-IE-缓存问题" class="headerlink" title="3.8 解决 IE 缓存问题"></a>3.8 解决 IE 缓存问题</h2><p><strong>问题：</strong>在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。<br><strong>解决方式：</strong>浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url 地址即可避免缓存问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;/testAJAX?t=&quot;</span>+<span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure>

<h2 id="3-9-AJAX-请求状态"><a href="#3-9-AJAX-请求状态" class="headerlink" title="3.9 AJAX 请求状态"></a>3.9 AJAX 请求状态</h2><p><code>xhr.readyState</code> 可以用来查看请求当前的状态<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></p>
<p>0: 表示XMLHttpRequest 实例已经生成，但是open()方法还没有被调用<br>1: 表示send()方法还没有被调用，仍然可以使用setRequestHeader()，设定HTTP请求的头信息<br>2: 表示send()方法已经执行，并且头信息和状态码已经收到<br>3: 表示正在接收服务器传来的body 部分的数据<br>4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p>
<h2 id="3-10-API总结"><a href="#3-10-API总结" class="headerlink" title="3.10 API总结"></a>3.10 API总结</h2><p><code>XMLHttpRequest()</code>：创建 XHR 对象的构造函数<br><code>status</code>：响应状态码值，如 200、404<br><code>statusText</code>：响应状态文本，如 ’ok‘、‘not found’<br><code>readyState</code>：标识请求状态的只读属性 0-1-2-3-4<br><code>onreadystatechange</code>：绑定 readyState 改变的监听<br><code>responseType</code>：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应<br><code>response</code>：响应体数据，类型取决于 responseType 的指定<br><code>timeout</code>：指定请求超时时间，默认为 0 代表没有限制<br><code>ontimeout</code>：绑定超时的监听<br><code>onerror</code>：绑定请求网络错误的监听<br><code>open()</code>：初始化一个请求，参数为：(method, url[, async])<br><code>send(data)</code>：发送请求<br><code>abort()</code>：中断请求 （发出到返回之间）<br><code>getResponseHeader(name)</code>：获取指定名称的响应头值<br><code>getAllResponseHeaders()</code>：获取所有响应头组成的字符串<br><code>setRequestHeader(name, value)</code>：设置请求头</p>
<h1 id="4-jQuery-中的AJAX"><a href="#4-jQuery-中的AJAX" class="headerlink" title="4 jQuery 中的AJAX"></a>4 jQuery 中的AJAX</h1><h2 id="4-1-get-请求"><a href="#4-1-get-请求" class="headerlink" title="4.1 get 请求"></a>4.1 get 请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure>

<p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p>
<h2 id="4-2-post-请求"><a href="#4-2-post-请求" class="headerlink" title="4.2 post 请求"></a>4.2 post 请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure>

<p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p>
<h2 id="4-3-通用方法"><a href="#4-3-通用方法" class="headerlink" title="4.3 通用方法"></a>4.3 通用方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="comment">// url</span></span><br><span class="line">url: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line">data: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line"><span class="comment">// 请求类型</span></span><br><span class="line">type: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="comment">// 响应体结果</span></span><br><span class="line">dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="comment">// 成功的回调</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data);&#125;,</span><br><span class="line"><span class="comment">// 超时时间</span></span><br><span class="line">timeout: <span class="number">2000</span>,</span><br><span class="line"><span class="comment">// 失败的回调</span></span><br><span class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;出错拉~&#x27;</span>);&#125;,</span><br><span class="line"><span class="comment">// 头信息</span></span><br><span class="line">headers: &#123;</span><br><span class="line">    c: <span class="number">300</span>,</span><br><span class="line">    d: <span class="number">400</span></span><br><span class="line">&#125;	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="5-跨域"><a href="#5-跨域" class="headerlink" title="5 跨域"></a>5 跨域</h1><h2 id="5-1-同源策略"><a href="#5-1-同源策略" class="headerlink" title="5.1 同源策略"></a>5.1 同源策略</h2><p>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略<br>同源： 协议、域名、端口号必须完全相同<br>跨域： 违背同源策略就是跨域</p>
<h2 id="5-2-如何解决跨域"><a href="#5-2-如何解决跨域" class="headerlink" title="5.2 如何解决跨域"></a>5.2 如何解决跨域</h2><h3 id="5-2-1-JSONP"><a href="#5-2-1-JSONP" class="headerlink" title="5.2.1 JSONP"></a>5.2.1 JSONP</h3><h4 id="1-JSONP-是什么"><a href="#1-JSONP-是什么" class="headerlink" title="1 JSONP 是什么"></a>1 JSONP 是什么</h4><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>才智开发出来，只支持get 请求。</p>
<h4 id="2-JSONP-怎么工作的？"><a href="#2-JSONP-怎么工作的？" class="headerlink" title="2 JSONP 怎么工作的？"></a>2 JSONP 怎么工作的？</h4><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用script 标签的跨域能力来发送请求的。</p>
<h4 id="3-JSONP-的使用"><a href="#3-JSONP-的使用" class="headerlink" title="3 JSONP 的使用"></a>3 JSONP 的使用</h4><p>1）动态的创建一个script 标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>2）设置script 的src，设置回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">script.src = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">alert(data.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3）将script 添加到body 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure>

<p>4）服务器中路由的处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/testAJAX&quot;</span> , <span class="function"><span class="keyword">function</span> (<span class="params">req , res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> callback = req.query.callback;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">res.send(callback+<span class="string">&quot;(&quot;</span>+<span class="built_in">JSON</span>.stringify(obj)+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="4-jQuery-中的JSONP"><a href="#4-jQuery-中的JSONP" class="headerlink" title="4 jQuery 中的JSONP"></a>4 jQuery 中的JSONP</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery-1.12.3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">				btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					$.getJSON(<span class="string">&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">						<span class="comment">//获取所有的电影的条目</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> subjects = data.subjects;</span></span><br><span class="line"><span class="javascript">						<span class="comment">//遍历电影条目</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;subjects.length ; i++)&#123;</span></span><br><span class="line"><span class="javascript">							$(<span class="string">&quot;#list&quot;</span>).append(<span class="string">&quot;&lt;li&gt;&quot;</span>+</span></span><br><span class="line"><span class="javascript">							subjects[i].title+<span class="string">&quot;&lt;br /&gt;&quot;</span>+</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;&lt;img src=\&quot;&quot;</span>+subjects[i].images.large+<span class="string">&quot;\&quot; &gt;&quot;</span>+</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;&lt;/li&gt;&quot;</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-CORS"><a href="#5-2-2-CORS" class="headerlink" title="5.2.2 CORS"></a>5.2.2 CORS</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
<h4 id="1-CORS-是什么？"><a href="#1-CORS-是什么？" class="headerlink" title="1 CORS 是什么？"></a>1 CORS 是什么？</h4><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方<br>案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持<br>get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些<br>源站通过浏览器有权限访问哪些资源</p>
<h4 id="2-CORS-怎么工作的？"><a href="#2-CORS-怎么工作的？" class="headerlink" title="2 CORS 怎么工作的？"></a>2 CORS 怎么工作的？</h4><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行。</p>
<h4 id="3-CORS-的使用"><a href="#3-CORS-的使用" class="headerlink" title="3 CORS 的使用"></a>3 CORS 的使用</h4><p>主要是服务器端的设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/testAJAX&quot;</span> , <span class="function"><span class="keyword">function</span> (<span class="params">req , res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过res 来设置响应头，来允许跨域请求</span></span><br><span class="line">    <span class="comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span><br><span class="line">    res.set(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    res.send(<span class="string">&quot;testAJAX 返回的响应&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON笔记</title>
    <url>/undefined/15e4d064/</url>
    <content><![CDATA[<blockquote>
<p>JSON学习笔记</p>
</blockquote>
<span id="more"></span>
<h1 id="1-创建JSON对象"><a href="#1-创建JSON对象" class="headerlink" title="1 创建JSON对象"></a>1 创建JSON对象</h1><p>JSON （JavaScript Object Notation）是一种可以在服务器和客户端之间传输的轻量级数据格式，并不是编程语言</p>
<h2 id="1-1-JSON语法"><a href="#1-1-JSON语法" class="headerlink" title="1.1 JSON语法"></a>1.1 JSON语法</h2><p>JSON文件都是被包裹在一个大括号中 {}，通过key:value的方式来表达数据。看起来同 JavaScript 的对象表达方式十分相似，但是有所不同：JSON的Key必须包裹在一个<strong>双引号</strong>中，在实践中，编写 JSON 的时候，忘了给 Key 值加双引号或者是把双引号写成单引号是常见错误。</p>
<p>JSON 文件中<strong>无法使用注释</strong>，试图添加注释将会引发报错。</p>
<ul>
<li>轻量级：体现在JSON的体积小。虽然一个小的体积可能表示的数据很多。</li>
</ul>
<blockquote>
<p>在现代的开发中，能够做数据交换的，包括两个：JSON和XML</p>
<ul>
<li>JSON和XML都是非常标准的数据交换格式</li>
<li>XML体积大，解析难度大</li>
<li>JSON体积小，解析更容易</li>
<li>XML和JSON相对比来说，XML的语法严格，json的语法相对松散。</li>
</ul>
</blockquote>
<h2 id="1-2-JSON的数据格式"><a href="#1-2-JSON的数据格式" class="headerlink" title="1.2 JSON的数据格式"></a>1.2 JSON的数据格式</h2><ol>
<li>数字，包含浮点数和整数</li>
<li>字符串，需要包裹在双引号中</li>
<li>Bool值，true 或者 false</li>
<li>数组，需要包裹在方括号中 []</li>
<li>对象，需要包裹在大括号中 {}</li>
<li>Null</li>
</ol>
<p>其他任何格式都会触发报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emp = &#123;</span><br><span class="line">    <span class="string">&quot;empno&quot;</span> : <span class="number">7369</span>,</span><br><span class="line">    <span class="string">&quot;ename&quot;</span> : <span class="string">&quot;smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sal&quot;</span> : <span class="number">800</span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 怎么访问对象的属性？</span></span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">console.log(emp.empno)</span><br><span class="line">console.log(emp.ename)</span><br><span class="line">console.log(emp.sal)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line">console.log(emp[<span class="string">&quot;empno&quot;</span>])</span><br><span class="line">console.log(emp[<span class="string">&quot;ename&quot;</span>])</span><br><span class="line">console.log(emp[<span class="string">&quot;sal&quot;</span>])</span><br><span class="line">            </span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span> : <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">&quot;aihao&quot;</span> : [<span class="string">&quot;抽烟&quot;</span>,<span class="string">&quot;喝酒&quot;</span>,<span class="string">&quot;烫头&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">console.log(person.name)</span><br><span class="line">            </span><br><span class="line">console.log(person.sex ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>),</span><br><span class="line">            </span><br><span class="line"><span class="keyword">var</span> aihaos = person.aihao;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span><br><span class="line">    console.log(aihaos[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-JSON对象的属性值"><a href="#2-JSON对象的属性值" class="headerlink" title="2 JSON对象的属性值"></a>2 JSON对象的属性值</h1><p>JSON对象的属性值可以为JSON对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json对象1</span></span><br><span class="line"><span class="comment">/* var addr = &#123;</span></span><br><span class="line"><span class="comment">   &quot;city&quot; : &quot;北京&quot;,</span></span><br><span class="line"><span class="comment">   &quot;street&quot; : &quot;大兴&quot;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// json对象2</span></span><br><span class="line"><span class="comment">/* var user = &#123;</span></span><br><span class="line"><span class="comment">   &quot;username&quot; : &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment">   &quot;password&quot; : &quot;123&quot;,</span></span><br><span class="line"><span class="comment">   &quot;email&quot; : &quot;zhangsan@123.com&quot;,</span></span><br><span class="line"><span class="comment">   &quot;address&quot; : addr</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">   <span class="string">&quot;username&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">   <span class="string">&quot;password&quot;</span> : <span class="string">&quot;123&quot;</span>,</span><br><span class="line">   <span class="string">&quot;email&quot;</span> : <span class="string">&quot;zhangsan@123.com&quot;</span>,</span><br><span class="line">   <span class="string">&quot;address&quot;</span> : &#123;<span class="string">&quot;city&quot;</span> : <span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;street&quot;</span> : <span class="string">&quot;宝安&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zhangsan住在哪个城市怎么访问？</span></span><br><span class="line"><span class="built_in">console</span>.log(user.username + <span class="string">&quot;居住在&quot;</span> + user.address.city)</span><br></pre></td></tr></table></figure>
<p> <strong>案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设计一个JSON格式的数据可以表示全班人数和每个学生信息</span></span><br><span class="line"><span class="keyword">var</span> students = &#123;</span><br><span class="line">   <span class="string">&quot;total&quot;</span> : <span class="number">3</span>,</span><br><span class="line">   <span class="string">&quot;data&quot;</span> : [&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;陈赓&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;吴雨阳&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;殷远庭&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解了吗？JSON很容易解析,一顿&quot;点&quot;就行.</span></span><br><span class="line"><span class="built_in">console</span>.log(students.data[<span class="number">0</span>].name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问以上的json对象,将总人数取出,将每个学生的信息取出</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;总人数：&quot;</span> + students.total)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问每一个学生数据</span></span><br><span class="line"><span class="keyword">var</span> arr = students.data;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">   <span class="keyword">var</span> s = arr[i];</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;姓名：&quot;</span> + s.name + <span class="string">&quot;,年龄：&quot;</span> + s.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-通过JSON传输数据"><a href="#3-通过JSON传输数据" class="headerlink" title="3 通过JSON传输数据"></a>3 通过JSON传输数据</h1><h2 id="3-1-JSON序列化"><a href="#3-1-JSON序列化" class="headerlink" title="3.1 JSON序列化"></a>3.1 JSON序列化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转成字符串保存</span></span><br><span class="line"><span class="keyword">const</span> objString = <span class="built_in">JSON</span>.stringify(obj)</span><br><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;info&quot;</span>, objString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串转回对象</span></span><br><span class="line"><span class="keyword">const</span> itemString = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;info&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.parse(itemString)</span><br></pre></td></tr></table></figure>
<h3 id="stringify"><a href="#stringify" class="headerlink" title="stringify"></a>stringify</h3><p><code>stringify</code>方法：将JavaScript类型转成对应的JSON字符串</p>
<p><strong>1、replace</strong></p>
<p>第二个参数replace</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hobbies&quot;</span>: [<span class="string">&quot;篮球&quot;</span>, <span class="string">&quot;足球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objString1 = <span class="built_in">JSON</span>.stringify(obj)</span><br><span class="line"><span class="built_in">console</span>.log(objString1)</span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;why&quot;,&quot;age&quot;:18,&quot;friends&quot;:&#123;&quot;name&quot;:&quot;kobe&quot;,&quot;hobbies&quot;:[&quot;篮球&quot;,&quot;足球&quot;,&quot;乒乓球&quot;]&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// replace参数是一个数组，可选择性地仅包含数组指定的属性</span></span><br><span class="line"><span class="keyword">const</span> objString2 = <span class="built_in">JSON</span>.stringify(obj, [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>])</span><br><span class="line"><span class="built_in">console</span>.log(objString2)</span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;why&quot;,&quot;age&quot;:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// replace参数是一个函数，可选择性地替换值</span></span><br><span class="line"><span class="keyword">const</span> objString3 = <span class="built_in">JSON</span>.stringify(obj, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value)</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&quot;name&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;coderwhy&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(objString3)</span><br><span class="line"><span class="comment">// &#123;name: &#x27;why&#x27;, age: 18, friends: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">// name why</span></span><br><span class="line"><span class="comment">// age 18</span></span><br><span class="line"><span class="comment">// friends &#123;name: &#x27;kobe&#x27;, hobbies: Array(3)&#125;</span></span><br><span class="line"><span class="comment">// name kobe</span></span><br><span class="line"><span class="comment">// hobbies (3) [&#x27;篮球&#x27;, &#x27;足球&#x27;, &#x27;乒乓球&#x27;]</span></span><br><span class="line"><span class="comment">// 0 篮球</span></span><br><span class="line"><span class="comment">// 1 足球</span></span><br><span class="line"><span class="comment">// 2 乒乓球</span></span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;coderwhy&quot;,&quot;age&quot;:18,&quot;friends&quot;:&#123;&quot;name&quot;:&quot;coderwhy&quot;,&quot;hobbies&quot;:[&quot;篮球&quot;,&quot;足球&quot;,&quot;乒乓球&quot;]&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>2、space</strong></p>
<p>第三个参数space</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hobbies&quot;</span>: [<span class="string">&quot;篮球&quot;</span>, <span class="string">&quot;足球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩进4个字符</span></span><br><span class="line"><span class="keyword">const</span> objString4 = <span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(objString4)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;why&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 18,</span></span><br><span class="line"><span class="comment">//   &quot;friends&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;name&quot;: &quot;kobe&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;hobbies&quot;: [</span></span><br><span class="line"><span class="comment">//       &quot;篮球&quot;,</span></span><br><span class="line"><span class="comment">//       &quot;足球&quot;,</span></span><br><span class="line"><span class="comment">//       &quot;乒乓球&quot;</span></span><br><span class="line"><span class="comment">//     ]</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>如果对象本身包含toJSON方法，那么会直接使用toJSON方法的结果</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;friends&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hobbies&quot;</span>: [<span class="string">&quot;篮球&quot;</span>, <span class="string">&quot;足球&quot;</span>, <span class="string">&quot;乒乓球&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    toJSON: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;coderwhy&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objString5 = <span class="built_in">JSON</span>.stringify(obj)</span><br><span class="line"><span class="built_in">console</span>.log(objString5)</span><br><span class="line"><span class="comment">// &quot;coderwhy&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h3><p><code>parse</code>方法：解析JSON字符串，转回对应的JavaScript类型，提供可选的<code>reviver</code>函数用以在返回之前对所得到的对象执行变换（操作）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info2 = <span class="built_in">JSON</span>.parse(objString, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(info2)</span><br></pre></td></tr></table></figure>
<h3 id="使用JSON序列化深拷贝"><a href="#使用JSON序列化深拷贝" class="headerlink" title="使用JSON序列化深拷贝"></a>使用JSON序列化深拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">friend</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> objString = <span class="built_in">JSON</span>.stringify(obj)</span><br><span class="line"><span class="keyword">const</span> info = <span class="built_in">JSON</span>.parse(objString)</span><br><span class="line"><span class="built_in">console</span>.log(info)</span><br><span class="line"><span class="comment">// &#123; name: &#x27;why&#x27;, age: 18, friend: &#123; name: &#x27;kobe&#x27; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info === obj)  <span class="comment">// false</span></span><br><span class="line">info.friend.name = <span class="string">&quot;james&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(onj.friend.name)  <span class="comment">// kobe</span></span><br></pre></td></tr></table></figure>
<h1 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4 正则表达式"></a>4 正则表达式</h1><p>1、什么是正则表达式，有什么用？<br>正则表达式是一门独立的学科，基本每个语言都支持。<br>正则表达式不是JS专属的。不过在JS中使用居多。<br>通常使用正则表达式进行字符串格式匹配。</p>
<p>正则表达式是有一堆特殊的符号组成的一个表达式。每一个特殊的符号都有特殊的代表含义。</p>
<p>2、对于javascript程序员来说，我们对于正则表达式掌握到什么程度呢？<br>第一：能够看懂正则表达式<br>第二：简单的正则要会写<br>第三：要能够独立的从网络当中搜索到你想要的正则表达式（搜索能力要有）<br>第四：要会创建JS的正则表达式对象。<br>第五：要会调用JS正则表达式对象的方法。</p>
<p>3、常见的正则表达式符号有哪些？<br><code>.</code> 匹配除换行符以外的任意字符<br><code>\w</code> 匹配字母或数字或下划线或汉字<br><code>\s</code> 匹配任意的空白符<br><code>\d</code> 匹配数字<br><code>\b</code> 匹配单词的开始或结束<br><code>^</code> 匹配字符串的开始<br><code>$</code> 匹配字符串的结束 </p>
<p><code>*</code> 重复零次或更多次 0-N次<br><code>+</code> 重复一次或更多次  1-N次<br><code>?</code> 重复零次或一次  0或1次<br><code>&#123;n&#125;</code> 重复n次  n次<br><code>&#123;n,&#125;</code> 重复n次或更多次  n+次<br><code>&#123;n,m&#125;</code> 重复n到m次  n到m次<br>注意：数量永远匹配的都是前面的那个字符出现的次数。</p>
<p><code>\W</code> 匹配任意不是字母，数字，下划线，汉字的字符<br><code>\S</code> 匹配任意不是空白符的字符<br><code>\D</code> 匹配任意非数字的字符<br><code>\B</code> 匹配不是单词开头或结束的位置<br><code>[^x]</code> 匹配除了x以外的任意字符<br><code>[^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符 </p>
<p><code>|</code> 表示或者</p>
<p><code>[a-z]&#123;1&#125;</code> a到z所有的字符中的任意1个。</p>
<p><code>[a-zA-Z0-9]&#123;3,&#125;</code> 前面这堆中的任意字符至少出现3个。</p>
<p><code>[1-9][0-9]&#123;4,&#125;</code>    qq号的正则表达式，最小的qq号是10000</p>
<p><code>[1-9]</code> 没有指定数量的时候，默认是1个。</p>
<p>4、邮箱的正则表达式：<br><code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code><br>这个邮箱地址从网上找了之后不一定能用，你需要测试。反复测试。</p>
<p>5、在JS中怎么创建正则表达式对象呢？</p>
<p>包括两种方式，重点使用第一种</p>
<p>第一种方式：直接量语法<br><code>var regExp = /正则表达式/标记</code><br>第二种方式：使用内置类RegExp类。<br><code>var regExp = new RegExp(&quot;正则表达式&quot;, &quot;标记&quot;)</code></p>
<p>标记是可选项！！！！！都有哪些值可选呢？<br><code>g</code>：全局 global<br><code>i</code>: 忽略大小写 ignorecase<br><code>gi</code>: 全局扫描，并且忽略大小写。</p>
<p>6、正则表达式对象有一个很重要的方法：<br><code>var emailRegExp = /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</code><br><code>var ok = emailRegExp.test(&quot;用户输入的字符串&quot;);</code><br>返回值ok是true表示，匹配成功了。</p>
<p>其实在JS中，字符串String也是支持正则表达式的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="string">&quot;1980-11-10&quot;</span>.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>))</span></span><br><span class="line"><span class="javascript">	<span class="comment">// g表示global全局的,所有的 - 替换成/</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="string">&quot;1980-11-10&quot;</span>.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//获取邮箱地址</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 创建正则表达式对象</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> regExp = <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 验证</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> ok = regExp.test(email);</span></span><br><span class="line">        if(ok)&#123;</span><br><span class="line"><span class="javascript">			alert(<span class="string">&quot;邮箱地址合法&quot;</span>)</span></span><br><span class="line"><span class="javascript">		&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">			alert(<span class="string">&quot;邮箱地址不合法&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;		</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">邮箱地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证邮箱地址&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkEmail()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript笔记</title>
    <url>/undefined/e803913c/</url>
    <content><![CDATA[<blockquote>
<p>JavaScript学习笔记</p>
</blockquote>
<span id="more"></span>
<p>一些好的文档：</p>
<p><a href="https://wangdoc.com/javascript/">JavaScript 教程 - 网道 (wangdoc.com)</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript基础 - 学习 Web 开发 | MDN (mozilla.org)</a></p>
<p><a href="https://www.w3school.com.cn/js/index.asp">JavaScript 教程 (w3school.com.cn)</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaScript教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<h1 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1 ECMAScript"></a>1 ECMAScript</h1><p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言</p>
<h2 id="1-1-输出方式"><a href="#1-1-输出方式" class="headerlink" title="1.1 输出方式"></a>1.1 输出方式</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">输出方式</span><br><span class="line">   <span class="selector-tag">1</span>. 弹窗</span><br><span class="line">   <span class="selector-tag">alert</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">confirm</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">prompt</span>(需要输出的内容)</span><br><span class="line">   注意点：如果需要输出的内容不是数字，那么就必须通过单引号或者双引号括起来</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">2</span>. 网页内容区域来输出</span><br><span class="line">   <span class="selector-tag">document</span><span class="selector-class">.write</span>(需要输出的内容)</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">3</span>. 通过开发者工具控制台的形式来输出</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.log</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.warn</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.error</span>(需要输出的内容)</span><br></pre></td></tr></table></figure>
<h2 id="1-2-HTML中嵌入JS代码的方式"><a href="#1-2-HTML中嵌入JS代码的方式" class="headerlink" title="1.2 HTML中嵌入JS代码的方式"></a>1.2 HTML中嵌入JS代码的方式</h2><p>行间事件；</p>
<p>脚本块；</p>
<p>引入外部独立的JS文件</p>
<blockquote>
<p>引入外部独立的CSS文件，这个标签link中属性是href，JS则为src</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-标识符"><a href="#1-3-标识符" class="headerlink" title="1.3 标识符"></a>1.3 标识符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标识符命名规则：</span><br><span class="line">   标识符只能由数字、字母、下划线、美元符号组成，不能含有其它特殊符号</span><br><span class="line">   标识符不能以数字开始</span><br><span class="line">   标识符严格区分大小写</span><br><span class="line">   关键字不能做标识符</span><br><span class="line">   标识符理论上没有长度限制</span><br></pre></td></tr></table></figure>
<h2 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4 变量"></a>1.4 变量</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">在javascript当中，如果一个变量声明的时候没有使用<span class="keyword">var</span>关键字的话，这个变量不管是在哪里声明的，都是全局变量。这种全局变量在声明的时候必须手动赋值，不能采用系统默认值。</span><br></pre></td></tr></table></figure>
<h2 id="1-5-数据类型"><a href="#1-5-数据类型" class="headerlink" title="1.5 数据类型"></a>1.5 数据类型</h2><p>es6数据类型：记忆方法</p>
<p>bouns</p>
<p>boolean bigint</p>
<p>object</p>
<p>undefined</p>
<p>null number</p>
<p>string symbol</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span>运算符的运算结果是以下<span class="number">6</span>个字符串之一：</span><br><span class="line">   <span class="string">&quot;undefined&quot;</span></span><br><span class="line">   <span class="string">&quot;number&quot;</span></span><br><span class="line">   <span class="string">&quot;string&quot;</span></span><br><span class="line">   <span class="string">&quot;boolean&quot;</span></span><br><span class="line">   <span class="string">&quot;object&quot;</span></span><br><span class="line">   <span class="string">&quot;function&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>属于<span class="literal">Null</span>类型,但是typeof运算符的运算结果是<span class="string">&quot;object&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-1-Undefined"><a href="#1-5-1-Undefined" class="headerlink" title="1.5.1 Undefined"></a>1.5.1 Undefined</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、只有一个值，它的值就是：<span class="literal">undefined</span></span><br><span class="line"><span class="number">2</span>、当一个变量声明之后没有手动赋值，系统默认赋值<span class="literal">undefined</span></span><br><span class="line"><span class="number">3</span>、Undefined类型属于原始类型。</span><br></pre></td></tr></table></figure>
<h3 id="1-5-2-Null"><a href="#1-5-2-Null" class="headerlink" title="1.5.2 Null"></a>1.5.2 Null</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="literal">Null</span>类型也是属于原始类型。</span><br><span class="line"><span class="number">2</span>、<span class="literal">Null</span>类型只有<span class="number">1</span>个值：<span class="literal">null</span></span><br><span class="line"><span class="number">3</span>、注意: typeof <span class="literal">null</span> 运算结果是：<span class="string">&quot;object&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-3-Number"><a href="#1-5-3-Number" class="headerlink" title="1.5.3 Number"></a>1.5.3 Number</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Number</span>类型属于原始类型。</span><br><span class="line"><span class="number">2</span>、<span class="built_in">Number</span>类型都有哪些值？</span><br><span class="line">   <span class="number">-1</span> </span><br><span class="line">   <span class="number">0</span> </span><br><span class="line">   <span class="number">1</span> </span><br><span class="line">   <span class="number">3</span> </span><br><span class="line">   <span class="number">3.14</span> </span><br><span class="line">   <span class="literal">NaN</span></span><br><span class="line">   <span class="literal">Infinity</span></span><br><span class="line">   ....</span><br><span class="line"><span class="number">3</span>、<span class="literal">NaN</span>？</span><br><span class="line">   Not a <span class="built_in">Number</span>，表示不是一个数字。</span><br><span class="line">   但<span class="literal">NaN</span>一个值。</span><br><span class="line">   它属于<span class="built_in">Number</span>类型。</span><br><span class="line">   </span><br><span class="line"><span class="number">4</span>、什么情况下结果是一个<span class="literal">NaN</span>？</span><br><span class="line">   当一个数学表达式的运算结果本应该返回一个数字，</span><br><span class="line">   但是最终无法返回一个数字的时候，结果是<span class="literal">NaN</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="literal">Infinity</span>是无穷大，当除数是<span class="number">0</span>的时候，最终计算结果是无穷大。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、强调：</span><br><span class="line">   JavaScript当中的<span class="built_in">Number</span>类型代表了java中的：</span><br><span class="line">      byte short int long float double </span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、在<span class="built_in">Number</span>类型这一块，有一个函数叫做：<span class="built_in">isNaN</span>()函数，这个函数</span><br><span class="line">最终返回布尔类型，返回<span class="literal">true</span>表示不是一个数字，返回<span class="literal">false</span>表示是一个</span><br><span class="line">数字。</span><br><span class="line">   <span class="built_in">isNaN</span> : <span class="keyword">is</span> Not a <span class="built_in">Number</span></span><br><span class="line">   true: 表示不是一个数字</span><br><span class="line">   false:表示是一个数字</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">isNaN</span>(数据)：这个函数有一个特点，它会首先尝试将“数据”转换成</span><br><span class="line">   数字，如果转换失败了，则结果就是<span class="literal">true</span>。转换为数字成功了，那么</span><br><span class="line">   结果就是<span class="literal">false</span>。</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">isNaN</span>这个函数是干啥的？</span><br><span class="line">      就是用来判断“数据”是否是一个数字！！！！！</span><br><span class="line">      </span><br><span class="line"><span class="number">8</span>、在<span class="built_in">Number</span>类型这一块还有一个函数叫做：<span class="built_in">Number</span>()函数，这个函数的作用可以将不是</span><br><span class="line">数字类型的数据转换成数字类型的数据。</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、<span class="built_in">parseInt</span>()函数，将字符串数字转换成数字，并且取整。向下取整。</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、<span class="built_in">Math</span>.ceil()，这是一个<span class="built_in">Math</span>工具类中的一个函数，向上取整。</span><br></pre></td></tr></table></figure>
<h3 id="1-5-4-Boolean"><a href="#1-5-4-Boolean" class="headerlink" title="1.5.4 Boolean"></a>1.5.4 Boolean</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Boolean</span>类型属于原始类型。</span><br><span class="line"><span class="number">2</span>、<span class="built_in">Boolean</span>类型只有两个值：<span class="literal">true</span>,<span class="literal">false</span>，没有其他值。</span><br><span class="line"><span class="number">3</span>、<span class="built_in">Boolean</span>类型中有一个函数：<span class="built_in">Boolean</span>()函数，这个函数的作用是？</span><br><span class="line">   将不是布尔类型的转换成布尔类型。</span><br><span class="line">   </span><br><span class="line">   转换规律是什么？</span><br><span class="line">      <span class="string">&quot;只要有东西&quot;</span>结果就是<span class="literal">true</span>。</span><br><span class="line">      有数据就是<span class="literal">true</span>，无数据就是<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-5-String"><a href="#1-5-5-String" class="headerlink" title="1.5.5 String"></a>1.5.5 String</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">String</span>类型属于原始类型（基本数据类型）</span><br><span class="line"><span class="number">2</span>、在JS中怎么定义字符串，包括两种方式：</span><br><span class="line">   <span class="keyword">var</span> s = <span class="string">&quot;字符串&quot;</span>;</span><br><span class="line">   <span class="keyword">var</span> s = <span class="string">&#x27;字符串&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"><span class="number">3</span>、在JS当中提供了创建字符串的两种方式：</span><br><span class="line">   如果采用这种方式创建的字符串就属于原始类型！</span><br><span class="line">      <span class="keyword">var</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">   如果采用这种方式创建的字符串就属于<span class="built_in">Object</span>类型，这里使用了<span class="built_in">Object</span>类的子类<span class="built_in">String</span>，<span class="built_in">String</span>类是JS内置的，可以直接使用：</span><br><span class="line">      <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="number">4</span>、在JS中不管是原始类型的字符串，还是<span class="built_in">Object</span>类型的字符串，他们的方法和属性都是通用的。</span><br><span class="line"><span class="number">5</span>、<span class="built_in">String</span>当中的常用属性和方法：</span><br><span class="line">   常用属性：</span><br><span class="line">      length属性，获取字符串长度</span><br><span class="line">   常用方法：</span><br><span class="line">      charAt 方法 获取指定下标位置的字符</span><br><span class="line">      concat 方法 连接字符串</span><br><span class="line">      indexOf 方法 获取某个字符串在当前字符串中第一次出现处的索引</span><br><span class="line">      lastIndexOf 方法 获取某个字符串在当前字符串中最后一次出现处的索引</span><br><span class="line">      replace 方法 替换</span><br><span class="line">      split 方法  拆分字符串</span><br><span class="line">      substr 方法  截取字符串</span><br><span class="line">      substring 方法  截取字符串</span><br><span class="line">      toLowerCase 方法 转小写</span><br><span class="line">      toUpperCase 方法 转大写</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">Infinity</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="keyword">new</span> <span class="built_in">Object</span>())); <span class="comment">// true		</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(i)</span></span> <span class="comment">// 这里的代码实际上是这样的:if(Boolean(i))</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-6-Object"><a href="#1-5-6-Object" class="headerlink" title="1.5.6 Object"></a>1.5.6 Object</h3><p>JS函数不能重载，只要出现同名函数,之前的函数就消失了</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在JS当中内置了一个类型Object，可以将Object类型看做是所有对象的超类/基类。</span><br><span class="line"><span class="number">2</span>、在JS当中默认定义的类型，没有特殊说明的话，默认继承Object。</span><br><span class="line"><span class="number">3</span>、Object类型中有哪些通用属性和方法呢？</span><br><span class="line">   属性：</span><br><span class="line">      prototype 属性 | <span class="function"><span class="keyword">constructor</span> 属性</span></span><br><span class="line"><span class="function">   方法：</span></span><br><span class="line"><span class="function">      <span class="title">toLocaleString</span> 方法 | <span class="title">toString</span> 方法 | <span class="title">valueOf</span> 方法</span></span><br><span class="line"><span class="function">      </span></span><br><span class="line"><span class="function">   重点掌握：</span></span><br><span class="line"><span class="function">      <span class="title">prototype</span>属性。（<span class="title">prototype</span>翻译为原型）这个属性可以</span></span><br><span class="line"><span class="function">      给对象动态扩展属性和方法。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">// 演示prototype属性</span></span><br><span class="line"><span class="comment">// 后期给Object类型的对象扩展一个doSome()方法</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.doSome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;测试prototype属性！~~~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 后期给Object类型的对象扩展一个username属性.</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.username = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用doSome方法</span></span><br><span class="line">obj.doSome()</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 访问对象的username属性</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.username)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 可以给String扩展一个方法吗？</span></span><br><span class="line"><span class="comment">// 给String类型的对象扩展一个mysubstr的方法.</span></span><br><span class="line"><span class="built_in">String</span>.prototype.mysubstr = <span class="function"><span class="keyword">function</span>(<span class="params">startIndex, length</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// this表示当前的字符串对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.substr(startIndex, length);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;abcdef&quot;</span>.mysubstr(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">//cde</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;kingsoft&quot;</span>.mysubstr(<span class="number">3</span>,<span class="number">3</span>))  <span class="comment">//gso</span></span><br></pre></td></tr></table></figure>
<p>定义类的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在JS中怎么定义类？包括两种方式</span><br><span class="line">   第一种方式：</span><br><span class="line">      <span class="function"><span class="keyword">function</span> 类名(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   第二种方式：</span><br><span class="line">      类名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">如果没有使用<span class="keyword">new</span><span class="type"></span>运算符调用,表示普通函数调用.不会在堆中<span class="keyword">new</span><span class="type"></span>对象，使用<span class="keyword">new</span><span class="type"></span>运算符去调用这个函数,显然是把它当做一个类来看待,这个会导致浏览器的堆当中开辟一个新对象!</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、==和===有什么区别？</span><br><span class="line">   == 等同运算符：只比较值是否相等。</span><br><span class="line">   === 全等运算符：既比较值是否相等，同时又比较数据类型是否相同。</span><br><span class="line"><span class="number">2</span>、<span class="literal">null</span> <span class="literal">undefined</span> <span class="literal">NaN</span>的区别？</span><br><span class="line">   类型都是不一样的</span><br><span class="line">   <span class="literal">null</span>和<span class="literal">undefined</span>是等同关系。</span><br></pre></td></tr></table></figure>
<h2 id="1-6-事件"><a href="#1-6-事件" class="headerlink" title="1.6 事件"></a>1.6 事件</h2><h3 id="1-6-1-JS中的常用事件"><a href="#1-6-1-JS中的常用事件" class="headerlink" title="1.6.1 JS中的常用事件"></a>1.6.1 JS中的常用事件</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">JS的常用事件：</span><br><span class="line">   （<span class="number">1</span>）blur             失去焦点</span><br><span class="line">   （<span class="number">5</span>）focus            获得焦点</span><br><span class="line">   </span><br><span class="line">   （<span class="number">3</span>）click            鼠标单击</span><br><span class="line">   （<span class="number">4</span>）dblclick          鼠标双击</span><br><span class="line">   </span><br><span class="line">   （<span class="number">6</span>）keydown          键盘按下</span><br><span class="line">   （<span class="number">7</span>）keyup            键盘弹起</span><br><span class="line">   </span><br><span class="line">   （<span class="number">9</span>）<span class="built_in">mousedown</span>         鼠标按下</span><br><span class="line">   （<span class="number">10</span>）mouseover        鼠标经过</span><br><span class="line">   （<span class="number">11</span>）<span class="built_in">mousemove</span>        鼠标移动</span><br><span class="line">   （<span class="number">12</span>）mouseout         鼠标离开</span><br><span class="line">   （<span class="number">13</span>）<span class="built_in">mouseup</span>          鼠标弹起</span><br><span class="line">   </span><br><span class="line">   （<span class="number">16</span>）submit          表单提交</span><br><span class="line">   （<span class="number">14</span>）reset           表单重置</span><br><span class="line">   </span><br><span class="line">   （<span class="number">15</span>）<span class="keyword">select</span>          文本被选定</span><br><span class="line">   （<span class="number">2</span>）change           下拉列表选中项改变，或文本框内容改变</span><br><span class="line">   （<span class="number">8</span>）load             页面加载完毕</span><br><span class="line">   </span><br><span class="line">提醒：任何一个事件都有对应的事件句柄。事件句柄是在事件名称前添加on就行。</span><br></pre></td></tr></table></figure>
<h3 id="1-6-2-注册事件"><a href="#1-6-2-注册事件" class="headerlink" title="1.6.2 注册事件"></a>1.6.2 注册事件</h3><h4 id="1-第一种方式"><a href="#1-第一种方式" class="headerlink" title="1 第一种方式"></a>1 第一种方式</h4><p>事件句柄</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">在标签中使用“事件句柄”，在事件句柄后面编写JS代码</span><br><span class="line">   当这个事件句柄对应的事件发生之后，“注册”在事件句柄当中的这个代码被监听器调用。</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">onclick</span> 鼠标单击的事件句柄，只有当鼠标单击事件click发生之后，注册在<span class="keyword">onclick</span>后面的代码会被执行。</span><br><span class="line">   </span><br><span class="line">   以下<span class="keyword">button</span>标签中的sayHello()函数，在页面打开的时候并不会执行，只是在页面打开的过程中完成事件的绑定，完成事件的注册，以后只有当该事件发生之后sayHello()函数才会执行，像这种函数又一种特殊的称谓：回调函数。英语单词叫做：callback function</span><br><span class="line">   </span><br><span class="line">   这个回调函数的特点是：</span><br><span class="line">      监听器负责调用，程序员不负责调用。</span><br><span class="line">      当事件发生之后，监听器会负责调用该函数。</span><br><span class="line">      像这种函数被称为回调函数。callback。</span><br></pre></td></tr></table></figure>
<h4 id="2-第二种方式"><a href="#2-第二种方式" class="headerlink" title="2 第二种方式"></a>2 第二种方式</h4><p>DOM</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">通过<span class="built_in">document</span>.getElementById()绑定赋给一个变量，然后给这个变量注册事件，绑定回调函数</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hellobtn&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">/* 定义一个函数 */</span></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;sum function invoke!&quot;</span>)</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">/* 根据id获取button对象 */</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> hellobtnElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;hellobtn&quot;</span>);</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">// 元素中有什么属性,就能&quot;点&quot;什么.</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">/* 这行代码在页面打开的时候会执行，这行代码执行的意义是：将sum这个回调函数绑定到hellobtn的click事件上 */</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">/* 这个回调函数sum在什么时候执行？click事件发生之后才会被监听器调用！ */</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">//hellobtnElt.onclick = sum  //不要这样写: hellobtnElt.onclick = sum()</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">// 回调函数可以是一个匿名函数</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 这行代码的执行只是完成事件click的注册,给click事件注册一个回调函数.</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 这行代码执行的时候，回调函数并不会被执行。</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 只有当这个按钮发生click事件之后,这个回调函数会自动被监听器来调用.</span></span></span><br><span class="line"><span class="javascript">   hellobtnElt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;我是一个回调函数，同时我没有名字，叫做匿名函数！&quot;</span>)</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">   <span class="comment">// hellobtnElt.onclick = myfun</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 当用此种方法绑定已经定义好的函数时，若函数无参，则不写括号</span></span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-7-代码的执行顺序"><a href="#1-7-代码的执行顺序" class="headerlink" title="1.7 代码的执行顺序"></a>1.7 代码的执行顺序</h2><p>自上而下执行</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">load</span>事件：</span><br><span class="line">   <span class="number">1</span>、<span class="keyword">load</span>事件不是在页面加载过程中触发的。</span><br><span class="line">   <span class="number">2</span>、<span class="keyword">load</span>事件是在页面中所有的元素全部加载完毕之后才发生的。</span><br></pre></td></tr></table></figure>
<h2 id="1-8-void运算符"><a href="#1-8-void运算符" class="headerlink" title="1.8 void运算符"></a>1.8 void运算符</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">   <span class="keyword">void</span>(表达式)</span><br><span class="line">   执行表达式，但不返回任何结果。</span><br><span class="line">   即使表达式有执行结果，最终经过<span class="keyword">void</span>运算之后就什么都没了。</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果href中不写路径，则默认为当前界面，并刷新--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;执行JS代码了!&#x27;)&quot;</span>&gt;</span>要求：保留住超链接的样式，并且点击我执行一段JS代码，执行完JS代码之后保证页面不跳转！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-9-控制语句"><a href="#1-9-控制语句" class="headerlink" title="1.9 控制语句"></a>1.9 控制语句</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、JS中的控制语句，和java相同，JS中除了java的控制语句之外，还有一些特别的：</span><br><span class="line">   选择结构：</span><br><span class="line">      <span class="keyword">if</span>语句</span><br><span class="line">      switch语句</span><br><span class="line">   循环结构：</span><br><span class="line">      <span class="keyword">for</span></span><br><span class="line">      <span class="keyword">while</span></span><br><span class="line">      <span class="keyword">do</span>..<span class="keyword">while</span></span><br><span class="line">   转向语句：</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"><span class="number">2</span>、JS有哪些特殊的语句呢？</span><br><span class="line">   了解一下，不需要掌握：</span><br><span class="line">      <span class="keyword">for</span>..<span class="keyword">in</span> 语句</span><br><span class="line">      with    语句</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Employee(<span class="number">7369</span>, <span class="string">&quot;SMITH&quot;</span>);</span><br><span class="line"><span class="comment">// console.log(x.empno + &quot;,&quot; + x.ename)</span></span><br><span class="line"><span class="comment">// with语句.</span></span><br><span class="line"><span class="function"><span class="title">with</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-10-数组"><a href="#1-10-数组" class="headerlink" title="1.10 数组"></a>1.10 数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在JS的数组中数据的类型随意,可以不一致.</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">true</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">5</span>,<span class="literal">false</span>,<span class="number">76</span>,<span class="number">3.14</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for..in语句</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> fdsafdsafds <span class="keyword">in</span> arr)&#123; <span class="comment">//arr是数组的话,fdsafdsafds就是数组的下标.</span></span><br><span class="line">    <span class="comment">//console.log(fdsafdsafds)</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr[fdsafdsafds])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for..in语句还可以取对象的属性值.</span></span><br><span class="line">Employee = <span class="function"><span class="keyword">function</span>(<span class="params">empno,ename</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.empno = empno;</span><br><span class="line">    <span class="built_in">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> Employee(<span class="number">7369</span>, <span class="string">&quot;SMITH&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e.empno + <span class="string">&quot;,&quot;</span> + e.ename)</span><br><span class="line"><span class="built_in">console</span>.log(e[<span class="string">&quot;empno&quot;</span>] + <span class="string">&quot;,&quot;</span> + e[<span class="string">&quot;ename&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// for..in语句遍历对象的属性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> fdsafdsa <span class="keyword">in</span> e)&#123; <span class="comment">// e是JS对象的话,fdsafdsa就是对象的属性名.并且属性名是字符串.</span></span><br><span class="line">    <span class="comment">//console.log(fdsafdsa)</span></span><br><span class="line">    <span class="comment">//console.log(typeof fdsafdsa) //string</span></span><br><span class="line">    <span class="built_in">console</span>.log(e[fdsafdsa])</span><br><span class="line">                </span><br><span class="line">    <span class="comment">// 这种方式就不行了.</span></span><br><span class="line">    <span class="comment">//console.log(e.fdsafdsa)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>含有内置对象Array</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建数组的第一种方式</span></span><br><span class="line"><span class="keyword">var</span> a = []; <span class="comment">//创建一个长度为0的数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JS中数组中的元素类型可以不一致.</span></span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="literal">false</span>,<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS中数组的长度是可变的.</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">console</span>.log(a2[a2.length - <span class="number">1</span>]) <span class="comment">// 数组有length属性获取数组中元素的个数.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有扩容之前:[12,3,4,5,6,false,true]</span></span><br><span class="line"><span class="comment">// a2[100]会导致自动扩容:[12,3,4,5,6,false,true,undefined,undefined,undefined....., 1234]</span></span><br><span class="line"><span class="comment">// JS中数组没有下标越界这一说!</span></span><br><span class="line">a2[<span class="number">100</span>] = <span class="number">1234</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组的长度=&quot;</span> + a2.length) <span class="comment">//数组的长度=101 (下标0到100，正好101个元素)</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[<span class="number">100</span>]) <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[<span class="number">99</span>]) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[-<span class="number">100</span>]) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.length) <span class="comment">//101 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数组的第二种方式</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建长度为0的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// 创建长度为3的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.length) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">   <span class="comment">// 3个undefined</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;----&gt;&quot;</span> + arr2[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">67</span>, <span class="number">7</span>); <span class="comment">// 创建有指定值的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;$$$$$$=====&gt;&quot;</span> + arr3[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr3[<span class="number">3</span>] = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;******=====&gt;&quot;</span> + arr3[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Array常用方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为0的数组对象</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组的元素个数是：&quot;</span> + a.length)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">a.push(<span class="number">100</span>);</span><br><span class="line">a.push(<span class="number">200</span>);</span><br><span class="line">a.push(<span class="number">300</span>);</span><br><span class="line">a.push(<span class="number">10</span>);</span><br><span class="line">a.push(<span class="number">20</span>);</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组的元素个数是：&quot;</span> + a.length)</span><br><span class="line">            </span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// push方法:向数组中添加一个元素,并且加到末尾.</span></span><br><span class="line">a.push(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.length) <span class="comment">//4</span></span><br><span class="line"><span class="comment">// pop方法:将数组末尾的元素弹出,并且数组长度-1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.pop()) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a.length) <span class="comment">//3</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 注意:数组的push和pop方法联合起来,实际上是模拟了栈数据结构!</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.push(<span class="number">1</span>)</span><br><span class="line">arr.push(<span class="number">2</span>)</span><br><span class="line">arr.push(<span class="number">3</span>)</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 翻转数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">65</span>,<span class="number">6</span>,<span class="number">67</span>];</span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line">array.reverse();</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;%%%%====&gt;&quot;</span> + array[i])</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 连接(将数组中的每一个元素以“$”连接成一个字符串)</span></span><br><span class="line"><span class="comment">//var str = array.join(&quot;$&quot;)</span></span><br><span class="line"><span class="keyword">var</span> str = array.join(<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">//&quot;67-6-65-5-1&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-11-内置对象Date"><a href="#1-11-内置对象Date" class="headerlink" title="1.11 内置对象Date"></a>1.11 内置对象Date</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取系统当前时间的.</span></span><br><span class="line"><span class="comment">//console.log(time.getYear()) //121 (getYear()方法过时了，不建议用了，获取的年是两位的。1985最终获取之后是85)</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">//Date Thu Mar 26 2021 17:55:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 进行格式转换</span></span><br><span class="line"><span class="comment">// 可以将年月日的信息都拿出来.然后自己拼接格式.</span></span><br><span class="line"><span class="keyword">var</span> year = time.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = time.getMonth(); <span class="comment">// 0-11 表示 1-12</span></span><br><span class="line"><span class="comment">//var day = time.getDay(); // 获取的是星期几</span></span><br><span class="line"><span class="keyword">var</span> day = time.getDate(); <span class="comment">// 获取一个月份中的第几天</span></span><br><span class="line"><span class="built_in">console</span>.log(year + <span class="string">&quot;年&quot;</span> + (month + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 获取时分秒毫秒</span></span><br><span class="line"><span class="comment">/* time.getHours()</span></span><br><span class="line"><span class="comment">time.getMinutes()</span></span><br><span class="line"><span class="comment">time.getSeconds()</span></span><br><span class="line"><span class="comment">time.getMilliseconds() */</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//在JS中提供了一个函数toLocaleString(),其实这个函数是Object中的.</span></span><br><span class="line"><span class="comment">// 转换成具有本地语言环境的日期格式</span></span><br><span class="line"><span class="keyword">var</span> strTime = time.toLocaleString();</span><br><span class="line"><span class="built_in">console</span>.log(strTime) <span class="comment">//2021/3/26 下午5:59:55</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 怎么获取自&quot;1970年1月1日 00:00:00 000&quot;到系统当前时间的总毫秒数.</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> timeMillis = now.getTime(); <span class="comment">//这个getTime()方法是一个重点方法.</span></span><br><span class="line"><span class="built_in">console</span>.log(timeMillis)</span><br></pre></td></tr></table></figure>
<h1 id="2-BOM"><a href="#2-BOM" class="headerlink" title="2 BOM"></a>2 BOM</h1><p>浏览器是JavaScript非常重要的运行环境，浏览器本身又作为一个应用程序需要对其本身进行操作，所以浏览器会有对应的对象模型，可以将BOM看成连接JavaScript脚本和浏览器窗口的桥梁</p>
<p>window对象：①全局对象，Node中为global，浏览器为window对象；②浏览器窗口对象（提供了对浏览器操作的相关的API）</p>
<p>BOM主要包括以下对象模型：</p>
<ul>
<li><p><code>window</code>：包括全局属性、方法，控制浏览器窗口相关的属性、方法</p>
</li>
<li><p><code>location</code>：浏览器连接到的对象的位置（URL）</p>
</li>
<li><code>history</code>：操作浏览器的历史</li>
<li><code>document</code>：当前窗口操作文档的对象</li>
</ul>
<h2 id="2-1-window全局对象"><a href="#2-1-window全局对象" class="headerlink" title="2.1 window全局对象"></a>2.1 window全局对象</h2><p>window默认给我们提供了全局的函数和类：<code>setTimeout</code>、<code>Math</code>、<code>Date</code>、<code>Object</code>等；全局通过<code>var</code>声明的变量，会被添加到window上</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;foo function&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.message)</span><br><span class="line"><span class="built_in">window</span>.foo()</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout&quot;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">window</span>.Object()</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">window</span>.Date()</span><br><span class="line"><span class="built_in">console</span>.log(date)</span><br></pre></td></tr></table></figure>
<h2 id="2-2-window窗口对象"><a href="#2-2-window窗口对象" class="headerlink" title="2.2 window窗口对象"></a>2.2 window窗口对象</h2><p>window对象包含的内容：（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window）">https://developer.mozilla.org/zh-CN/docs/Web/API/Window）</a></p>
<p>第一：包含大量的属性，localStorage、console、location、history、screenX、scrollX等等（大概60+个属性）；</p>
<p>第二：包含大量的方法，alert、close、scrollTo、open等等（大概40+个方法）；</p>
<p>第三：包含大量的事件，focus、blur、load、hashchange等等（大概30+个事件）；</p>
<p>第四：包含从EventTarget继承过来的方法，addEventListener、removeEventListener、dispatchEvent方法；</p>
<h2 id="2-3-window常见的属性"><a href="#2-3-window常见的属性" class="headerlink" title="2.3 window常见的属性"></a>2.3 window常见的属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器高度</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.outerHeight)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.innerHeight)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;screenX:&quot;</span>, <span class="built_in">window</span>.screenX)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;screenY:&quot;</span>, <span class="built_in">window</span>.screenY)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.screenY)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.screenX)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="2-4-window常见的方法"><a href="#2-4-window常见的方法" class="headerlink" title="2.4 window常见的方法"></a>2.4 window常见的方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#close&quot;</span>)</span><br><span class="line">closeBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scrollBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#scroll&quot;</span>)</span><br><span class="line">scrollBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    scrollTo(&#123;<span class="attr">top</span>: <span class="number">1000</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> openBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;open&quot;</span>)</span><br><span class="line">openBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    open(<span class="string">&quot;./about.html&quot;</span>, <span class="string">&quot;_self&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-5-window常见的事件"><a href="#2-5-window常见的事件" class="headerlink" title="2.5 window常见的事件"></a>2.5 window常见的事件</h2><h3 id="2-5-1-常见的事件"><a href="#2-5-1-常见的事件" class="headerlink" title="2.5.1 常见的事件"></a>2.5.1 常见的事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;窗口获取到焦点&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;窗口失去了焦点&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;页面加载完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#hash&quot;</span>)</span><br><span class="line">hashBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    location.hash = <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hash被修改了&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-2-eval函数"><a href="#2-5-2-eval函数" class="headerlink" title="2.5.2 eval函数"></a>2.5.2 eval函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eval函数可以将一个字符串当做一段JS代码解释执行!</span></span><br><span class="line"><span class="built_in">window</span>.eval(<span class="string">&quot;var i = 100&quot;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment">//var i = 100</span></span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line"><span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
<h3 id="2-5-3-窗口的开启和关闭"><a href="#2-5-3-窗口的开启和关闭" class="headerlink" title="2.5.3 窗口的开启和关闭"></a>2.5.3 窗口的开启和关闭</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- window.open开启一个新窗口 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- window.open(url, target) ，和超链接效果差不多，都是可以发送请求给服务器的--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，默认是开启一个新窗口。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在当前窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_self&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在新窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_blank&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在父窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_parent&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在顶级窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_top&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;002.html&#x27;)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 002窗口</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.close()&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--点击按钮后回退到上一个窗口--&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器的网页访问（栈）</p>
<h3 id="2-5-4-alert和confirm方法"><a href="#2-5-4-alert和confirm方法" class="headerlink" title="2.5.4 alert和confirm方法"></a>2.5.4 alert和confirm方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 弹出消息框</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.alert(<span class="string">&quot;hello world!&quot;</span>);</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 删除数据之前一定要提示用户是否真的删除,用户点击了确定才表示真的删除.</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 确认框</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//var ok = window.confirm(&quot;亲，确认删除数据吗？&quot;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//console.log(ok) //返回值是一个布尔类型.</span></span></span><br><span class="line">      </span><br><span class="line">      /* if(ok)&#123;</span><br><span class="line"><span class="javascript">         alert(<span class="string">&quot;数据正在删除中，请稍后...&quot;</span>)</span></span><br><span class="line">      &#125; */</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&quot;亲，确认删除数据吗？&quot;</span>))&#123;</span></span><br><span class="line"><span class="javascript">         alert(<span class="string">&quot;数据正在删除中，请稍后...&quot;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 确认or取消</span></span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sayHello()&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-5-5-将当前窗口设置为顶级窗口"><a href="#2-5-5-将当前窗口设置为顶级窗口" class="headerlink" title="2.5.5 将当前窗口设置为顶级窗口"></a>2.5.5 将当前窗口设置为顶级窗口</h3><p>先开始005.html出现在此页面的iframe标签中，点击按钮则打开005.html，变为顶级窗口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>将当前窗口设置为顶级窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;005.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>005.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        005页面</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="comment">/* 如果当前这个窗口不是顶级窗口的话，将当前窗口设置为顶级窗口。 */</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">setTop</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// window是当前浏览器窗口,代表005.html</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// “当前窗口的顶级窗口&quot;如果&quot;不是自己&quot;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.top就是当前窗口对应的顶级窗口.</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.self表示当前自己这个窗口</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.top 是004窗口</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.self 是005窗口</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//console.log((window.top != window.self))</span></span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">				<span class="keyword">if</span>(<span class="built_in">window</span>.top != <span class="built_in">window</span>.self)&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 将当前窗口设置为顶级窗口</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// window.self.location 是005的地址</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 将顶级窗口的window.top.location地址设置为005</span></span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.top.location = <span class="built_in">window</span>.self.location;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setTop()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;如果当前窗口不是顶级窗口的话,将当前窗口设置为顶级窗口&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-6-EventTarget"><a href="#2-6-EventTarget" class="headerlink" title="2.6 EventTarget"></a>2.6 EventTarget</h2><p>Window继承自EventTarget，所以会继承其中的属性和方法：</p>
<ul>
<li><p>addEventListener：注册某个事件类型以及事件处理函数；</p>
</li>
<li><p>removeEventListener：移除某个事件类型以及事件处理函数；</p>
</li>
<li><p>dispatchEvent：派发某个事件类型到EventTarget上；</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;window发生了滚动~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> clickHandler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;window发生了点击~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, scrollHandler)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;click&quot;</span>, clickHandler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> removeBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#removeEvent&quot;</span>)</span><br><span class="line">removeBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;-------&quot;</span>)</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;click&quot;</span>, scrollHandler)</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;scroll&quot;</span>, clickHandler())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  dispatchBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;dispatch&quot;</span>)</span><br><span class="line">dispatchBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">&quot;coderway&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;coderwhy&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;监听了coderwhy事件&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>默认事件监听<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">https://developer.mozilla.org/zh-CN/docs/Web/Events</a></p>
<h2 id="2-7-location对象"><a href="#2-7-location对象" class="headerlink" title="2.7 location对象"></a>2.7 location对象</h2><h3 id="2-7-1-location对象常见的属性"><a href="#2-7-1-location对象常见的属性" class="headerlink" title="2.7.1 location对象常见的属性"></a>2.7.1 location对象常见的属性</h3><p>location对象用于表示window上当前链接到的URL信息</p>
<p>常见的属性：</p>
<p><code>href</code>：当前window对应的超链接URL，整个URL</p>
<p><code>protocol</code>：当前的协议</p>
<p><code>host</code>：主机地址</p>
<p><code>hostname</code>：主机地址（不带端口）</p>
<p><code>port</code>：端口</p>
<p><code>pathname</code>：路径</p>
<p><code>search</code>：查询字符串</p>
<p><code>hash</code>：哈希值</p>
<p><code>username</code>：URL中的username</p>
<p><code>password</code>：URL中的password</p>
<p><strong>※ window.location.href</strong></p>
<p>跳转页面可以通过多种方式：（这些都是发送请求！！！！）</p>
<ul>
<li>直接在浏览器地址栏上写URL。（重点）</li>
<li>第二种方式：可以点击超链接（重点）</li>
<li>第三种方式：提交表单（重点）</li>
<li>第四种方式：window.open(url,target)  （了解）</li>
<li>第五种方式：js代码（重点）<ul>
<li><code>window.location.href</code></li>
<li><code>window.location</code></li>
<li><code>document.location.href</code></li>
<li><code>document.location</code></li>
</ul>
</li>
</ul>
<p>通过浏览器向服务器发送请求，通常是以上的五种方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">goBaidu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//window.location.href = &quot;http://www.baidu.com&quot;;</span></span><br><span class="line">      <span class="comment">//window.location = &quot;http://www.jd.com&quot;;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//document.location.href = &quot;http://www.126.com&quot;;</span></span><br><span class="line">      <span class="built_in">document</span>.location = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;百度&quot;</span> onclick=<span class="string">&quot;goBaidu();&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-7-2-location对象常见的方法"><a href="#2-7-2-location对象常见的方法" class="headerlink" title="2.7.2 location对象常见的方法"></a>2.7.2 location对象常见的方法</h3><p><code>assign</code>：赋值一个新的URL，并且跳转到该URL中</p>
<p><code>replace</code>：打开一个新的URL，并且跳转到该URL中（不同的是不会在浏览记录中留下之前的记录）</p>
<p><code>reload</code>：重新加载页面，可以传入一个Boolean类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> locationBtn = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#location&quot;</span>)</span><br><span class="line">locationBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    location.assign(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    location.assign(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    location.reload()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-8-history对象"><a href="#2-8-history对象" class="headerlink" title="2.8 history对象"></a>2.8 history对象</h2><p>history对象允许我们访问浏览器曾经的会话历史记录</p>
<h3 id="2-8-1-history对象常见的属性"><a href="#2-8-1-history对象常见的属性" class="headerlink" title="2.8.1 history对象常见的属性"></a>2.8.1 history对象常见的属性</h3><p><code>length</code>：会话中的记录条数</p>
<p><code>state</code>：当前保留的状态值</p>
<h3 id="2-8-2-history对象常见的方法"><a href="#2-8-2-history对象常见的方法" class="headerlink" title="2.8.2 history对象常见的方法"></a>2.8.2 history对象常见的方法</h3><p><code>back()</code>：返回上一页，等价于history.go(-1)</p>
<p><code>forward()</code>：前进下一页，等价于history.go(1)</p>
<p><code>go()</code>：加载历史中的某一页</p>
<p><code>pushState()</code>：打开一个指定的地址</p>
<p><code>replaceState()</code>：打开一个指定的地址，并且使用replace（不会在浏览记录中留下之前的记录）</p>
<h1 id="3-DOM"><a href="#3-DOM" class="headerlink" title="3 DOM"></a>3 DOM</h1><p>document对象是DOM的顶级对象，严格意义上来说，window是包含document的，通过DOM操作元素</p>
<h2 id="3-1-BOM和DOM的关系"><a href="#3-1-BOM和DOM的关系" class="headerlink" title="3.1 BOM和DOM的关系"></a>3.1 BOM和DOM的关系</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.document)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>)</span><br><span class="line">                </span><br><span class="line">    <span class="comment">// window对象是BOM的顶级老大</span></span><br><span class="line">    <span class="comment">// document对象是DOM的顶级老大</span></span><br><span class="line">    <span class="comment">// 实际上完整的写法是: window.document, 只不过window. 可以省略.</span></span><br><span class="line">    <span class="comment">// var divObj = window.document.getElementById(&quot;div1&quot;)</span></span><br><span class="line">    <span class="keyword">var</span> divObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;========&gt;&quot;</span> + divObj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-EventTarget"><a href="#3-2-EventTarget" class="headerlink" title="3.2 EventTarget"></a>3.2 EventTarget</h2><p>因为继承自EventTarget，所以也可以使用EventTarget方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;document被点击&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> boxDiv = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#box&quot;</span>)</span><br><span class="line">boxDiv.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;box被点击&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="3-3-Node节点"><a href="#3-3-Node节点" class="headerlink" title="3.3 Node节点"></a>3.3 Node节点</h2><p>所有的DOM节点类型都继承自Node接口<code>https://developer.mozilla.org/zh-CN/docs/Web/API/Node</code></p>
<p>几个重要的属性</p>
<p><code>nodeName</code>：node节点的名称</p>
<p><code>nodeType</code>：可以区分节点的类型</p>
<p><code>nodeValue</code>：node节点的值</p>
<p><code>childNodes</code>：所有的子节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 document</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;document:&quot;</span>, <span class="built_in">document</span>.nodeName, <span class="built_in">document</span>.nodeType, <span class="built_in">document</span>.nodeValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 element</span></span><br><span class="line"><span class="keyword">const</span> boxDiv = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#box&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;element:&quot;</span>, boxDiv.nodeName, boxDiv.nodeType, boxDiv.nodeValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 childNodes</span></span><br><span class="line"><span class="built_in">console</span>.log(boxDiv.childNodes)</span><br><span class="line"><span class="keyword">const</span> comment = boxDiv.childNodes[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> text = boxDiv.childNodes[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;comment:&quot;</span>, comment.nodeName, comment.nodeType, comment.nodeValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 方法</span></span><br><span class="line"><span class="keyword">const</span> cloneBoxDiv = boxDiv.cloneNode(<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(cloneBoxDiv)</span><br></pre></td></tr></table></figure>
<h2 id="3-4-Document"><a href="#3-4-Document" class="headerlink" title="3.4 Document"></a>3.4 Document</h2><h3 id="3-4-1-属性"><a href="#3-4-1-属性" class="headerlink" title="3.4.1 属性"></a>3.4.1 属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// title</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&quot;Coderwhy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// body/head</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.head)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.children)</span><br><span class="line"></span><br><span class="line"><span class="comment">// location</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.location)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.location === <span class="built_in">document</span>.location)</span><br></pre></td></tr></table></figure>
<h3 id="3-4-2-方法"><a href="#3-4-2-方法" class="headerlink" title="3.4.2 方法"></a>3.4.2 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-5-Element"><a href="#3-5-Element" class="headerlink" title="3.5 Element"></a>3.5 Element</h2><h2 id="3-6-事件监听"><a href="#3-6-事件监听" class="headerlink" title="3.6 事件监听"></a>3.6 事件监听</h2><h3 id="3-6-1-认识事件监听"><a href="#3-6-1-认识事件监听" class="headerlink" title="3.6.1 认识事件监听"></a>3.6.1 认识事件监听</h3><h3 id="3-6-2-事件流"><a href="#3-6-2-事件流" class="headerlink" title="3.6.2 事件流"></a>3.6.2 事件流</h3><h3 id="3-6-3-事件冒泡"><a href="#3-6-3-事件冒泡" class="headerlink" title="3.6.3 事件冒泡"></a>3.6.3 事件冒泡</h3><h3 id="3-6-4"><a href="#3-6-4" class="headerlink" title="3.6.4"></a>3.6.4</h3><h2 id="3-2-捕捉回车键"><a href="#3-2-捕捉回车键" class="headerlink" title="3.2 捕捉回车键"></a>3.2 捕捉回车键</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById()</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// y代表的就是一个keydown事件对象.</span></span><br><span class="line">    <span class="comment">// console.log(&quot;keydown.....&quot;)</span></span><br><span class="line">    <span class="comment">// 在这里捕捉键值,当用户敲回车键了,则登录</span></span><br><span class="line">    <span class="comment">// 新知识点:所有的“键盘事件对象”,有keyCode属性,这个keyCode属性可以获取键值.</span></span><br><span class="line">    <span class="comment">// keyCode是键盘事件对象的属性.</span></span><br><span class="line">    <span class="comment">// 记住:键盘上回车键的键值永远都是13.ECS键的键值永远都是27.</span></span><br><span class="line">    <span class="keyword">if</span>(y.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;登录，正在进行身份认证，请稍后...&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y.keyCode == <span class="number">27</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;系统安全退出了！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3-操作div和span"><a href="#3-3-操作div和span" class="headerlink" title="3.3 操作div和span"></a>3.3 操作div和span</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 设置div中的内容</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> divElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 通过元素的innerHTML属性来设置内部的内容</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// innerHTML 是属性,不是一个方法.</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// innerHTML属性会将后面的字符串当做一段HTML代码解释并执行!</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         divElt.innerHTML = &quot;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>用户名不能为空！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>&quot;;</span></span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// innerText也可以设置元素当中的内容.和innerHTML有什么区别呢？</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// innerText后面的字符串即使是一个HTML代码,也不会当做HTML执行,只是看做普通文本.</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         //divElt.innerText = &quot;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>用户名不能为空！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>&quot;;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> spanbtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;spanbtn&quot;</span>);</span></span><br><span class="line"><span class="javascript">      spanbtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> span1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;span1&quot;</span>);</span></span><br><span class="line"><span class="javascript">         <span class="comment">//span1.innerHTML = &quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         span1.innerText = &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置div中的内容&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;spanbtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置span中的内容&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- div独占一行！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- span的大小会随着span中的内容多少变化而变化。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-4-复选框的全选和取消全选"><a href="#3-4-复选框的全选和取消全选" class="headerlink" title="3.4 复选框的全选和取消全选"></a>3.4 复选框的全选和取消全选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="comment">// 页面加载完毕之后</span></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">      /* // 给id = &quot;firstChk&quot;元素绑定click</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> firstChkElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;firstChk&quot;</span>);</span></span><br><span class="line"><span class="javascript">      firstChkElt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取到所有的复选框对象</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(firstChkElt.checked)&#123; <span class="comment">//get复选框的选中状态</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> aihaoChk = aihaos[i];</span></span><br><span class="line"><span class="javascript">               aihaoChk.checked = <span class="literal">true</span>; <span class="comment">//set复选框的选中状态</span></span></span><br><span class="line">            &#125;  </span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> aihaoChk = aihaos[i];</span></span><br><span class="line"><span class="javascript">               aihaoChk.checked = <span class="literal">false</span>;<span class="comment">//set复选框的选中状态</span></span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; */</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 改良代码</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> firstChkElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;firstChk&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span></span><br><span class="line"><span class="javascript">      firstChkElt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line">            aihaos[i].checked = firstChkElt.checked;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 给每一个name=&quot;aihao&quot;复选框绑定鼠标单击事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">         aihaos[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在这里控制第一个复选框的选中状态</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第一个复选框选中还是不选中取决于什么？</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 所有的aihao复选框的总数量,如果和总选中的数量相同的时候,第一个复选框选中,反之取消选中.</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> count = aihaos.length; <span class="comment">//总数量</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> checkedCount = <span class="number">0</span>; <span class="comment">//默认选中的数量是0</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line">               if(aihaos[i].checked)&#123;</span><br><span class="line">                  checkedCount++;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="javascript">            &#125; <span class="comment">// 循环结束之后,所有的被选中的复选框数量就统计完了.</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第一个复选框是选中呢,还是取消选中呢？</span></span></span><br><span class="line">            firstChkElt.checked = (count == checkedCount);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firstChk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>/&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>/&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;firehair&quot;</span>/&gt;</span>烫头</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-5-获取一个文本框的value"><a href="#3-5-获取一个文本框的value" class="headerlink" title="3.5 获取一个文本框的value"></a>3.5 获取一个文本框的value</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 获取文本框对象</span></span><br><span class="line">         <span class="keyword">var</span> usernameElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">         <span class="comment">// 获取value</span></span><br><span class="line">         <span class="keyword">var</span> username = usernameElt.value; <span class="comment">// 文本框的value属性用来获取用户填写的信息.</span></span><br><span class="line">         alert(username)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;获取用户名&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-6-获取下拉列表选中项的value"><a href="#3-6-获取下拉列表选中项的value" class="headerlink" title="3.6 获取下拉列表选中项的value"></a>3.6 获取下拉列表选中项的value</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">数据库表存储省份和市区的数据</span><br><span class="line">t_province</span><br><span class="line">code(pk)     name</span><br><span class="line">----------------------</span><br><span class="line">001          山东省</span><br><span class="line">002          山西省</span><br><span class="line"></span><br><span class="line">t_city</span><br><span class="line">code(pk)       name             pcode(fk)</span><br><span class="line">------------------------------------------</span><br><span class="line">1               济南             001</span><br><span class="line">2               烟台             001</span><br><span class="line"></span><br><span class="line">只要前端浏览器能够获取到山东省的code，假设code=001</span><br><span class="line">那么后台java程序执行sql语句的时候这样执行：</span><br><span class="line"><span class="code">   select * from t_city where pcode = ?;</span></span><br><span class="line"><span class="code">   ps.setString(1, &quot;001&quot;);</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这里的<span class="built_in">this</span>代表当前的下拉列表对象。--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;province&quot;</span> onchange=<span class="string">&quot;alert(this.value)&quot;</span>&gt; </span><br><span class="line">   &lt;option value =<span class="string">&quot;&quot;</span>&gt;--请选择省份--&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;001&quot;</span>&gt;河北省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;002&quot;</span>&gt;河南省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;003&quot;</span>&gt;山东省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;004&quot;</span>&gt;山西省&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;province2&quot;</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">//这里的this代表的就是当前发生change事件的这个节点对象.</span></span><br><span class="line">         <span class="comment">//console.log(this.value)</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;province2&quot;</span>).value)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;province2&quot;</span> &gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;&quot;</span>&gt;--请选择省份--&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;001&quot;</span>&gt;河北省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;002&quot;</span>&gt;河南省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;003&quot;</span>&gt;山东省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;004&quot;</span>&gt;山西省&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-7-显示网页时钟"><a href="#3-7-显示网页时钟" class="headerlink" title="3.7 显示网页时钟"></a>3.7 显示网页时钟</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /* window.onload = function()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;displayTimeBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取系统当前时间,把时间显示到div中</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 显示到div当中</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;timediv&quot;</span>).innerHTML = nowTime.toLocaleString();</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125; */</span><br><span class="line">   </span><br><span class="line">   /* function display()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;显示时间&quot;</span>)</span></span><br><span class="line">   &#125; */</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">// 设置每个1S执行一次display()函数</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">//window.setInterval(&quot;display()&quot;, 1000)</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;displayTimeBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 每隔1S调用一次displayTime()函数(设置周期性调用。)</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// 返回值是一个可以取消周期性调用的value.</span></span></span><br><span class="line"><span class="javascript">         v = <span class="built_in">window</span>.setInterval(<span class="string">&quot;displayTime()&quot;</span>, <span class="number">1000</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;stopTimeBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 停止周期性的调用.</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">window</span>.clearInterval(v)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">displayTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;timediv&quot;</span>).innerHTML = nowTime.toLocaleString();</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示系统当前时间&quot;</span> <span class="attr">id</span>=<span class="string">&quot;displayTimeBtn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;时间停止&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stopTimeBtn&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timediv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-8-拼接html的方式，设置table的tbody"><a href="#3-8-拼接html的方式，设置table的tbody" class="headerlink" title="3.8 拼接html的方式，设置table的tbody"></a>3.8 拼接html的方式，设置table的tbody</h2><p>（非常具有代表性的案例，必须敲5遍。）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">/* 从java过来一个json格式的字符串 */</span></span><br><span class="line">   <span class="keyword">var</span> fromJava = <span class="string">&quot;&#123;\&quot;total\&quot; : 2, \&quot;students\&quot; : [&#123;\&quot;name\&quot;:\&quot;李四\&quot;,\&quot;age\&quot;:19&#125;,&#123;\&quot;name\&quot;:\&quot;王五\&quot;,\&quot;age\&quot;:18&#125;]&#125;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;displaybtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 解析上面的json格式的字符串,将解析出来的数据放到tbody当中.</span></span><br><span class="line">         <span class="comment">// 转化json对象</span></span><br><span class="line">         <span class="built_in">window</span>.eval(<span class="string">&quot;var json = &quot;</span> + fromJava) <span class="comment">//json对象有了.</span></span><br><span class="line">         <span class="comment">// 设置总记录条数</span></span><br><span class="line">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;totalSpan&quot;</span>).innerHTML = json.total;</span><br><span class="line">         <span class="comment">// 拼接HTML</span></span><br><span class="line">         <span class="keyword">var</span> studentArray = json.students;</span><br><span class="line">         <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; studentArray.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> s = studentArray[i]</span><br><span class="line">            html += <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+s.name+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+s.age+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 将以上拼接的HTML设置到tbody当中</span></span><br><span class="line">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;stutbody&quot;</span>).innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;查看学生信息列表&quot;</span> id=<span class="string">&quot;displaybtn&quot;</span> /&gt;</span><br><span class="line">&lt;hr &gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">&quot;1px&quot;</span> width=<span class="string">&quot;40%&quot;</span>&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">      &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;学生姓名&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;学生年龄&lt;/th&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tbody id=<span class="string">&quot;stutbody&quot;</span>&gt;</span><br><span class="line">      &lt;!-- &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;张三&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">20</span>&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">2</span> Vue-CLI开发Vue项目&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">22</span>&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt; --&gt;</span><br><span class="line">   &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">总记录条数：&lt;span id=<span class="string">&quot;totalSpan&quot;</span>&gt;<span class="number">0</span>&lt;/span&gt;条</span><br><span class="line">&lt;!-- 总记录条数：<span class="number">2</span>条 --&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-9-表单验证"><a href="#3-9-表单验证" class="headerlink" title="3.9 表单验证"></a>3.9 表单验证</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /* </span><br><span class="line">   （1）用户名不能为空</span><br><span class="line">   （2）用户名必须在6-14位之间</span><br><span class="line">   （3）用户名只能有数字和字母组成，不能含有其它符号（正则表达式）</span><br><span class="line">   （4）密码和确认密码一致</span><br><span class="line">   （5）统一失去焦点验证</span><br><span class="line">   （6）错误提示信息统一在span标签中提示，并且要求字体12号，红色。</span><br><span class="line">   （7）文本框再次获得焦点后，清空错误提示信息</span><br><span class="line">   （8）最终表单中所有项均合法方可提交</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> nameErrorSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;nameError&quot;</span>);</span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 给id=&quot;username&quot;的节点绑定blur事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> usernameElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">      usernameElt.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取用户名</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> username = usernameElt.value;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 去除掉前后空白</span></span></span><br><span class="line">         username = username.trim();</span><br><span class="line"><span class="javascript">         <span class="comment">// 用户名不能为空,不能为空串</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">//if(username.length == 0)&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">            nameErrorSpan.innerHTML = <span class="string">&quot;用户名不能为空&quot;</span>;</span></span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 用户名不是空,继续判断长度是否合法</span></span></span><br><span class="line">            if(username.length &lt; 6 || username.length &gt; 14)&#123;</span><br><span class="line"><span class="javascript">               nameErrorSpan.innerHTML = <span class="string">&quot;用户名长度必须在[6-14]之间&quot;</span>;  </span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 用户名不为空,并且长度也合法,接下来继续判断用户名中是否有特殊符号</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> regExp = <span class="regexp">/^[a-zA-Z0-9]+$/</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> ok = regExp.test(username)</span></span><br><span class="line">               if(ok)&#123;</span><br><span class="line"><span class="javascript">                  <span class="comment">// 合法</span></span></span><br><span class="line"><span class="javascript">                  nameErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">               &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 不合法</span></span></span><br><span class="line"><span class="javascript">                  nameErrorSpan.innerHTML = <span class="string">&quot;用户名只能由数字和字母组成&quot;</span>; </span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 获得焦点:清空span的错误信息.</span></span></span><br><span class="line"><span class="javascript">      usernameElt.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         nameErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> pwdErrorSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwdError&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 确认密码失去焦点就验证.</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> userpwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;userpwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//获取确认密码</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> confirmpwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//进行比对</span></span></span><br><span class="line">         if(userpwd != confirmpwd)&#123;</span><br><span class="line"><span class="javascript">            pwdErrorSpan.innerHTML = <span class="string">&quot;密码和确认密码不一致&quot;</span>;</span></span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            pwdErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         pwdErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;regbtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// 验证用户名,怎么验证用户名？让用户名文本框失去焦点</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// 重点:使用JS代码怎么触发事件？？？？？？</span></span></span><br><span class="line"><span class="javascript">         usernameElt.focus(); <span class="comment">//触发文本框的获取焦点事件</span></span></span><br><span class="line"><span class="javascript">         usernameElt.blur();<span class="comment">//触发文本框的失去焦点事件</span></span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// 验证密码,怎么验证密码？让确认密码失去焦点</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).focus();</span></span><br><span class="line"><span class="javascript">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).blur();</span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// 当所有的span都是空的表示表单合法</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(nameErrorSpan.innerHTML == <span class="string">&quot;&quot;</span> &amp;&amp; pwdErrorSpan.innerHTML == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//提交</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> formObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;userForm&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过调用submit()方法来完成表单的提交</span></span></span><br><span class="line">            formObj.submit();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;userForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/oa/save&quot;</span>&gt;</span></span><br><span class="line">   用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nameError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userpwd&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 确认密码是不需要提交给服务器的，这个name不要写！ --&gt;</span></span><br><span class="line">   确认密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirmpwd&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwdError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 表单所有项目都合法才能提交 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;input type=&quot;submit&quot; value=&quot;注册&quot; /&gt; --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- button不能提交表单，但是JS代码可以提交表单 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">id</span>=<span class="string">&quot;regbtn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-10-获取元素的三种方式"><a href="#3-10-获取元素的三种方式" class="headerlink" title="3.10 获取元素的三种方式"></a>3.10 获取元素的三种方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;2&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;3&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;4&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">// 这是JS中非常经典的获取元素的三种方式.</span></span><br><span class="line">   <span class="comment">// 根据id获取一个元素</span></span><br><span class="line">   <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(div1)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//根据name属性获取多个元素</span></span><br><span class="line">   <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(aihaos)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据标签的名字获取</span></span><br><span class="line">   <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(divs)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="4-一些案例"><a href="#4-一些案例" class="headerlink" title="4 一些案例"></a>4 一些案例</h1><h2 id="4-1-根据哈希值切换页面的显示内容"><a href="#4-1-根据哈希值切换页面的显示内容" class="headerlink" title="4.1 根据哈希值切换页面的显示内容"></a>4.1 根据哈希值切换页面的显示内容</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contentEl = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.content&#x27;</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;hashchange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(location.hash) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;#/home&quot;</span>:</span><br><span class="line">            contentEl.innerHTML = <span class="string">&quot;Home&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;#/about&quot;</span>:</span><br><span class="line">            contentEl.innerHTML = <span class="string">&quot;about&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            contentEl.innerHTML = <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="4-2-阻止默认跳转行为在本页面显示内容"><a href="#4-2-阻止默认跳转行为在本页面显示内容" class="headerlink" title="4.2 阻止默认跳转行为在本页面显示内容"></a>4.2 阻止默认跳转行为在本页面显示内容</h2><h3 id="HTML5的History"><a href="#HTML5的History" class="headerlink" title="HTML5的History"></a>HTML5的History</h3><p>有六种模式改变URL而不刷新页面</p>
<ul>
<li>replaceState：替换原来的路径</li>
<li>pushState：使用新的路径</li>
<li>popState：路径的回退</li>
<li>go：向前或向后改变路径：e.g. go(1) go(-1) go(2)</li>
<li>forward：向前改变路径</li>
<li>back：向后改变路径</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=script, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>default<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> contentEl = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.content&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> aEls = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> aEl <span class="keyword">of</span> aEls) &#123;</span></span><br><span class="line"><span class="javascript">            aEl.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                e.preventDefault();  <span class="comment">// 阻止默认的跳转操作</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> href = aEl.getAttribute(<span class="string">&#x27;href&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                history.pushState(&#123;&#125;, <span class="string">&quot;&quot;</span>, href);</span></span><br><span class="line">                changeContent();</span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(location.pathname);</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 点击浏览器回退页面，可以理解为进栈出栈</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.addEventListener(<span class="string">&quot;popstate&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">            changeContent();</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> changeContent = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span>(location.pathname) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">&quot;/home&quot;</span>:</span></span><br><span class="line"><span class="javascript">                    contentEl.innerHTML = <span class="string">&quot;Home&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="string">&quot;/about&quot;</span>:</span></span><br><span class="line"><span class="javascript">                    contentEl.innerHTML = <span class="string">&quot;About&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                    contentEl.innerHTML = <span class="string">&quot;Default&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记</title>
    <url>/undefined/ac1879a7/</url>
    <content><![CDATA[<blockquote>
<p>CSS学习笔记</p>
</blockquote>
<span id="more"></span>
<h1 id="1-css简介"><a href="#1-css简介" class="headerlink" title="1 css简介"></a>1 css简介</h1><p>css为层叠样式表语言，css规则由两个主要的部分构成：选择器以及一条或多条声明</p>
<ul>
<li>选择器是用于指定css样式的HTML标签，花括号内是对该对象设置的具体样式</li>
<li>属性和属性值以“键值对”的形式出现</li>
<li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li>
<li>属性和属性值之间用英文“:”分开</li>
<li>多个“键值对”之间用英文“;”进行区分</li>
</ul>
<h1 id="2-CSS的引入方式"><a href="#2-CSS的引入方式" class="headerlink" title="2 CSS的引入方式"></a>2 CSS的引入方式</h1><h2 id="2-1-内部样式表"><a href="#2-1-内部样式表" class="headerlink" title="2.1 内部样式表"></a>2.1 内部样式表</h2><p>包括文档样式表、内嵌样式表</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以在style元素或者CSS文件中使用@import导入其他的CSS文件 */</span></span><br><span class="line"><span class="keyword">@import</span> url(./other.css)</span><br></pre></td></tr></table></figure>

<p>写到html页面内部，是将所有的CSS代码抽取出来，单独放到一个<code>&lt;style&gt;</code>中</p>
<h2 id="2-2-行内样式表"><a href="#2-2-行内样式表" class="headerlink" title="2.2 行内样式表"></a>2.2 行内样式表</h2><p><code>&lt;h2 style=&quot;&quot;&gt;&lt;/h2&gt;</code></p>
<h2 id="2-3-外部样式表"><a href="#2-3-外部样式表" class="headerlink" title="2.3 外部样式表"></a>2.3 外部样式表</h2><p>须在html页面中，使用<code>&lt;link&gt;</code>标签引入这个文件</p>
<p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></p>
<h1 id="3-CSS基础选择器"><a href="#3-CSS基础选择器" class="headerlink" title="3 CSS基础选择器"></a>3 CSS基础选择器</h1><p>选择器就是根据不同需求把不同的标签选出来，为之添加CSS样式</p>
<p>选择器分为基础选择器和复合选择器两个大类</p>
<ul>
<li>基础选择器是由单个选择器组成的</li>
<li>基础选择器又包括：标签选择器、类选择器、id选择器和通配符选择器</li>
</ul>
<p><code>display: none/block</code>隐藏/显示（块）指定的内容</p>
<h2 id="3-1-标签选择器"><a href="#3-1-标签选择器" class="headerlink" title="3.1 标签选择器"></a>3.1 标签选择器</h2><p>用html标签名称作为选择器</p>
<h2 id="3-2-类选择器"><a href="#3-2-类选择器" class="headerlink" title="3.2 类选择器"></a>3.2 类选择器</h2><p>用“.类名”作为选择器</p>
<p>对应改变样式的文字或图片应在其标签属性添加class=”类名”</p>
<p>长名称和词组可以使用中横线来为选择器命名；不要使用纯数字、中文命名，尽量使用英文字母来表示</p>
<p>可在class中写多个类名，用空格隔开</p>
<p>常见的类命名规则如下：</p>
<table>
<thead>
<tr>
<th align="center">内容</th>
<th align="center">类名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">头</td>
<td align="center">header</td>
</tr>
<tr>
<td align="center">内容</td>
<td align="center">content/container</td>
</tr>
<tr>
<td align="center">尾</td>
<td align="center">footer</td>
</tr>
<tr>
<td align="center">导航</td>
<td align="center">nav</td>
</tr>
<tr>
<td align="center">侧栏</td>
<td align="center">sidebar</td>
</tr>
<tr>
<td align="center">栏目</td>
<td align="center">column</td>
</tr>
<tr>
<td align="center">页面外围控制整体布局宽度</td>
<td align="center">wrapper</td>
</tr>
<tr>
<td align="center">左右中</td>
<td align="center">left right center</td>
</tr>
<tr>
<td align="center">登录条</td>
<td align="center">loginbar</td>
</tr>
<tr>
<td align="center">标志</td>
<td align="center">logo</td>
</tr>
<tr>
<td align="center">广告</td>
<td align="center">banner</td>
</tr>
<tr>
<td align="center">页面主体</td>
<td align="center">main</td>
</tr>
<tr>
<td align="center">热点</td>
<td align="center">hot</td>
</tr>
<tr>
<td align="center">新闻</td>
<td align="center">news</td>
</tr>
<tr>
<td align="center">下载</td>
<td align="center">download</td>
</tr>
<tr>
<td align="center">子导航</td>
<td align="center">subnav</td>
</tr>
<tr>
<td align="center">菜单</td>
<td align="center">menu</td>
</tr>
<tr>
<td align="center">子菜单</td>
<td align="center">submenu</td>
</tr>
</tbody></table>
<h2 id="3-3-id选择器"><a href="#3-3-id选择器" class="headerlink" title="3.3 id选择器"></a>3.3 id选择器</h2><p>用“#id名”作为选择器</p>
<p>id值如果由多个单词组成，单词之间可以用中划线-、下划线_连接，也可以使用驼峰标识</p>
<p>特点：只能调用一次，经常和js一起使用</p>
<h2 id="3-4-通配符选择器"><a href="#3-4-通配符选择器" class="headerlink" title="3.4 通配符选择器"></a>3.4 通配符选择器</h2><p>用<code>*</code>作为选择器，一般用来给所有元素做一些通用性的设置（比如改变内边距、外边距；重置一些内容）</p>
<p>特点：改变所有。效率比较低，尽量不要使用</p>
<h2 id="3-5-属性选择器"><a href="#3-5-属性选择器" class="headerlink" title="3.5 属性选择器"></a>3.5 属性选择器</h2><p>拥有某个属性<code>[att]</code>，属性等于某个值<code>att=val</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title=box]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>attr*=val:</code>属性值包含某一个值val</p>
<p><code>attr^=val:</code>属性值以val开头</p>
<p><code>attr$=val:</code>属性值以val结尾</p>
<p><code>attr|=val:</code>属性值等于val或者以val开头后面紧跟连接符-</p>
<p><code>attr~=val:</code>属性值包含val，如果有其他值必须以空格和val分割</p>
<h1 id="4-CSS字体属性"><a href="#4-CSS字体属性" class="headerlink" title="4 CSS字体属性"></a>4 CSS字体属性</h1><h2 id="4-1-字体系列"><a href="#4-1-字体系列" class="headerlink" title="4.1 字体系列"></a>4.1 字体系列</h2><blockquote>
<p>font-family: 字体;</p>
</blockquote>
<p>各种字体之间必须使用英文状态下的逗号隔开。一般情况下，如果有空格隔开的多个单词组成的字体，加引号。</p>
<p>浏览器会选择列表中第一个该计算机上有安装的字体，或者时通过<code>@font-face</code>指定的可以直接下载的字体</p>
<p>最常见的几个字体： <code>font-family: &#39;Microsoft Yahei&#39;,tahoma,arial,&#39;Hiragino Sans GB&#39;;</code></p>
<blockquote>
<p>使用Web Fonts</p>
<p>1、将字体放到对应的目录中</p>
<p>2、通过@font-face来引入字体，并且设置格式</p>
<p>3、使用字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;hyfont01&quot;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">./fonts/AaJianHaoTi-2.ttf</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;hyfont01&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>兼容性写法</p>
<p>format用于帮助浏览器快速识别字体的格式</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503175437.png" alt="image-20220503175437352"></p>
</blockquote>
<h2 id="4-2-字体大小"><a href="#4-2-字体大小" class="headerlink" title="4.2 字体大小"></a>4.2 字体大小</h2><blockquote>
<p>font-size: 数字px;</p>
</blockquote>
<p>谷歌浏览器默认的文字大小是17px，我们可以给body指定整个页面文字的大小</p>
<ul>
<li><p>推荐使用<code>px</code>，也可以使用<code>em</code>，<code>1em</code>代表<code>100%</code>，<code>2em</code>代表<code>200%</code>，<code>0.5em</code>代表<code>50%</code></p>
</li>
<li><p>百分比：基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</p>
</li>
</ul>
<h2 id="4-3-字体粗细"><a href="#4-3-字体粗细" class="headerlink" title="4.3 字体粗细"></a>4.3 字体粗细</h2><blockquote>
<p>font-weight: </p>
</blockquote>
<p>属性：<br>名称 | 含义<br>:—:|:—:<br>normal | 正常的字体<br>bold | 粗体<br>bolder | 特粗体<br>lighter | 细体<br>number | 100……<br>normal相当于number为400，声明此值将取消之前任何设置|</p>
<p>bold相当于number为700，也相当于b对象的作用</p>
<p>number后面不需要加单位</p>
<h2 id="4-4-文字样式"><a href="#4-4-文字样式" class="headerlink" title="4.4 文字样式"></a>4.4 文字样式</h2><blockquote>
<p>font-style: </p>
</blockquote>
<ul>
<li>normal</li>
<li>italic：用字体的斜体显示（通常会有专门的字体）</li>
<li>oblique：文本倾斜显示（仅仅是让文字倾斜）</li>
</ul>
<h2 id="4-5-小写字母变形"><a href="#4-5-小写字母变形" class="headerlink" title="4.5 小写字母变形"></a>4.5 小写字母变形</h2><blockquote>
<p>font-variant: normal | small-caps</p>
</blockquote>
<p>small-caps: 将小写字母替换为缩小过的大写字母</p>
<h2 id="4-6-复合属性"><a href="#4-6-复合属性" class="headerlink" title="4.6 复合属性"></a>4.6 复合属性</h2><blockquote>
<p>font:   font-style font-variant font-weight font-size/line-height font-family;</p>
</blockquote>
<ul>
<li><p>font-style、font-variant、font-weight可以随意调换顺序，也可以省略</p>
</li>
<li><p>/line-height可以省略，如果不省略，必须跟在font-size后面</p>
</li>
<li><p>font-size、font-family不可以调换顺序，不可以省略</p>
</li>
</ul>
<h1 id="5-CSS文本属性"><a href="#5-CSS文本属性" class="headerlink" title="5 CSS文本属性"></a>5 CSS文本属性</h1><h2 id="5-1-文本颜色"><a href="#5-1-文本颜色" class="headerlink" title="5.1 文本颜色"></a>5.1 文本颜色</h2><blockquote>
<p>color:</p>
</blockquote>
<p>表示方法：预定义的颜色值，十六进制，RGB代码（rgb(255,0,0)）</p>
<h2 id="5-2-对齐文本"><a href="#5-2-对齐文本" class="headerlink" title="5.2 对齐文本"></a>5.2 对齐文本</h2><blockquote>
<p>text-align:   (水平对齐方式)</p>
</blockquote>
<p><strong>MDN：定义行内内容（例如文字）如何相对它的块父元素对齐</strong> </p>
<p>属性值：<code>right</code>, <code>left</code>, <code>center</code>, <code>justify</code>（两端对齐）</p>
<h2 id="5-3-装饰文本"><a href="#5-3-装饰文本" class="headerlink" title="5.3 装饰文本"></a>5.3 装饰文本</h2><blockquote>
<p>text-decoration:   (规定添加到文本的修饰)</p>
</blockquote>
<p>属性：none(默认——可以去除a元素默认的下划线)，underline(下划线)，overline(上划线)，line-through(删除线)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#baidu</span> &#123;</span><br><span class="line">   <span class="attribute">text-decoration</span> : underline;</span><br><span class="line">   <span class="comment">/* text-decoration : overline; */</span></span><br><span class="line">   <span class="comment">/* text-decoration : line-through; */</span></span><br><span class="line">   <span class="comment">/* text-decoration : blink; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-首行缩进"><a href="#5-4-首行缩进" class="headerlink" title="5.4 首行缩进"></a>5.4 首行缩进</h2><blockquote>
<p>text indent:   数字px/em;（用于设置第一行内容的缩进）</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="comment">/* 刚好缩进两个文字 */</span></span><br></pre></td></tr></table></figure>

<h2 id="5-5-行间距"><a href="#5-5-行间距" class="headerlink" title="5.5 行间距"></a>5.5 行间距</h2><blockquote>
<p>line-height:   数字px;</p>
</blockquote>
<p>行间距为两行文字基线之间的间距，包括上间距，文本高度，下间距</p>
<h2 id="5-6-大小写转换"><a href="#5-6-大小写转换" class="headerlink" title="5.6 大小写转换"></a>5.6 大小写转换</h2><blockquote>
<p>text-transform: 用于设置文字的大小写转换</p>
</blockquote>
<ul>
<li>capitalize：(使…首字母大写, 资本化的意思)将每个单词的首字符变为大写</li>
<li>uppercase：(大写字母)将每个单词的所有字符变为大写</li>
<li>lowercase：(小写字母)将每个单词的所有字符变为小写</li>
<li>none：没有任何影响</li>
</ul>
<h2 id="5-7-字符间距"><a href="#5-7-字符间距" class="headerlink" title="5.7 字符间距"></a>5.7 字符间距</h2><blockquote>
<p>letter-spacing: 设置字母之间的间距</p>
<p>word-spacing: 设置单词之间的间距</p>
</blockquote>
<p>默认为0，可以设置为负数</p>
<h1 id="6-css三大特性"><a href="#6-css三大特性" class="headerlink" title="6 css三大特性"></a>6 css三大特性</h1><h2 id="6-1-层叠性"><a href="#6-1-层叠性" class="headerlink" title="6.1 层叠性"></a>6.1 层叠性</h2><ul>
<li>样式冲突，选择器权重大的生效；权重相同时，后面设置的生效</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h2 id="6-2-继承性"><a href="#6-2-继承性" class="headerlink" title="6.2 继承性"></a>6.2 继承性</h2><p>子元素可以继承父元素的样式（text-, font-, line-这些元素的开头可以继承，以及color属性）</p>
<p><strong>行高的继承性</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行高可以跟单位也可以不跟单位，如果子元素没有设置行高，则会继承父元素的行高为1.5，此时子元素的行高是：当前子元素的文字大小*1.5</p>
<h2 id="6-3-优先级"><a href="#6-3-优先级" class="headerlink" title="6.3 优先级"></a>6.3 优先级</h2><table>
<thead>
<tr>
<th align="center">选择器</th>
<th align="center">选择器权重</th>
</tr>
</thead>
<tbody><tr>
<td align="center">继承或者 *</td>
<td align="center">0, 0, 0, 0</td>
</tr>
<tr>
<td align="center">标签选择器 伪元素</td>
<td align="center">0, 0, 0, 1</td>
</tr>
<tr>
<td align="center">类选择器 属性选择器 伪类选择器</td>
<td align="center">0, 0, 1, 0</td>
</tr>
<tr>
<td align="center">ID选择器</td>
<td align="center">0, 1, 0, 0</td>
</tr>
<tr>
<td align="center">行内样式style = “ “</td>
<td align="center">1, 0, 0, 0</td>
</tr>
<tr>
<td align="center">!important</td>
<td align="center">无穷大</td>
</tr>
</tbody></table>
<ul>
<li>权重由四位数字组成，但是不会有进位</li>
</ul>
<p><strong>权重的叠加</strong></p>
<p>复合选择器会有权重叠加，但不会进位</p>
<h1 id="7-emmet语法"><a href="#7-emmet语法" class="headerlink" title="7 emmet语法"></a>7 emmet语法</h1><p>emmet使用缩写，来提高html/css的编写速度</p>
<h2 id="7-1-快速生成html结构语法"><a href="#7-1-快速生成html结构语法" class="headerlink" title="7.1 快速生成html结构语法"></a>7.1 快速生成html结构语法</h2><p>可以添加<code>()</code>来分组（可以理解为优先级）</p>
<ul>
<li><p><code>!</code>和<code>html:5</code>可以快速生成完整结构的html5代码</p>
</li>
<li><p>生成标签：直接输入标签名，并按Tab键即可</p>
</li>
<li><p>生成多个相同标签，<code>div*3</code>可以快速生成3个div</p>
</li>
<li><p>生成父子级关系的标签，<code>div&gt;ul&gt;li</code></p>
</li>
<li><p>生成兄弟关系的标签，<code>fiv+p</code></p>
</li>
<li><p>生成带有类名或者id名字的，直接写<code>.demo</code>或者<code>#two</code>tab键就可以了</p>
</li>
<li><p>生成的div类名是有顺序的，可以用自增符号<code>$</code></p>
</li>
<li><p>想要在生成的标签内部写内容可以用{ }表示</p>
<p>e.g. div$*5     div{文字} *5</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503171627.png" alt="image-20220503171627579"></p>
<h2 id="7-2-快速生成CSS样式语法"><a href="#7-2-快速生成CSS样式语法" class="headerlink" title="7.2 快速生成CSS样式语法"></a>7.2 快速生成CSS样式语法</h2><p>输入简写的首字母，再按Tab键</p>
<h2 id="7-3-快速格式化代码"><a href="#7-3-快速格式化代码" class="headerlink" title="7.3 快速格式化代码"></a>7.3 快速格式化代码</h2><p>Shift+Ait+F或者“右键点击格式化文档”</p>
<h1 id="8-复合选择器"><a href="#8-复合选择器" class="headerlink" title="8 复合选择器"></a>8 复合选择器</h1><p>css中根据选择器的类型分为基础选择器和复合选择器</p>
<ul>
<li>复合选择器可以更准确、更高效的选择目标元素</li>
<li>复合选择器是由两个或多个基础选择器，通过不同方式组合而成的</li>
<li>常用的复合选择器包括：后代选择器，子选择器，并集选择器，伪类选择器等等</li>
</ul>
<h2 id="8-1-后代选择器"><a href="#8-1-后代选择器" class="headerlink" title="8.1 后代选择器"></a>8.1 后代选择器</h2><p>后代选择器又称为包含选择器，指所有的后代（直接/间接的后代），选择器之间以空格分割</p>
<p>语法：元素1  元素2 { 样式声明 }</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//改变<span class="selector-tag">ol</span>中的<span class="selector-tag">li</span></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>元素1，元素2可以为任何基础选择器</p>
<h2 id="8-2-子选择器"><a href="#8-2-子选择器" class="headerlink" title="8.2 子选择器"></a>8.2 子选择器</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素</p>
<p>语法：元素1 &gt; 元素2 { 样式声明 }</p>
<h2 id="8-3-并集选择器"><a href="#8-3-并集选择器" class="headerlink" title="8.3 并集选择器"></a>8.3 并集选择器</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于集体声明</p>
<p>并集选择器是各选择器通过英文逗号(,)连接而成，任何形式的选择器都可以作为并集选择器的一部分，并集选择器习惯竖着写</p>
<p>语法：元素1，元素2 { 样式声明 }</p>
<h2 id="8-4-交集选择器"><a href="#8-4-交集选择器" class="headerlink" title="8.4 交集选择器"></a>8.4 交集选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503005352.png" alt="image-20220503005352147"></p>
<h2 id="8-5-伪类选择器"><a href="#8-5-伪类选择器" class="headerlink" title="8.5 伪类选择器"></a>8.5 伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊的效果，或选择第1个，第n个元素</p>
<p>伪类选择器书写最大的特点是用冒号（：）表示，比如：:hover、:first-child</p>
<h3 id="8-5-1-链接伪类选择器"><a href="#8-5-1-链接伪类选择器" class="headerlink" title="8.5.1 链接伪类选择器"></a>8.5.1 链接伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> //选择所有未访问的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>  //选择所有已被访问的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>  //选择鼠标指针位于其上的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  //选择活动链接（鼠标按下未弹起的链接）</span><br></pre></td></tr></table></figure>

<h3 id="8-5-2-focus伪类选择器"><a href="#8-5-2-focus伪类选择器" class="headerlink" title="8.5.2 :focus伪类选择器"></a>8.5.2 :focus伪类选择器</h3><p>:focus伪类选择器用于选取获得焦点的表单元素</p>
<p>焦点就是光标，一般情况 &lt; input &gt; 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span> :yellow;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-6-兄弟选择器"><a href="#8-6-兄弟选择器" class="headerlink" title="8.6 兄弟选择器"></a>8.6 兄弟选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 8.5.1 相邻兄弟选择器</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">.one + div &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503004840.png" alt="image-20220503004840670"></p>
<h3 id="8-5-2-普遍兄弟选择器"><a href="#8-5-2-普遍兄弟选择器" class="headerlink" title="8.5.2 普遍兄弟选择器"></a>8.5.2 普遍兄弟选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> ~ <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503004931.png" alt="image-20220503004930833"></p>
<h1 id="9-元素的显示模式"><a href="#9-元素的显示模式" class="headerlink" title="9 元素的显示模式"></a>9 元素的显示模式</h1><h2 id="9-1-什么是元素显示模式"><a href="#9-1-什么是元素显示模式" class="headerlink" title="9.1 什么是元素显示模式"></a>9.1 什么是元素显示模式</h2><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页</p>
<p>元素显示模式就是元素（标签）以什么方式进行显示，比如 <code>&lt;div&gt;</code> 自己占一行，比如<code>&lt;span&gt;</code>一行可以放多个，两者左上角都有x，y的坐标</p>
<p>html元素一般分为块元素和行内元素两种类型</p>
<h2 id="9-2-块元素"><a href="#9-2-块元素" class="headerlink" title="9.2 块元素"></a>9.2 块元素</h2><p>常见的块元素有： <code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code> 、 <code>&lt;p&gt;</code> 、 <code>&lt;div&gt;</code> 、 <code>&lt;li&gt;</code></p>
<p>特点：</p>
<ul>
<li>独占一行</li>
<li>高度、宽度，外边距以及内边距都可以控制</li>
<li>宽度默认是容器（父级宽度）的100%</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素</li>
</ul>
<p>注意：</p>
<ul>
<li>文字类元素内不能使用块级元素</li>
<li><code>&lt;p&gt;</code> 标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li>
<li>同理，<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其它块级元素</li>
</ul>
<p>外边距，边框，内边距（理解）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>内边距和外边距<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">         #div1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 内补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">         #div2 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 在div2这个节点顶部top打一个补丁，这个补丁离top 10px */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 外补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span> : <span class="number">10px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 盒子套盒子 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果盒子套盒子，需要定位的话，可以使用外补丁和内补丁。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-3-行内元素"><a href="#9-3-行内元素" class="headerlink" title="9.3 行内元素"></a>9.3 行内元素</h2><p>常见的行内元素有<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;span&gt;</code>，有时也将行内元素称为内联元素</p>
<p>特点：</p>
<ul>
<li>相邻行内元素在一行上，一行可以显示多个</li>
<li>高、宽直接设置是无效的</li>
<li>默认宽度就是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其他行内元素</li>
</ul>
<p>注意：</p>
<ul>
<li>链接里不能再放链接</li>
<li>特殊情况链接 &lt;a&gt; 里面可以放块级元素，但是给 &lt;a&gt; 转换一下块级模式最安全</li>
</ul>
<h2 id="9-4-行内块元素"><a href="#9-4-行内块元素" class="headerlink" title="9.4 行内块元素"></a>9.4 行内块元素</h2><p>在行内元素中有几个特殊的标签—— &lt;img/&gt; 、&lt;input/&gt; 、&lt;td&gt;，它们同时具有块元素和行内元素的特点，可称它们为行内块元素</p>
<p>特点：</p>
<ul>
<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）</li>
<li>默认宽度就是它本身内容的宽度（行内元素特点）</li>
<li>高度，行高，外边距及内边距都可以控制（块级元素特点）</li>
</ul>
<h2 id="9-5-snipaste的使用"><a href="#9-5-snipaste的使用" class="headerlink" title="9.5 snipaste的使用"></a>9.5 snipaste的使用</h2><p>snipaste是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上</p>
<p>常用快捷方式：</p>
<ul>
<li>F1可以截图，同时测量大小，设置箭头，书写文字等</li>
<li>F3在桌面置顶显示</li>
<li>点击图片，Alt可以取色（按下Shift可以切换取色模式）</li>
<li>按下Esc取消图片显示</li>
</ul>
<p>小技巧：单行文字垂直居中的代码</p>
<p>让文字的行高等于盒子的高度</p>
<h2 id="9-6-元素显示模式的相互转换代码"><a href="#9-6-元素显示模式的相互转换代码" class="headerlink" title="9.6 元素显示模式的相互转换代码"></a>9.6 元素显示模式的相互转换代码</h2><p><code>display: block;</code></p>
<p><code>display: inline;</code></p>
<p><code>display: inline-block; </code> //转换为行内块</p>
<p><code>display: none;  </code>// 隐藏</p>
<p><code>display: flex;</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/*把行内元素a转换为块级元素*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>元素的隐藏方法：</p>
<p>一、display设置为none</p>
<p>元素不显示出来, 并且也不占据位置, <strong>不占据任何空间</strong>(和不存在一样)</p>
<p>二、visibility设置为hidden</p>
<p>设置为hidden, 虽然元素不可见, 但是<strong>会占据元素应该占据的空间</strong>； 默认为visible, 元素是可见的</p>
<p>三、 rgba设置颜色, 将a的值设置为0</p>
<p>rgba的a设置的是alpha值, 可以设置透明度, <strong>不影响子元素</strong></p>
<p>四、opacity设置透明度, 设置为0</p>
<p>设置整个元素的透明度, <strong>会影响所有的子元素</strong></p>
</blockquote>
<blockquote>
<p><strong>行内非替换元素的注意事项</strong></p>
<p>1、以下属性对行内级非替换元素不起作用</p>
<p>width、height、margin-top、margin-bottom</p>
<p>2、以下属性对行内级非替换元素的效果比较特殊</p>
<p>padding-top、padding-bottom、上下方向的border</p>
</blockquote>
<h2 id="9-7-ul，ol序号的显示"><a href="#9-7-ul，ol序号的显示" class="headerlink" title="9.7 ul，ol序号的显示"></a>9.7 ul，ol序号的显示</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">   <span class="comment">/* list-style-type: circle; */</span></span><br><span class="line">   <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">   <span class="comment">/* list-style-type: none; */</span></span><br><span class="line">   <span class="attribute">list-style-type</span> : upper-roman;</span><br><span class="line">   <span class="comment">/* 罗马数字*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-背景"><a href="#10-背景" class="headerlink" title="10 背景"></a>10 背景</h1><h2 id="10-1-背景颜色"><a href="#10-1-背景颜色" class="headerlink" title="10.1 背景颜色"></a>10.1 背景颜色</h2><p>background-color: transparent(透明的)，也可以改变为其他颜色</p>
<h2 id="10-2-背景图片"><a href="#10-2-背景图片" class="headerlink" title="10.2 背景图片"></a>10.2 背景图片</h2><p>background-image属性描述了元素的背景图像，会盖在（不是覆盖）background-color的上面。 </p>
<p>如果设置了多张图片，设置的第一张图片将显示在最上面，其他图片按顺序层叠在下面</p>
<p>background-image: none/ url(地址);</p>
<p>普通图片：<code>float:left/right</code>设置浮动样式</p>
<blockquote>
<p><strong>background-image和img对比</strong></p>
<ul>
<li><p>img，作为网页内容的重要组成部分，比如广告图片、LOGO图片、文章配图、产品图片</p>
</li>
<li><p>background-image，可有可无。有，能让网页更加美观。无，也不影响用户获取完整的网页内容信息</p>
</li>
</ul>
</blockquote>
<h2 id="10-3-背景平铺"><a href="#10-3-背景平铺" class="headerlink" title="10.3 背景平铺"></a>10.3 背景平铺</h2><p>backgrounf-repeat: repeat | no-repeat | repear-x | repeat-y</p>
<h2 id="10-4-背景图片位置"><a href="#10-4-背景图片位置" class="headerlink" title="10.4 背景图片位置"></a>10.4 背景图片位置</h2><p>background-position: x  y;</p>
<p>参数代表的意思是：x坐标和y坐标。可以使用<strong>方位名词</strong>或者<strong>精确单位</strong> </p>
<table>
<thead>
<tr>
<th align="center">参数值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">length</td>
<td align="center">百分数|由浮点数字和单位标识符组成的长度值</td>
</tr>
<tr>
<td align="center">position</td>
<td align="center">top|center|bottom|left|center|right</td>
</tr>
</tbody></table>
<p>1、参数是方位名词</p>
<ul>
<li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left top和top left效果一致</li>
<li>如果只指定了一个方位名词，另一个值忽略，则第二个值默认居中对齐</li>
</ul>
<p>2、参数是精确单位</p>
<ul>
<li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li>
<li>如果只指定一个数值，那该数值一个是x坐标，另一个默认垂直居中</li>
</ul>
<p>3、参数是混合单位</p>
<ul>
<li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>内边距和外边距<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">         #div1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 内补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">         #div2 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 在div2这个节点顶部top打一个补丁，这个补丁离top 10px */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 外补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span> : <span class="number">10px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 盒子套盒子 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果盒子套盒子，需要定位的话，可以使用外补丁和内补丁。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-5-背景图像固定（背景附着）"><a href="#10-5-背景图像固定（背景附着）" class="headerlink" title="10.5 背景图像固定（背景附着）"></a>10.5 背景图像固定（背景附着）</h2><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动，后期可以制作视差滚动的效果</p>
<p>background-attachment: scroll|fixed</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">scroll</td>
<td align="center">背景图像是随对象内容滚动</td>
</tr>
<tr>
<td align="center">fixed</td>
<td align="center">示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动</td>
</tr>
<tr>
<td align="center">local</td>
<td align="center">如果一个元素拥有滚动机制，背景将会随着元素的内容滚动.</td>
</tr>
</tbody></table>
<h2 id="10-6-背景图片大小"><a href="#10-6-背景图片大小" class="headerlink" title="10.6 背景图片大小"></a>10.6 背景图片大小</h2><ul>
<li><p>auto：默认值, 以背景图本身大小显示</p>
</li>
<li><p>cover：缩放背景图，以完全覆盖铺满元素,可能背景图片部分看不见</p>
</li>
<li><p>contain：缩放背景图，宽度或者高度铺满元素，但是图片保持宽高比</p>
</li>
<li><p><code>&lt;percentage&gt;</code>：百分比，相对于背景区（background positioning area） </p>
</li>
<li><p>length：具体的大小，比如100px</p>
</li>
</ul>
<h2 id="10-7-背景属性复合写法"><a href="#10-7-背景属性复合写法" class="headerlink" title="10.7 背景属性复合写法"></a>10.7 背景属性复合写法</h2><p>没有特定书写顺序，一般顺序为：</p>
<p>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>
<h2 id="10-8-背景色半透明"><a href="#10-8-背景色半透明" class="headerlink" title="10.8 背景色半透明"></a>10.8 背景色半透明</h2><p>background: rgba(0, 0, 0, 0.3);</p>
<ul>
<li>最后一个参数是alpha透明度，取值范围在0~1之间</li>
<li>我们习惯把0.3的0省略掉，写为background: rgba(0, 0, 0, .3);</li>
<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>
<li>CSS3新增属性，是IE9+版本浏览器才支持的</li>
</ul>
<h1 id="11-盒子模型"><a href="#11-盒子模型" class="headerlink" title="11 盒子模型"></a>11 盒子模型</h1><p>HTML中的每一个元素都<strong>可以看做是一个盒子</strong>，可以具备这4个属性</p>
<ul>
<li><strong>内容（content）</strong>：元素的内容width/height</li>
<li><strong>内边距（padding）</strong>：元素和内容之间的间距</li>
<li><strong>边框（border）</strong>：元素自己的边框</li>
<li><strong>外边距（margin）</strong>：元素和其他元素之间的间距</li>
</ul>
<p>因为盒子有四边, 所以<strong>margin/padding/border</strong>都包括<strong>top/right/bottom/left</strong>四个边</p>
<h2 id="11-1-内容"><a href="#11-1-内容" class="headerlink" title="11.1 内容"></a>11.1 内容</h2><p><strong>设置内容是通过宽度和高度设置的:</strong> </p>
<ul>
<li><p>宽度设置: width</p>
</li>
<li><p>高度设置: height</p>
</li>
</ul>
<p>◼ 注意: 对于行内级非替换元素来说, 设置宽高是无效的!  </p>
<ul>
<li><p>min-width：最小宽度，无论内容多少，宽度都大于或等于min-width</p>
</li>
<li><p>max-width：最大宽度，无论内容多少，宽度都小于或等于max-width</p>
</li>
</ul>
<p>移动端适配时, 可以设置最大宽度和最小宽度; </p>
<p>下面两个属性不常用: </p>
<ul>
<li><p>min-height：最小高度，无论内容多少，高度都大于或等于min-height</p>
</li>
<li><p>max-height：最大高度，无论内容多少，高度都小于或等于max-height</p>
</li>
</ul>
<h2 id="11-2-内边距"><a href="#11-2-内边距" class="headerlink" title="11.2 内边距"></a>11.2 内边距</h2><table>
<thead>
<tr>
<th>padding值的个数</th>
<th>padding例子</th>
<th>代表的含义</th>
</tr>
</thead>
<tbody><tr>
<td>4</td>
<td>padding: 10px 20px 30px 40px;</td>
<td>top: 10px, right: 20px, bottom: 30px, left: 40px;</td>
</tr>
<tr>
<td>3</td>
<td>padding: 10px 20px 30px;</td>
<td>缺少left, left使用right的值;</td>
</tr>
<tr>
<td>2</td>
<td>padding: 10px 20px;</td>
<td>缺少left, 使用right的值; 缺少bottom, 使用top的值;</td>
</tr>
<tr>
<td>1</td>
<td>padding: 10px;</td>
<td>top/right/bottom/left都使用10;</td>
</tr>
</tbody></table>
<h2 id="11-3-边框"><a href="#11-3-边框" class="headerlink" title="11.3 边框"></a>11.3 边框</h2><p><code>border:</code>可以统一设置</p>
<h3 id="11-3-1-边框宽度"><a href="#11-3-1-边框宽度" class="headerlink" title="11.3.1 边框宽度"></a>11.3.1 边框宽度</h3><ul>
<li><p>border-top-width、border-right-width、border-bottom-width、border-left-width</p>
</li>
<li><p>border-width是上面4个属性的简写属性</p>
</li>
</ul>
<h3 id="11-3-2-边框颜色"><a href="#11-3-2-边框颜色" class="headerlink" title="11.3.2 边框颜色"></a>11.3.2 边框颜色</h3><ul>
<li><p>border-top-color、border-right-color、border-bottom-color、border-left-color</p>
</li>
<li><p>border-color是上面4个属性的简写属性</p>
</li>
</ul>
<h3 id="11-3-3-边框样式"><a href="#11-3-3-边框样式" class="headerlink" title="11.3.3 边框样式"></a>11.3.3 边框样式</h3><ul>
<li><p>border-top-style、border-right-style、border-bottom-style、border-left-style</p>
</li>
<li><p>border-style是上面4个属性的简写属性</p>
</li>
</ul>
<p>设置值：</p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503123001.png" alt="image-20220503122952607"></p>
<h3 id="11-3-4-圆角"><a href="#11-3-4-圆角" class="headerlink" title="11.3.4 圆角"></a>11.3.4 圆角</h3><p>border-radius用于设置盒子的圆角</p>
<ul>
<li>数值：通常用来设置小的圆角，如6px</li>
<li>百分比：通常用来设置一定的弧度或者圆形</li>
</ul>
<p>如果一个元素是正方形, 设置border-radius大于或等于50%时，就会变成一个圆</p>
<h2 id="11-4-外边距"><a href="#11-4-外边距" class="headerlink" title="11.4 外边距"></a>11.4 外边距</h2><p>margin取值同padding</p>
<h3 id="11-4-1-上下margin的传递"><a href="#11-4-1-上下margin的传递" class="headerlink" title="11.4.1 上下margin的传递"></a>11.4.1 上下margin的传递</h3><p><strong>1、margin-top传递</strong></p>
<p>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</p>
<p><strong>2、 margin-bottom传递</strong></p>
<p>如果块级元素的底部线和父元素的底部线重叠，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</p>
<p>如何防止出现传递问题？</p>
<ul>
<li><p>给父元素设置padding-top\padding-bottom</p>
</li>
<li><p>给父元素设置border</p>
</li>
<li><p>触发BFC: 设置overflow为auto</p>
</li>
</ul>
<blockquote>
<p>使用场景</p>
<ul>
<li><p>margin一般是用来设置兄弟元素之间的间距</p>
</li>
<li><p>padding一般是用来设置父子元素之间的间距</p>
</li>
</ul>
</blockquote>
<h3 id="11-4-2-上下margin的折叠"><a href="#11-4-2-上下margin的折叠" class="headerlink" title="11.4.2 上下margin的折叠"></a>11.4.2 上下margin的折叠</h3><p>垂直方向上相邻的2个margin（margin-top、margin-bottom）有可能会合并为1个margin，这种现象叫做collapse（折叠）；水平方向上的margin（margin-left、margin-right）永远不会collapse</p>
<p>折叠后最终值的计算规则：两个值进行比较，取较大的值</p>
<blockquote>
<p><strong>如何防止margin collapse？</strong> </p>
<p>只设置其中一个元素的margin</p>
</blockquote>
<h2 id="11-5-外轮廓"><a href="#11-5-外轮廓" class="headerlink" title="11.5 外轮廓"></a>11.5 外轮廓</h2><p>outline表示元素的外轮廓</p>
<ul>
<li><p>不占用空间</p>
</li>
<li><p>默认显示在border的外面</p>
</li>
</ul>
<p>outline相关属性有</p>
<ul>
<li><p>outline-width: 外轮廓的宽度</p>
</li>
<li><p>outline-style：取值跟border的样式一样，比如solid、dotted等 </p>
</li>
<li><p>outline-color: 外轮廓的颜色</p>
</li>
<li><p>outline：outline-width、outline-style、outline-color的简写属性，跟border用法类似</p>
</li>
</ul>
<p><strong>应用场景：</strong>去除a元素、input元素的focus轮廓效果</p>
<h2 id="11-6-盒子阴影"><a href="#11-6-盒子阴影" class="headerlink" title="11.6 盒子阴影"></a>11.6 盒子阴影</h2><p><strong>box-shadow属性可以设置一个或者多个阴影</strong></p>
<ul>
<li><p>每个阴影用<code>&lt;shadow&gt;</code>表示</p>
</li>
<li><p>多个阴影之间用逗号,隔开，从前到后叠加</p>
</li>
</ul>
<p><strong><code>&lt;shadow&gt;</code>的常见格式如下</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503130801.png" alt="image-20220503130800885"></p>
<ul>
<li><p>第1个<code>&lt;length&gt;</code>：offset-x, 水平方向的偏移，正数往右偏移</p>
</li>
<li><p>第2个<code>&lt;length&gt;</code>：offset-y, 垂直方向的偏移，正数往下偏移</p>
</li>
<li><p>第3个<code>&lt;length&gt;</code>：blur-radius, 模糊半径</p>
</li>
<li><p>第4个<code>&lt;length&gt;</code>：spread-radius, 延伸半径</p>
</li>
<li><p><code>&lt;color&gt;</code>：阴影的颜色，如果没有设置，就跟随color属性的颜色</p>
</li>
<li><p>inset：外框阴影变成内框阴影</p>
</li>
</ul>
<h2 id="11-7-文字阴影"><a href="#11-7-文字阴影" class="headerlink" title="11.7 文字阴影"></a>11.7 文字阴影</h2><p><strong>text-shadow用法类似于box-shadow，用于给文字添加阴影效果</strong></p>
<p><strong><code>&lt;shadow&gt;</code>的常见格式如下</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220503130819.png" alt="image-20220503130819055"></p>
<p> 相当于box-shadow, 它没有spread-radius的值; </p>
<h2 id="11-8-box-sizing"><a href="#11-8-box-sizing" class="headerlink" title="11.8 box-sizing"></a>11.8 box-sizing</h2><p><strong>box-sizing用来设置盒子模型中宽高的行为</strong></p>
<ul>
<li><p><strong>content-box</strong>：padding、border都布置在width、height外边</p>
</li>
<li><p><strong>border-box</strong>：padding、border都布置在width、height里边</p>
</li>
</ul>
<h1 id="12-伪类"><a href="#12-伪类" class="headerlink" title="12 伪类"></a>12 伪类</h1><p>所有的伪类: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes</a></p>
<h2 id="12-1-动态伪类"><a href="#12-1-动态伪类" class="headerlink" title="12.1 动态伪类"></a>12.1 动态伪类</h2><p><code>a:link</code>未访问的链接</p>
<p><code>a:visited</code>已访问的链接</p>
<p><code>a:hover</code>鼠标挪动到链接上（重要）</p>
<p><code>a:active</code>激活的链接（鼠标在连接上长按住未松开）</p>
<p><code>:focus</code>指当前拥有输入焦点的元素（能接收键盘输入），比如文本输入框一聚焦后，背景就会变红色</p>
<p>使用注意：</p>
<ul>
<li><p><code>:hover</code>必须放在<code>:link</code>和<code>:visited</code>后面才能完全生效</p>
</li>
<li><p><code>:active</code>必须放在<code>:hover</code>后面才能完全生效</p>
</li>
</ul>
<p>所以建议的编写顺序是 <code>:link</code>、 <code>:visited</code>、 <code>:focus</code>、 <code>:hover</code>、 <code>:active</code></p>
<p>直接给a元素设样式，相当于给a元素的所有动态伪类都设置了。<strong>除了a元素，:hover、:active也能用在其他元素上</strong></p>
<h2 id="12-2-目标伪类"><a href="#12-2-目标伪类" class="headerlink" title="12.2 目标伪类"></a>12.2 目标伪类</h2><p><code>:target</code></p>
<h2 id="12-3-语言伪类"><a href="#12-3-语言伪类" class="headerlink" title="12.3 语言伪类"></a>12.3 语言伪类</h2><p><code>:lang()</code></p>
<h2 id="12-4-元素状态伪类"><a href="#12-4-元素状态伪类" class="headerlink" title="12.4 元素状态伪类"></a>12.4 元素状态伪类</h2><p><code>:enabled</code></p>
<p><code>:disabled</code></p>
<p><code>:checked</code></p>
<h2 id="12-5-结构伪类"><a href="#12-5-结构伪类" class="headerlink" title="12.5 结构伪类"></a>12.5 结构伪类</h2><ul>
<li><code>:nth-child( )</code>、 <code>:nth-last-child( )</code>、 <code>:nth-of-type( )</code>、 <code>:nth-last-of-type( )</code></li>
<li><code>:first-child</code>、 <code>:last-child</code>、 <code>:first-of-type</code>、 <code>:last-of-type</code></li>
<li><code>:root</code>、<code>:only-child</code>、<code>:only-of-type</code>、<code>:empty</code></li>
</ul>
<h3 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child"></a>:nth-child</h3><p>:nth-child(1)：父元素中的第1个子元素</p>
<p>:nth-child(2n)：n代表任意正整数和0，与:nth-child(even)同义</p>
<p>:nth-child(2n+1)：与:nth-child(odd)同义</p>
<h3 id="nth-last-child"><a href="#nth-last-child" class="headerlink" title=":nth-last-child"></a>:nth-last-child</h3><p>与:nth-child的区别为从后往前计数</p>
<ul>
<li><p>:nth-last-child(1)，代表倒数第一个子元素</p>
</li>
<li><p>:nth-last-child(-n + 2)，代表最后2个子元素</p>
</li>
</ul>
<h3 id="nth-of-type"><a href="#nth-of-type" class="headerlink" title=":nth-of-type"></a>:nth-of-type</h3><p><strong>nth-of-type()用法跟:nth-child()类似</strong></p>
<p>不同点是:nth-of-type()计数时只计算同种类型的元素</p>
<h3 id="nth-last-of-type"><a href="#nth-last-of-type" class="headerlink" title=":nth-last-of-type"></a>:nth-last-of-type</h3><p><strong>:nth-last-of-type()用法跟:nth-of-type()类似</strong></p>
<p>不同点是:nth-last-of-type()从最后一个这种类型的子元素开始往前计数</p>
<h3 id="其他常见的伪类"><a href="#其他常见的伪类" class="headerlink" title="其他常见的伪类"></a>其他常见的伪类</h3><ul>
<li><p>:first-child，等同于:nth-child(1)</p>
</li>
<li><p>:last-child，等同于:nth-last-child(1)</p>
</li>
<li><p>:first-of-type，等同于:nth-of-type(1)</p>
</li>
<li><p>:last-of-type，等同于:nth-last-of-type(1)</p>
</li>
<li><p>:only-child，是父元素中唯一的子元素</p>
</li>
<li><p>:only-of-type，是父元素中唯一的这种类型的子元素</p>
</li>
<li><p>:root，根元素。就是HTML元素</p>
</li>
<li><p>:empty，代表里面完全空白的元素</p>
</li>
</ul>
<h2 id="13-6-否定伪类"><a href="#13-6-否定伪类" class="headerlink" title="13.6 否定伪类"></a>13.6 否定伪类</h2><p><strong>:not()的格式是:not(x)</strong></p>
<ul>
<li>x是一个简单选择器（元素选择器、通用选择器、属性选择器、类选择器、id选择器、伪类（除否定伪类））</li>
</ul>
<p>:not(x)表示除x以外的元素</p>
<h1 id="13-伪元素"><a href="#13-伪元素" class="headerlink" title="13 伪元素"></a>13 伪元素</h1><p>为了区分伪元素和伪类，建议伪元素使用2个冒号</p>
<p>常见的伪元素有</p>
<p><code>::first-line</code> 针对首行文本设置属性</p>
<p><code>::first-letter</code>针对首字母设置属性</p>
<p><code>::before</code>在一个元素的内容之前插入其他内容</p>
<p><code>::after</code>在一个元素的内容之后插入其他内容</p>
<p>常通过content属性来未一个元素添加修饰性的内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;321&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="14-滚动栏"><a href="#14-滚动栏" class="headerlink" title="14 滚动栏"></a>14 滚动栏</h1><p><code>overflow</code>用于控制内容溢出时的行为</p>
<ul>
<li><code>visible</code>溢出的内容照样可见</li>
<li><code>hidden</code>溢出的内容直接裁剪</li>
<li><code>scroll</code>溢出的内容被裁剪，但可以通过滚动机制查看，滚动条区域占用的空间属于width、height（有无溢出均会显示滚动条，包括横竖摄像头）</li>
<li><code>auto</code>自动根据内容是否溢出来决定是否提供滚动机制</li>
</ul>
<h1 id="15-定位"><a href="#15-定位" class="headerlink" title="15 定位"></a>15 定位</h1><h2 id="15-1-标准流"><a href="#15-1-标准流" class="headerlink" title="15.1 标准流"></a>15.1 标准流</h2><p>默认情况下，元素都是按照normal flow（标准流、常规流、正常流、文档流【document flow】）进行排布</p>
<ul>
<li><p>从左到右、从上到下按顺序摆放好</p>
</li>
<li><p>默认情况下，互相之间不存在层叠现象</p>
</li>
</ul>
<p>在标准流中，可以使用<code>margin</code>、 <code>padding</code>对元素进行定位，会影响标准流中其他元素的定位效果，不便于实现元素层叠的效果</p>
<p>标准流，定位流，浮动流</p>
<h2 id="15-2-position"><a href="#15-2-position" class="headerlink" title="15.2 position"></a>15.2 position</h2><p>单独对某个元素定位</p>
<h3 id="1、static：默认值，静态定位"><a href="#1、static：默认值，静态定位" class="headerlink" title="1、static：默认值，静态定位"></a>1、<code>static</code>：默认值，静态定位</h3><p>元素按照normal flow布局；left、right、top、bottom没有任何作用</p>
<h3 id="2、relative：相对定位"><a href="#2、relative：相对定位" class="headerlink" title="2、relative：相对定位"></a>2、<code>relative</code>：相对定位</h3><p>元素按照normal flow布局；可以通过left、right、top、bottom定位，定位参照对象是元素自己原来的位置</p>
<p><strong>应用场景</strong>：在不影响其他元素位置的前提下，对当前元素位置进行微调</p>
<h3 id="3、absolute：绝对定位"><a href="#3、absolute：绝对定位" class="headerlink" title="3、absolute：绝对定位"></a>3、<code>absolute</code>：绝对定位</h3><p>元素脱离normal flow（脱离标准流、脱标）；可以通过left、right、top、bottom进行定位。定位参照对象是最邻近的定位祖先元素，如果找不到这样的祖先元素，参照对象是视口</p>
<p>◼ <strong>定位元素（positioned element）</strong> ：position值不为static的元素，也就是position值为relative、absolute、fixed的元素</p>
<blockquote>
<p><strong>子绝父相</strong></p>
<p>在绝大数情况下，子元素的绝对定位都是相对于父元素进行定位</p>
<p>如果希望子元素相对于父元素进行定位，又不希望父元素脱标，常用解决方案是：</p>
<ul>
<li><p>父元素设置position: relative（让父元素成为定位元素，而且父元素不脱离标准流）</p>
</li>
<li><p>子元素设置position: absolute</p>
</li>
</ul>
<p>简称为“子绝父相”</p>
</blockquote>
<p><strong>position设置为absolute/fixed元素的特点</strong></p>
<ul>
<li><p>可以随意设置宽高</p>
</li>
<li><p>宽高默认由内容决定</p>
</li>
<li><p>不再受标准流的约束</p>
<ul>
<li>不再严格按照从上到下、从左到右排布</li>
<li>不再严格区分块级(block)、行内级(inline)，行内块级(inline-block)的很多特性都会消失</li>
</ul>
</li>
<li><p>不再给父元素汇报宽高数据</p>
</li>
<li><p>脱标元素内部默认还是按照标准流布局</p>
</li>
<li><p>绝对定位元素（absolutely positioned element） </p>
<ul>
<li>position值为absolute或者fixed的元素</li>
</ul>
</li>
<li><p>对于绝对定位元素来说：定位参照对象的宽度 = left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度；定位参照对象的高度 = top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</p>
</li>
<li><p>如果希望绝对定位元素的宽高和定位参照对象一样，可以给绝对定位元素设置以下属性：left: 0、right: 0、top: 0、bottom: 0、margin:0</p>
</li>
<li><p>如果希望绝对定位元素在定位参照对象中居中显示，可以给绝对定位元素设置以下属性：left: 0、right: 0、top: 0、bottom: 0、margin: auto；另外，还得设置具体的宽高值（宽高小于定位参照对象的宽高）</p>
</li>
</ul>
<blockquote>
<p>什么是auto</p>
<p>◼ 800 = 200 + ml0 + mr0 + 0 + 0</p>
<p>◼ <strong>auto -&gt; 交给浏览器你来出来</strong></p>
<p>◼ <strong>width: auto;</strong></p>
<p>◼ 1.行内非替换元素 -&gt; width: 包裹内容</p>
<p>◼ 2.块级元素 -&gt;width: 包含块的宽度</p>
<p>◼ 3.绝对定位元素 -&gt; width: 包裹内容</p>
</blockquote>
<h3 id="4、fixed：固定定位"><a href="#4、fixed：固定定位" class="headerlink" title="4、fixed：固定定位"></a>4、<code>fixed</code>：固定定位</h3><p>元素脱离normal flow（脱离标准流、脱标）</p>
<ul>
<li><p>可以通过left、right、top、bottom进行定位</p>
</li>
<li><p>定位参照对象是视口（viewport） </p>
</li>
<li><p>当画布滚动时，固定不动</p>
</li>
</ul>
<blockquote>
<p>画布和视口</p>
<p>视口（Viewport）：文档的可视区域</p>
<p>画布（Canvas） ：用于渲染文档的区域；文档内容超出视口范围，可以通过滚动查看</p>
<p>画布 &gt;= 视口</p>
</blockquote>
<h3 id="5、sticky：粘性定位"><a href="#5、sticky：粘性定位" class="headerlink" title="5、sticky：粘性定位"></a>5、<code>sticky</code>：粘性定位</h3><p>sticky可以看做是相对定位和固定(绝对)定位的结合体; </p>
<ul>
<li><p>它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点; </p>
</li>
<li><p>当达到这个阈值点时, 就会变成固定(绝对)定位; </p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504094458.png" alt="image-20220504094452506"></p>
<h2 id="15-3-z-index"><a href="#15-3-z-index" class="headerlink" title="15.3 z-index"></a>15.3 z-index</h2><p>设置定位元素多大层叠顺序（仅对定位元素有效）</p>
<p><strong>比较原则</strong></p>
<p>1、如果是兄弟关系</p>
<ul>
<li><p>z-index越大，层叠在越上面</p>
</li>
<li><p>z-index相等，写在后面的那个元素层叠在上面</p>
</li>
</ul>
<p>2、如果不是兄弟关系</p>
<ul>
<li>各自从元素自己以及祖先元素中，找出最邻近的2个定位元素进行比较，而且这2个定位元素必须有设置z-index的具体数值</li>
</ul>
<h2 id="15-4-vertical-align"><a href="#15-4-vertical-align" class="headerlink" title="15.4 vertical-align"></a>15.4 vertical-align</h2><p>vertical-align会影响行内块级元素在一个行盒中垂直方向的位置</p>
<blockquote>
<p><strong>一个div没有设置高度的时候，会不会有高度？</strong></p>
<ul>
<li><p>没有内容，没有高度</p>
</li>
<li><p>有内容，内容撑起来高度</p>
</li>
</ul>
<p><strong>内容撑起来高度的本质</strong>：内容有行高</p>
<p><strong>行高为什么可以撑起div的高度</strong>：因为line boxes的存在，且它有一个特性，包裹每行的inline level；而其中的文字是有行高的，必须将整个行高包裹进去，才算包裹这个line-level</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504134605.png" alt="image-20220504134604823"></p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504134625.png" alt="image-20220504134625505"></p>
<p><strong>结论：line-boxes一定会想办法包裹住当前行中所有的内容。</strong></p>
<p><strong>但是，但是为什么对齐方式千奇百怪呢？</strong></p>
<ul>
<li><p>你认为的千奇百怪，其实有它的内在规律</p>
</li>
<li><p>答案就是baseline对齐</p>
</li>
</ul>
<p><strong>我们来看官方vertical-align的默认值：没错，就是baseline</strong></p>
<p><strong>但是baseline都是谁呢？</strong></p>
<ul>
<li><p>文本的baseline是字母x的下方</p>
</li>
<li><p>Inline-block默认的baseline是margin-bottom的底部（没有，就是盒子的底部）</p>
</li>
<li><p>Inline-block有文本时，baseline是最后一行文本的x的下方</p>
</li>
</ul>
<p><strong>一切都解释通了</strong></p>
<p><strong>现在，对于不同的取值就非常容易理解了</strong></p>
<ul>
<li><p>baseline(默认值)：基线对齐（你得先明白什么是基线）</p>
</li>
<li><p>top：把行内级盒子的顶部跟line boxes顶部对齐</p>
</li>
<li><p>middle：行内级盒子的中心点与父盒基线加上x-height一半的线对齐</p>
</li>
<li><p>bottom：把行内级盒子的底部跟line box底部对齐</p>
</li>
<li><p><code>&lt;percentage&gt;</code>：把行内级盒子提升或者下降一段距离（距离相对于line-height计算\元素高度）， 0%意味着同baseline一 样</p>
</li>
<li><p><code>&lt;length&gt;</code>：把行内级盒子提升或者下降一段距离，0cm意味着同baseline一样</p>
</li>
</ul>
<p><strong>解决图片下边缘的间隙方法:</strong> </p>
<p>方法一: 设置成top/middle/bottom</p>
<p>方法二: 将图片设置为block元素</p>
<h1 id="16-浮动"><a href="#16-浮动" class="headerlink" title="16 浮动"></a>16 浮动</h1><p>float 属性可以指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它</p>
<p><strong>绝对定位、浮动都会让元素脱离标准流，以达到灵活布局的效果</strong></p>
<h2 id="16-1-浮动规则"><a href="#16-1-浮动规则" class="headerlink" title="16.1 浮动规则"></a>16.1 浮动规则</h2><p>1、元素一旦浮动后, 脱离标准流</p>
<ul>
<li><p>朝着向左或向右方向移动，直到自己的边界紧贴着包含块（一般是父元素）或者其他浮动元素的边界为止</p>
</li>
<li><p>定位元素会层叠在浮动元素上面</p>
</li>
</ul>
<p>2、如果元素是向左（右）浮动，浮动元素的左（右）边界不能超出包含块的左（右）边界</p>
<p>3、浮动元素之间不能层叠</p>
<ul>
<li><p>如果一个元素浮动，另一个浮动元素已经在那个位置了，后浮动的元素将紧贴着前一个浮动元素（左浮找左浮，右浮找右浮）</p>
</li>
<li><p>如果水平方向剩余的空间不够显示浮动元素，浮动元素将向下移动，直到有充足的空间为止</p>
</li>
</ul>
<p>4、浮动元素不能与行内级内容层叠，行内级内容将会被浮动元素推出。比如行内级元素、inline-block元素、块级元素的文字内容</p>
<p>5、行内级元素、inline-block元素浮动后，其顶部将与所在行的顶部对齐</p>
<h2 id="16-2-浮动问题——高度塌陷"><a href="#16-2-浮动问题——高度塌陷" class="headerlink" title="16.2 浮动问题——高度塌陷"></a>16.2 浮动问题——高度塌陷</h2><p>解决父元素高度坍塌问题的过程，一般叫做清浮动（清理浮动、清除浮动），让父元素计算总高度的时候，把浮动子元素的高度算进去</p>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>clear 属性可以指定一个元素是否必须移动(清除浮动后)到在它之前的浮动元素下面; </p>
<p>◼ <strong>clear的常用取值</strong></p>
<p>left：要求元素的顶部低于之前生成的所有左浮动元素的底部</p>
<p>right：要求元素的顶部低于之前生成的所有右浮动元素的底部</p>
<p>both：要求元素的顶部低于之前生成的所有浮动元素的底部</p>
<p>none：默认值，无特殊要求</p>
<blockquote>
<p><strong>清除浮动的方法：</strong></p>
<p><strong>方法一: 给父元素设置固定高度</strong></p>
<p>扩展性不好（不推荐）</p>
<p><strong>方法二: 在父元素最后增加一个空的块级子元素，并且让它设置clear: both</strong></p>
<p>会增加很多无意义的空标签，维护麻烦</p>
<p>违反了结构与样式分离的原则（不推荐）</p>
<p><strong>方法三: 给父元素添加一个伪元素</strong></p>
<p>推荐；编写好后可以轻松实现清除浮动，纯CSS样式解决，结构与样式分离</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clear-fix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden; <span class="comment">/* 浏览器兼容性 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>; <span class="comment">/* 浏览器兼容性 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear-fix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>; <span class="comment">/* IE6/7兼容性 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="17-Flex布局"><a href="#17-Flex布局" class="headerlink" title="17 Flex布局"></a>17 Flex布局</h1><h2 id="17-1-flexbox"><a href="#17-1-flexbox" class="headerlink" title="17.1 flexbox"></a>17.1 flexbox</h2><p><strong>flexbox（弹性盒子）</strong>：弹性盒子是一种用于按行或按列布局元素的一维布局方法；元素可以膨胀以填充额外的空间, 收缩以适应更小的空间。通常我们使用Flexbox来进行布局的方案称之为flex布局(flex layout)</p>
<h2 id="17-2-flex布局"><a href="#17-2-flex布局" class="headerlink" title="17.2 flex布局"></a>17.2 flex布局</h2><p>flex布局（flexible布局，弹性布局）是目前web开发中使用最多的布局方案（移动端，PC端）</p>
<p>开启了 flex 布局的元素叫 flex container，flex container 里面的直接子元素叫做 flex item</p>
<p><strong>当flex container中的子元素变成了flex item时, 具备一下特点:</strong> </p>
<ul>
<li><p>flex item的布局将受flex container属性的设置来进行控制和布局; </p>
</li>
<li><p>flex item不再严格区分块级元素和行内级元素; </p>
</li>
<li><p>flex item默认情况下是包裹内容的, 但是可以设置宽度和高度;</p>
</li>
</ul>
<p><strong>设置 display 属性为 flex 或者 inline-flex 可以成为 flex container</strong></p>
<ul>
<li><p>flex： flex container 以 block-level 形式存在</p>
</li>
<li><p>inline-flex： flex container 以 inline-level 形式存在</p>
</li>
</ul>
<h2 id="17-3-flex相关属性"><a href="#17-3-flex相关属性" class="headerlink" title="17.3 flex相关属性"></a>17.3 flex相关属性</h2><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504100423.png" alt="image-20220504100423570"></p>
<h3 id="17-3-1-flex-direction"><a href="#17-3-1-flex-direction" class="headerlink" title="17.3.1 flex-direction"></a>17.3.1 flex-direction</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135150.png" alt="image-20220504135150287"></p>
<h3 id="17-3-2-flex-wrap"><a href="#17-3-2-flex-wrap" class="headerlink" title="17.3.2 flex-wrap"></a>17.3.2 flex-wrap</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135239.png" alt="image-20220504135239173"></p>
<h3 id="17-3-3-flex-flow"><a href="#17-3-3-flex-flow" class="headerlink" title="17.3.3 flex-flow"></a>17.3.3 flex-flow</h3><p><strong>flex-flow 属性是 flex-direction 和 flex-wrap 的简写。</strong></p>
<p>顺序任何, 并且都可以省略</p>
<h3 id="17-3-4-justify-content"><a href="#17-3-4-justify-content" class="headerlink" title="17.3.4 justify-content"></a>17.3.4 justify-content</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135431.png" alt="image-20220504135430917"></p>
<h3 id="17-3-5-align-item"><a href="#17-3-5-align-item" class="headerlink" title="17.3.5 align-item"></a>17.3.5 align-item</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135459.png" alt="image-20220504135459743"></p>
<h3 id="17-3-6-align-content"><a href="#17-3-6-align-content" class="headerlink" title="17.3.6 align-content"></a>17.3.6 align-content</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135528.png" alt="image-20220504135528316"></p>
<h3 id="17-3-7-order"><a href="#17-3-7-order" class="headerlink" title="17.3.7 order"></a>17.3.7 order</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135545.png" alt="image-20220504135545758"></p>
<h3 id="17-3-8-flex-items"><a href="#17-3-8-flex-items" class="headerlink" title="17.3.8 flex items"></a>17.3.8 flex items</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135604.png" alt="image-20220504135604195"></p>
<h3 id="17-3-9-flex-grow"><a href="#17-3-9-flex-grow" class="headerlink" title="17.3.9 flex grow"></a>17.3.9 flex grow</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135627.png" alt="image-20220504135627206"></p>
<h3 id="17-3-10-flex-shrink"><a href="#17-3-10-flex-shrink" class="headerlink" title="17.3.10 flex-shrink"></a>17.3.10 flex-shrink</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135649.png" alt="image-20220504135649082"></p>
<h3 id="17-3-11-flex-basis"><a href="#17-3-11-flex-basis" class="headerlink" title="17.3.11 flex-basis"></a>17.3.11 flex-basis</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135717.png" alt="image-20220504135717378"></p>
<h3 id="17-3-12-flex"><a href="#17-3-12-flex" class="headerlink" title="17.3.12 flex"></a>17.3.12 flex</h3><p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504135746.png" alt="image-20220504135745861"></p>
<h1 id="18-动画"><a href="#18-动画" class="headerlink" title="18 动画"></a>18 动画</h1><h2 id="18-1-transform"><a href="#18-1-transform" class="headerlink" title="18.1 transform"></a>18.1 transform</h2><p>允许旋转，缩放，倾斜或平移给定元素。但transform对于行内级非替换元素是无效的</p>
<p>常见的transform函数有以下四种</p>
<h3 id="18-1-1-平移translate-x-y"><a href="#18-1-1-平移translate-x-y" class="headerlink" title="18.1.1 平移translate(x, y)"></a>18.1.1 平移translate(x, y)</h3><p><strong>1、值个数</strong></p>
<ul>
<li><p>一个值时，设置x轴上的位移</p>
</li>
<li><p>二个值时，设置x轴和y轴上的位移</p>
</li>
</ul>
<p><strong>2、值类型：</strong></p>
<ul>
<li><p>数字：100px</p>
</li>
<li><p>百分比：参照元素本身（ refer to the size of bounding box ）</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* translate是translateX和translateY函数的简写 */</span></span><br><span class="line"><span class="comment">/* translate的百分比可以完成一个元素的水平和垂直居中 */</span></span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18-1-2-缩放scale-x-y"><a href="#18-1-2-缩放scale-x-y" class="headerlink" title="18.1.2 缩放scale(x, y)"></a>18.1.2 缩放scale(x, y)</h3><p>为scaleX和scaleY的缩写</p>
<p><strong>1、值个数</strong></p>
<ul>
<li><p>一个值时，设置x轴上的缩放</p>
</li>
<li><p>二个值时，设置x轴和y轴上的缩放</p>
</li>
</ul>
<p><strong>2、值类型：</strong></p>
<ul>
<li><p>数字： </p>
<p>1：保持不变</p>
<p>2：放大一倍</p>
<p>0.5：缩小一半</p>
</li>
<li><p>百分比：不支持百分比</p>
</li>
</ul>
<h3 id="18-1-3-旋转retate-deg"><a href="#18-1-3-旋转retate-deg" class="headerlink" title="18.1.3 旋转retate(deg)"></a>18.1.3 旋转retate(deg)</h3><p><strong>1、值个数</strong></p>
<p>一个值时，表示旋转的角度</p>
<p><strong>2、值类型：</strong></p>
<ul>
<li><p>常用单位deg：旋转的角度（degrees）</p>
</li>
<li><p>正数为顺时针</p>
</li>
<li><p>负数为逆时针</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220504153704.png" alt="image-20220504153704522"></p>
<p><strong>注意：旋转的原点受transform-origin的影响</strong></p>
<blockquote>
<p><strong>transform-origin</strong></p>
<p>变形的原点</p>
<ul>
<li><strong>一个值：</strong>设置x轴的原点</li>
<li><strong>两个值：</strong>设置x轴和y轴的原点</li>
</ul>
<p><strong>必须是<code>&lt;length&gt;</code>，<code>&lt;percentage&gt;</code>，或 left, center, right, top, bottom关键字中的一个</strong></p>
<ul>
<li><p>left, center, right, top, bottom关键字</p>
</li>
<li><p>length：从左上角开始计算</p>
</li>
<li><p>百分比：参考元素本身大小</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: top left;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="18-1-4-倾斜skew-deg-deg"><a href="#18-1-4-倾斜skew-deg-deg" class="headerlink" title="18.1.4 倾斜skew(deg, deg)"></a>18.1.4 倾斜skew(deg, deg)</h3><p><strong>1、值个数</strong></p>
<ul>
<li><p>一个值时，表示x轴上的倾斜</p>
</li>
<li><p>二个值时，表示x轴和y轴上的倾斜</p>
</li>
</ul>
<p><strong>2、值类型：</strong></p>
<p>deg：旋转的角度</p>
<p>正数为顺时针</p>
<p>负数为逆时针</p>
<p>◼ <strong>注意：旋转的原点受transform-origin的影响</strong></p>
<h3 id="18-1-5-transform设置多个值"><a href="#18-1-5-transform设置多个值" class="headerlink" title="18.1.5 transform设置多个值"></a>18.1.5 transform设置多个值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100px</span>) <span class="built_in">scale</span>(<span class="number">0.5</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18-2-过渡动画transition"><a href="#18-2-过渡动画transition" class="headerlink" title="18.2 过渡动画transition"></a>18.2 过渡动画transition</h2><p>transition提供了一种在更改CSS属性时控制动画速度的方法，可以让CSS属性变化成为一个持续一段时间的过程，而不是立即生效的。通常将两个状态之间的过渡称为<strong>隐式过渡</strong>，因为开始与结束之间的状态由浏览器决定</p>
<p>transition可以决定：哪些属性发生动画效果（明确列出这些属性）；何时开始（设置delay）；持续多久（设置duration）；如何动画（定义timing function，比如均匀地先快后慢）</p>
<p>transition CSS 属性是 transition-property，transition-duration，transition-timing-function 和 transition-delay 的一个简写属性。并非所有的CSS属性都可以执行动画（参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties%EF%BC%89">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties）</a></p>
<p><code>transition-property</code>：指定应用过渡属性的名称</p>
<ul>
<li>可以写all表示所有可动画的属性</li>
<li>属性是否支持动画查看文档</li>
</ul>
<p><code>transition-duration</code>：指定过渡动画所需的时间</p>
<ul>
<li>单位可以是s或ms</li>
</ul>
<p><code>transition-timing-function</code>：指定动画的变化曲线</p>
<p><code>transition-delay</code>：指定过渡动画执行之前的等待时间</p>
<h2 id="18-3-关键帧动画"><a href="#18-3-关键帧动画" class="headerlink" title="18.3 关键帧动画"></a>18.3 关键帧动画</h2><p><strong>之前我们学习了transition来进行过渡动画，但是过渡动画只能控制首尾两个值：</strong></p>
<ul>
<li><p>从关键帧动画的角度相当于只是定义了两帧的状态：第一帧和最后一帧。</p>
</li>
<li><p>如果我们希望可以有更多状态的变化，可以直接使用关键帧动画。</p>
</li>
</ul>
<p><strong>关键帧动画使用@keyframes来定义多个变化状态，并且使用animation-name来声明匹配：</strong></p>
<p>1.使用 @keyframes创建一个规则</p>
<p>2.@keyframes中使用百分比定义各个阶段的样式</p>
<p>3.通过animation将动画添加到属性上</p>
<p><strong>另外，也可以使用from和to关键字：</strong></p>
<ul>
<li><p>from相当于0%</p>
</li>
<li><p>to相当于100%</p>
</li>
</ul>
<h3 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h3><p><strong>CSS Animation的使用分成两个步骤：</strong></p>
<p>步骤一：使用keyframes定义动画序列（每一帧动画如何执行）</p>
<p>步骤二：配置动画执行的名称、持续时间、动画曲线、延迟、执行次数、方向等等</p>
<p><strong>@keyframes规则</strong></p>
<p><strong>可以使用@keyframes来定义多个变化状态，并且使用animation-name来声明匹配：</strong></p>
<ul>
<li><p>关键帧使用percentage来指定动画发生的时间点；</p>
</li>
<li><p>0%表示动画的第一时刻，100%表示动画的最终时刻；</p>
</li>
<li><p>因为这两个时间点十分重要，所以还有特殊的别名：from和to； </p>
</li>
</ul>
<p><strong>也就是说可以使用from和to关键字：</strong></p>
<ul>
<li><p>from相当于0%</p>
</li>
<li><p>to相当于100%</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> moveAnim &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">33%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">200px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">66%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">200px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS animation 属性是 <code>animation-name</code>，<code>animation-duration</code>, <code>animation-timing-function</code>，<code>animation-delay</code>，<code>animation-iteration-count</code>，<code>animation-direction</code>，<code>animation-fill-mode</code> 和 <code>animation-play-state</code> 属性的一个简写属性形式。</p>
<p><code>animation-name</code>：指定执行哪一个关键帧动画</p>
<p><code>animation-duration</code>：指定动画的持续时间</p>
<p><code>animation-timing-function</code>：指定动画的变化曲线</p>
<p><code>animation-delay</code>：指定延迟执行的时间</p>
<p><code>animation-iteration-count</code>：指定动画执行的次数，执行infinite表示无限动画</p>
<p><code>animation-direction</code>：指定方向，常用值normal和reverse</p>
<p><code>animation-fill-mode</code>：执行动画最后保留哪一个值</p>
<ul>
<li><p>none：回到没有执行动画的位置</p>
</li>
<li><p>forwards：动画最后一帧的位置</p>
</li>
<li><p>backwards：动画第一帧的位置</p>
</li>
</ul>
<p><code>animation-play-state</code>：指定动画运行或者暂停（在JavaScript中使用，用于暂停动画）</p>
<h1 id="19-应用场景"><a href="#19-应用场景" class="headerlink" title="19 应用场景"></a>19 应用场景</h1><h2 id="19-1-元素的水平居中方案"><a href="#19-1-元素的水平居中方案" class="headerlink" title="19.1 元素的水平居中方案"></a>19.1 元素的水平居中方案</h2><p><strong>1、行内级元素(包括inline-block元素)</strong> </p>
<p>水平居中：在父元素中设置text-align: center</p>
<p><strong>2、块级元素</strong></p>
<p>水平居中：margin: 0 auto</p>
<blockquote>
<p>CSS样式不生效技巧：</p>
<ul>
<li><p>选择器的优先级太低</p>
</li>
<li><p>选择器没选中对应的元素</p>
</li>
<li><p>CSS属性的使用形式不对</p>
<ul>
<li>元素不支持此CSS属性，比如span默认是不支持width和height的 </li>
<li>浏览器不支持此CSS属性，比如旧版本的浏览器不支持一些css module3的某些属性</li>
<li>被同类型的CSS属性覆盖，比如font覆盖font-size</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="19-2-鼠标的样式设置"><a href="#19-2-鼠标的样式设置" class="headerlink" title="19.2 鼠标的样式设置"></a>19.2 鼠标的样式设置</h2><p><strong>cursor常见的设值有</strong>：</p>
<p>auto：浏览器根据上下文决定指针的显示样式，比如根据文本和非文本切换指针样式</p>
<p>default：由操作系统决定，一般就是一个小箭头</p>
<p>pointer：一只小手，鼠标指针挪动到链接上面默认就是这个样式</p>
<p>text：一条竖线，鼠标指针挪动到文本输入框上面默认就是这个样式</p>
<p>none：没有任何指针显示在元素上面</p>
<h2 id="19-3-CSS精灵图（CSS-Sprite）"><a href="#19-3-CSS精灵图（CSS-Sprite）" class="headerlink" title="19.3 CSS精灵图（CSS Sprite）"></a>19.3 CSS精灵图（CSS Sprite）</h2><p>一种CSS图像合成技术，将各种小图片合并到一张图片上，然后利用CSS的背景定位来显示对应的图片部分</p>
<p><strong>好处</strong></p>
<ul>
<li><p>减少网页的http请求数量，加快网页响应速度，减轻服务器压力</p>
</li>
<li><p>减小图片总大小</p>
</li>
<li><p>解决了图片命名的困扰，只需要针对一张集合的图片命名</p>
</li>
</ul>
<p><strong>精灵图的使用</strong></p>
<p>精灵图的原理是通过只显示图片的很小一部分来展示的;</p>
<p><strong>通常使用背景:</strong> </p>
<p>1.设置对应元素的宽度和高度</p>
<p>2.设置精灵图作为背景图片</p>
<p>3.调整背景图片的位置来展示</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1026 程序运行时间</title>
    <url>/undefined/b91332ee/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p>
<p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>
<p>输入格式：</p>
<p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0, $10^7$]。</p>
<p>输出格式：</p>
<p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">123 4577973</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">12:42:59</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1025 反转链表</title>
    <url>/undefined/12015b6e/</url>
    <content><![CDATA[<blockquote>
<p>链表</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个常数 $K$ 以及一个单链表 $L$，请编写程序将 $L$ 中每 $K$ 个结点反转。例如：给定 $L$ 为 1→2→3→4→5→6，$K$ 为 3，则输出应该为 3→2→1→6→5→4；如果 $K$ 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 $K$ 个元素不反转。</p>
<p>输入格式：</p>
<p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤ $10^5$)、以及正整数 K (≤ $N$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p>
<p>接下来有 $N$ 行，每行格式为：<code>Address Data Next</code></p>
<p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p>
<p>输出格式：</p>
<p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>还应该考虑输入样例中有不在链表中的结点的情况。所以用个sum计数~</p>
<p>而且，algorithm头文件里面有reverse函数可以直接调用～</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> first, k, n, temp;</span><br><span class="line"> cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class="line"> <span class="keyword">int</span> data[<span class="number">100005</span>], next[<span class="number">100005</span>], list[<span class="number">100005</span>];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"> cin &gt;&gt; temp;</span><br><span class="line"> cin &gt;&gt; data[temp] &gt;&gt; next[temp];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//不⼀定所有的输⼊的结点都是有⽤的，加个计数器</span></span><br><span class="line"> <span class="keyword">while</span> (first != <span class="number">-1</span>) &#123;</span><br><span class="line"> list[sum++] = first;</span><br><span class="line"> first = next[first];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (sum - sum % k); i += k)</span><br><span class="line"> <span class="built_in">reverse</span>(<span class="built_in">begin</span>(list) + i, <span class="built_in">begin</span>(list) + i + k);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum - <span class="number">1</span>; i++)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, list[i], data[list[i]], list[i + <span class="number">1</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>, list[sum - <span class="number">1</span>], data[list[sum - <span class="number">1</span>]]);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1024 科学计数法</title>
    <url>/undefined/ca5a55fe/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]<code>.</code>[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。</p>
<p>现以科学计数法的格式给出实数 $A$，请编写程序按普通数字表示法输出 $A$，并保证所有有效位都被保留。</p>
<p>输入格式：</p>
<p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p>
<p>输出格式：</p>
<p>对每个测试用例，在一行中按普通数字表示法输出 $A$，并保证所有有效位都被保留，包括末尾的 0。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">+1.23400E-03</span><br></pre></td></tr></table></figure>
<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0.00123400</span><br></pre></td></tr></table></figure>
<p>输入样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-1.2E+10</span><br></pre></td></tr></table></figure>
<p>输出样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-12000000000</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>柳神：</p>
<p>分析：n保存E后面的字符串所对应的数字，t保存E前面的字符串，不包括符号位。当n&lt;0时表示向前移动，那么先输出0. 然后输出abs(n)-1个0，然后继续输出t中的所有数字；当n&gt;0时候表示向后移动，那么先输出第一个字符，然后将t中尽可能输出n个字符，如果t已经输出到最后一个字符(j == t.length())那么就在后面补n-cnt个0，否则就补充一个小数点. 然后继续输出t剩余的没有输出的字符～</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">&#x27;E&#x27;</span>) i++;</span><br><span class="line">    string t = s.<span class="built_in">substr</span>(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(i + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0.&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">abs</span>(n) - <span class="number">1</span>; j++) cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.<span class="built_in">length</span>(); j++)</span><br><span class="line">            <span class="keyword">if</span> (t[j] != <span class="string">&#x27;.&#x27;</span>) cout &lt;&lt; t[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; t[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt, j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>, cnt = <span class="number">0</span>; j &lt; t.<span class="built_in">length</span>() &amp;&amp; cnt &lt; n; j++, cnt++) cout &lt;&lt;</span><br><span class="line">            t[j];</span><br><span class="line">        <span class="keyword">if</span> (j == t.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - cnt; k++) cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; t.<span class="built_in">length</span>(); k++) cout &lt;&lt; t[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1023 组个最小数</title>
    <url>/undefined/985885a1/</url>
    <content><![CDATA[<blockquote>
<p>贪心</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p>
<p>现给定数字，请编写程序输出能够组成的最小的数。</p>
<p>输入格式：</p>
<p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p>
<p>输出格式：</p>
<p>在一行中输出能够组成的最小的数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            a[i]--;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++)</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1022 D进制的A+B</title>
    <url>/undefined/899cf095/</url>
    <content><![CDATA[<blockquote>
<p>进制转换</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入两个非负 10 进制整数 $A$ 和 $B$ (≤ $2^30$ − 1)，输出 $A$ + $B$ 的 $D$ (1 &lt; $D$ ≤ 10)进制数。</p>
<p>输入格式：</p>
<p>输入在一行中依次给出 3 个整数 $A$、$B$ 和 $D$。</p>
<p>输出格式：<br>输出 $A$ + $B$ 的 $D$ 进制数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">123 456 8</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">int</span> t = a + b;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">        s[i++] = t % c;</span><br><span class="line">        t /= c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        cout &lt;&lt; s[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1021 个位数统计</title>
    <url>/undefined/35873256/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 $k$ 位整数 $N$=$d_{k−1}$$10^{k-1}$ + ⋯ + $d_{1}$$10^1$ + $d_0$ (0 ≤ $d_i$ ≤ 9, $i$ = 0, ⋯ , $k$ − 1, $d_{k−1}$$&gt;0$) (0 ≤ $d_i$ ≤ 9, $i$ = 0, ⋯ , $k$ − 1, $d_{​k−1}$ &gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 $N$ = 100311，则有 2 个 0，3 个 1，和 1 个 3。</p>
<p>输入格式：<br>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $N$。</p>
<p>输出格式：<br>对 $N$ 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 $N$ 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意n为不超过1000位的整数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string n;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        a[n[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1020 月饼</title>
    <url>/undefined/db3c06db/</url>
    <content><![CDATA[<blockquote>
<p>贪心</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p>
<p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p>
<p>输入格式：</p>
<p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $D$ 表示市场最大需求量。随后一行给出 $N$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $N$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>
<p>输出格式：</p>
<p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心的经典例题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b, c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.c &gt; b.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    vector&lt;node&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].b;</span><br><span class="line">        a[i].c = a[i].b / a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].a &lt;= d)&#123;</span><br><span class="line">            sum += a[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += d * a[i].c;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d -= a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1019 数字黑洞</title>
    <url>/undefined/53a245f3/</url>
    <content><![CDATA[<blockquote>
<p>数学问题</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</p>
<p>例如，我们从6767开始，将得到</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
<p>现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</p>
<p>输入格式：</p>
<p>输入给出一个 (0,$10^4$) 区间内的正整数 $N$。</p>
<p>输出格式：</p>
<p>如果 $N$ 的 4 位数字全相等，则在一行内输出 <code>N - N = 0000</code>；否则将计算的每一步在一行内输出，直到 <code>6174</code> 作为差出现，输出格式见样例。注意每个数字按 <code>4</code> 位数格式输出。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">6767</span><br></pre></td></tr></table></figure>

<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br></pre></td></tr></table></figure>

<p>输入样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">2222</span><br></pre></td></tr></table></figure>

<p>输出样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, y;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        a[<span class="number">0</span>] = n / <span class="number">1000</span>;</span><br><span class="line">        a[<span class="number">1</span>] = n / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">2</span>] = n / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">3</span>] = n % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        x = a[<span class="number">0</span>] * <span class="number">1000</span> + a[<span class="number">1</span>] * <span class="number">100</span> + a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>];</span><br><span class="line">        y = a[<span class="number">3</span>] * <span class="number">1000</span> + a[<span class="number">2</span>] * <span class="number">100</span> + a[<span class="number">1</span>] * <span class="number">10</span> + a[<span class="number">0</span>];</span><br><span class="line">        n = y - x;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, y);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; - &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, x);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, n);</span><br><span class="line">        cout&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">6174</span> || n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神的代码，应用了c++11新特性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">4</span> - s.<span class="built_in">length</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        string a = s, b = s;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> result = <span class="built_in">stoi</span>(a) - <span class="built_in">stoi</span>(b);</span><br><span class="line">        s = <span class="built_in">to_string</span>(result);</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">4</span> - s.<span class="built_in">length</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (s != <span class="string">&quot;6174&quot;</span> &amp;&amp; s != <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>数学问题</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1018 锤子剪刀布</title>
    <url>/undefined/be9e689/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="题目图片"></p>
<p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p>
<p>输入格式：</p>
<p>输入第 1 行给出正整数 $N$（≤$10^5$），即双方交锋的次数。随后 $N$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p>
<p>输出格式：</p>
<p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">3</span>], y[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w1 = <span class="number">0</span>, w2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;C&#x27;</span> &amp;&amp; b == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;C&#x27;</span> &amp;&amp; b == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;J&#x27;</span> &amp;&amp; b == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;J&#x27;</span> &amp;&amp; b == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; w1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n - w1 - w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n - w1 - w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">char</span> l[<span class="number">3</span>] = &#123; <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;J&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> max1 = x[<span class="number">0</span>] &gt;= x[<span class="number">1</span>] ? ((x[<span class="number">0</span>] &gt;= x[<span class="number">2</span>]) ? <span class="number">0</span> : <span class="number">2</span>) : ((x[<span class="number">1</span>] &gt;= x[<span class="number">2</span>]) ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> max2 = y[<span class="number">0</span>] &gt;= y[<span class="number">1</span>] ? ((y[<span class="number">0</span>] &gt;= y[<span class="number">2</span>]) ? <span class="number">0</span> : <span class="number">2</span>) : ((y[<span class="number">1</span>] &gt;= y[<span class="number">2</span>]) ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; l[max1] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; l[max2] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1017 A除以B</title>
    <url>/undefined/aa3c1048/</url>
    <content><![CDATA[<blockquote>
<p>大数运算</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>本题要求计算 $A/B$，其中 $A$ 是不超过 1000 位的正整数，$B$ 是 1 位正整数。你需要输出商数 $Q$ 和余数 $R$，使得 $A$ = $B$ × $Q$ + $R$ 成立。</p>
<p>输入格式：</p>
<p>输入在一行中依次给出 $A$ 和 $B$，中间以 1 空格分隔。</p>
<p>输出格式：</p>
<p>在一行中依次输出 $Q$ 和 $R$，中间以 1 空格分隔。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">123456789050987654321 7</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>手动模拟除法。这道题我用万能头文件 <code>bits/stdc++.h</code> 最后一个测试点超时了，事实证明，头文件还是记记比较好</p>
<p>我的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="keyword">int</span> b, m, n;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">    m = (a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) / b;</span><br><span class="line">    <span class="keyword">if</span> ((m != <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>) || len == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">    n = (a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) % b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        m = (n * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>) / b;</span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">        n = (n * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>) % b;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>大数运算</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1016 部分A+B</title>
    <url>/undefined/63e31c49/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>正整数 $A$ 的 “$D_A$ （为 1 位整数）部分”定义为由 $A$ 中所有 $D_A$ 组成的新整数 $P_A$。例如：给定 $A$ = 3862767，$D_A$ = 6，则 $A$ 的“6 部分” $P_A$<br>是 66，因为 $A$ 中有 2 个 6。</p>
<p>现给定 $A$、$D_A$、$B$、$D_B$，请编写程序计算 $P_A$ + $P_B$。</p>
<p>输入格式：</p>
<p>输入在一行中依次给出 $A$、$D_A$、$B$、$D_B$，中间以空格分隔，其中 0 &lt; $A$,$B$ &lt; $10^9$。</p>
<p>输出格式：</p>
<p>在一行中输出 $P_A$ + $P_B$ 的值。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3862767 6 13530293 3</span><br></pre></td></tr></table></figure>

<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">399</span><br></pre></td></tr></table></figure>

<p>输入样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3862767 1 13530293 8</span><br></pre></td></tr></table></figure>

<p>输出样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d, t;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">while</span> (a) &#123;</span><br><span class="line">        t = a % <span class="number">10</span>;</span><br><span class="line">        a /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == b) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;	</span><br><span class="line">    <span class="keyword">while</span> (c) &#123;</span><br><span class="line">        t = c % <span class="number">10</span>;</span><br><span class="line">        c /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == d) &#123;</span><br><span class="line">            y = y * <span class="number">10</span> + d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x + y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    <span class="keyword">int</span> da, db, cnta = <span class="number">0</span>, cntb = <span class="number">0</span>, pa = <span class="number">0</span>, pb = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; da &gt;&gt; b &gt;&gt; db;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (da == (a[i] - <span class="string">&#x27;0&#x27;</span>)) cnta++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">length</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (db == (b[i] - <span class="string">&#x27;0&#x27;</span>)) cntb++;</span><br><span class="line">    <span class="keyword">if</span> (cnta != <span class="number">0</span>) pa = da;</span><br><span class="line">    <span class="keyword">if</span> (cntb != <span class="number">0</span>) pb = db;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnta; i++)</span><br><span class="line">        pa = <span class="number">10</span> * pa + da;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cntb; i++)</span><br><span class="line">        pb = <span class="number">10</span> * pb + db;</span><br><span class="line">    cout &lt;&lt; pa + pb;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ消息轰炸器</title>
    <url>/undefined/cd8fce3/</url>
    <content><![CDATA[<blockquote>
<p>QQ消息轰炸器，可调时间间隔，发送数量</p>
</blockquote>
<span id="more"></span>
<p>今天发现了一个好玩的东东，记录到博客上</p>
<p>注意更改一下消息间隔时间，提前复制好要发送的内容，打开要轰炸对象的聊天窗口，然后运行该代码</p>
<p>（该代码在vs2019下会报错，我使用的是dev）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> time ?<span class="comment">//更改发送消息间隔时间 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];<span class="comment">//使用前先复制要轰炸的内容 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要轰炸的对象的名称：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;name,<span class="number">40</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要轰炸的次数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">    HWND H =FindWindow(<span class="number">0</span>,name);<span class="comment">//找到对话窗口 </span></span><br><span class="line">    <span class="keyword">while</span>(i--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        SendMessage(H,WM_PASTE,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//粘贴内容 </span></span><br><span class="line">        SendMessage(H,WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);<span class="comment">//回车发送</span></span><br><span class="line">        Sleep(time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>业余</category>
      </categories>
      <tags>
        <tag>小游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新特性</title>
    <url>/undefined/fbe3d523/</url>
    <content><![CDATA[<blockquote>
<p>C++11 是2011年官方为c++带来的新语法新标准</p>
</blockquote>
<span id="more"></span>
<h2 id="auto声明"><a href="#auto声明" class="headerlink" title="auto声明"></a>auto声明</h2><p>让编译器根据初始值类型直接推断出变量的类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set的迭代器原始写法：</span></span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="keyword">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// auto写法：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于范围的for循环"><a href="#基于范围的for循环" class="headerlink" title="基于范围的for循环"></a>基于范围的for循环</h2><p>遍历数组中的每一个元素时使用时比较方便</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl; <span class="comment">// 输出数组中的每一个元素的值，每个元素占据一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : arr) <span class="comment">// i为引用变量</span></span><br><span class="line">    i = i * <span class="number">2</span>; <span class="comment">// 将数组中的每一个元素都乘以2，arr[4]的内容变为了&#123;0, 2, 4, 6&#125;</span></span><br></pre></td></tr></table></figure>

<p>当然上面的也可以替换为auto</p>
<h2 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h2><p><code>stoi</code> 转换为int</p>
<p><code>stod</code> 转换为double</p>
<p><code>stof</code> 转换为float</p>
<p><code>stold</code> 转换为long double</p>
<p><code>stol</code> 转换为long</p>
<p><code>stoll</code> 转换为long long</p>
<p><code>stoul</code> 转换为unsigh long</p>
<p><code>stoull</code> 转换为unsigh long long</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1015 德才论</title>
    <url>/undefined/dca58f07/</url>
    <content><![CDATA[<blockquote>
<p>排序</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p>
<p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>
<p>输入格式：</p>
<p>输入第一行给出 3 个正整数，分别为：N（≤105），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。</p>
<p>随后 N 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p>
<p>输出格式：</p>
<p>输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>参考柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num, a, b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(struct node a, struct node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.a + a.b != b.a + b.b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (a.a + a.b) &gt; (b.a + b.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.a != b.a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.a &gt; b.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    m = n;</span><br><span class="line">    vector&lt;node&gt; v[<span class="number">4</span>];</span><br><span class="line">    node t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t.num &gt;&gt; t.a &gt;&gt; t.b;</span><br><span class="line">        <span class="keyword">if</span> (t.a &lt; a || t.b &lt; a)</span><br><span class="line">        &#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &gt;= b &amp;&amp; t.b &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">0</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &gt;= b &amp;&amp; t.b &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">1</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &lt; b &amp;&amp; t.b &lt; b &amp;&amp; t.a &gt;= t.b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">2</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v[<span class="number">3</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; v[i][j].num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j].a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j].b &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1014 福尔摩斯的约会</title>
    <url>/undefined/65d96382/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>大侦探福尔摩斯接到一张字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间 <code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>
<p>输入格式：</p>
<p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>
<p>输出格式：</p>
<p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b, c, d;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> pos, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; i &lt; b.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; (a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;G&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">0</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; i &lt; b.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; ((a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;N&#x27;</span>) || <span class="built_in">isdigit</span>(a[i])))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">1</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; c.<span class="built_in">length</span>() &amp;&amp; j &lt; d.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[j] == d[j] &amp;&amp; <span class="built_in">isalpha</span>(c[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    string week[<span class="number">7</span>] = &#123;<span class="string">&quot;MON &quot;</span>, <span class="string">&quot;TUE &quot;</span>, <span class="string">&quot;WED &quot;</span>, <span class="string">&quot;THU &quot;</span>, <span class="string">&quot;FRI &quot;</span>, <span class="string">&quot;SAT &quot;</span>, <span class="string">&quot;SUN &quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">isdigit</span>(t[<span class="number">1</span>]) ? t[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> : t[<span class="number">1</span>] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; week[t[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d&quot;</span>, m, pos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1013 数素数</title>
    <url>/undefined/7a6aca52/</url>
    <content><![CDATA[<blockquote>
<p>素数</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>令 $P_i$ 表示第 $i$ 个素数。现任给两个正整数 $M$ ≤ $N$ ≤ $10_4$，请输出 $P_M$ 到 $P_N$ 的所有素数。</p>
<p>输入格式：</p>
<p>输入在一行中给出 $M$ 和 $N$，其间以空格分隔。</p>
<p>输出格式：</p>
<p>输出从 $P_M$ 到 $P_N$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5 27</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题与上一道题都没有能熟练使用 <code>vector</code>，另外记忆一下 <code>isprime</code> 的使用</p>
<p>我乱糟糟的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, k = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span> (k &gt;= m &amp;&amp; k &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">if</span> (l % <span class="number">10</span> != <span class="number">1</span>)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout &lt;&lt; i;</span><br><span class="line">                <span class="keyword">if</span> (l % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">                    cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, N, num = <span class="number">2</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span> (cnt &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprime</span>(num))</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= M)</span><br><span class="line">                v.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]);</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1012 数字分类</title>
    <url>/undefined/77a65920/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>
<ul>
<li>$A_1$ = 能被 5 整除的数字中所有偶数的和；</li>
<li>$A_2$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1$ − $n_2$ + $n_3$​​ − $n_4$​​ ⋯；</li>
<li>$A_3$ = 被 5 除后余 2 的数字的个数；</li>
<li>$A_4$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>
<li>$A_5$ = 被 5 除后余 4 的数字中最大数字。</li>
</ul>
<p>输入格式：</p>
<p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$，随后给出 $N$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>
<p>输出格式：</p>
<p>对给定的 $N$ 个正整数，按题目要求计算 $A_1$​ ~ $A_5$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>
<p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure>

<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure>

<p>输入样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure>

<p>输出样例2 ：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我乱糟糟的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a1, a3, a4, a5, i, j;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a2</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; m % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            a1 += m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">1</span>)</span><br><span class="line">            a2[i++] = m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">2</span>)</span><br><span class="line">            a3++;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a4 += m;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">4</span> &amp;&amp; a5 &lt; m)</span><br><span class="line">            a5 = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b1 = a2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> b2;</span><br><span class="line">    <span class="keyword">if</span> (a4 != <span class="number">0</span>)</span><br><span class="line">        b2 = (<span class="keyword">double</span>)a4 / j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            b1 -= a2[k];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b1 += a2[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a1 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (b1 != <span class="number">0</span> || i != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; b1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a3 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a3;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)b2 != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>, b2);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a5 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a5;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, num, A1 = <span class="number">0</span>, A2 = <span class="number">0</span>, A5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> A4 = <span class="number">0.0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        v[num % <span class="number">5</span>].<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; v[i][j] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                A1 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                A2 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                A2 -= v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">                A4 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span> &amp;&amp; v[i][j] &gt; A5)</span><br><span class="line">                A5 = v[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; A1 == <span class="number">0</span> || i != <span class="number">0</span> &amp;&amp; v[i].<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A1);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A2);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[<span class="number">2</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f&quot;</span>, A4 / v[<span class="number">3</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1011 A+B和C</title>
    <url>/undefined/429323b4/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定区间 [−$2^{31}$, $2^{​31}$]内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</p>
<p>输入格式：</p>
<p>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p>
<p>输出格式：</p>
<p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 A+B&gt;C，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (a + b &gt; c)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;true&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;false&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1010 一元多项式求导</title>
    <url>/undefined/9d6225b6/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计函数求一元多项式的导数。（注：$x^n$（n为整数）的一阶导数为$nx^{n−1}$​。）</p>
<p>输入格式:</p>
<p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>
<p>输出格式:</p>
<p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; n*m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m<span class="number">-1</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;0 0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1009 说反话</title>
    <url>/undefined/88699ef4/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>
<p>输入格式：</p>
<p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，输出倒序后的句子。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用栈来实现说反话</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack&lt;string&gt; v;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s) v.<span class="built_in">push</span>(s);</span><br><span class="line">    cout &lt;&lt; v.<span class="built_in">top</span>();</span><br><span class="line">    v.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!v.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v.<span class="built_in">top</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/undefined/167cd958/</url>
    <content><![CDATA[<blockquote>
<p>链表，双向链表，栈和队列</p>
</blockquote>
<span id="more"></span>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// head 表示头结点的下标</span></span><br><span class="line"><span class="comment">// e[i] 表示节点i的值</span></span><br><span class="line"><span class="comment">// ne[i] 表示节点i的next指针是多少</span></span><br><span class="line"><span class="comment">// idx 存储当前已经用到了哪个点</span></span><br><span class="line"><span class="keyword">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标是k的点后面的点删掉</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k, x;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i != <span class="number">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1008 数组元素循环右移问题</title>
    <url>/undefined/93960f0b/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个数组A中存有 $N$（$N$ &gt; 0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移 $M$（$M$ $\geq$ 0）个位置，即将A中的数据由（$A_0$ $A_1$ ……$A_{N-1}$）变换为 （$A_{N-M}$ …… $A_{N-1}$ $A_0$ $A_1$ …… $A_{N-M-1}$）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>
<p>输入格式：</p>
<p>每个输入包含一个测试用例，第1行输入N ( 1 $\leq$ N $\leq$ 100)、M（M $\geq$ 0）；第2行输入N个整数，之间用空格分隔。</p>
<p>输出格式：</p>
<p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5 6 1 2 3 4 </span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="about:blank#%E9%A2%98%E8%A7%A3" title="题解"></a>题解</h2><p>WA代码（未考虑全面）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != n - m) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神代码</p>
<p>分析：数组长度为n，要想把数组循环右移m位，只需要先将整个数组a倒置，再将数组前m位倒置， 最后将数组后n-m位倒置即可完成循环右移m位～reverse函数可以实现将⼀个数组或者vector中元素倒置，这个函数在algorithm头文件中～（如果m大于n，那么循环右移m位相当于循环右移m%n位，因为 那些n倍数位的移动是多余的，所以在使用m之前，先将m = m%n）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    m %= n;</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a), <span class="built_in">begin</span>(a) + n);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a), <span class="built_in">begin</span>(a) + m);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a) + m, <span class="built_in">begin</span>(a) + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; a[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1007 素数对猜想</title>
    <url>/undefined/bb78715c/</url>
    <content><![CDATA[<blockquote>
<p>素数</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>让我们定义 $d_n$ 为： $d_n$ = $p_{n+1}$ – $p_n$，其中 $p_i$ 是第 $i$ 个素数。显然有 $d_1$ = 1 且对于 n &gt; 1有 $d_n$ 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p>
<p>现给定任意正整数 $N$ (&lt; 105)，请计算不超过 $N$ 的满足猜想的素数对的个数。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，给出正整数N。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，不超过N的满足猜想的素数对的个数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sushu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sushu</span>(i - <span class="number">2</span>) &amp;&amp; <span class="built_in">sushu</span>(i)) cnt++;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1006 换个格式输出整数</title>
    <url>/undefined/decf7eb4/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用“12…n”来表示个位数字n（&lt;10），换个格式来输出任⼀个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，给出正整数 n（&lt;1000）。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，用规定的格式输出n。</p>
<p>输入样例1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure>

<p>输出样例1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure>

<p>输入样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure>

<p>输出样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分别用a, b, c存储百位，十位和个位</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a = n / <span class="number">100</span>;</span><br><span class="line">    b = n % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">    c = n % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) cout &lt;&lt; <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++) cout &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神代码</p>
<p>分析：因为n小于1000，所以数字不会超过百位～输入数据首先保存在a中，然后将a的每一个数字保存在int b[3]中，然后将b[2]、b[1]、b[0]中存储的数字看作输出次数依次输出B、S和12..b[0]～</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, i = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        b[i++] = a % <span class="number">10</span>;</span><br><span class="line">        a = a / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">2</span>]; k++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">1</span>]; k++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">0</span>]; k++)</span><br><span class="line">        cout &lt;&lt; k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1005 继续(3n+1)猜想</title>
    <url>/undefined/d0f5313/</url>
    <content><![CDATA[<blockquote>
<p>Hash散列</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p>
<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。</p>
<p>现在给定⼀系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，第1行给出⼀个正整数K(&lt;100)，第2行给出K个互不相同的待验证的正整数n(1&lt;n&lt;=100)的值，数字间用空格隔开。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对每⼀个输⼊的数字n进行验证，把验证过的数字对应的arr标记为1，而最开始验证的数字对应的arr仍为0。对这些输入的数字从大到小排序，输出所有arr=0的数字即为关键数字（即需要验证的数字）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        v[i] = n;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) n = <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[n] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            arr[n] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[v[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; v[i];</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>Hash散列</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1004 成绩排名</title>
    <url>/undefined/e6d09e95/</url>
    <content><![CDATA[<blockquote>
<p>查找元素</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，格式为</p>
<p>第1行：正整数n</p>
<p>第2行：第1个学生的姓名 学号 成绩</p>
<p>第3行：第2个学生的姓名 学号 成绩</p>
<p>… … …</p>
<p>第n+1行：第n个学生的姓名 学号 成绩</p>
<p>其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的⼀个整数，这里保证在⼀组测试用例中没有两个学生的成绩是相同的。</p>
<p>输出格式：</p>
<p>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。</p>
<p>输入样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">Joe Math990112 <span class="number">89</span></span><br><span class="line">Mike CS991301 <span class="number">100</span></span><br><span class="line">Mary EE990830 <span class="number">95</span></span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>相当于找出最大值和最小值的变形吧</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    string name, num, maxname, minname, maxnum, minnum;</span><br><span class="line">    <span class="keyword">int</span> grade, maxgrade = <span class="number">-1</span>, mingrade = <span class="number">101</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; name &gt;&gt; num &gt;&gt; grade;</span><br><span class="line">        <span class="keyword">if</span> (grade &gt; maxgrade) &#123;</span><br><span class="line">            maxgrade = grade;</span><br><span class="line">            maxname = name;</span><br><span class="line">            maxnum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(grade &lt; mingrade) &#123;</span><br><span class="line">            mingrade = grade;</span><br><span class="line">            minname = name;</span><br><span class="line">            minnum = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; maxname &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; maxnum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; minname &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; minnum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>查找元素</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1003 我要通过</title>
    <url>/undefined/d949a5c0/</url>
    <content><![CDATA[<blockquote>
<p>数学</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。<br>得到“答案正确”的条件是：</p>
<ol>
<li> 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；</li>
<li> 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li>
<li> 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</li>
</ol>
<p>现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例。第1行给出一个自然数n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。</p>
<p>输出格式：</p>
<p>每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分析：</p>
<p>任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；<br>那么正确的有这些：</p>
<p>PAT</p>
<p>APATA</p>
<p>AAPATAA</p>
<p>AAAPATAAA</p>
<p>…不说了，就是中间⼀个A左右加上等量的A（不加也行）都是正确的。</p>
<p>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母A组成的字符串。</p>
<p>拿上面的那几个正确的举例⼦，那么正确的有这些：</p>
<p>PAT —— 对于 aPbTc 来说ac是空，b是A。所以 PAAT 是正确的。同理PAAAAAT中间加多少个A都是正确哒～</p>
<p>APATA —— 对于aPbTc来说，abc都是A。所以 APAATAA 是正确的。再类推⼀下，那么 APAAATAAA 是正<br>确的。</p>
<p>AAPATAA —— 对于aPbTc来说，a和c是AA，b是A。所以AAPAATAAAA是正确的，再类推⼀下，AAPAAATAAAAAA 是正确的～～</p>
<p>所以说规律就是，可以在P和T中间加A并且在T后面加A，要求必须是，中间加上⼀个A，末尾就得加上几倍的(P前面A的那个字符串)。换句话说就是，中间的A的个数如果是3，那么末尾的A的个数就得是开头A的个数的3倍。很巧，当中间A为一个的时候，末尾和开头A的个数必须相等正好是第二条的要求～</p>
<p>一句话总结字符串的要求：只能有一个P一个T，中间末尾和开头可以随便插入A。但是必须满足开头的A的个数 * 中间的A的个数 = 结尾的A的个数，而且P和T中间不能没有A～</p>
<p>（以上摘录于柳神的博客）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, p = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            m[s[j]]++;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;P&#x27;</span>) p = j;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;T&#x27;</span>) t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m[<span class="string">&#x27;P&#x27;</span>] == <span class="number">1</span> &amp;&amp; m[<span class="string">&#x27;A&#x27;</span>] != <span class="number">0</span> &amp;&amp; m[<span class="string">&#x27;T&#x27;</span>] == <span class="number">1</span> &amp;&amp; m.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; t-p != <span class="number">1</span> &amp;&amp; p * (t-p<span class="number">-1</span>) == s.<span class="built_in">length</span>()-t<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>stl初识</title>
    <url>/undefined/49ab1d75/</url>
    <content><![CDATA[<blockquote>
<p>stl总体的简单认识</p>
</blockquote>
<span id="more"></span>

<h1 id="1-STL初识"><a href="#1-STL初识" class="headerlink" title="1 STL初识"></a>1 STL初识</h1><h2 id="1-1-STL六大组件"><a href="#1-1-STL六大组件" class="headerlink" title="1.1 STL六大组件"></a>1.1 STL六大组件</h2><p>容器，算法，迭代器，仿函数，适配器（配接器），空间配置器</p>
<p><strong>容器</strong>： 各种数据结构，如vector，list，deque，set，map等，用来存放数据</p>
<ul>
<li>序列式容器：强调值的排序，序列式容器中每个元素均有固定的位置</li>
<li>关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系</li>
</ul>
<p><strong>算法</strong>： 各种常用的算法，如sort，find，copy，for_each等。分为质变算法和非质变算法</p>
<ul>
<li>质变算法：是指运算过程中会更改区间的元素的内容。例如拷贝，替换，删除等等</li>
<li>非质变算法：是指运算过程中不会更改区间的元素内容，例如查找，计数，遍历，寻找极值等等</li>
</ul>
<p><strong>迭代器</strong>： 扮演了容器与算法之间的胶合剂</p>
<p><strong>仿函数</strong>： 行为类似函数，可作为算法的某种策略</p>
<p><strong>适配器</strong>： 一种用来修饰容器或者仿函数或迭代器接口的东西</p>
<p><strong>空间配置器</strong>： 负责空间的配置和管理</p>
<h2 id="1-2-容器算法迭代器初识"><a href="#1-2-容器算法迭代器初识" class="headerlink" title="1.2 容器算法迭代器初识"></a>1.2 容器算法迭代器初识</h2><h3 id="1-2-1-vector存放内置数据类型"><a href="#1-2-1-vector存放内置数据类型" class="headerlink" title="1.2.1 vector存放内置数据类型"></a>1.2.1 vector存放内置数据类型</h3><p>容器：vector</p>
<p>算法：for_each</p>
<p>迭代器：vector<int>::iterator</p>
<pre><code>v.begin()返回迭代器，这个迭代器指向容器中的第一个元素
v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置
v.rend()返回迭代器，这个迭代器指向容器中的第一个元素的上一个位置
v.rbegin()返回迭代器，这个迭代器指向容器中的最后一个元素
insert()
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器存放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个vector容器，数组</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="comment">//向容器插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line">    <span class="comment">//通过迭代器来访问容器中的数据</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();</span><br><span class="line">    <span class="comment">//第一种遍历方式</span></span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd) &#123;</span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种遍历方式</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三种遍历方式</span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-vector存放自定义数据类型"><a href="#1-2-2-vector存放自定义数据类型" class="headerlink" title="1.2.2 vector存放自定义数据类型"></a>1.2.2 vector存放自定义数据类型</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器中存放自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; (*it).m_Age &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型，指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Person*&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p4);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p5);</span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person*&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; (*it)-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; (*it)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-vector容器嵌套容器"><a href="#1-2-3-vector容器嵌套容器" class="headerlink" title="1.2.3 vector容器嵌套容器"></a>1.2.3 vector容器嵌套容器</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建大容器</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;v;</span><br><span class="line">    <span class="comment">//创建小容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">    <span class="comment">//向小容器中添加数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        v2.<span class="built_in">push_back</span>(i + <span class="number">2</span>);</span><br><span class="line">        v3.<span class="built_in">push_back</span>(i + <span class="number">3</span>);</span><br><span class="line">        v4.<span class="built_in">push_back</span>(i + <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将小容器插入到大容器中</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v4);</span><br><span class="line">    <span class="comment">//通过大容器，把所有数据遍历一遍</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//(*it)-----容器vector&lt;int&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator vit = (*it).<span class="built_in">begin</span>(); vit != (*it).<span class="built_in">end</span>(); vit++) &#123;</span><br><span class="line">            cout &lt;&lt; *vit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-vector"><a href="#2-vector" class="headerlink" title="2 vector"></a>2 vector</h1><h2 id="2-1-vector基本概念"><a href="#2-1-vector基本概念" class="headerlink" title="2.1 vector基本概念"></a>2.1 vector基本概念</h2><p>功能：vector数据结构和数组非常相似，也称为单端数组</p>
<p>区别：数组是静态空间，而vector可以动态扩展</p>
<p>动态扩展：并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间。vector迭代器是支持随机访问的迭代器</p>
<h2 id="2-2-vector构造函数"><a href="#2-2-vector构造函数" class="headerlink" title="2.2 vector构造函数"></a>2.2 vector构造函数</h2><p>功能：创建vector容器</p>
<p>函数原型：</p>
<ul>
<li><code>vector&lt;T&gt; v;</code>  //采用模板实现类实现，默认构造函数</li>
<li><code>vector(v.begin(),v.end());</code>  //将v[begin(),end())区间中的元素拷贝给本身(注意区间为前闭后开)</li>
<li><code>vector(n,elem);</code>  //构造函数将n个elem拷贝给本身</li>
<li><code>vector(const vector &amp;vec);</code>  //拷贝构造函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的构造</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;<span class="comment">//默认构造 无参构造</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="comment">//通过区间方式进行构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v2</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v2);<span class="comment">//均输出0到9</span></span><br><span class="line">    <span class="comment">//n个elem方式构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v3</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v3);<span class="comment">//输出10个100</span></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v4</span>(v3);</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-vector赋值操作"><a href="#2-3-vector赋值操作" class="headerlink" title="2.3 vector赋值操作"></a>2.3 vector赋值操作</h2><p>函数原型：</p>
<ul>
<li><code>vector&amp; operator=(const vector &amp;vec);</code>  //重载等号操作符</li>
<li><code>assign(beg,end);</code>  //将[beg,end)区间中的数据拷贝赋值给本身</li>
<li><code>assign(n,elem);</code>  //将n个elem拷贝赋值给本身</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="comment">//赋值 operator=</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">    v2 = v1;</span><br><span class="line">    <span class="built_in">printVector</span>(v2);</span><br><span class="line">    <span class="comment">//assign</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">    v3.<span class="built_in">assign</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line">    <span class="comment">//n个elem方式赋值</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">    v4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-vector容量和大小"><a href="#2-4-vector容量和大小" class="headerlink" title="2.4 vector容量和大小"></a>2.4 vector容量和大小</h2><p>函数原型：</p>
<p><code>empty();</code>//判断容器是否为空</p>
<p><code>capacity();</code>  //容器的容量</p>
<p><code>size();</code> //返回容器中元素的个数</p>
<p><code>resize(int num);</code>  //重新指定容器的长度为num，若容器变长，则以默认值填充新位置；若容器变短，则末尾超出容器长度的元素被删除</p>
<p><code>resize(int num,elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置；若容器变短，则末尾超出容器长度的元素被删除</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的容量和大小操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> (v1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1的容量为：&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1的大小为：&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新指定大小</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">15</span>);<span class="comment">//利用重载版本，可以指定默认填充值，参数2</span></span><br><span class="line">    <span class="built_in">printVector</span>(v1);<span class="comment">//如果重新指定的比原来长了，默认用0填充原来的位置</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v1);<span class="comment">//如果重新指定的比原来的短了，超出部分会删除掉</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-string"><a href="#3-string" class="headerlink" title="3 string"></a>3 string</h1><h2 id="3-1-string基本概念"><a href="#3-1-string基本概念" class="headerlink" title="3.1 string基本概念"></a>3.1 string基本概念</h2><ul>
<li>string是C++风格的字符串，而string本质上是一个类，类内部封装了char *，管理这个字符串，是一个char *型的容器</li>
<li>char*是一个指针</li>
</ul>
<p>特点:</p>
<ul>
<li>string类内部封装了很多成员方法，例如：查找find，拷贝copy，删除delete替换repliace，插入insert</li>
<li>string管理char *所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</li>
</ul>
<h2 id="3-2-string构造函数"><a href="#3-2-string构造函数" class="headerlink" title="3.2 string构造函数"></a>3.2 string构造函数</h2><p>构造函数原型：</p>
<ul>
<li><p><code>string();</code>   //创建一个空的字符串 例如：string str;</p>
<p><code>string(const char* s);</code>  //使用字符串s初始化</p>
</li>
<li><p><code>string(const string&amp; str);</code>  //使用一个string对象初始化另一个string对象</p>
</li>
<li><p><code>string(int n,char c)</code>  //使用n个字符c初始化</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s1;<span class="comment">//默认构造</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-string赋值操作"><a href="#3-3-string赋值操作" class="headerlink" title="3.3 string赋值操作"></a>3.3 string赋值操作</h2><p>赋值的函数原型：</p>
<ul>
<li><code>string&amp; operator=(const char* s);</code>  //char* 类型字符串 赋值给当前的字符串</li>
<li><code>string&amp; operator=(const string &amp;s);</code>  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; operator=(char c);</code>  //字符赋给当前的字符串</li>
<li><code>string&amp; assign=(const char *s);</code>  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign=(const char *s,int n);</code>  //把字符串s的前n个字符赋给当前的字符串</li>
<li><code>string&amp; assign=(const char&amp; s);</code>  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign(int n,char c);</code>  //用n个字符c赋给当前字符串</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1;</span><br><span class="line">    str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str2;</span><br><span class="line">    str2 = str1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    string str3;</span><br><span class="line">    str3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    string str4;</span><br><span class="line">    str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">    string str5;</span><br><span class="line">    str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line">    string str6;</span><br><span class="line">    str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line">    string str7;</span><br><span class="line">    str7.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>operator方式较为常见</p>
<h2 id="3-4-string字符串拼接"><a href="#3-4-string字符串拼接" class="headerlink" title="3.4 string字符串拼接"></a>3.4 string字符串拼接</h2><p>函数原型：</p>
<ul>
<li><code>string&amp; operator+=(const char* str);</code>  //重载+=操作符</li>
<li><code>string&amp; operator+=(const char c);</code>  //重载+=操作符</li>
<li><code>string&amp; operator+=(const string&amp; str);</code>  //重载+=操作符</li>
<li><code>string&amp; append(const char *s);</code>  //把字符串s连接到当前字符串结尾</li>
<li><code>string&amp; append(const char *s,int n);</code>  //把字符串s的前n个字符连接到当前字符串结尾</li>
<li><code>string&amp; append(const string &amp;s);</code>  //同operator+=(const string&amp; str)</li>
<li><code>string&amp; append(const string &amp;s,int pos,int n);</code>  //字符串s中从pos开始的n个字符连接到字符串结尾</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">    str1 += <span class="string">&quot;爱玩游戏&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    str1 += <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str2 = <span class="string">&quot;LOL DNF&quot;</span>;</span><br><span class="line">    str1 += str2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str3 = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot; love &quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot;game abcde&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//str3.append(str2);</span></span><br><span class="line">    str3.<span class="built_in">append</span>(str2, <span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-string查找和替换"><a href="#3-5-string查找和替换" class="headerlink" title="3.5 string查找和替换"></a>3.5 string查找和替换</h2><p>查找：查找指定字符串是否存在</p>
<p>替换：在指定位置替换字符串</p>
<p>函数原型：</p>
<ul>
<li><code>int find(const string&amp; str,int pos = 0) const;</code>  //查找str第一次出现位置，从pos开始查找</li>
<li><code>int find(const char* s,int pos = 0) const;</code>  //查找s第一次出现位置，从pos开始查找</li>
<li><code>int find(const char* s,int pos,int n) const;</code>  //从pos位置查找的前n个字符第一次位置</li>
<li><code>int find(const char c,int pos = 0) const;</code>  //查找字符c第一次出现位置</li>
<li><code>int rfind(const string&amp; str,int pos = npos) const;</code>  //查找str最后一次位置，从pos开始查找</li>
<li><code>int rfind(const char* s,int pos = npos) const;</code>  //查找s最后一次出现位置，从pos开始查找</li>
<li><code>int rfind(const char* s,int pos,int n) const;</code>  //从pos查找s的前n个字符最后一次出现位置</li>
<li><code>int rfind(const char c,int pos = 0) const;</code>  //查找字符c最后一次出现位置</li>
<li><code>string&amp; replace(int pos,int n,const string&amp; str);</code>  //替换从pos开始n个字符为字符串str</li>
<li><code>string&amp; replace(int pos,int n,const char* s);</code>  //替换从pos开始n个字符为字符串s</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到字符串&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到字符串，pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//rfind</span></span><br><span class="line">    str1.<span class="built_in">rfind</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 替换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    str1.<span class="built_in">replace</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);<span class="comment">//此处替换4个1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>find从左往右查，rfind从右往左查找</li>
<li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li>
<li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li>
</ul>
<h2 id="3-6-string字符串比较"><a href="#3-6-string字符串比较" class="headerlink" title="3.6 string字符串比较"></a>3.6 string字符串比较</h2><p>根据ASCII码比较，=返回0，&gt;返回1，&lt;返回-1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串比较</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-7-string字符存取"><a href="#3-7-string字符存取" class="headerlink" title="3.7 string字符存取"></a>3.7 string字符存取</h2><ul>
<li><code>char&amp; operator[](int n);</code>  //通过[]方式取字符</li>
<li><code>char&amp; at(int n);</code>  //通过at方法获取字符</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string字符存取</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//1 通过[]访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//2 通过at方式访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; str.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//修改单个字符</span></span><br><span class="line">    str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//xello</span></span><br><span class="line">    str.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h3><ul>
<li><code>string&amp; insert(int pos,const char* s);</code>  //插入字符串</li>
<li><code>string&amp; insert(int pos,const string&amp; str);</code>  //插入字符串</li>
<li><code>string&amp; insert(int pos,int n,char c);</code>  //在指定位置插入n个字符c</li>
<li><code>string&amp; erase(int pos,int n = npos);</code>  //删除从pos开始的n个字符</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串的插入和删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="comment">//h111ello</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插入和删除的起始下标都是从0开始</p>
<h3 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h3><p>从字符串中获取想要的子串</p>
<p>函数原型：</p>
<ul>
<li><code>string substr(int pos = 0,int n=npos) const;</code>  //返回由pos开始的n个字符组组成的字符串</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string求子串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    string subStr = str.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实用操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string email = <span class="string">&quot;zhangsan@sina.com&quot;</span>;</span><br><span class="line">    <span class="comment">//从邮件地址中 获取 用户名信息</span></span><br><span class="line">    <span class="keyword">int</span> pos = email.<span class="built_in">find</span>(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">    string userName = email.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;userName = &quot;</span> &lt;&lt; userName &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>基础算法</title>
    <url>/undefined/83fa91fc/</url>
    <content><![CDATA[<blockquote>
<p>排序和二分的笔记</p>
</blockquote>
<span id="more"></span>
<h1 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h1><h2 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h2><p>基于分治，不稳定的排序</p>
<ul>
<li>确定分界点：q[l]，q[(l+r)/2]，q[r]，随机（即左边界，中间数，有边界，随机）</li>
<li>调整区间：小于分界点的数在左边，大于分界点的数在右边</li>
<li>递归处理左右两端</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>; <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">int</span> x = q[(l + r) &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<p>如果x选取<code>q[l]</code>，则递归时参数范围选择<code>(l, j)</code>和<code>(j + 1, r)</code></p>
<p>如果x选取<code>q[r]</code>，则递归时参数范围选择<code>(l, i - 1)</code>和<code>(i, r)</code></p>
<p>如果x选取<code>q[l + r &gt;&gt; 1]</code>，则递归时参数范围选择哪种都行</p>
<p><strong>证明：</strong></p>
<p>反例：</p>
<p>如果算法x选取q[l]，即x = q[0] = 1，递归时参数范围选择<code>(l, i - 1)</code>和<code>(i, r)</code>，则下一次迭代后i = 0，j = 0，递归时参数的范围为(0, -1)和(0, 1)，其中第1个递归无效，第2个递归与之前一致，陷入死循环。</p>
<p>同理如果算法x选取q[r]，即x = q[1] = 2，递归时参数范围选择(l, j)和(j + 1, r)，则下一次迭代后i = 1，j = 1，递归时参数的范围为(0, 1)和(2, 1)，其中第2个递归无效，第1个递归与之前一致，陷入死循环。</p>
<h2 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h2><p>也是基于分治，但是有差别，稳定的排序</p>
<ul>
<li>确定分界点 mid = (l + r) / 2（下标的中间位置）</li>
<li>递归排序left, right</li>
<li>归并——合二为一</li>
</ul>
<p>时间复杂度$O(nlogn)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> q[N], tmp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-二分"><a href="#2-二分" class="headerlink" title="2 二分"></a>2 二分</h1><h2 id="2-1-整数"><a href="#2-1-整数" class="headerlink" title="2.1 整数"></a>2.1 整数</h2><p>二分的本质不是单调性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>个人感觉一个特别好的例题：数的范围</p>
<p>理解记忆代码的快速方法：1 2 2 2 3，另外有-1的话mid就需要+1再除以2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l] != x) <span class="built_in">printf</span>(<span class="string">&quot;-1 -1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, l); <span class="comment">// 此处输出的l为最左边x的位置</span></span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(q[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l); <span class="comment">// 此处输出的l为最左边x的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-浮点数"><a href="#2-2-浮点数" class="headerlink" title="2.2 浮点数"></a>2.2 浮点数</h2><p>平方</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid * mid &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮点数二分不需要考虑mid是否+1，else后是否+1。</li>
<li>没有固定的浮点数序列，因此要考虑精度eps，一般比题目要求多1位小数就行</li>
<li>需要自己确定l和r的值，即查找范围</li>
</ul>
<h1 id="3-高精度"><a href="#3-高精度" class="headerlink" title="3 高精度"></a>3 高精度</h1><p>大整数存储：数组， 每个元素存一位数字</p>
<h2 id="3-1-高精度加法"><a href="#3-1-高精度加法" class="headerlink" title="3.1 高精度加法"></a>3.1 高精度加法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, vector&lt;<span class="keyword">int</span>&gt; &amp;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:a)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-2-高精度减法"><a href="#3-2-高精度减法" class="headerlink" title="3.2 高精度减法"></a>3.2 高精度减法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## <span class="number">3.3</span>. 高精度乘法</span><br><span class="line"></span><br><span class="line">```c++</span><br></pre></td></tr></table></figure>



<h2 id="3-4-高精度除法"><a href="#3-4-高精度除法" class="headerlink" title="3.4 高精度除法"></a>3.4 高精度除法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1002写出这个数</title>
    <url>/undefined/78c3da96/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每⼀位数字。</p>
<p>输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。</p>
<p>输出格式：</p>
<p>在一行内输出n的各位数字之和的每一位，拼音数字间有1空格，但一行中最后一个拼音数字后没有空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这里考虑的数值比较大，通过类似高精度的方法把sum的每一位数字都存到b数组里，最后方便输出</p>
<p>先开始想直接用字符串，而不是开数组，结果没有成功，只能开了字符串数组，至于输出拼音，就是用if来打表了，也可以把拼音存到数组里，剩下的应该没什么问题~~</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prt</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;yi&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;er&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;san&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;si&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;liu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;qi&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ba&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;jiu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">105</span>], b[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        sum += a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum) &#123;</span><br><span class="line">        b[i++] = sum % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != i - <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">Prt</span>(b[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1001 害死人不偿命</title>
    <url>/undefined/748ff171/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想：</p>
<p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p>
<p>输入格式：</p>
<p>每个测试输⼊包含1个测试用例，即给出自然数n的值。</p>
<p>输出格式：</p>
<p>输出从n计算到1需要的步数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>一道初学者的题，注意用step记录一下步数，然后循环就可以了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, step = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; step &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构笔记</title>
    <url>/undefined/79666db/</url>
    <content><![CDATA[<blockquote>
<p>数据结构的详细笔记，对应课本</p>
</blockquote>
<span id="more"></span>
<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h1><h2 id="1-1-基本概念和术语"><a href="#1-1-基本概念和术语" class="headerlink" title="1.1 基本概念和术语"></a>1.1 基本概念和术语</h2><p><strong>数据：</strong>是描述客观事物的符号，是计算机中操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型（信息的载体；对客观事物符号化的表示；能够被计算机识别，存储和加工）</p>
<p><strong>数据元素：</strong>是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录、结点或顶点。 例如，人。</p>
<p><strong>数据项：</strong>一个数据元素可以由若干个数据项组成。例如人有眼、耳、鼻、嘴、手、脚这些数据项，也可以有姓名、年龄、性别等数据项，要视所做的系统来决定。 <strong>数据项是数据不可分割的最小单位</strong></p>
<blockquote>
<p>数据 &gt; 数据元素 &gt; 数据项</p>
</blockquote>
<p><strong>数据对象：</strong>是性质相同的数据元素的集合，是数据的子集。数据元素是数据的个体，数据对象是数据的子集</p>
<p><strong>数据结构：</strong>是相互之间存在一种或多种特定关系的数据元素的集合。数据元素相互之间的关系称为结构。数据结构是带结构的数据元素的集合</p>
<h2 id="1-2-数据结构的两个层次"><a href="#1-2-数据结构的两个层次" class="headerlink" title="1.2 数据结构的两个层次"></a>1.2 数据结构的两个层次</h2><h3 id="1-2-1-逻辑结构"><a href="#1-2-1-逻辑结构" class="headerlink" title="1.2.1 逻辑结构"></a>1.2.1 逻辑结构</h3><p>逻辑结构是指数据对象中数据元素之间的相互关系。与数据的存储无关，独立于计算机，具体分为以下四种</p>
<p>集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系</p>
<p>线性结构：线性结构中的数据元素之间是一对一的关系。例如：线性表、栈、队列、串</p>
<p>树形结构：树形结构中的数据元素之间存在一种一对多的层次关系</p>
<p>图形结构：图形结构的数据元素是多对多的关系</p>
<p>用示意图表示逻辑结构时应注意：</p>
<ul>
<li>将每一个数据元素看做一个结点，用圆圈表示</li>
<li>元素之间的逻辑关系用结点之间的连线表示，如果这个关系是有方向的，那么用带箭头的连线表示</li>
</ul>
<h3 id="1-2-2-物理结构"><a href="#1-2-2-物理结构" class="headerlink" title="1.2.2 物理结构"></a>1.2.2 物理结构</h3><p>物理结构是指数据的逻辑结构在计算机中的存储形式，有时也称存储结构，是数据结构在计算机中的表示</p>
<p>顺序存储结构：是指把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。C语言用数组实现</p>
<p>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。C语言用指针实现</p>
<p>索引存储结构：在存储结点信息的同时，还建立附加的索引表</p>
<p>散列存储结构：根据结点的关键字直接计算出该结点的存储地址。散列表</p>
<blockquote>
<p>两者关系：<br>物理结构是逻辑关系的映像和元素本身的映像；逻辑结构是数据结构的抽象，物理结构是数据结构的实现</p>
</blockquote>
<h2 id="1-3-抽象数据类型"><a href="#1-3-抽象数据类型" class="headerlink" title="1.3 抽象数据类型"></a>1.3 抽象数据类型</h2><h3 id="1-3-1-数据类型"><a href="#1-3-1-数据类型" class="headerlink" title="1.3.1 数据类型"></a>1.3.1 数据类型</h3><p>是指性质相同的值的集合及定义在此集合上的一些操作的总称。它是按照值的不同进行划分的</p>
<ul>
<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等</li>
<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据构成的</li>
</ul>
<h3 id="1-3-2-抽象数据类型"><a href="#1-3-2-抽象数据类型" class="headerlink" title="1.3.2 抽象数据类型"></a>1.3.2 抽象数据类型</h3><p>是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性，而与其在计算机内部表示和实现无关，而链式存储关系并不能反映其逻辑关系，因此需要一个指针存放数据元素的地址，通过地址找到相关联数据元素的位置</p>
<p>抽象是指抽取出事物具有的普遍性的本质，其意义在于数据类型的数学抽象特性。抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来</p>
<h2 id="1-4-算法"><a href="#1-4-算法" class="headerlink" title="1.4 算法"></a>1.4 算法</h2><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作</p>
<h3 id="1-4-1-算法的描述"><a href="#1-4-1-算法的描述" class="headerlink" title="1.4.1 算法的描述"></a>1.4.1 算法的描述</h3><ul>
<li>自然语言：英语，中文</li>
<li>流程图：传统流程图、NS流程图</li>
<li>伪代码：类C语言</li>
<li>程序代码：…</li>
</ul>
<h3 id="1-4-2-算法的特性"><a href="#1-4-2-算法的特性" class="headerlink" title="1.4.2 算法的特性"></a>1.4.2 算法的特性</h3><ul>
<li>算法具有零个或多个输入，至少一个或多个输出</li>
<li>有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成</li>
<li>确定性：算法的每一步骤都具有确定的含义，不会出现二义性</li>
<li>可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成</li>
</ul>
<h3 id="1-4-3-算法设计的要求"><a href="#1-4-3-算法设计的要求" class="headerlink" title="1.4.3 算法设计的要求"></a>1.4.3 算法设计的要求</h3><ul>
<li>正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案</li>
<li>可读性：算法设计的另一目的是为了便于阅读、理解和交流</li>
<li>健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果</li>
<li>时间效率高，存储量低</li>
</ul>
<h3 id="1-4-4-算法效率的度量方法"><a href="#1-4-4-算法效率的度量方法" class="headerlink" title="1.4.4 算法效率的度量方法"></a>1.4.4 算法效率的度量方法</h3><p>（1）事后统计法：这种方法主要是通过设计好的测试程序和数据，利用计算机计时器不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。缺陷多，一般不使用</p>
<p>（2）事前分析估算方法：在计算机程序编制前，依据统计方法对算法进行估算。一个程序的运行时间，依赖于算法的好坏和问题的输入规模</p>
<h3 id="1-4-5-函数的渐近增长"><a href="#1-4-5-函数的渐近增长" class="headerlink" title="1.4.5 函数的渐近增长"></a>1.4.5 函数的渐近增长</h3><p>关注主项的阶数</p>
<h3 id="1-4-6-算法时间复杂度"><a href="#1-4-6-算法时间复杂度" class="headerlink" title="1.4.6 算法时间复杂度"></a>1.4.6 算法时间复杂度</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p><strong>算法时间复杂度：</strong> 在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数</p>
<h4 id="2-推导大O阶步骤"><a href="#2-推导大O阶步骤" class="headerlink" title="2  推导大O阶步骤"></a>2  推导大O阶步骤</h4><ul>
<li>用常数1取代运行时间中的所有加法常数</li>
<li>在修改后的运行次数函数中，只保留最高阶项</li>
<li>如果最高阶项存在且不是1，则去除这个项相乘的常数，结果就是大O阶</li>
</ul>
<h4 id="3-具体阶数"><a href="#3-具体阶数" class="headerlink" title="3 具体阶数"></a>3 具体阶数</h4><ul>
<li><p>常数阶<br>顺序结构，分支结构</p>
</li>
<li><p>线性阶<br>循环结构</p>
</li>
<li><p>对数阶</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt;= n)&#123;</span><br><span class="line">    count = count * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度为O($log_2n$))</p>
</li>
<li><p>平方阶<br>时间复杂度为O($n^2$)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    b++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line">    n = n / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>nlogn阶<br>2n+3nlog2(n)+19对应O(nlogn)</p>
</li>
<li><p>立方阶</p>
</li>
<li><p>指数阶</p>
<p>  $2^n$对应O($2^n$)</p>
</li>
</ul>
<p>常用的时间复杂度所耗费的时间从小到大依次是：O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O($n^2$) &lt; O($n^3$) &lt; O($2^n$) &lt; O(n!) &lt; O($n^n$)</p>
<p>最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。除非特别指定，我们提到的运行时间都是最坏时间复杂度。平均运行时间是所有情况中最有意义的，因为它是期望的运行时间</p>
<h3 id="1-4-7-算法空间复杂度"><a href="#1-4-7-算法空间复杂度" class="headerlink" title="1.4.7 算法空间复杂度"></a>1.4.7 算法空间复杂度</h3><p>算法的空间复杂度通过计算算法所需的存储空间实现，包括指令空间、数据空间、动态申请的内存空间等，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数</p>
<p>算法要占据的时间包括：算法本身要占据的空间，输入/输出，指令，常数，变量等；算法要使用的<strong>辅助空间</strong></p>
<p>（1）S(n) = n + $n^2$ ，则空间复杂度为O($n^2$)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> **b = <span class="keyword">new</span> <span class="keyword">int</span>*[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    b[i] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）S(n) = O(1)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    t = a[i];</span><br><span class="line">    a[i] = a[n - i - <span class="number">1</span>];</span><br><span class="line">    a[n - i - <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）S(n) = O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    b[i] = a[n - i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2 线性表"></a>2 线性表</h1><h2 id="2-1-线性表的定义"><a href="#2-1-线性表的定义" class="headerlink" title="2.1 线性表的定义"></a>2.1 线性表的定义</h2><p>线性表：零个或多个元素的有限序列</p>
<h2 id="2-2-线性表的抽象数据类型"><a href="#2-2-线性表的抽象数据类型" class="headerlink" title="2.2 线性表的抽象数据类型"></a>2.2 线性表的抽象数据类型</h2><p>线性表的数据对象集合为{$a_1$,$a_2$,……,$a_n$}，每个元素的类型均为DataType。其中，除第一个元素$a_1$外，每一个元素有且只有一个直接前趋元素，除了最后一个元素$a_n$外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitList(*L);   <span class="comment">//初始化操作，建立一个空的线性表L</span></span><br><span class="line">ListEmpty(L);   <span class="comment">//若线性表为空，返回true，否则返回false</span></span><br><span class="line">ClearList(*L);   <span class="comment">//将线性表清空</span></span><br><span class="line">GetElem(L,i,*e);  <span class="comment">//将线性表L中的第i个位置元素值返回给e</span></span><br><span class="line">LocateElem(L,e);  <span class="comment">//若线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中的序号表示成功；否则，返回0表示失败</span></span><br><span class="line">ListInsert(*L,i,e);  <span class="comment">//在线性表L中的第i个位置插入新元素e</span></span><br><span class="line">ListDelete(*L,i,*e);  <span class="comment">//删除线性表L中第i个位置元素，并用e返回其值</span></span><br><span class="line">ListLength(L);    <span class="comment">//返回线性表L的元素个数</span></span><br></pre></td></tr></table></figure>
<p>求A = A并B，假设La表示集合A，Lb表示集合B，则实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(List* La,List Lb)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> La_len,Lb_len,i;</span><br><span class="line">    ElemType e;<span class="comment">//声明与La和Lb相同的数据元素e</span></span><br><span class="line">    La_len = ListLength(La);<span class="comment">//求线性表的长度</span></span><br><span class="line">    Lb_len = ListLength(Lb);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= Lb_len; i++ )&#123;</span><br><span class="line">        GetElem(Lb, i, e);<span class="comment">//取Lb中第i个数据元素赋给e</span></span><br><span class="line">        <span class="keyword">if</span>(!LocateElem(La, e, equal))<span class="comment">//La中不存在和e相同数据元素</span></span><br><span class="line">            ListInsert(La, ++La_len, e);<span class="comment">//插入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于复杂的个性化操作，就是把基本操作组合起来实现</p>
<h2 id="2-3-线性表的顺序存储结构"><a href="#2-3-线性表的顺序存储结构" class="headerlink" title="2.3 线性表的顺序存储结构"></a>2.3 线性表的顺序存储结构</h2><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。可以用一维数组来实现，一维数组可以是静态分配的，也可以是动态分配的。在静态分配时，由于数组的大小和空间是固定的，一旦空间占满，就无法再新增数据，否则会导致数据溢出；而在动态分配时，存储数组的空间在程序执行过程中会动态调整大小，当空间占满时，可以另行开辟更大的存储空间来储存数据</p>
<p>顺序表最主要的特点是可以进行<strong>随机访问</strong>，即可以通过表头元素的地址和元素的编号（下标），在O(1)的时间复杂度内找到指定的元素。顺序表的不足之处是插入和删除操作需要移动大量的元素，从而保持逻辑上和物理上的连续性</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">insert(loc, value)</td>
<td align="center">将value插入到顺序表中下标为loc的位置</td>
</tr>
<tr>
<td align="center">expand()</td>
<td align="center">扩大顺序表的容量</td>
</tr>
<tr>
<td align="center">search(value)</td>
<td align="center">寻找顺序表中值为value的元素</td>
</tr>
<tr>
<td align="center">remove(index)</td>
<td align="center">将顺序表下标为index的元素</td>
</tr>
<tr>
<td align="center">print()</td>
<td align="center">输出顺序表中所有元素</td>
</tr>
</tbody></table>
<ol>
<li><p>插入操作实现方法：</p>
<ul>
<li>判断插入位置是否合法</li>
<li>判断顺序表是否已满</li>
<li>将目标位置及以后的元素后移一位</li>
<li>将待插入的元素后移一位</li>
</ul>
</li>
<li><p>扩容操作实现方法：</p>
<p>我们需要把原数组空间里的元素一一复制到新的空间内，因此扩容的时间复杂度为O(n)</p>
<ul>
<li>将原来的元素存储到临时存储空间</li>
<li>扩大原来的存储空间</li>
<li>将临时存储空间里的数据元素复制到新的存储空间里</li>
<li>释放临时的存储空间</li>
</ul>
</li>
<li><p>查找操作实现方法：</p>
<ul>
<li>从下标为0的元素开始依次枚举顺序表中的所有元素</li>
<li>发现和目标值相等的元素则返回它的下标</li>
<li>枚举结束没有找到目标元素则返回 -1</li>
</ul>
</li>
<li><p>删除操作实现方法：</p>
<ul>
<li>判断传入参数是否合法，即下标是否在顺序表的范围内</li>
<li>将目标下标之后所有的元素前移一位</li>
<li>更新顺序表的长度</li>
</ul>
</li>
<li><p>遍历操作实现方法：</p>
<ul>
<li>从下标为0的元素开始遍历顺序表</li>
<li>输出所有元素的值</li>
</ul>
</li>
</ol>
<p>顺序存储结构的三个属性：</p>
<ul>
<li>存储空间的起始位置</li>
<li>线性表的最大存储容量：MAXSIZE</li>
<li>线性表的当前长度：length</li>
<li>$logn$</li>
</ul>
<p>注意区分数组长度和线性表长度，线性表长度应该小于等于数组的长度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType* elem;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    L.elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!L.elem)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DestroyList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(L.elem);</span><br><span class="line">    L.elem = <span class="literal">NULL</span>;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ClearList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListEmpty_Sq</span><span class="params">(SqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListLength_Sq</span><span class="params">(SqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (L.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetElem_Sq</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = L.elem[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_Sq</span><span class="params">(SqList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L.length &amp;&amp; L.elem[i] != e)</span><br><span class="line">        ++i;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; L.length)</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    ElemType* p, * q, * newbase;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize) &#123;</span><br><span class="line">        newbase = (ElemType*)<span class="built_in">realloc</span>(L.elem, (L.listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase)</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        L.elem = newbase;</span><br><span class="line">        L.listsize += LISTINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;(L.elem[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">        *(p + <span class="number">1</span>) = *p;</span><br><span class="line">    *q = e;</span><br><span class="line">    ++L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListDelete_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    ElemType* p, * q;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = &amp;(L.elem[i - <span class="number">1</span>]); <span class="comment">// p为被删除元素的位置</span></span><br><span class="line">    e = *p; <span class="comment">// 被删除元素的位置赋给e</span></span><br><span class="line">    q = L.elem + L.length + <span class="number">1</span>; <span class="comment">// 表尾元素的位置</span></span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= q; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, L.elem[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序表的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （1）初始化顺序表L\n&quot;</span>);</span><br><span class="line">    InitList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （2）依次插入a, b, c, d, e元素\n&quot;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">5</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （3）输出顺序表L：&quot;</span>);</span><br><span class="line">    DispList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （4）顺序表L长度：%d\n&quot;</span>, ListLength_Sq(L));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （5）顺序表L为%s\n&quot;</span>, ListEmpty_Sq(L) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">    GetElem_Sq(L, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （6）顺序表L的第3个元素：%c\n&quot;</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （7）元素a的位置：%d\n&quot;</span>, LocateElem_Sq(L, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （8）在第4个元素位置上插入f元素\n&quot;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">4</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （9）输出顺序表L：&quot;</span>);</span><br><span class="line">    DispList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （10）删除L的第3个元素\n&quot;</span>);</span><br><span class="line">    ListDelete_Sq(L, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （11）输出顺序表L：&quot;</span>);</span><br><span class="line">    DispList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （12）释放顺序表L\n&quot;</span>);</span><br><span class="line">    DestroyList_Sq(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c++的动态内存分配</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1, *p2;</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">p2 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> p1, p2;</span><br></pre></td></tr></table></figure>


<h2 id="2-4-线性表的链式存储结构"><a href="#2-4-线性表的链式存储结构" class="headerlink" title="2.4 线性表的链式存储结构"></a>2.4 线性表的链式存储结构</h2><p>为了表示每个数据元素a1与其直接后继数据元素a(i+1)之间的逻辑关系，对数据元素a1来说，除了存储其本身的信息以外，还需存储一个指示其直接后继的 信息（即直接后继的存储位置）。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点。</p>
<p>n个结点（ai的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因此此链表的每个结点只包含一个指针域，所以叫做单链表。链表第一个结点的存储位置叫做头指针。有时，为了方便操作，会在单链表的第一个结点前附设一个结点，称为头结点</p>
<table>
<thead>
<tr>
<th>头指针</th>
<th>头结点</th>
</tr>
</thead>
<tbody><tr>
<td>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</td>
<td>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）</td>
</tr>
<tr>
<td>头指针具有标识的作用，所以常用头指针冠以链表的名字</td>
<td>有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了</td>
</tr>
<tr>
<td>无论链表是否为空，头指针均不为空。头指针是链表的必要元素</td>
<td>头结点不一定是链表必须要素</td>
</tr>
</tbody></table>
<p>重复利用指针建立链表</p>
<ol>
<li>如果链表为空链表，那么就可以直接将head指针赋给NILL，而无须进行其他操作；</li>
<li>如果链表不为空，那么首先使用一个malloc函数新建一个结点，使head、p1和p2都指向它。它就是这个链表的头结点；</li>
<li>对结点内的数据进行赋值，从而完成该结点的初始化工作；</li>
<li>开辟另外一个结点，并使p1指向这个新开辟的结点；</li>
<li>如果链表还未满足结束条件，那么继续将这个新的结点链入链表，也就是将p1的值赋给p2-&gt;next（注意这个时候p2仍指向第一个结点），所以在执行了语句p2-&gt;next=p1之后，新结点就被成功链入链表了；</li>
<li>让指针p2向后移动一个位置，即执行语句p2=p1，也就是使p2指向最新建立的结点；</li>
<li>再次开辟一个新结点并初始化它；</li>
<li>再次将指针p1指向这个新结点。如果链表仍然未满足结束条件，那么继续将这个新的结点链入链表，也就是将p1的值赋给p2-&gt;next=p1之后，新结点同样被成功链入链表；</li>
<li>再像前面一样将指针p2向后移动一个位置，即执行语句p2=p1，也就是使p2再次指向最新建立的结点</li>
<li>如果仍有新的数据被接收，那么就再次为该数据开辟一个结点，并让指针p1指向这个新结点，并按照前面的操作方式继续为链表添加新数据；</li>
<li>如果链表满足结束条件或者达到事前预定的长度，那么循环操作就将被中止。新的结点也不再被链入链表中。这个时候即将NULL赋给p2-&gt;next，表示该结点为整个链表的尾结点。</li>
</ol>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">insert(node, index)</td>
<td align="center">将node插入到链表中下标为index的位置</td>
</tr>
<tr>
<td align="center">output()</td>
<td align="center">输出整个链表</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>链表的遍历</p>
<ol>
<li>以链表的表头结点作为输入；</li>
<li>设一个指针变量p，先指向第一个结点，并输出该结点中的数据；</li>
<li>将指针p向后移动一个结点，再输出结点数据；</li>
<li>如此继续下去直到链表的尾结点。</li>
</ol>
<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成</p>
<ol>
<li><p>链表插入操作的实现方法：</p>
<ul>
<li>找到链表中要插入的位置</li>
<li>令待插入结点的next指针指向插入位置的当前结点</li>
<li>令插入位置之前的当前结点的next指针指向待插入结点</li>
</ul>
</li>
<li><p>链表遍历操作的实现方法：</p>
<ul>
<li>定义一个用于遍历的变量，初始指向头结点</li>
<li>输出遍历变量所在结点的值，并更新遍历变量为当前结点的下一个结点</li>
<li>重复操作2，直到遍历完所有结点</li>
</ul>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListF</span><span class="params">(LinkList &amp;L, ElemType a[], <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 头插法建立单链表</span></span><br><span class="line">    LinkList s;</span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListR</span><span class="params">(LinkList&amp; L, ElemType a[], <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//尾插法建立单链表</span></span><br><span class="line">    LinkList s, r;</span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(LinkList&amp; L)</span> </span>&#123; <span class="comment">// 初始化线性表</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryList</span><span class="params">(LinkList&amp; L)</span> </span>&#123; <span class="comment">// 销毁链表</span></span><br><span class="line">    LinkList pre = L, p = pre-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(pre);</span><br><span class="line">        pre = p;</span><br><span class="line">        p = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pre);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">(LinkList L)</span> </span>&#123; <span class="comment">// 判断链表是否为空表</span></span><br><span class="line">    <span class="keyword">return</span> (L-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    LinkList p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        e = p-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    LinkList p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList&amp; L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L, s;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L, q;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        e = q-&gt;data;</span><br><span class="line">        p-&gt;next = q-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkList h;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;单链表的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（1）初始化单链表h\n&quot;</span>);</span><br><span class="line">    InitList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（2）依次采用尾插法插入a, b, c, d, e元素\n&quot;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">5</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（3）输出单链表h：&quot;</span>);</span><br><span class="line">    DispList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（4）单链表h长度：%d\n&quot;</span>, ListLength(h));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（5）单链表h为%s\n&quot;</span>, ListEmpty(h) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">    GetElem(h, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（6）单链表h上的第3个元素：%c\n&quot;</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（7）元素a的位置：%d\n&quot;</span>, LocateElem(h, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（8）在第4个元素位置上插入f元素\n&quot;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">4</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（9）输出单链表h：&quot;</span>);</span><br><span class="line">    DispList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（10）删除h的第3个元素\n&quot;</span>);</span><br><span class="line">    ListDelete(h, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（11）输出单链表h：&quot;</span>);</span><br><span class="line">    DispList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（12）释放单链表h\n&quot;</span>);</span><br><span class="line">    DestoryList(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220223223428452.png" alt="image-20220223223428452"></p>
<h1 id="3-栈"><a href="#3-栈" class="headerlink" title="3 栈"></a>3 栈</h1><h2 id="3-1-栈的定义"><a href="#3-1-栈的定义" class="headerlink" title="3.1 栈的定义"></a>3.1 栈的定义</h2><p>栈是限定仅在表位进行插入和删除操作的线性表</p>
<p>我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出的线性表，简称LFO结构。只能对栈顶元素进行操作，我们把栈的插入，删除操作改名为push，pop</p>
<p><strong>栈的插入操作，</strong> 叫做进栈，也称压栈，入栈</p>
<p><strong>栈的删除操作，</strong> 叫做出栈，也有的叫做弹栈</p>
<h2 id="3-2-栈的顺序存储结构"><a href="#3-2-栈的顺序存储结构" class="headerlink" title="3.2 栈的顺序存储结构"></a>3.2 栈的顺序存储结构</h2><p>我们定义一个top变量来指示栈顶元素在数组中的位置，且其小于栈的长度StackSize，一般采用下标为0的一端作为栈底，当栈存在一个元素时，top等于0。因此空栈的判断条件为top = -1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    SElemType* base;</span><br><span class="line">    SElemType* top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">    S.base = (SElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="built_in"><span class="keyword">sizeof</span></span>(SElemType));</span><br><span class="line">    <span class="keyword">if</span> (!S.base)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    S.top = S.base;</span><br><span class="line">    S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DestoryStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.base) &#123;</span><br><span class="line">        <span class="keyword">delete</span> S.base;</span><br><span class="line">        S.stacksize = <span class="number">0</span>;</span><br><span class="line">        S.base = S.top = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.base)</span><br><span class="line">        S.top = S.base;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack&amp; S, SElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize) &#123;</span><br><span class="line">        S.base = (SElemType*)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREMENT) * <span class="built_in"><span class="keyword">sizeof</span></span>(SElemType));</span><br><span class="line">        <span class="keyword">if</span> (!S.base)</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        S.top = S.base + S.stacksize;</span><br><span class="line">        S.stacksize += STACKINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    *S.top++ = e;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack&amp; S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = *--S.top;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = *(S.top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SElemType e;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序栈s的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（1）初始化栈s\n&quot;</span>);</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（2）栈为%s\n&quot;</span>, (<span class="built_in">StackEmpty</span>(S) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（3）依次进栈元素a, b, c, d, e\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（4）栈为%s\n&quot;</span>, (<span class="built_in">StackEmpty</span>(S) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（5）出栈队列：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line">        <span class="built_in">Pop</span>(S, e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（6）栈为%s\n&quot;</span>, (<span class="built_in">StackEmpty</span>(S) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（7）释放栈\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DestoryStack</span>(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-队列"><a href="#4-队列" class="headerlink" title="4 队列"></a>4 队列</h1><h2 id="4-1-基本知识"><a href="#4-1-基本知识" class="headerlink" title="4.1 基本知识"></a>4.1 基本知识</h2><p>先进先出</p>
<ol>
<li><p>队列的插入操作实现方法：</p>
<ul>
<li>判断队列是否已满，实际上是由于队尾标记不断增加，需要判断队尾标记是否大于数组长度</li>
<li>更新队尾标记，将新插入元素存入队尾</li>
</ul>
</li>
<li><p>队列的遍历操作实现方法：</p>
<ul>
<li>输出队首标记所在的元素</li>
<li>队首标记后移一位</li>
<li>若队尾标记和队首标记相等，输出最后一个元素，否则返回步骤1</li>
</ul>
</li>
<li><p>队列出队操作的实现方法：</p>
<ul>
<li>比较队尾标记和队首标记的大小，当队首标记大于队尾标记则说明队列为空了，此时出队操作是非法的</li>
<li>令队首标记后移一位，队首标记后移即视作原队首出队了*</li>
</ul>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> head, tail, length;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *q, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    q-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br><span class="line">    q-&gt;length = length;</span><br><span class="line">    q-&gt;head = <span class="number">0</span>;</span><br><span class="line">    q-&gt;tail = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Queue *q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;tail + <span class="number">1</span> &gt;= q-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;tail++;</span><br><span class="line">    q-&gt;data[q-&gt;tail] = element;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = q-&gt;head; i &lt;= q-&gt;tail; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首元素输出函数 front</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除队首元素函数 pop</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    q-&gt;head++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空的函数 empty</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;head &gt; q-&gt;tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(q-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue *<span class="built_in">queue</span> = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    init(<span class="built_in">queue</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(<span class="built_in">queue</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    output(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">if</span>(!empty(<span class="built_in">queue</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, front(<span class="built_in">queue</span>));</span><br><span class="line">        pop(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    output(<span class="built_in">queue</span>);</span><br><span class="line">    clear(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-循环队列"><a href="#4-2-循环队列" class="headerlink" title="4.2 循环队列"></a>4.2 循环队列</h2><p>上面的队列实现方式有一个问题：假上溢</p>
<p>循环队列，当队尾标记<code>tail</code>到达队列上限后，如果队列内的元素没有达到上限，就跳转到数组的开始位置，也就是0的位置，也就是0的位置，队首标记到达队列上限也采取同样的处理。通过这样的方法，我们就能够最大化利用内存空间，避免“假上溢”的情况出现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> head, tail, length, count;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *q, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    q-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br><span class="line">    q-&gt;length = length;</span><br><span class="line">    q-&gt;head = <span class="number">0</span>;</span><br><span class="line">    q-&gt;tail = <span class="number">-1</span>;</span><br><span class="line">    q-&gt;count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Queue *q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;count &gt;= q-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;tail = (q-&gt;tail + <span class="number">1</span>) % q-&gt;length;</span><br><span class="line">    q-&gt;data[q-&gt;tail] = element;</span><br><span class="line">    q-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = q-&gt;head;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q-&gt;data[i]);</span><br><span class="line">        i = (i + <span class="number">1</span>) % q-&gt;length;</span><br><span class="line">    &#125; <span class="keyword">while</span>(i != (q-&gt;tail + <span class="number">1</span>) % q-&gt;length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    q-&gt;head = (q-&gt;head + <span class="number">1</span>) % q-&gt;length;</span><br><span class="line">    q-&gt;count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(q-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue *q = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    init(q, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(q, i);</span><br><span class="line">    &#125;</span><br><span class="line">    output(q);</span><br><span class="line">    <span class="keyword">if</span> (!empty(q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, front(q));</span><br><span class="line">        pop(q);        </span><br><span class="line">    &#125;</span><br><span class="line">    output(q);</span><br><span class="line">    clear(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-树和二叉树"><a href="#5-树和二叉树" class="headerlink" title="5 树和二叉树"></a>5 树和二叉树</h1><h2 id="5-1-树"><a href="#5-1-树" class="headerlink" title="5.1 树"></a>5.1 树</h2><h3 id="5-1-1-概念"><a href="#5-1-1-概念" class="headerlink" title="5.1.1 概念"></a>5.1.1 概念</h3><p>树有且仅有一个上面的树根。树是由若干个有限结点组成的一个具有层次关系的集合，最上面的结点为树的根结点</p>
<p>结点拥有的子树个数我们称为结点的度</p>
<h3 id="5-1-2-性质"><a href="#5-1-2-性质" class="headerlink" title="5.1.2 性质"></a>5.1.2 性质</h3><p>每棵非空树有且仅有一个根结点</p>
<p>在树上，从一个结点出发可以访问到其余的结点，并且一个结点到另一个结点的路径有且仅有一条</p>
<p>父亲结点可以有多个孩子结点，除根结点外，其余的结点有且仅有一个父亲结点。</p>
<p>根结点没有父亲结点，叶结点没有孩子结点</p>
<h2 id="5-2-二叉树"><a href="#5-2-二叉树" class="headerlink" title="5.2 二叉树"></a>5.2 二叉树</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><p>二叉树的每个结点最多只有两个孩子结点。二叉树有5种基本形态：空二叉树（树为空没有结点）、只有根结点的二叉树、只有左子树的二叉树、只有右子树的二叉树、左右子树都有的二叉树</p>
<h3 id="5-2-2-性质"><a href="#5-2-2-性质" class="headerlink" title="5.2.2 性质"></a>5.2.2 性质</h3><p>二叉树的第 i 层最多有 $2^{i-1}$ 个结点。由定义可知，二叉树的每个结点最多有两个孩子结点，那么第 i 层最多的结点数等于第 i - 1 层最多结点数的2倍。而第 1 层最多只有1个结点，所以我们可以知道第 i 层最多有 $2^{i-1}$ 个结点</p>
<p>深度为 k 的二叉树最多有 $2^k$ - 1 个结点。由上一个性质，我们可以知道二叉树每层最多的结点个数，从第 1 层到第 k 层把最多结点数累加起来，我们就可以得到深度为 k 的二叉树最多有 $2^k$ - 1个结点</p>
<p>任意一棵二叉树上，其叶子结点个数 $n_0$ 比度为2的结点数 $n_2$ 多1。我们记树上结点总个数为n，度为1的结点个数为 $n_1$ ，则有 n = $n_0$ + $n_1$ + $n_2$。另外我们可以发现一棵二叉树一共有 n - 1条边，度为2的结点可以延伸出两条边，度为1的结点可以延伸出一条边，叶子结点没有边延伸出来，所以又有 n - 1 = $n_1$ + 2 $\times$ $n_2$。结合以上两个式子，我们可以得到 $n_0$ = $n_2$ + 1</p>
<h3 id="5-2-3-两个特殊的二叉树"><a href="#5-2-3-两个特殊的二叉树" class="headerlink" title="5.2.3 两个特殊的二叉树"></a>5.2.3 两个特殊的二叉树</h3><p><strong>满二叉树：</strong>如果一棵树深度为 k 而且有 $2^k$ - 1个结点，那么我们称该二叉树为满二叉树，也就是说在此深度上，不能再添加结点了</p>
<p><strong>完全二叉树：</strong>如果一棵树深度为k，从第 1 层到第 k - 1层该树是满二叉树，第 k 层的结点都集中在左边，那么我们称该二叉树为完全二叉树。完全二叉树因其结构的特殊性具有很高的效率，经常被用在算法的优化里</p>
<h3 id="5-2-4-二叉树的广义表表达形式"><a href="#5-2-4-二叉树的广义表表达形式" class="headerlink" title="5.2.4 二叉树的广义表表达形式"></a>5.2.4 二叉树的广义表表达形式</h3><p>我们可以用广义表来表示二叉树，形式为 a(b, c)，表示根结点a的左孩子结点为b，右孩子结点为c。中间用一个逗号隔开。如果左右孩子结点不为空，则用以上形式来替换；如果结点为空，则不填任何字符。以下是几种常见的格式：</p>
<ul>
<li>a：表示根结点为a，左右孩子结点均为空</li>
<li>a(b)：表示根结点为a，左孩子结点为b，右孩子结点为空</li>
<li>a(, c)：表示根结点为a，左孩子结点为空，右孩子结点为c</li>
<li>a(b, c)：表示根结点为a，左孩子结点为b，右孩子结点为c</li>
</ul>
<p>如 7(4(3, 6), 15(, 55)) 可以表示以下这棵二叉树：</p>
<p>如何将广义表创建成二叉树：</p>
<p>将广义表创建成二叉树，可以借助栈来实现，利用栈先进后出的特点，先将根结点压入栈中，如果左孩子结点不为空，则将其作为栈顶结点（即其父亲结点）的左孩子结点，并压入栈中，递归左子树，处理完之后左孩子节点出战；如果右孩子不为空，则将其作为栈顶结点（即其父亲结点）的右孩子结点，并压入栈中，递归右子树，处理完之后右孩子结点出栈</p>
<h2 id="5-3-二叉树的存储结构"><a href="#5-3-二叉树的存储结构" class="headerlink" title="5.3 二叉树的存储结构"></a>5.3 二叉树的存储结构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现二叉树的各种基本运算</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBTree</span><span class="params">(BTNode*&amp; b, <span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>, k, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    ch = str[j];</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (ch) &#123;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>(<span class="string">&#x27;:</span></span><br><span class="line">            top++;</span><br><span class="line">            St[top] = p;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>)<span class="string">&#x27;:</span></span><br><span class="line">            top--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>,<span class="string">&#x27;:</span></span><br><span class="line">            k = 2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            p = (BTNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">            p-&gt;data = ch;</span><br><span class="line">            p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">                b = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in"><span class="keyword">switch</span></span> (k) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    St[top]-&gt;lchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    St[top]-&gt;rchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch = str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryBTree</span><span class="params">(BTNode*&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;lchild);</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">FindNode</span><span class="params">(BTNode* b, ElemType x)</span> </span>&#123;</span><br><span class="line">    BTNode* p;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;data == x)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p = <span class="built_in">FindNode</span>(b-&gt;lchild, x);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">FindNode</span>(b-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">LchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">RchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BTHeight</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchildh, rchildh;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lchildh = <span class="built_in">BTHeight</span>(b-&gt;lchild);</span><br><span class="line">        rchildh = <span class="built_in">BTHeight</span>(b-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> (lchildh &gt; rchildh ? (lchildh + <span class="number">1</span>) : (rchildh + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;c&quot;</span>, b-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild != <span class="literal">NULL</span> || b-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span> (b-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;rchild);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BTNode* b, * p, * lp, * rp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（1）创建二叉树\n&quot;</span>);</span><br><span class="line">    <span class="built_in">CreateBTree</span>(b, <span class="string">&quot;A(B(D,E(H(J,K(L,M(,N))))),C(F,G(,I)))&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（2）输出二叉树&quot;</span>);</span><br><span class="line">    <span class="built_in">DispBTree</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（3）H结点：&quot;</span>);</span><br><span class="line">    p = <span class="built_in">FindNode</span>(b, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lp = <span class="built_in">LchildNode</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (lp != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;左孩子为%c&quot;</span>, lp-&gt;data);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无左孩子&quot;</span>);</span><br><span class="line">        rp = <span class="built_in">RchildNode</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (rp != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;右孩子为%c&quot;</span>, rp-&gt;data);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无右孩子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（4）二叉树b的高度：%d\n&quot;</span>, <span class="built_in">BTHeight</span>(b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（5）释放二叉树b\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DestoryBTree</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-遍历二叉树"><a href="#5-4-遍历二叉树" class="headerlink" title="5.4 遍历二叉树"></a>5.4 遍历二叉树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现二叉树各种遍历算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBTree</span><span class="params">(BTNode*&amp; b, <span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>, k, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    ch = str[j];</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (ch) &#123;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>(<span class="string">&#x27;:</span></span><br><span class="line">            top++;</span><br><span class="line">            St[top] = p;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>)<span class="string">&#x27;:</span></span><br><span class="line">            top--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>,<span class="string">&#x27;:</span></span><br><span class="line">            k = 2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            p = (BTNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">            p-&gt;data = ch;</span><br><span class="line">            p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">                b = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in"><span class="keyword">switch</span></span> (k) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    St[top]-&gt;lchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    St[top]-&gt;rchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch = str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryBTree</span><span class="params">(BTNode*&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;lchild);</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">FindNode</span><span class="params">(BTNode* b, ElemType x)</span> </span>&#123;</span><br><span class="line">    BTNode* p;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;data == x)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p = <span class="built_in">FindNode</span>(b-&gt;lchild, x);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">FindNode</span>(b-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">LchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">RchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BTHeight</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchildh, rchildh;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lchildh = <span class="built_in">BTHeight</span>(b-&gt;lchild);</span><br><span class="line">        rchildh = <span class="built_in">BTHeight</span>(b-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> (lchildh &gt; rchildh ? (lchildh + <span class="number">1</span>) : (rchildh + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;c&quot;</span>, b-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild != <span class="literal">NULL</span> || b-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span> (b-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;rchild);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上为btree.cpp 包含二叉树的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 先序遍历递归算法</span></span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问根节点</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(b-&gt;lchild);  <span class="comment">// 递归访问左子树</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(b-&gt;rchild);  <span class="comment">//递归访问右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder1</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 先序非递归遍历算法</span></span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        top++;  <span class="comment">// 根结点进栈</span></span><br><span class="line">        St[top] = b;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">-1</span>) &#123;  <span class="comment">// 栈不为空时循环</span></span><br><span class="line">            p = St[top];  <span class="comment">// 退栈并访问该结点</span></span><br><span class="line">            top--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>) &#123;  <span class="comment">// 有右孩子，将其进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;  <span class="comment">// 有左孩子，将其进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 中序遍历的递归算法</span></span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(b-&gt;lchild);  <span class="comment">// 递归访问左子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问根结点</span></span><br><span class="line">        <span class="built_in">InOrder</span>(b-&gt;rchild);  <span class="comment">// 递归访问右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder1</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 中序非递归遍历算法</span></span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = b;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">-1</span> || p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;  <span class="comment">// 扫描结点p的所有左下结点并进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p;</span><br><span class="line">                p = p-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (top &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                p = St[top];  <span class="comment">// 出栈结点p并访问</span></span><br><span class="line">                top--;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">                p = p-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 后序遍历的递归算法</span></span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">PostOrder</span>(b-&gt;lchild);  <span class="comment">// 递归访问左子树</span></span><br><span class="line">        <span class="built_in">PostOrder</span>(b-&gt;rchild);  <span class="comment">// 递归访问右子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问根结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder1</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 后序非递归遍历算法</span></span><br><span class="line">    BTNode* St[MAXSIZE];</span><br><span class="line">    BTNode* p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;  <span class="comment">// 栈指针置初值</span></span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (b != <span class="literal">NULL</span>) &#123;  <span class="comment">// 将b结点的所有左下结点进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = b;</span><br><span class="line">                b = b-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="literal">NULL</span>;  <span class="comment">// p指向当前结点的前一个已访问的结点</span></span><br><span class="line">            flag = <span class="literal">true</span>;  <span class="comment">// flag为真表示正在处理栈顶结点</span></span><br><span class="line">            <span class="keyword">while</span> (top != <span class="number">-1</span> &amp;&amp; flag) &#123;</span><br><span class="line">                b = St[top];  <span class="comment">// 取出当前的栈顶元素</span></span><br><span class="line">                <span class="keyword">if</span> (b-&gt;rchild == p) &#123;  <span class="comment">// 右子树不存在或已被访问</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问b结点</span></span><br><span class="line">                    top--;</span><br><span class="line">                    p = b;  <span class="comment">// p指向被访问的结点</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    b = b-&gt;rchild;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (top != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TravLevel</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    BTNode* Qu[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> front, rear;</span><br><span class="line">    front = rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);</span><br><span class="line">    rear++;</span><br><span class="line">    Qu[rear] = b;</span><br><span class="line">    <span class="keyword">while</span> (rear != front) &#123;</span><br><span class="line">        front = (front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        b = Qu[front];</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;lchild-&gt;data);</span><br><span class="line">            rear = (rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">            Qu[rear] = b-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;rchild-&gt;data);</span><br><span class="line">            rear = (rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">            Qu[rear] = b-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BTNode* b;</span><br><span class="line">    <span class="built_in">CreateBTree</span>(b, <span class="string">&quot;A(B(D,E(H(J,K(L,M(,N))))),C(F,G(,I)))&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树b：&quot;</span>);</span><br><span class="line">    <span class="built_in">DispBTree</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;层次遍历序列：&quot;</span>);</span><br><span class="line">    <span class="built_in">TravLevel</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;先序遍历序列：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PreOrder</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PreOrder1</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序遍历序列：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrder</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrder1</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;后序遍历序列：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PostOrder</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PostOrder1</span>(b);</span><br><span class="line">    <span class="built_in">DestoryBTree</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-5-赫夫曼树及其应用"><a href="#5-5-赫夫曼树及其应用" class="headerlink" title="5.5 赫夫曼树及其应用"></a>5.5 赫夫曼树及其应用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50  <span class="comment">//叶子结点总数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1  <span class="comment">// 树中结点总数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">5</span>];  <span class="comment">// 结点值</span></span><br><span class="line">    <span class="keyword">int</span> weight;  <span class="comment">// 权重</span></span><br><span class="line">    <span class="keyword">int</span> parent;  <span class="comment">// 双亲结点</span></span><br><span class="line">    <span class="keyword">int</span> lchild;  <span class="comment">// 左孩子结点</span></span><br><span class="line">    <span class="keyword">int</span> rchild;  <span class="comment">// 右孩子结点</span></span><br><span class="line">&#125;HTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> cd[N];  <span class="comment">// 存放哈夫曼编码</span></span><br><span class="line">    <span class="keyword">int</span> start;  <span class="comment">// ch[start.n]存放哈夫曼编码</span></span><br><span class="line">&#125;HCode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHT</span><span class="params">(HTNode ht[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">// 由ht的叶子结点构造完整的哈夫曼树</span></span><br><span class="line">    <span class="keyword">int</span> i, k, lnode, rnode;</span><br><span class="line">    <span class="keyword">int</span> min1, min2;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++)  <span class="comment">// 所有结点的相关域置初值-1</span></span><br><span class="line">        ht[i].parent = ht[i].lchild = ht[i].rchild = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++) &#123;  <span class="comment">// 构造哈夫曼树的分支结点</span></span><br><span class="line">        min1 = min2 = <span class="number">32767</span>;  <span class="comment">// lnode和rnode为最小权重的两个结点位置</span></span><br><span class="line">        lnode = rnode = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt;= i - <span class="number">1</span>; k++)  <span class="comment">// 查找最小和次小结点</span></span><br><span class="line">            <span class="keyword">if</span> (ht[k].parent == <span class="number">-1</span>) &#123;  <span class="comment">// 只在尚未构造二叉树的结点中查找</span></span><br><span class="line">                <span class="keyword">if</span> (ht[k].weight &lt; min1) &#123;</span><br><span class="line">                    min2 = min1;</span><br><span class="line">                    rnode = lnode;</span><br><span class="line">                    min1 = ht[k].weight;</span><br><span class="line">                    lnode = k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ht[k].weight &lt; min2) &#123;</span><br><span class="line">                    min2 = ht[k].weight;</span><br><span class="line">                    rnode = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ht[lnode].parent = i;  <span class="comment">// 合并两个最小和次小的结点</span></span><br><span class="line">        ht[rnode].parent = i;</span><br><span class="line">        ht[i].weight = ht[lnode].weight + ht[rnode].weight;</span><br><span class="line">        ht[i].lchild = lnode;</span><br><span class="line">        ht[i].rchild = rnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHCode</span><span class="params">(HTNode ht[], HCode hcd[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">// 由哈夫曼树ht构造哈夫曼编码hcd</span></span><br><span class="line">    <span class="keyword">int</span> i, f, c;</span><br><span class="line">    HCode hc;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 根据哈夫曼树构造所有叶子结点的哈夫曼编码</span></span><br><span class="line">        hc.start = n;</span><br><span class="line">        c = i;</span><br><span class="line">        f = ht[i].parent;</span><br><span class="line">        <span class="keyword">while</span> (f != <span class="number">-1</span>) &#123;  <span class="comment">// 循环直到树根结点</span></span><br><span class="line">            <span class="keyword">if</span> (ht[f].lchild == c)  <span class="comment">// 处理左孩子结点</span></span><br><span class="line">                hc.cd[hc.start--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// 处理右孩子结点</span></span><br><span class="line">                hc.cd[hc.start--] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c = f;</span><br><span class="line">            f = ht[f].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        hc.start++;  <span class="comment">// start指向哈夫曼编码最开始字符</span></span><br><span class="line">        hcd[i] = hc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispHCode</span><span class="params">(HTNode ht[], HCode hcd[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">// 输出哈夫曼编码</span></span><br><span class="line">    <span class="keyword">int</span> i, k;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, m = <span class="number">0</span>, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输出哈夫曼编码：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   %s\t&quot;</span>, ht[i].data);</span><br><span class="line">        <span class="keyword">for</span> (k = hcd[i].start; k &lt;= n; k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, hcd[i].cd[k]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        m += ht[i].weight;</span><br><span class="line">        sum += ht[i].weight * j;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均长度=%g\n&quot;</span>, <span class="number">1.0</span> * sum / m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">15</span>, i;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str[] = &#123; <span class="string">&quot;The&quot;</span>, <span class="string">&quot;of&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;to&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;in&quot;</span>, <span class="string">&quot;that&quot;</span>, <span class="string">&quot;he&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;on&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;His&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;be&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> fnum[] = &#123; <span class="number">1192</span>, <span class="number">677</span>, <span class="number">541</span>, <span class="number">518</span>, <span class="number">462</span>, <span class="number">450</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">181</span>, <span class="number">174</span>, <span class="number">157</span>, <span class="number">138</span>, <span class="number">124</span>, <span class="number">123</span> &#125;;</span><br><span class="line">    HTNode ht[M];</span><br><span class="line">    HCode hcd[N];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(ht[i].data, str[i]);</span><br><span class="line">        ht[i].weight = fnum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CreateHT</span>(ht, n);  <span class="comment">// 创建哈夫曼树</span></span><br><span class="line">    <span class="built_in">CreateHCode</span>(ht, hcd, n);  <span class="comment">// 构造哈夫曼编码</span></span><br><span class="line">    <span class="built_in">DispHCode</span>(ht, hcd, n);  <span class="comment">// 输出哈夫曼编码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="6-图"><a href="#6-图" class="headerlink" title="6 图"></a>6 图</h1><h2 id="6-1-什么是图"><a href="#6-1-什么是图" class="headerlink" title="6.1 什么是图"></a>6.1 什么是图</h2><p>图是由一系列顶点和若干连结顶点集合内两个顶点的边组成的数据结构。通常我们用G = (V, E) 表示一个图结构，其中V表示点集，E表示边集</p>
<p>在顶点集合所包含的若干个顶点之间，可能存在这某种两两对应关系——如果某两个点之间的确存在这样的关系的话，我们就在这两个点之间连边，这样就得到了边集的一个成员，也就是一条边。对应到社交网络上，顶点就是网络中的用户，边就是用户之间的好友关系</p>
<h2 id="6-2-图的常用概念"><a href="#6-2-图的常用概念" class="headerlink" title="6.2 图的常用概念"></a>6.2 图的常用概念</h2><p>如果图中所有边都是无向边，则称为无向图，反之称为有向图</p>
<p>有很少边或弧（如 e &lt; nlogn，e指边数，n指点数）的图称为稀疏图，反之称为稠密图。顶点的<strong>度</strong>是指依附于某个顶点的边数。在有向图中，顶点的<strong>入度</strong>是指以顶点为弧头的弧的数目，也就是以该顶点为终点的弧的数目；顶点的<strong>出度</strong>是指以顶点为弧尾的弧的数目，也就是以该顶点为起点的弧的数目，在有向图里，顶点的度为入度和出度之和。在无向图里，图中的边数等于所有顶点度数和的一半</p>
<h2 id="6-3-图的存储方式"><a href="#6-3-图的存储方式" class="headerlink" title="6.3 图的存储方式"></a>6.3 图的存储方式</h2><p>两个常见的图的存储结构——<strong>邻接矩阵</strong>和<strong>邻接表</strong>。邻接矩阵就是用一维数组存储图中顶点的信息，用矩阵表示图中各顶点之间的邻接关系</p>
<p>对于有n个顶点的图 G = (V, E) 来说，我们可以用一个 n $\times$ n 的矩阵A来表示G中各顶点的相邻关系，如果$v_i$和$v_j$之间存在边（或弧），则A$[i]$$[j]$ = 1，否则A$[i]$$[j]$ = 0。下图为有向图$G_1$和无向图$G_2$对应的邻接矩阵：</p>
<p>图的邻接矩阵是唯一的，矩阵的大小只与顶点个数N有关，是一个N $\times$ N 的矩阵。在无向图里，如果顶点 $v_i$ 和 $v_j$ 之间有边，则可认为顶点 $v_i$ 到 $v_j$ 有边，顶点 $v_j$ 到 $v_i$ 也有边。对应到邻接矩阵里，则有A$[i]$ $[j]$ = A$[j]$$[i]$ = 1。无向图的邻接矩阵是一个对称矩阵</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现图的邻接矩阵和邻接表存储</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &lt; n;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    AdjGraph* G;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">5</span>,INF,<span class="number">7</span>,INF,INF&#125;,&#123;INF,<span class="number">0</span>,<span class="number">4</span>,INF,INF,INF&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>,INF,<span class="number">0</span>,INF,INF,<span class="number">9</span>&#125;,&#123;INF,INF,<span class="number">5</span>,<span class="number">0</span>,INF,<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">5</span>,<span class="number">0</span>,INF&#125;,&#123;<span class="number">3</span>,INF,INF,INF,<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(1)图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">CreateAdj</span>(G, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(2)图G的邻接表：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispAdj</span>(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(3)销毁图G的邻接表\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DestoryAdj</span>(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-图的遍历"><a href="#6-4-图的遍历" class="headerlink" title="6.4 图的遍历"></a>6.4 图的遍历</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[MAXV];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AdjGraph* G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, v);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    p = G-&gt;adjlist[v].firstarc;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[p-&gt;adjvex] == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">DFS</span>(G, p-&gt;adjvex);</span><br><span class="line">        p = p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(AdjGraph* G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">int</span> St[MAXV];</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>, w, x, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, v);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    top++;</span><br><span class="line">    St[top] = v;</span><br><span class="line">    <span class="keyword">while</span> (top &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        x = St[top];</span><br><span class="line">        p = G-&gt;adjlist[x].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            w = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (visited[w] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, w);</span><br><span class="line">                visited[w] = <span class="number">1</span>;</span><br><span class="line">                top++;</span><br><span class="line">                St[top] = w;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">            top--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(AdjGraph* G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">int</span> queue[MAXV], front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> visited[MAXV];</span><br><span class="line">    <span class="keyword">int</span> w, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, v);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % MAXV;</span><br><span class="line">    queue[rear] = v;</span><br><span class="line">    <span class="keyword">while</span> (front != rear) &#123;</span><br><span class="line">        front = (front + <span class="number">1</span>) % MAXV;</span><br><span class="line">        w = queue[front];</span><br><span class="line">        p = G-&gt;adjlist[w].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[p-&gt;adjvex] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, p-&gt;adjvex);</span><br><span class="line">                visited[p-&gt;adjvex] = <span class="number">1</span>;</span><br><span class="line">                rear = (rear + <span class="number">1</span>) % MAXV;</span><br><span class="line">                queue[rear] = p-&gt;adjvex;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AdjGraph* G;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">7</span>, INF, INF&#125;, &#123;INF, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, INF, <span class="number">0</span>, INF, INF, <span class="number">9</span>&#125;, &#123;INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF&#125;, &#123;<span class="number">3</span>, INF, INF, INF, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateAdj</span>(G, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图G的邻接表：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispAdj</span>(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0开始的DFS（递归算法）：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DFS</span>(G, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0开始的DFS（非递归算法）：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DFS1</span>(G, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0开始的BFS：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">BFS</span>(G, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">DestoryAdj</span>(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-最小生成树"><a href="#6-5-最小生成树" class="headerlink" title="6.5 最小生成树"></a>6.5 最小生成树</h2><p>构造连通网的最小代价生成树称为最小生成树</p>
<h3 id="6-5-1-普利姆算法"><a href="#6-5-1-普利姆算法" class="headerlink" title="6.5.1 普利姆算法"></a>6.5.1 普利姆算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Prim</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(MatGraph g, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lowcost[MAXV], min, n = g.n;</span><br><span class="line">    <span class="keyword">int</span> closest[MAXV], i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        lowcost[i] = g.edges[v][i];</span><br><span class="line">        closest[i] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        min = INF;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min) &#123;</span><br><span class="line">                min = lowcost[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;边（%d, %d）权为：%d\n&quot;</span>, closest[k], k, min);</span><br><span class="line">        lowcost[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[k][j] != <span class="number">0</span> &amp;&amp; g.edges[k][j] &lt; lowcost[j]) &#123;</span><br><span class="line">                lowcost[j] = g.edges[k][j];</span><br><span class="line">                closest[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">3</span>;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, INF, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, INF, <span class="number">9</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;普利姆算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Prim</span>(g, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-2-克鲁斯卡尔算法"><a href="#6-5-2-克鲁斯卡尔算法" class="headerlink" title="6.5.2 克鲁斯卡尔算法"></a>6.5.2 克鲁斯卡尔算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kruskal</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;Edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(Edge E[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    Edge temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        temp = E[i];</span><br><span class="line">        j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; temp.w &lt; E[j].w) &#123;</span><br><span class="line">            E[j + <span class="number">1</span>] = E[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        E[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, u1, v1, sn1, sn2, k;</span><br><span class="line">    <span class="keyword">int</span> vset[MAXV];</span><br><span class="line">    Edge E[MAXSIZE];</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != <span class="number">0</span> &amp;&amp; g.edges[i][j] != INF) &#123;</span><br><span class="line">                E[k].u = i;</span><br><span class="line">                E[k].v = j;</span><br><span class="line">                E[k].w = g.edges[i][j];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">InsertSort</span>(E, g.e);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        vset[i] = i;</span><br><span class="line">    k = <span class="number">1</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; g.n) &#123;</span><br><span class="line">        u1 = E[j].u;</span><br><span class="line">        v1 = E[j].v;</span><br><span class="line">        sn1 = vset[u1];</span><br><span class="line">        sn2 = vset[v1];</span><br><span class="line">        <span class="keyword">if</span> (sn1 != sn2) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d):%d\n&quot;</span>, u1, v1, E[j].w);</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">                <span class="keyword">if</span> (vset[i] == sn2)</span><br><span class="line">                    vset[i] = sn1;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">3</span>;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, INF, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, INF, <span class="number">9</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;克鲁斯卡尔算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Kruskal</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-最短路径"><a href="#6-6-最短路径" class="headerlink" title="6.6 最短路径"></a>6.6 最短路径</h2><h3 id="6-6-1-迪杰斯特拉算法"><a href="#6-6-1-迪杰斯特拉算法" class="headerlink" title="6.6.1 迪杰斯特拉算法"></a>6.6.1 迪杰斯特拉算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dispath</span><span class="params">(MatGraph g, <span class="keyword">int</span> dist[], <span class="keyword">int</span> path[], <span class="keyword">int</span> S[], <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> apath[MAXV], d;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="number">1</span> &amp;&amp; i != v) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;从顶点%d到顶点%d的路径长度为：%d\t路径为：&quot;</span>, v, i, dist[i]);</span><br><span class="line">            d = <span class="number">0</span>;</span><br><span class="line">            apath[d] = i;</span><br><span class="line">            k = path[i];</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;无路径\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (k != v) &#123;</span><br><span class="line">                    d++;</span><br><span class="line">                    apath[d] = k;</span><br><span class="line">                    k = path[k];</span><br><span class="line">                &#125;</span><br><span class="line">                d++;</span><br><span class="line">                apath[d] = v;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, apath[d]);</span><br><span class="line">                <span class="keyword">for</span> (j = d - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;,%d&quot;</span>, apath[j]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(MatGraph g, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXV], path[MAXV];</span><br><span class="line">    <span class="keyword">int</span> S[MAXV];</span><br><span class="line">    <span class="keyword">int</span> Mindis, i, j, u;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        dist[i] = g.edges[v][i];</span><br><span class="line">        S[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g.edges[v][i] &lt; INF)</span><br><span class="line">            path[i] = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[v] = <span class="number">1</span>;</span><br><span class="line">    path[v] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        Mindis = INF;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (S[j] == <span class="number">0</span> &amp;&amp; dist[j] &lt; Mindis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                Mindis = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        S[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; g.n;j++)</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> (g.edges[u][j] &lt; INF &amp;&amp; dist[u] + g.edges[u][j] &lt; dist[j]) &#123;</span><br><span class="line">                    dist[j] = dist[u] + g.edges[u][j];</span><br><span class="line">                    path[j] = u;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dispath</span>(g, dist, path, S, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">7</span>, INF, INF&#125;, &#123;INF, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, INF, <span class="number">0</span>, INF, INF, <span class="number">9</span>&#125;, &#123;INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF&#125;, &#123;<span class="number">3</span>, INF, INF, INF, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有向图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;迪杰斯特拉算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Dijkstra</span>(g, v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-2-弗洛伊德算法"><a href="#6-6-2-弗洛伊德算法" class="headerlink" title="6.6.2 弗洛伊德算法"></a>6.6.2 弗洛伊德算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Floyd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dispath</span><span class="params">(MatGraph g, <span class="keyword">int</span> A[][MAXV], <span class="keyword">int</span> path[][MAXV])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, s;</span><br><span class="line">    <span class="keyword">int</span> apath[MAXV], d;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != INF &amp;&amp; i != j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;从%d到%d的路径为：&quot;</span>, i, j);</span><br><span class="line">                k = path[i][j];</span><br><span class="line">                d = <span class="number">0</span>;</span><br><span class="line">                apath[d] = j;</span><br><span class="line">                <span class="keyword">while</span> (k != <span class="number">-1</span> &amp;&amp; k != i) &#123;</span><br><span class="line">                    d++;</span><br><span class="line">                    apath[d] = k;</span><br><span class="line">                    k = path[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">                k++;</span><br><span class="line">                apath[d] = i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, apath[d]);</span><br><span class="line">                <span class="keyword">for</span> (s = d - <span class="number">1</span>; s &gt;= <span class="number">0</span>; s--)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;,%d&quot;</span>, apath[s]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t路径长度为：%d\n&quot;</span>, A[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV], path[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++) &#123;</span><br><span class="line">            A[i][j] = g.edges[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i != j &amp;&amp; g.edges[i][j] &lt; INF)</span><br><span class="line">                path[i][j] = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                path[i][j] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; g.n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">                <span class="keyword">if</span> (A[i][j] &gt; A[i][k] + A[k][j]) &#123;</span><br><span class="line">                    A[i][j] = A[i][k] + A[k][j];</span><br><span class="line">                    path[i][j] = path[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dispath</span>(g, A, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MatGraph q;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">7</span>, INF, INF&#125;, &#123;INF, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, INF, <span class="number">0</span>, INF, INF, <span class="number">9</span>&#125;, &#123;INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF&#125;, &#123;<span class="number">3</span>, INF, INF, INF, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有向图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;弗洛伊德算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Floyd</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-7-拓扑排序"><a href="#6-7-拓扑排序" class="headerlink" title="6.7 拓扑排序"></a>6.7 拓扑排序</h2><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系。这样的有向图为顶点表示活动的网，我们称为<strong>AOV网</strong></p>
<p>设 G = (V, E) 是一个具有 n 个顶点的有向图，V 中的顶点序列 $v_1$ ，$v_2$，… $v_n$ , 满足若从 顶点 $v_i$ 到 $v_j$ 有一条路径， 则在顶点序列中顶点 $v_i$ 必在顶点 $v_j$ 之前。则我们称这样的顶点序列为一个拓扑序列</p>
<p>所谓拓扑排序，其实就是对一个有向图构造拓扑序列的过程。构造时时会有两个结果，如果此网的全部顶点都被输出，则说明它是不存在环(回路)的 AOV网； 如果输出顶点数少了，哪怕是少了一个，也说明这个网存在环(回路)，不是 AOV 网。</p>
<p>在拓扑排序算法中，涉及的结构代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> &#123;</span>  <span class="comment">// 边表结点</span></span><br><span class="line">    <span class="keyword">int</span> adjvex; <span class="comment">// 邻接点域，存储该顶点对应的下标</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">// 用于存储权值，对于非网图可以不需要</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span> <span class="comment">// 键域，指向下一个邻接点</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> &#123;</span>  <span class="comment">// 顶点表结点</span></span><br><span class="line">        <span class="keyword">int</span> in;  <span class="comment">// 顶点入度</span></span><br><span class="line">        <span class="keyword">int</span> data;  <span class="comment">// 顶点域，存储顶点信息</span></span><br><span class="line">        EdgeNode *firstedge;  <span class="comment">// 边表头指针</span></span><br><span class="line">&#125;VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    AdjList adjList;</span><br><span class="line">    <span class="keyword">int</span> numVertexes, numEdges;  <span class="comment">// 图中当前顶点数和边数</span></span><br><span class="line">&#125;graphAdjList, * GraphAdjList;</span><br></pre></td></tr></table></figure>

<p>具体代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TopologicalSort</span><span class="params">(GraphAdjList GL)</span> </span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="keyword">int</span> i, k, gettop;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;  <span class="comment">// 用于栈指针下标</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">// 用于统计输出顶点的个数</span></span><br><span class="line">    <span class="keyword">int</span>* stack;  <span class="comment">// 建栈存储入度为0的顶点</span></span><br><span class="line">    stack = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;GL -&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (GL-&gt;adjList[i].in == <span class="number">0</span>)</span><br><span class="line">            stack[++top] = i;  <span class="comment">// 将入度为0的顶点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>) &#123;</span><br><span class="line">        gettop = stack[top--]; <span class="comment">// 出栈</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);  <span class="comment">// 打印此顶点</span></span><br><span class="line">        count++;  <span class="comment">// 统计输出顶点数</span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;  <span class="comment">// 对此顶点弧表遍历</span></span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))  <span class="comment">// 将k号顶点邻接点的入度减1</span></span><br><span class="line">                stack[++top] = k;  <span class="comment">// 若为0则入栈，以便于下次循环输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes)  <span class="comment">// 如果 count 小于顶点数，说明存在环</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-8-关键路径"><a href="#6-8-关键路径" class="headerlink" title="6.8 关键路径"></a>6.8 关键路径</h2><p>拓扑排序主要是解决一个工程能否顺序进行的问题，但有时我们还需要解决工程完成需要的最短时间问题</p>
<p>在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为 <strong>AOE 网</strong></p>
<p>路径上各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大长度的路径叫关键路径，在关键路径上的活动叫关键活动。</p>
<h1 id="7-查找"><a href="#7-查找" class="headerlink" title="7 查找"></a>7 查找</h1><h2 id="7-1-查找概论"><a href="#7-1-查找概论" class="headerlink" title="7.1 查找概论"></a>7.1 查找概论</h2><p><strong>查找表</strong>是由同一类型的数据元素（或记录）构成的集合</p>
<p><strong>关键字</strong>是数据元素中某个数据项的值。若此关键字可以唯一地标识一个记录，则称此关键字为<strong>主关键字</strong>。对于那些可以识别多个数据元素(或记 )的关键字，我们称为<strong>次关键字</strong></p>
<p><strong>查找</strong>就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</p>
<p>查找表按照操作方式来分有两大种：静态查找表和动态查找表</p>
<p>静态查找表：只作查找操作的查找表。它的主要操作有：</p>
<ul>
<li><p>查询某个”特定的”数据元素是否在查找表中。</p>
</li>
<li><p>检索某个”特定的”数据元素和各种属性。</p>
</li>
</ul>
<p>动态查找表：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是两个：</p>
<ul>
<li><p>查找时插入数据元素。</p>
</li>
<li><p>查找时删除数据元素。</p>
</li>
</ul>
<h2 id="7-2-顺序表查找"><a href="#7-2-顺序表查找" class="headerlink" title="7.2 顺序表查找"></a>7.2 顺序表查找</h2><p>要针对这一线性表进行查找操作，因此它就是静态查找表</p>
<p><strong>顺序查找</strong>又叫线性查找，是最基本的查找技术，它的查找过程是：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功</p>
<h3 id="7-2-1-顺序表查找算法"><a href="#7-2-1-顺序表查找算法" class="headerlink" title="7.2.1 顺序表查找算法"></a>7.2.1 顺序表查找算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序查找，a为数组，n为要查找的数组个数，key为要查找的关键字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seguential_Search</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i J == key)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-顺序表查找优化"><a href="#7-2-2-顺序表查找优化" class="headerlink" title="7.2.2 顺序表查找优化"></a>7.2.2 顺序表查找优化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有哨兵顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sequential_Search2</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    a[<span class="number">0</span>] = key;  <span class="comment">// 设置a[0]为关键字值，我们称之为&quot;哨兵&quot;</span></span><br><span class="line">    i = n;  <span class="comment">// 循环从数组尾部开始</span></span><br><span class="line">    <span class="keyword">while</span> (a[i] != key) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;  <span class="comment">// 返回0则说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-有序表查找"><a href="#7-3-有序表查找" class="headerlink" title="7.3 有序表查找"></a>7.3 有序表查找</h2><h3 id="7-3-1-折半查找"><a href="#7-3-1-折半查找" class="headerlink" title="7.3.1 折半查找"></a>7.3.1 折半查找</h3><p>折半查找技术，又称为二分查找。它的前提是线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须采用顺序存储。折半查找的基本思想是:在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 折半查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binaxy_Search</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high, mid;</span><br><span class="line">    low = <span class="number">1</span>;  <span class="comment">// 定义最低下标为记录首位</span></span><br><span class="line">    high = n;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;  <span class="comment">// 折半</span></span><br><span class="line">        <span class="keyword">if</span> (key &lt; a[mid])  <span class="comment">// 若查找值比中值小</span></span><br><span class="line">            high = mid - <span class="number">1</span>;  <span class="comment">// 最高下标调整到中位下标大一位</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; a[mid])  <span class="comment">// 若查找值比中值大</span></span><br><span class="line">            low = mid + <span class="number">1</span>;  <span class="comment">// 最低下标调整到中位下标大一位</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;  <span class="comment">// 若相等则说明 mid 即为查找到的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-插值查找"><a href="#7-3-2-插值查找" class="headerlink" title="7.3.2 插值查找"></a>7.3.2 插值查找</h3><p>根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。</p>
<h3 id="7-3-3-斐波那契查找"><a href="#7-3-3-斐波那契查找" class="headerlink" title="7.3.3 斐波那契查找"></a>7.3.3 斐波那契查找</h3><p>利用黄金分割原理实现</p>
<h2 id="7-4-线性索引查找"><a href="#7-4-线性索引查找" class="headerlink" title="7.4 线性索引查找"></a>7.4 线性索引查找</h2><h3 id="7-4-1-稠密索引"><a href="#7-4-1-稠密索引" class="headerlink" title="7.4.1 稠密索引"></a>7.4.1 稠密索引</h3><p>稠密索引中的索引项一定是按照关键码有序的排列</p>
<h3 id="7-4-2-分块索引"><a href="#7-4-2-分块索引" class="headerlink" title="7.4.2 分块索引"></a>7.4.2 分块索引</h3><h3 id="7-4-3-倒排索引"><a href="#7-4-3-倒排索引" class="headerlink" title="7.4.3 倒排索引"></a>7.4.3 倒排索引</h3><p>其中记录号表存储具有相同次关键字的所有记录的记录号（可以是指向记录的指针或者是该记录的主关键字）。这样的索引方法就是倒排索引。</p>
<h2 id="7-5-二叉排序树"><a href="#7-5-二叉排序树" class="headerlink" title="7.5 二叉排序树"></a>7.5 二叉排序树</h2><p>二叉排序树，又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值</li>
<li> 若它的右子树不空 ，则右子树上所有结点的值均大于它的根结点的值</li>
<li>它的左右子树也分别为二叉排序树</li>
</ul>
<h2 id="7-6-平衡二叉树"><a href="#7-6-平衡二叉树" class="headerlink" title="7.6 平衡二叉树"></a>7.6 平衡二叉树</h2><h2 id="7-7-多路查找树（B树）"><a href="#7-7-多路查找树（B树）" class="headerlink" title="7.7 多路查找树（B树）"></a>7.7 多路查找树（B树）</h2><h2 id="7-8-散列表查找"><a href="#7-8-散列表查找" class="headerlink" title="7.8 散列表查找"></a>7.8 散列表查找</h2><p>hash</p>
<h1 id="8-排序"><a href="#8-排序" class="headerlink" title="8 排序"></a>8 排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求各排序算法的绝对执行时间</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(KeyType&amp; x, KeyType&amp; y)</span> </span>&#123;</span><br><span class="line">    KeyType tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = low; i &lt; high; i++)</span><br><span class="line">        R[i] = <span class="built_in">rand</span>() % <span class="number">99</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> R1[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        R1[i] = R[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy1</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> R1[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        R1[i+<span class="number">1</span>] = R[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(KeyType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = low; i &lt; high - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (R[i] &gt; R[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    KeyType tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R[i] &lt; R[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = R[i];</span><br><span class="line">            j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; R[j] &gt; tmp);</span><br><span class="line">            R[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;直接插入排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">InsertSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 折半插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinInsertSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, low, high, mid;</span><br><span class="line">    KeyType tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R[i] &lt; R[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = R[i];</span><br><span class="line">            low = <span class="number">0</span>;</span><br><span class="line">            high = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">                mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (tmp &lt; R[mid])</span><br><span class="line">                    high = mid <span class="number">-1</span></span><br><span class="line">                    ;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= high + <span class="number">1</span>; j--)</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">            R[high + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinInsertSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;折半插入排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">BinInsertSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, d;</span><br><span class="line">    KeyType tmp;</span><br><span class="line">    d = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = d; i &lt; n; i++) &#123;</span><br><span class="line">            tmp = R[i];</span><br><span class="line">            j = i - d;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; tmp &lt; R[j]) &#123;</span><br><span class="line">                R[j + d] = R[j];</span><br><span class="line">                j = j - d;</span><br><span class="line">            &#125;</span><br><span class="line">            R[j + d] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        d = d / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSortTime</span><span class="params">(KeyType R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;希尔排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">ShellSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>()-t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">bool</span> exchange;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        exchange = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">            <span class="keyword">if</span> (R[j] &lt; R[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(R[j], R[j - <span class="number">1</span>]);</span><br><span class="line">                exchange = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!exchange)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;冒泡排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">BubbleSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t )/ CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(KeyType R[], <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = s, j = t;</span><br><span class="line">    KeyType tmp = R[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; i &amp;&amp; R[j] &gt;= tmp)</span><br><span class="line">                j--;</span><br><span class="line">        R[i] = R[j];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; R[i] &lt;= tmp)</span><br><span class="line">            i++;</span><br><span class="line">        R[j] = R[i];</span><br><span class="line">    &#125;</span><br><span class="line">    R[i] = tmp;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (s &lt; t)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="built_in">partition</span>(R, s, t);</span><br><span class="line">        <span class="built_in">QuickSort</span>(R, s, i - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(R, i + <span class="number">1</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;快速排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">QuickSort</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>()-t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (R[j] &lt; R[k])</span><br><span class="line">                k = j;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">swap</span>(R[i], R[k]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;简单选择排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">SelectSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sift</span><span class="params">(KeyType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = <span class="number">2</span> * i;</span><br><span class="line">    KeyType tmp = R[i];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; high &amp;&amp; R[j] &lt; R[j + <span class="number">1</span>])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            R[i] = R[j];</span><br><span class="line">            i = j;</span><br><span class="line">            j = <span class="number">2</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    R[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">sift</span>(R, i, n);</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">2</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(R[<span class="number">1</span>], R[i]);</span><br><span class="line">        <span class="built_in">sift</span>(R, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;堆排序  \t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">HeapSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">1</span>, n))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二路归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(KeyType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType* R1;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    R1 = (KeyType*)<span class="built_in">malloc</span>((high - low + <span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(KeyType));</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high)</span><br><span class="line">        <span class="keyword">if</span> (R[i] &lt;= R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            R1[k] = R[i];</span><br><span class="line">            i++; k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            R1[k] = R[j];</span><br><span class="line">            j++; k++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        R1[k] = R[i];</span><br><span class="line">        i++; k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        R1[k] = R[j];</span><br><span class="line">        j++; k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>, i = low; i &lt;= high; k++, i++)</span><br><span class="line">        R[i] = R1[k];</span><br><span class="line">    <span class="built_in">free</span>(R1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergePass</span><span class="params">(KeyType R[], <span class="keyword">int</span> length, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i + <span class="number">2</span> * length - <span class="number">1</span> &lt; n; i = i + <span class="number">2</span> * length )</span><br><span class="line">        <span class="built_in">Merge</span>(R, i, i + length - <span class="number">1</span>, i + <span class="number">2</span> * length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (i + length - <span class="number">1</span> &lt; n - <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">Merge</span>(R, i, i + length - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">for</span> (length = <span class="number">1</span>; length &lt; n; length = <span class="number">2</span> * length)</span><br><span class="line">        <span class="built_in">MergePass</span>(R, length, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二路归并排序  \t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">MergeSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType R[MaxSize], R1[MaxSize];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;随机产生50000个1-99的正整数，各种排序方法的比较\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">50000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序方法         用时       结果验证\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">initial</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">InsertSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">BinInsertSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">ShellSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">BubbleSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">QuickSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">SelectSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">HeapSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">MergeSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220223221533488.png" alt="image-20220223221533488"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/undefined/5bada17d/</url>
    <content><![CDATA[<blockquote>
<p>关于HTML的总结</p>
</blockquote>
<span id="more"></span>
<p><a href="https://www.runoob.com/tags/html-reference.html">html参考手册（菜鸟教程）</a><br><a href="https://www.w3schools.com/html/">HTML教程（w3school）</a></p>
<p>html为超文本标记语言，W3C（万维网联盟）组织制定的标准</p>
<h1 id="1-B-S架构原理"><a href="#1-B-S架构原理" class="headerlink" title="1 B/S架构原理"></a>1 B/S架构原理</h1><p>HTTP协议：浏览器和web服务器传消息的协议</p>
<p>第一步，用户在浏览器地址栏上输入URL；第二步，回车（通过浏览器向服务器发送了一个请求）；第三步，服务器会给浏览器一个响应，最终响应一段HTML代码给浏览器，浏览器对HTML代码进行执行展示一个结果</p>
<h1 id="2-基本标签"><a href="#2-基本标签" class="headerlink" title="2 基本标签"></a>2 基本标签</h1><p><code>&lt;html&gt; &lt;/html</code> 根标签，页面中最大的标签</p>
<p><code>&lt;head&gt; &lt;/head&gt;</code> 文档的头部</p>
<p><code>&lt;title&gt; &lt;/title&gt;</code> 文档的标题</p>
<p><code>&lt;body&gt; &lt;/body&gt;</code> 文档的主体</p>
<p><code>&lt;br/</code> 单标签（少见）</p>
<p>快捷键：ctrl+S， ctrl+”+” ，Alt+B</p>
<h1 id="3-必须写的三个代码"><a href="#3-必须写的三个代码" class="headerlink" title="3 必须写的三个代码"></a>3 必须写的三个代码</h1><p><code>&lt;!DOCTYPE&gt;</code> 采取HTML5版本，文档类型声明标签，不属于HTML标签</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code> 表示英文网站，zh-CN表示中文网站，fr表示法语网站，但不影响所有语言表示</p>
<p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 说明字符编码方式。字符集是多个字符的集合，以便计算机能够识别和存储各种文字。Windows操作系统浏览器默认使用GBK的简体中文的方式打开，一般工作区中文件的编码方式都是UTF-8，因为unicode更加通用</p>
<h1 id="4-常用标签"><a href="#4-常用标签" class="headerlink" title="4 常用标签"></a>4 常用标签</h1><h2 id="4-1-标题标签"><a href="#4-1-标题标签" class="headerlink" title="4.1 标题标签"></a>4.1 标题标签</h2><p><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 根据重要性递减，每个标题独占一行</p>
<p><strong>h元素通常和SEO优化有关系</strong></p>
<h2 id="4-2-段落标签"><a href="#4-2-段落标签" class="headerlink" title="4.2 段落标签"></a>4.2 段落标签</h2><p><code>&lt;p&gt;</code> <code>&lt;p&gt;</code></p>
<ul>
<li><p>段落之间有空隙</p>
</li>
<li><p>根据网页大小换行</p>
</li>
</ul>
<h2 id="4-3-换行标签"><a href="#4-3-换行标签" class="headerlink" title="4.3 换行标签"></a>4.3 换行标签</h2><p><code>&lt;br&gt;</code>打断，换行 </p>
<h2 id="4-4-水平分割线"><a href="#4-4-水平分割线" class="headerlink" title="4.4 水平分割线"></a>4.4 水平分割线</h2><p><code>&lt;hr&gt;</code></p>
<h2 id="4-5-预留格式"><a href="#4-5-预留格式" class="headerlink" title="4.5 预留格式"></a>4.5 预留格式</h2><p><code>&lt;pre&gt; &lt;/pre&gt;</code></p>
<h2 id="4-6-文本格式化标签"><a href="#4-6-文本格式化标签" class="headerlink" title="4.6 文本格式化标签"></a>4.6 文本格式化标签</h2><ul>
<li><code>&lt;strong&gt; &lt;/strong&gt;</code>  <code>&lt;b&gt; &lt;/b&gt;</code>  加粗</li>
<li><code>&lt;em&gt; &lt;/em&gt;</code>  <code>&lt;i&gt; &lt;/i&gt;</code>  斜体</li>
<li><code>&lt;del&gt; &lt;/del&gt;</code>  <code>&lt;s&gt; &lt;/s&gt;</code>  删除线</li>
<li><code>&lt;ins&gt; &lt;/ins&gt;</code>  <code>&lt;u&gt; &lt;/u&gt;</code>  下划线</li>
<li><code>&lt;sup&gt; &lt;/sup&gt;</code> 右上角</li>
<li><code>&lt;sub&gt; &lt;/sub</code> 右下角</li>
<li><code>&lt;front&gt; &lt;/front&gt;</code> 字体标签（属性：color，size）</li>
<li><code>&lt;code&gt;&lt;/code&gt;</code>用于显示代码</li>
</ul>
<h2 id="4-7-盒子标签"><a href="#4-7-盒子标签" class="headerlink" title="4.7 盒子标签"></a>4.7 盒子标签</h2><p>无语义的盒子</p>
<ul>
<li><code>&lt;div&gt; &lt;/div&gt;</code>表示分割，分区，用于布局，单独占一行。大盒子</li>
<li> <code>&lt;span&gt; &lt;/span&gt;</code>表示跨度跨距，一行可以放多个。小盒子</li>
</ul>
<h2 id="4-8-图像标签"><a href="#4-8-图像标签" class="headerlink" title="4.8 图像标签"></a>4.8 图像标签</h2><p><code>&lt;img src=&quot;&quot; /&gt;</code> 单标签，必须将被插入的文件和html文件放到一个目录下</p>
<p>属性：</p>
<ul>
<li>src用于指定图像文件的路径和文件名</li>
<li>alt替换文本。图像不能显示的文字；屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义</li>
<li>title提示文本。鼠标放到图像上显示的文字</li>
<li>width设置图像的宽度</li>
<li>height设置图像的高度，宽度高度修改一个会等比缩放</li>
<li>border设置图像边框粗细</li>
</ul>
<p>img支持的图片格式：<code>.apng</code>, <code>.avif</code>, <code>.bmp</code>, <code>.gif</code>, <code>.ico</code>, <code>.cur</code>, <code>jpg</code>, <code>.jpeg</code>, <code>jfif</code>, <code>.pjpeg</code>, <code>.pjp</code>, <code>.png</code>, <code>.svg</code></p>
<blockquote>
<p> src下的路径</p>
<ul>
<li>相对路径</li>
</ul>
<p>（图片相对于html页面的位置）</p>
<p>同一级路径  <code>&lt;img src=&quot;./baidu.gif&quot; &gt;</code> </p>
<p>下一级路径  <code>&lt;img src=&quot;images/baidu.gif&quot; /&gt;</code></p>
<p>上一级路径  <code>&lt;img src=&quot;../baidu.gif&quot; /&gt;</code></p>
<ul>
<li>绝对路径</li>
</ul>
<p>（E:\或者网址）</p>
</blockquote>
<h2 id="4-9-超链接标签"><a href="#4-9-超链接标签" class="headerlink" title="4.9 超链接标签"></a>4.9 超链接标签</h2><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;;</code></p>
<p>target（_ self为默认值（当前窗口），_ blank为在新窗口中打开方式，_ parent为当前窗口的父窗口，_ top为当前窗口的顶级窗口，内部窗口：<code>&lt;iframe&gt; &lt;/iframe&gt;</code>）</p>
<blockquote>
<p> iframe元素</p>
<p> 利用iframe元素可以实现：在一个HTML文档中嵌入其他HTML文档</p>
<ul>
<li>frameborder属性：用于规定是否显示边框<ul>
<li>1：显示</li>
<li>0：不显示</li>
</ul>
</li>
</ul>
</blockquote>
<p>（1）外部链接：</p>
<p>（2）内部链接：网页之间的跳转</p>
<p>（3）空链接：<code>&lt;a href=&quot;#&quot;&gt;文本&lt;/a&gt;</code></p>
<p>（4）下载链接：地址链接的是.exe或.zip压缩包</p>
<p>（5）网页元素链接</p>
<p>（6）锚点链接  </p>
<p> <code>&lt;a href=&quot;#two&quot;&gt;文本&lt;/a&gt;</code> </p>
<p> <code>&lt;h3 id=&quot;two&quot;&gt;文本&lt;/h3&gt;</code> </p>
<p>对于网页来说，不管什么操作系统（Windows、Mac、Linux），路径分隔符都是 <code>/</code>，而不是 <code>\</code></p>
<p>a元素的一些其他用途：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下载文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/coderwhy/HYMiniMall/archive/master.zip&quot;</span>&gt;</span>HYMiniMall<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--发邮件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:12345@qq.com&quot;</span>&gt;</span>发邮件到12345qq邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-10-注释标签"><a href="#4-10-注释标签" class="headerlink" title="4.10 注释标签"></a>4.10 注释标签</h2><p><code>&lt;!-- --&gt;</code>   “ctrl+/“</p>
<h2 id="4-11-特殊字符"><a href="#4-11-特殊字符" class="headerlink" title="4.11 特殊字符"></a>4.11 特殊字符</h2><p>空格符 <code>&amp;nbsp;</code></p>
<p>&lt;  <code>&amp;lt;</code></p>
<p>&gt;  <code>&amp;gt;</code></p>
<p>&amp;  <code>&amp;amp;</code></p>
<p>&yen;  <code>&amp;yen;</code></p>
<p>&copy;  <code>&amp;copy;</code> （版权）</p>
<p>&reg;  <code>&amp;reg;</code>  （注册商标）</p>
<p>&deg;   <code>&amp;deg;</code> （摄氏度）</p>
<p>&plusmn;  <code>&amp;plusmn;</code>  （正负号）</p>
<p>&times;  <code>&amp;times;  </code>  </p>
<p>&divide;  <code>&amp;divide;</code></p>
<p>&sup2;   <code>&amp;sup2;</code></p>
<p>&sup3;   <code>&amp;sup3;</code></p>
<h2 id="4-12-表格标签"><a href="#4-12-表格标签" class="headerlink" title="4.12 表格标签"></a>4.12 表格标签</h2><h3 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h3><p><code>&lt;table&gt; &lt;/table&gt;</code> 定义表格的标签</p>
<p><code>&lt;tr&gt; &lt;/tr&gt;</code> 定义表格中的行</p>
<p><code>&lt;th&gt; &lt;/th&gt;</code> 表头单元格，加粗居中</p>
<p><code>&lt;td&gt; &lt;/td&gt;</code> 表格中的单元格</p>
<h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><p>align：left,center,right 对齐方式</p>
<p>width（height）: “50%”或”300px” （像素值或百分比）</p>
<p>border：1或”1px” 规定是否拥有边框和线的宽度</p>
<p>cellspacing：规定单元格之间的空白，默认2像素 （像素值）</p>
<p>cellpadding：规定单元边沿与其内容之间的空白，默认1像素（像素值）</p>
<h3 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h3><p><code>&lt;caption&gt;&lt;/caption&gt;</code>：表格的标题</p>
<p><code>&lt;thead&gt; &lt;/thead&gt;</code>：用于定义表格的头部，内部必须拥有<code>&lt;tr&gt;</code>标签</p>
<p><code>&lt;tbody&gt; &lt;/tbody&gt;</code>：用于定义表格的主体</p>
<p><code>&lt;hfoot&gt; &lt;/tfoot&gt;</code>：形式和<code>&lt;tbody&gt;</code>一样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 居中显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>股票排行<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>股票名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>股票代码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>股票价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    // 设置表格的边框是合并的</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p>跨行合并：<code>rowspan</code>=”合并单元格的个数”，最上侧单元格为目标单元格，写合并代码</p>
<p>跨列合并：<code>colspan</code>=”合并单元格的个数”，最左侧单元格为目标单元格，写合并代码</p>
<p>注意合并单元格之后删除多余的单元格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 列合并 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 行合并 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>1-1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2-2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-13-列表标签"><a href="#4-13-列表标签" class="headerlink" title="4.13 列表标签"></a>4.13 列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p><code>&lt;ul&gt;</code> 表示html页面中项目的无序列表，其中只能嵌套<code>&lt;li&gt; &lt;/li&gt;</code></p>
<p><code>&lt;li&gt;</code>表示列表项，<code>&lt;li&gt; &lt;/li&gt;</code>之间相当于容器，可以容纳所有元素</p>
<p>属性：<code>type</code>：circle，square，disc</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p><code>&lt;ol&gt;</code> 表示html页面中项目的有序列表，其中只能嵌套<code>&lt;li&gt; &lt;/li&gt;</code></p>
<p><code>&lt;li&gt;</code>与无序列表中相同</p>
<p>属性：<code>type</code>：”A”，”a”，”1”，”Ⅰ”</p>
<h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>常用于对名词进行解释和描述</p>
<p><code>&lt;dl&gt;</code> 表示html页面中项目的定义描述列表，其中只能嵌套<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code></p>
<p><code>&lt;dt&gt;</code> 定义项目或名字</p>
<p><code>&lt;dd&gt;</code> 描述每一个项目的名字</p>
<h2 id="4-14-表单标签"><a href="#4-14-表单标签" class="headerlink" title="4.14 表单标签"></a>4.14 表单标签</h2><h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><p>表单域是一个包含表单元素的区域</p>
<p><code>&lt;form&gt;</code> 用于定义表单域，把它范围内的表单元素信息提交给服务器</p>
<p>属性：</p>
<ul>
<li>action用于指定接收并处理表单数据的服务器程序的url地址</li>
<li>method用于设置表单数据的提交方式，其取值为get或post</li>
<li>name用于指定表单的名称，以区分同一个页面中的多个表单域</li>
<li>target在什么地方打开URL</li>
</ul>
<h3 id="表单控件（表单元素）"><a href="#表单控件（表单元素）" class="headerlink" title="表单控件（表单元素）"></a>表单控件（表单元素）</h3><p>readonly和disabled都是只读的，readonly修饰的表单项可以提交给服务器，disabled不会提交<br><strong>1、<code>&lt;input/&gt;</code>输入表单元素</strong></p>
<p><code>type</code>=”属性值”</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">button 定义可点击按钮（多数情况用于通过js启动脚本)，使用value属性设置按钮文字</span><br><span class="line">checkbox 定义复选框</span><br><span class="line">file 定义输入字段和浏览按钮，供文件上传</span><br><span class="line">hidden 定义隐藏的输入字段（不希望用户在浏览器说看到，但是要提交）</span><br><span class="line">image 定义图像形式的提交按钮</span><br><span class="line">password 定义密码字段。该字段的字符被掩码</span><br><span class="line">radio 定义单选按钮</span><br><span class="line">reset 定义重置按钮。清除表单中的所有数据</span><br><span class="line">submit 定义提交按钮。提交按钮会把表单数据发送到服务器</span><br><span class="line">text 定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符</span><br></pre></td></tr></table></figure>

<blockquote>
<p>radio和checkbox使用时，同类型name要保持一致</p>
</blockquote>
<p><code>name</code>=”名称”（定义<code>input</code>元素的名称），有<code>name</code>才能提交成功，<code>submit</code>按钮不能有<code>name</code>属性（最终提交后的网址为name = value &amp; name = value &amp; name = value，即提交的数据格式）</p>
<p><code>value</code>=”内容”（规定<code>input</code>元素的值——未输入元素时显示的字样，也可以由用户输入提交给服务器）</p>
<p><code>maxlength</code>=”正整数”（规定输入字段中的字符的最大长度）</p>
<p><code>readonly</code>：只读</p>
<p><code>disabled</code>：禁用</p>
<p><code>checked</code>：默认被选中（type为radio和checkbox）</p>
<p><code>autofocus</code>：当页面加载时，自动聚焦</p>
<p><code>multiple</code>：是否允许多个值</p>
<p><strong>2、select下拉表单元素（有多个选择，节约页面空间）</strong></p>
<p><code>&lt;select&gt;</code> 包含 <code>&lt;option&gt;</code></p>
<ul>
<li><code>multiple</code>表示下拉列表多选</li>
<li><code>size</code>表示显示多少项</li>
</ul>
<p>在<code>&lt;option&gt;</code>中定义<code>selected</code>时，当前项即为默认选中项</p>
<p><strong>3、textarea文本域元素</strong></p>
<p><code>&lt;textarea&gt;</code> 用于定义多行文本输入的控件（常见于留言板，评论）</p>
<p><strong>语法</strong>：<code>&lt;textarea rows=&quot;显示的行数&quot; cols=&quot;每行中的字符数&quot;&gt;文本内容（默认内容）&lt;/textarea&gt;</code>（实际开发一般用CSS改变大小）</p>
<p><strong>缩放的css设置</strong>：</p>
<ul>
<li><p>禁止缩放：resize: none;</p>
</li>
<li><p>水平缩放：resize: horizontal;</p>
</li>
<li><p>垂直缩放：resize: vertical;</p>
</li>
<li><p>水平垂直缩放：resize: both;</p>
</li>
</ul>
<p><strong>4、button按钮</strong></p>
<p>input和button后用type均可实现</p>
<p>普通按钮<code>type=button</code></p>
<p>重置按钮<code>type=reset</code></p>
<p>提交按钮<code>type=submit</code></p>
<p><strong>5、label表单元素的标题</strong></p>
<p>label元素一般跟input配合使用，用来表示input的标题</p>
<p>label可以跟某个input绑定，点击label就可以激活对应的input变成选中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="5-全局属性"><a href="#5-全局属性" class="headerlink" title="5 全局属性"></a>5 全局属性</h1><p>id：定义唯一标识符（ID），该标识符在整个文档中必须是唯一的。其目的是在链接（使用片段标识符），脚本或样式（使用 CSS）时标识元素。</p>
<p>class：一个以空格分隔的元素的类名（classes ）列表，它允许 CSS 和 Javascript 通过类选择器或者DOM方法来选择和访问特定的元素；</p>
<p>style：给元素添加内联样式；</p>
<p>title：包含表示与其所属元素相关信息的文本。 这些信息通常可以作为提示呈现给用户，但不是必须的。</p>
<h1 id="6-URL"><a href="#6-URL" class="headerlink" title="6 URL"></a>6 URL</h1><p>URL代表<strong>统一资源定位符</strong></p>
<p>◼ URL的标准格式：<code>[协议类型]://[服务器地址]:[端口号]/[文件路径][文件名]?[查询]#[片段ID]</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/20220502214728.png" alt="image-20220502214708509"></p>
<blockquote>
<p>和URI的区别：</p>
<ul>
<li><p>URI = Uniform Resource Identifier 统一资源<strong>标志符，</strong>用于标识 Web 技术使用的逻辑或物理资源； </p>
</li>
<li><p>URL = Uniform Resource Locator 统一资源<strong>定位符，</strong>俗称网络地址，相当于网络中的门牌号； </p>
</li>
</ul>
<p>◼ <strong>URI在某一个规则下能把一个资源独一无二的识别出来。</strong></p>
<p>URL作为一个网络Web资源的地址，可以唯一将一个资源识别出来，所以URL是一个URI； 即URL是URI的一个子集，但是URI并不一定是URL</p>
</blockquote>
<h1 id="7-SEO"><a href="#7-SEO" class="headerlink" title="7 SEO"></a>7 SEO</h1><p>元素语义化有利于SEO</p>
<p>搜索引擎优化（英语：search engine optimization，缩写为SEO）是通过了解搜索引擎的运作规则来调整网站，以及提高网站在有关搜索引擎内排名的方式。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记</title>
    <url>/undefined/cecfc2f4/</url>
    <content><![CDATA[<blockquote>
<p>C++学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-C-对C的增强"><a href="#1-C-对C的增强" class="headerlink" title="1 C++对C的增强"></a>1 C++对C的增强</h1><p>1、定义函数时必须写明类型，即int不可省略</p>
<p>2、声明结构体类型后，定义结构体变量时，C中需写struct，C++则不需要</p>
<p>3、全局变量重定义的加强（随用随定义）</p>
<p>4、布尔类型的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    flag = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bool类型的字节数为1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bool只能取0,1，非0自动转换为1，值只能为true和false</li>
</ul>
<p>5、三目运算符的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>,b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c = a &lt; b ? a : b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">        (a &lt; b ? a : b) = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//*((a &lt; b) ? &amp;a : &amp;b) = 50;（C,C++通用写法）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>C++中三目运算符可以做左值，C中三目运算符不能做左值</p>
</li>
<li><p>C++中三目运算符返回变量自身，C中返回变量的值</p>
</li>
<li><p>C++中两种赋值同时出现时，不论谁前谁后，都是*((a &lt; b) ? &amp;a : &amp;b) = 50的结果优先</p>
</li>
</ul>
<p>6、const的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*)&amp;a;</span><br><span class="line">    *b = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//改变的为临时开辟的变量</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>C++中通过指针不能改变所指向常变量的值</p>
</li>
<li><p>C++中将const存于符号表中，无空间和地址</p>
</li>
<li><p>C++中const定义的为常量(与#define类似，但运行时段不同，define无法被输出)</p>
</li>
</ul>
<p>7、枚举类型的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">season</span> &#123;</span></span><br><span class="line">    SPR = <span class="number">0</span>,</span><br><span class="line">    SUM,</span><br><span class="line">    AUT,</span><br><span class="line">    WIN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//enum season s=2;(×)</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">season</span> <span class="title">s</span> =</span> AUT;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C++中枚举变量赋值只能赋左边的元素名，不能赋数字</p>
<h1 id="2-命名空间（namespace）"><a href="#2-命名空间（namespace）" class="headerlink" title="2 命名空间（namespace）"></a>2 命名空间（namespace）</h1><h2 id="2-1-命名空间的使用"><a href="#2-1-命名空间的使用" class="headerlink" title="2.1 命名空间的使用"></a>2.1 命名空间的使用</h2><p>方式一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>命名空间更好的控制标识符的作用域</p>
</li>
<li><p>cout代表黑屏幕，cin代表键盘</p>
</li>
<li><p>iostream提供一个叫命名空间的东西，标准的命名空间是std</p>
</li>
</ul>
<h2 id="2-2-命名空间的定义"><a href="#2-2-命名空间的定义" class="headerlink" title="2.2 命名空间的定义"></a>2.2 命名空间的定义</h2><h3 id="2-2-1-命名空间的普通定义"><a href="#2-2-1-命名空间的普通定义" class="headerlink" title="2.2.1 命名空间的普通定义"></a>2.2.1 命名空间的普通定义</h3><p>方式一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; spaceA::g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> spaceA;</span><br><span class="line">    cout &lt;&lt; g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> spaceA::g_a;</span><br><span class="line">    cout &lt;&lt; g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-命名空间的嵌套定义"><a href="#2-2-2-命名空间的嵌套定义" class="headerlink" title="2.2.2 命名空间的嵌套定义"></a>2.2.2 命名空间的嵌套定义</h3><p>方式一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> spaceB::spaceC;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    spaceB::spaceC::teacher t1;</span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> spaceB::spaceC::teacher;</span><br><span class="line">    teacher t1;</span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-内联函数"><a href="#3-内联函数" class="headerlink" title="3 内联函数"></a>3 内联函数</h1><blockquote>
<p>原理：内联函数直接将代码贴到函数调用的地方，使得程序在调用函数时不用来回跳跃等其它操作，从而达到提高程序运行速度的目的（但其占用内存更大）</p>
</blockquote>
<ul>
<li>适用场景：函数体很“小”，且被“频繁”调用</li>
<li>inline和宏定义的区别：inline函数是函数，宏不是函数；内联函数在编译时展开，宏是在编译时展开的；在编译的时候，内联函数可以直接被镶嵌到目标代码中，宏定义只是简单地做文本替换；内联函数可以完成类型检查、语句是否正确等编译功能，宏不具备这样的能力；宏定义在处理宏参数时要非常小心，容易产生二义性，而内联函数定义时不会产生二义性</li>
<li>C++中内联编译的限制：不能存在任何形式的循环语句，函数体不能过于庞大，不能对函数进行取址操作，函数内联声明必须在调用语句之前</li>
</ul>
<p>在类定义中的定义的函数都是内联函数，即使没有使用 inline 说明符。对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。如果已定义的函数多于一行，编译器会忽略 inline 限定符（即看作普通函数处理）</p>
<p>注意：定义为普通函数，声明为内联函数，仍为普通函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b)</span></span><br><span class="line">((a)&gt;(b)?(a):(b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printAB</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;,b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">MAX</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="built_in">printAB</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算机内存由慢到快网盘，硬盘，内存，缓存，寄存器</span></span><br></pre></td></tr></table></figure>

<h1 id="4-默认参数和占位参数"><a href="#4-默认参数和占位参数" class="headerlink" title="4 默认参数和占位参数"></a>4 默认参数和占位参数</h1><h2 id="4-1-单个默认参数"><a href="#4-1-单个默认参数" class="headerlink" title="4.1 单个默认参数"></a>4.1 单个默认参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a = <span class="number">666</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">// 这个不填参数的时候，会使用你的默认参数，填参数时，使用你填的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-多个默认参数"><a href="#4-2-多个默认参数" class="headerlink" title="4.2 多个默认参数"></a>4.2 多个默认参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_volume</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;w = &quot;</span> &lt;&lt; width &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;h = &quot;</span> &lt;&lt; height &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> len * width * height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">30</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;体积是&quot;</span> &lt;&lt; <span class="built_in">get_volume</span>(len, w, h) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数个数一一对应</span></span><br><span class="line"><span class="comment">// 传参从右往左传，可以一部分为默认参数，一部分传参</span></span><br></pre></td></tr></table></figure>

<p>默认参数为当没有实参时，默认的值。 当函数有一个参数为默认参数，那么从这个参数起，后面的参数都必须有默认参数。在函数的声明和定义中，默认参数只能写一次，不然编译器会报错，特别是在分文件编写中</p>
<h2 id="4-3-占位参数"><a href="#4-3-占位参数" class="headerlink" title="4.3 占位参数"></a>4.3 占位参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func1</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">func2</span>(<span class="number">199</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>占位参数只有参数类型声明，而没有参数名声明，一般情况下，在函数体内部无法使用占位参数。占位参数必须填入实参，占位参数也可以有默认值。占位参数与默认参数结合起来使用，兼容C语言程序中可能出现的不规范写法。</p>
<h1 id="5-函数重载"><a href="#5-函数重载" class="headerlink" title="5 函数重载"></a>5 函数重载</h1><h2 id="5-1-函数重载的条件"><a href="#5-1-函数重载的条件" class="headerlink" title="5.1 函数重载的条件"></a>5.1 函数重载的条件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数重载的话不要写默认参数，为了避免调用出现函数冲突</span></span><br><span class="line"><span class="comment">// 可以写占用参数，但不要与默认参数一起使用</span></span><br><span class="line"><span class="comment">// 如果调用func(10,20)则出错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c = <span class="number">300</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;print1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;print2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, x);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">10.0</span>);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">3.14f</span>);<span class="comment">// (double)</span></span><br><span class="line">    <span class="built_in">print1</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//(int)</span></span><br><span class="line">    <span class="comment">// 匹配类型优先，其次为隐式转换</span></span><br><span class="line">    <span class="comment">// 若都匹配不到，则调用失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数名相同，参数列表(个数，类型，顺序)不同；函数返回值并不是构成函数重载的条件</p>
<h2 id="5-2-函数重载和函数指针"><a href="#5-2-函数重载和函数指针" class="headerlink" title="5.2 函数重载和函数指针"></a>5.2 函数重载和函数指针</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int,int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义一种函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(MY_FUNC)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义一个指向一种函数类型的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*MY_FUNC_P)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    MY_FUNC* fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = func;</span><br><span class="line">    <span class="built_in">fp</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    MY_FUNC_P fp1 = <span class="literal">NULL</span>;</span><br><span class="line">    fp1 = func;</span><br><span class="line">    <span class="built_in">fp1</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span> (*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    fp3 = func;</span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    fp3 = func;<span class="comment">//fp3-&gt;func(int,int)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数指针不可自加</span></span><br><span class="line">    <span class="comment">// 实际上在给函数指针赋值的时候，是会发生函数重载匹配的</span></span><br><span class="line">    <span class="comment">// 在调用函数指针的时候，所调用的函数就已经固定了，而非重载，此处不能隐式转换</span></span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span>(*fp4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    fp4 = func;<span class="comment">//fp4-&gt;func(int,int,int)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">30</span>);<span class="comment">//func(int,int)</span></span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">fp4</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-类与对象"><a href="#6-类与对象" class="headerlink" title="6 类与对象"></a>6 类与对象</h1><h2 id="6-1-基本概念"><a href="#6-1-基本概念" class="headerlink" title="6.1 基本概念"></a>6.1 基本概念</h2><p>类是一种数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">(struct Hero&amp; h)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hero&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; h.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sex = &quot;</span> &lt;&lt; h.sex &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvHero</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">// 访问控制权限</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;advHero&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;sex = &quot;</span> &lt;&lt; sex &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="comment">// &#123;&#125;以内叫类的内部，以外叫类的外部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> kind[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line">    <span class="comment">// 在public下面定义成员变量和函数 是能够在类的内部和外部都可以访问的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kind = &quot;</span> &lt;&lt; kind &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;color = &quot;</span> &lt;&lt; color &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; kind &lt;&lt; <span class="string">&quot;开始写字了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; kind &lt;&lt; <span class="string">&quot;跑起来了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 在private下面定义的成员变量和方法只能够在类的内部访问</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="keyword">char</span> kind[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hero h;</span><br><span class="line">    <span class="built_in">strcpy</span>(h.name, <span class="string">&quot;gailun&quot;</span>);</span><br><span class="line">    h.sex = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printHero</span>(h);</span><br><span class="line">    AdvHero advH;</span><br><span class="line">    <span class="built_in">strcpy</span>(advH.name, <span class="string">&quot;ChunBro&quot;</span>);</span><br><span class="line">    advH.sex = <span class="number">1</span>;</span><br><span class="line">    advH.<span class="built_in">printHero</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Animal dog;</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.kind, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.color, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    Animal sheep;</span><br><span class="line">    <span class="built_in">strcpy</span>(sheep.kind, <span class="string">&quot;sheep&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(sheep.color, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">    dog.<span class="built_in">write</span>();</span><br><span class="line">    sheep.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-类的封装"><a href="#6-2-类的封装" class="headerlink" title="6.2 类的封装"></a>6.2 类的封装</h2><p>类把数据（事物的属性）和函数（事物的行为——操作）封装为一个整体。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_date</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;year, month, day&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; d.year;</span><br><span class="line">    cin &gt;&gt; d.month;</span><br><span class="line">    cin &gt;&gt; d.day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印data的接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_date</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; d.year &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; d.month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; d.day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_leap_year</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((d.year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (d.year % <span class="number">100</span> != <span class="number">0</span>) || (d.year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 成员方法 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;year, month, day&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; year;</span><br><span class="line">        cin &gt;&gt; month;</span><br><span class="line">        cin &gt;&gt; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印data的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_leap_year</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_year</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_year</span><span class="params">(<span class="keyword">int</span> new_year)</span> </span>&#123;</span><br><span class="line">        year = new_year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">// 保护控制权限。在类的继承中跟private有区别，在单个类中，跟private是一模一样的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个类类的内部，默认的访问控制权限是private</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个结构体默认的访问控制权限是public</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    Date d1;</span><br><span class="line">    <span class="built_in">init_date</span>(d1);</span><br><span class="line">    <span class="built_in">print_date</span>(d1);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_leap_year</span>(d1) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyDate my_date;</span><br><span class="line">    my_date.<span class="built_in">init_date</span>();</span><br><span class="line">    my_date.<span class="built_in">print_date</span>();</span><br><span class="line">    <span class="keyword">if</span> (my_date.<span class="built_in">is_leap_year</span>() == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter,setter</span></span><br><span class="line">    cout &lt;&lt; my_date.<span class="built_in">get_year</span>() &lt;&lt; endl;</span><br><span class="line">    my_date.<span class="built_in">set_year</span>(<span class="number">2000</span>);</span><br><span class="line">    cout &lt;&lt; my_date.<span class="built_in">get_year</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*错误写法：</span></span><br><span class="line"><span class="comment">	Hero h;</span></span><br><span class="line"><span class="comment">	h.year = 1000;*/</span></span><br><span class="line">    Hero2 h2;</span><br><span class="line">    h2.year = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-面向过程和面向对象"><a href="#6-3-面向过程和面向对象" class="headerlink" title="6.3 面向过程和面向对象"></a>6.3 面向过程和面向对象</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">char</span> *food)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot;吃&quot;</span> &lt;&lt; food &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(class Dog &amp;dog, <span class="keyword">char</span> *food)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; dog.name &lt;&lt; <span class="string">&quot;吃&quot;</span> &lt;&lt; food &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.name, <span class="string">&quot;狗&quot;</span>);</span><br><span class="line">    <span class="built_in">eat</span>(dog, <span class="string">&quot;翔&quot;</span>);</span><br><span class="line">    dog.<span class="built_in">eat</span>(<span class="string">&quot;翔&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-案例"><a href="#6-4-案例" class="headerlink" title="6.4 案例"></a>6.4 案例</h2><h3 id="案例一：求圆的周长和面积"><a href="#案例一：求圆的周长和面积" class="headerlink" title="案例一：求圆的周长和面积"></a>案例一：求圆的周长和面积</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的周长</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCircleGirth</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span>*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCircleArea</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*r*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用面向对象实现</span></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> *m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r*m_r*<span class="number">3.14</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> m_r; <span class="comment">// 圆的私有成员 半径</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_area = m_r*m_r*<span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">return</span> m_area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_girth = m_r * <span class="number">2</span> * <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">return</span> m_girth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> m_r;</span><br><span class="line">    <span class="keyword">double</span> m_girth; <span class="comment">//周长</span></span><br><span class="line">    <span class="keyword">double</span> m_area;<span class="comment">//面积</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> r = <span class="number">10</span>; <span class="comment">// 圆的半径</span></span><br><span class="line">    <span class="keyword">double</span> g = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">0</span>;</span><br><span class="line">    g = <span class="built_in">getCircleGirth</span>(r);</span><br><span class="line">    a = <span class="built_in">getCircleArea</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Circle c;</span><br><span class="line"></span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; c.<span class="built_in">getR</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; c.<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; c.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Circle2 c2;</span><br><span class="line"></span><br><span class="line">    c2.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; c2.<span class="built_in">getR</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; c2.<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; c2.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例二：求圆的面积-多文件"><a href="#案例二：求圆的面积-多文件" class="headerlink" title="案例二：求圆的面积(多文件)"></a>案例二：求圆的面积(多文件)</h3><p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Circle.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;面积&quot;</span> &lt;&lt; c.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Circle.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Circle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Circle::setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    m_r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_area = m_r *m_r *<span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">return</span> m_area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_girth = m_r * <span class="number">2</span> * <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m_girth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例三：求立方体是否相等"><a href="#案例三：求立方体是否相等" class="headerlink" title="案例三：求立方体是否相等"></a>案例三：求立方体是否相等</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立方体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setABC</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">        m_c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_a*m_b) * <span class="number">2</span> + (m_a*m_c) * <span class="number">2</span> + (m_b*m_c) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_a*m_b*m_c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同类之间无私处</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeCube</span><span class="params">(Cube &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_a == another.m_a &amp;&amp;</span><br><span class="line">            m_b == another.<span class="built_in">getB</span>() &amp;&amp;</span><br><span class="line">            m_c == another.<span class="built_in">getC</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeCube</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">getA</span>() == c2.<span class="built_in">getA</span>() &amp;&amp;</span><br><span class="line">        c1.<span class="built_in">getB</span>() == c2.<span class="built_in">getB</span>() &amp;&amp;</span><br><span class="line">        c1.<span class="built_in">getC</span>() == c2.<span class="built_in">getC</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Cube c1;</span><br><span class="line">    c1.<span class="built_in">setABC</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    Cube c2;</span><br><span class="line">    c2.<span class="built_in">setABC</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 的体积是&quot;</span> &lt;&lt; c1.<span class="built_in">getVolume</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 的面积是&quot;</span> &lt;&lt; c1.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">judgeCube</span>(c1, c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ------ &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">judgeCube</span>(c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例四：求点是否在圆内"><a href="#案例四：求点是否在圆内" class="headerlink" title="案例四：求点是否在圆内"></a>案例四：求点是否在圆内</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x0 = x;</span><br><span class="line">        y0 = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个判断点是否在圆内</span></span><br><span class="line">    <span class="comment">// true 在内部</span></span><br><span class="line">    <span class="comment">// false 在外部</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint</span><span class="params">(Point &amp;p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dd;</span><br><span class="line"></span><br><span class="line">        dd = (p.<span class="built_in">getX</span>() - x0)*(p.<span class="built_in">getX</span>() - x0) + (p.<span class="built_in">getY</span>() - y0)*(p.<span class="built_in">getY</span>() - y0);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dd &gt; m_r*m_r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x0;</span><br><span class="line">    <span class="keyword">int</span> y0;</span><br><span class="line">    <span class="keyword">int</span> m_r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setXY</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    Point p;</span><br><span class="line">    p.<span class="built_in">setXY</span>(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (c.<span class="built_in">judgePoint</span>(p) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;圆的内部&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;圆的外部&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例五-判断两个圆是否相交"><a href="#案例五-判断两个圆是否相交" class="headerlink" title="案例五 判断两个圆是否相交"></a>案例五 判断两个圆是否相交</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两点距离的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">pointDistance</span><span class="params">(Point &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d_x = m_x - another.m_x;</span><br><span class="line">        <span class="keyword">int</span> d_y = m_y - another.m_y;</span><br><span class="line">        <span class="keyword">double</span> dis = <span class="built_in">sqrt</span>(d_x*d_x + d_y*d_y);</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        p0.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断圆是否跟我相交</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIntersection</span><span class="params">(Circle &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两个半径之和</span></span><br><span class="line">        <span class="keyword">int</span> rr = m_r + another.m_r;</span><br><span class="line">        <span class="comment">// 两圆心之间距离</span></span><br><span class="line">        <span class="keyword">double</span> dis = p0.<span class="built_in">pointDistance</span>(another.p0);</span><br><span class="line">        <span class="keyword">if</span> (dis &lt;= rr) &#123;</span><br><span class="line">            <span class="comment">// 相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_r;</span><br><span class="line">    Point p0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c1, c2;</span><br><span class="line">    <span class="keyword">int</span> x, y, r;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的半径&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    c1.<span class="built_in">setR</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的x&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; y;</span><br><span class="line">    c1.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的半径&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    c2.<span class="built_in">setR</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的x&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; y;</span><br><span class="line">    c2.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">isIntersection</span>(c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相交&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相交&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-类中的函数"><a href="#7-类中的函数" class="headerlink" title="7 类中的函数"></a>7 类中的函数</h1><h2 id="7-1-构造函数和析构函数"><a href="#7-1-构造函数和析构函数" class="headerlink" title="7.1 构造函数和析构函数"></a>7.1 构造函数和析构函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// test类的构造函数</span></span><br><span class="line">    <span class="comment">// 在对象被创建的时候，用来初始化对象的函数</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123; <span class="comment">// 无参数的构造函数</span></span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">        name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(name, <span class="string">&quot;zhang3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;  y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="comment">// 析构函数可以释放一些不必要的东西</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(name);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;free sycc!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">        t1.<span class="built_in">prinT</span>();</span><br><span class="line">        <span class="comment">// 在一个对象临死之前，要自动调用析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Test t1;</span></span><br><span class="line">    <span class="comment">// t1.init(10, 20);</span></span><br><span class="line">    <span class="comment">// (普通类函数定义对象的写法)</span></span><br><span class="line">    <span class="comment">// t1此时是未知的，最好初始化</span></span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">    Test t3;<span class="comment">// 调用类的无参数构造函数</span></span><br><span class="line">    t3.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数可以被重载</span></span><br><span class="line"><span class="comment">// 析构函数不可以被重载，析构函数只有一个</span></span><br></pre></td></tr></table></figure>

<p>构造函数和析构函数都没有返回值,析构函数没有形参</p>
<h2 id="7-2-构造函数的分类"><a href="#7-2-构造函数的分类" class="headerlink" title="7.2 构造函数的分类"></a>7.2 构造函数的分类</h2><h3 id="7-2-1-无参构造函数"><a href="#7-2-1-无参构造函数" class="headerlink" title="7.2.1 无参构造函数"></a>7.2.1 无参构造函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span><span class="comment">// 默认的，无作用</span></span></span><br><span class="line">    <span class="comment">// 默认的无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示提供一个有参的构造函数</span></span><br><span class="line">    <span class="comment">// 默认的无参 构造函数就不复存在</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的析构函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test t1;<span class="comment">// 调用Test无参构造</span></span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-拷贝构造函数"><a href="#7-2-2-拷贝构造函数" class="headerlink" title="7.2.2 拷贝构造函数"></a>7.2.2 拷贝构造函数</h3><p>即复制构造函数</p>
<p>同一个类的对象在内存中有完全相同的结构，如果作为一个整体进行复制是完全可行的。这个复制过程只需要复制数据成员，而函数成员是共用的（只有一份代码）。在建立对象时可用同一类的另一个对象来初始化该对象，这时所用的构造函数称为复制构造函数。复制构造函数的参数必须是引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;,y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 显示的拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test &amp;)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 会有一个默认的拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// =赋值操作符</span></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;</span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">    Test t3 = t1;</span><br><span class="line">    <span class="comment">// 依然是初始化t2的时候调用t3拷贝构造函数</span></span><br><span class="line">    Test t4;</span><br><span class="line">    t4 = t1;</span><br><span class="line">    <span class="comment">// 调用的不是t4的拷贝构造函数，而是t4的赋值操作符函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-3-默认拷贝构造函数"><a href="#7-2-3-默认拷贝构造函数" class="headerlink" title="7.2.3 默认拷贝构造函数"></a>7.2.3 默认拷贝构造函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        m_a = <span class="number">0</span>;</span><br><span class="line">        m_b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">const</span> A&amp; another) &#123;</span><br><span class="line">        m_a = another.m_a;</span><br><span class="line">        m_b = another.m_b;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(const A&amp;...)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中</span></span><br><span class="line"><span class="comment">//	会有个默认的无参构造函数：</span></span><br><span class="line"><span class="comment">//		当没有任何显示的构造函数（显示的无参，显示有参，显示拷贝构造）的时候，默认无参构造函数就会出现</span></span><br><span class="line"><span class="comment">//	会有默认的拷贝构造:</span></span><br><span class="line"><span class="comment">//		当没有显示的拷贝构造函数，默认的拷贝构造就会出现</span></span><br><span class="line"><span class="comment">//	会有默认的析构函数：</span></span><br><span class="line"><span class="comment">//		当没有显示的析构函数的时候，默认的析构函数就会出现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="function">A <span class="title">a1</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>拷贝构造函数的应用场景</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(int x,int y)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test &amp;)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const Test &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;  y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数调用的顺序，跟构造相反，谁先构造的，谁后析构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;<span class="comment">// Test t2 = t1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    Test t2;</span><br><span class="line">    t2 = t1;<span class="comment">// =操作符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Test t)</span> </span>&#123; <span class="comment">// Test t = t1;Test t的拷贝构造函数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    t.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test3 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="built_in">func</span>(t1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test3 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">Test <span class="title">temp</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    temp.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;<span class="comment">// 匿名的对象 = temp(构造)</span></span><br><span class="line"><span class="comment">// 一次析构</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test4 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func2</span>();<span class="comment">// 返回一个匿名对象</span></span><br><span class="line">    <span class="comment">// 当一个函数返回一个匿名对象的时候，</span></span><br><span class="line">    <span class="comment">// 函数外部没有任何变量去接收它</span></span><br><span class="line">    <span class="comment">// 这个匿名对象将不会再被使用，</span></span><br><span class="line">    <span class="comment">// 编译器会直接将这个匿名对象回收掉，</span></span><br><span class="line">    <span class="comment">// 而不是等待整个函数执行完毕再回收</span></span><br><span class="line">    <span class="comment">// 故此处有两次析构</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test4 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test5 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t1 = <span class="built_in">func2</span>();</span><br><span class="line">    <span class="comment">// 不会触发t1的拷贝构造，而是将匿名对象转正t1</span></span><br><span class="line">    <span class="comment">// 把这个匿名对象起了名字叫做t1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test5 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test6 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t1;<span class="comment">// t1已经被初始化了</span></span><br><span class="line">    t1 = <span class="built_in">func2</span>();<span class="comment">//不会被转正</span></span><br><span class="line">    <span class="comment">// 仍然是匿名对象，t1会调用等号操作符</span></span><br><span class="line">    <span class="comment">// t1.operator=匿名对象</span></span><br><span class="line">    <span class="comment">// 编译器会立刻回收匿名对象</span></span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test6 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="comment">//test2();</span></span><br><span class="line">    <span class="comment">//test3();</span></span><br><span class="line">    <span class="comment">//test4();</span></span><br><span class="line">    <span class="comment">//test5();</span></span><br><span class="line">    <span class="built_in">test6</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-深拷贝和浅拷贝"><a href="#7-3-深拷贝和浅拷贝" class="headerlink" title="7.3 深拷贝和浅拷贝"></a>7.3 深拷贝和浅拷贝</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Teacher</span>(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* name) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Teacher(int,char*)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_id = id;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">        m_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; m_id &lt;&lt; <span class="string">&quot;,name = &quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示的提供一个拷贝构造函数，来完成深拷贝动作</span></span><br><span class="line">    <span class="built_in">Teacher</span>(<span class="keyword">const</span> Teacher&amp; another) &#123;</span><br><span class="line">        m_id = another.m_id;</span><br><span class="line">        <span class="comment">// 深拷贝动作  </span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.m_name);</span><br><span class="line">        m_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);<span class="comment">// 一定要释放，且释放一次</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, another.m_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Teacher</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Teacher()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (m_name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(m_name);</span><br><span class="line">            m_name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_id;</span><br><span class="line">    <span class="keyword">char</span>* m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">(t1)</span></span>;<span class="comment">// t2的默认拷贝构造</span></span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-4-构造函数的参数列表"><a href="#7-4-构造函数的参数列表" class="headerlink" title="7.4 构造函数的参数列表"></a>7.4 构造函数的参数列表</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的初始化列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(A &amp;a1,A &amp;a2,<span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(A&amp;,A&amp;,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造对象成员的顺序跟初始化列表的顺序无关</span></span><br><span class="line">    <span class="comment">// 而是与对象的定义顺序有关</span></span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(int,int,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        m_a1.<span class="built_in">printA</span>();</span><br><span class="line">        m_a2.<span class="built_in">printA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    A m_a1;</span><br><span class="line">    A m_a2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(10), a2(100);</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a1, a2, <span class="number">1000</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">300</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的初始化列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(A&amp;a1, A&amp;a2, <span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(A&amp;,A&amp;,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        m_a1.<span class="built_in">printA</span>();</span><br><span class="line">        m_a2.<span class="built_in">printA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    A m_a1;</span><br><span class="line">    A m_a2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(10), a2(100);</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a1, a2, <span class="number">1000</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当A的对象是B的一个成员的时候，在初始化对象的时候，无法给B分配空间，因为无法初始化A类对象</p>
<p>初始化列表中的初始化顺序，与声明顺序有关，与前后赋值顺序无关</p>
<p>当类成员中含有一个const对象时，或者是一个引用时，他们也必须要通过成员初始化列表进行初始化，因为这两种对象要在声明后马上初始化，而在构造函数中，做的是对他们的赋值，这样是不被允许的</p>
<h3 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABCD</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ABCD</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">        _b = b;</span><br><span class="line">        _c = c;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ABCD() construct,a:%d,b:%d,c:%d\n&quot;</span>, _a, _b, _c);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ABCD</span>() &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;~ABCD() construct,a:%d,b:%d,c:%d\n&quot;</span>, _a, _b, _c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _a;</span><br><span class="line">    <span class="keyword">int</span> _b;</span><br><span class="line">    <span class="keyword">int</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyE</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyE</span>() :<span class="built_in">abcd1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="built_in">abcd2</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="built_in">m</span>(<span class="number">100</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyD()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyE</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~MyD()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MyE</span>(<span class="keyword">const</span> MyE&amp; obj) :<span class="built_in">abcd1</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="built_in">abcd2</span>(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="built_in">m</span>(<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MyD(const MyD&amp;obj)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ABCD abcd1;</span><br><span class="line">    ABCD abcd2;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">doThing</span><span class="params">(MyE mye1)</span> </span>&#123;<span class="comment">//mye1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;doThing() mye1.abcd1.a:%d\n&quot;</span>, mye1.abcd1.<span class="built_in">getA</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyE myE;</span><br><span class="line">    <span class="built_in">doThing</span>(myE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;run2 start...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">ABCD</span>(<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>);<span class="comment">//临时对象的生命周期</span></span><br><span class="line">    <span class="comment">//ABCD abcd = ABCD(100,200,300);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;run2 end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-5-new和delete"><a href="#7-5-new和delete" class="headerlink" title="7.5 new和delete"></a>7.5 new和delete</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = <span class="number">0</span>;</span><br><span class="line">        m_b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;prinT:&quot;</span> &lt;&lt; m_a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* array_p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array_p[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, array_p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (array_p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(array_p);</span><br><span class="line">        array_p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test* tp = (Test*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Test));</span><br><span class="line">    tp-&gt;<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(tp);</span><br><span class="line">        tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int a(10);等价于a=10</span></span><br><span class="line">    <span class="keyword">int</span>* array_p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array_p[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array_p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (array_p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]array_p;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test* tp = <span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 触发有参构造</span></span><br><span class="line">    tp-&gt;<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="comment">// Test* tp2 = new Test;// 触发无参构造</span></span><br><span class="line">    <span class="comment">// tp2-&gt;prinT();</span></span><br><span class="line">    <span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> tp;</span><br><span class="line">        tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C语言输出的m_a,m_b为乱码</span></span><br></pre></td></tr></table></figure>

<p>malloc,free是函数，标准库(stdlib.h)。new在堆上初始化一个对象的时候，会触发对象的构造函数，malloc不能；delete触发析构函数而free则不</p>
<h2 id="7-6-静态成员变量和成员函数"><a href="#7-6-静态成员变量和成员函数" class="headerlink" title="7.6 静态成员变量和成员函数"></a>7.6 静态成员变量和成员函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AA</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_c++;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>&amp; <span class="title">getCC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// static修饰的静态成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_c;</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量的初始化，一定要在类的外边</span></span><br><span class="line"><span class="keyword">int</span> AA::m_c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">AA <span class="title">a1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">AA <span class="title">a2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    当m_c为<span class="keyword">public</span>成员变量时</span><br><span class="line">    AA::m_c = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// a1.m_c = 200相同作用</span></span><br><span class="line">    <span class="comment">// 共用静态区</span></span><br><span class="line">    <span class="comment">// 访问空间中的静态区</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    a1.<span class="built_in">getCC</span>() = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//AA::getCC() = 200相同作用</span></span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-1-static练习"><a href="#7-6-1-static练习" class="headerlink" title="7.6.1 static练习"></a>7.6.1 static练习</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Box</span>(<span class="keyword">int</span> l, <span class="keyword">int</span> w) &#123;</span><br><span class="line">        len = l;</span><br><span class="line">        width = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = len * width * hight;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;高度是&quot;</span> &lt;&lt; hight &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;体积是&quot;</span> &lt;&lt; v&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeHight</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        hight = h;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Box::hight = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">b1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Box <span class="title">b2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    b1.<span class="built_in">volume</span>();</span><br><span class="line">    b2.<span class="built_in">volume</span>();</span><br><span class="line">    Box::<span class="built_in">changeHight</span>(<span class="number">300</span>);</span><br><span class="line">    b1.<span class="built_in">volume</span>();</span><br><span class="line">    b2.<span class="built_in">volume</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-2-static占用的大小"><a href="#7-6-2-static占用的大小" class="headerlink" title="7.6.2 static占用的大小"></a>7.6.2 static占用的大小</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> j;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">// 4</span></span><br><span class="line">&#125;;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> j;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getK</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        k = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(C1) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(C2) &lt;&lt; endl;</span><br><span class="line">    C2 c1, c2;</span><br><span class="line">    c1.<span class="built_in">getK</span>();<span class="comment">// 返回c1的k</span></span><br><span class="line">    c2.<span class="built_in">getK</span>();<span class="comment">// 返回c2的k</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(S1) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(S2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有普通成员变量才会占对象空间 </span></span><br></pre></td></tr></table></figure>

<h3 id="7-6-3-强化练习-仓库货物管理"><a href="#7-6-3-强化练习-仓库货物管理" class="headerlink" title="7.6.3 强化练习 仓库货物管理"></a>7.6.3 强化练习 仓库货物管理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Goods</span>() &#123;</span><br><span class="line">        weight = <span class="number">0</span>;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建了一个重量为&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Goods</span>(<span class="keyword">int</span> w) &#123;</span><br><span class="line">        <span class="comment">//需要创建一个w的货物，并且仓库加上这个重量</span></span><br><span class="line">        weight = w;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">        total_weight += w;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建了一个重量为&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Goods</span>() &#123;</span><br><span class="line">        <span class="comment">//仓库减少这个货物的重量</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;删除了一箱重量是&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">        total_weight -= weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_total_weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total_weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Goods* next;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total_weight;<span class="comment">//仓库总重量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Goods::total_weight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Goods* &amp;head,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用二级指针或一级指针引用来改变</span></span><br><span class="line">    <span class="comment">//创建一个货物 重量是w</span></span><br><span class="line">    Goods* new_goods = <span class="keyword">new</span> <span class="built_in">Goods</span>(w);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        head = new_goods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        new_goods-&gt;next = head;</span><br><span class="line">        head = new_goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">(Goods*&amp; head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;仓库中已经没有货物了。。&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Goods* temp = head;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;saled.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    Goods* head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1 进货&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2 出货&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0 退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">//进货</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入要创建货物的重量&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; w;</span><br><span class="line">            <span class="built_in">buy</span>(head, w);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="comment">//出货</span></span><br><span class="line">            <span class="built_in">sale</span>(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="comment">//退出</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前仓库的总重量是&quot;</span> &lt;&lt; Goods::<span class="built_in">get_total_weight</span>() &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-7-this指针"><a href="#7-7-this指针" class="headerlink" title="7.7 this指针"></a>7.7 this指针</h2><h3 id="7-7-1-如何区分变量属于哪个对象"><a href="#7-7-1-如何区分变量属于哪个对象" class="headerlink" title="7.7.1 如何区分变量属于哪个对象"></a>7.7.1 如何区分变量属于哪个对象</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        mI = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getI</span><span class="params">(Test* <span class="keyword">this</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this就是指向调用该成员函数方法的对象地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;mI;</span><br><span class="line">        <span class="comment">//return mI;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> mI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test_init</span><span class="params">(Test* pthis, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    pthis-&gt;mI = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getI</span><span class="params">(struct Test* pthis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pthis-&gt;mI;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//Test(&amp;t1,10)</span></span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">getI</span>();<span class="comment">//getI(&amp;t1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-7-2-this指针"><a href="#7-7-2-this指针" class="headerlink" title="7.7.2 this指针"></a>7.7.2 this指针</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_k = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;<span class="comment">// 成员函数尾部出现const,修饰this指针</span></span><br><span class="line">        <span class="comment">// 此时类型为const Test const*</span></span><br><span class="line">        <span class="comment">// this-&gt;m_k = 100;(√)</span></span><br><span class="line">        <span class="comment">// this指针不是const Test* int型</span></span><br><span class="line">        <span class="comment">// this++;(×)</span></span><br><span class="line">        <span class="comment">// this指针是一个常指针，Test const*</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_k;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">// Test(&amp;t1,10)</span></span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;<span class="comment">// Test(&amp;t1,20)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-8-全局函数和成员函数"><a href="#7-8-全局函数和成员函数" class="headerlink" title="7.8 全局函数和成员函数"></a>7.8 全局函数和成员函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="function">Test <span class="title">TestAdd</span><span class="params">(Test&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="function">Test <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// +=方法</span></span><br><span class="line">    <span class="function">Test&amp; <span class="title">TestAdd2</span><span class="params">(Test&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += another.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += another.b;</span><br><span class="line">        <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 如果想返回一个对象本身，在成员方法中，用*this返回</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">// 1 在全局提供一个两个Test相加的函数</span></span><br><span class="line"><span class="function">Test <span class="title">TestAdd</span><span class="params">(Test&amp; t1, Test&amp; t2)</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">temp</span><span class="params">(t1.getA() + t2.getA(), t1.getB() + t2.getB())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="comment">// Test t3 = TestAdd(t1, t2);</span></span><br><span class="line">    Test t3 = t1.<span class="built_in">TestAdd</span>(t2);</span><br><span class="line">    t3.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="comment">// ((t1+=t2)+=t2)+=t2</span></span><br><span class="line">    <span class="comment">// 如果想对一个对象连续调用成员方法，每次都会改变对象本身，成员方法需要返回引用</span></span><br><span class="line">    t1.<span class="built_in">TestAdd2</span>(t2).<span class="built_in">TestAdd2</span>(t2);</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回对象本身</span></span><br></pre></td></tr></table></figure>

<h2 id="7-9-自定义的数组类"><a href="#7-9-自定义的数组类" class="headerlink" title="7.9 自定义的数组类"></a>7.9 自定义的数组类</h2><p>代码如下：<br> MyArray.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyArray</span>();</span><br><span class="line">    <span class="built_in">MyArray</span>(<span class="keyword">int</span> len);</span><br><span class="line">    <span class="built_in">MyArray</span>(<span class="keyword">const</span> MyArray&amp; another);</span><br><span class="line">    ~<span class="built_in">MyArray</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span>* space;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>MyArray.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyArray::<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;MyArray()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;space = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyArray::<span class="built_in">MyArray</span>(<span class="keyword">int</span> len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = len;</span><br><span class="line">        <span class="comment">//给space开辟空间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray(int len)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyArray::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray&amp; another) &#123;</span><br><span class="line">    <span class="keyword">if</span> (another.len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len + another.len;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;space[i] = another.space[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray::MyArray(const MyArray&amp; another)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MyArray::<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;space != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;space;</span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="literal">NULL</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray::~MyArray()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyArray::setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;space != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;space[index] = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyArray::getData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;space[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyArray::getLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyArray <span class="title">array1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">// 开辟10元素的数组</span></span><br><span class="line">    <span class="comment">// 赋值操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array1.<span class="built_in">setData</span>(i, i + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array1.<span class="built_in">getData</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    MyArray array2 = array1;</span><br><span class="line">    <span class="comment">/*MyArray array3;</span></span><br><span class="line"><span class="comment">	array3 = array1;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-10-友元"><a href="#7-10-友元" class="headerlink" title="7.10 友元"></a>7.10 友元</h2><h3 id="7-10-1-友元函数"><a href="#7-10-1-友元函数" class="headerlink" title="7.10.1 友元函数"></a>7.10.1 友元函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointManager</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明全局函数PointDistance是我类Point类的一个友元函数</span></span><br><span class="line">    <span class="comment">//friend double PointDistance(Point&amp; p1, Point&amp; p2);</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">double</span> <span class="title">PointManager::PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span></span>;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">int</span> dd_x = p1.x - p2.x;</span><br><span class="line">    <span class="keyword">int</span> dd_y = p1.y - p2.y;</span><br><span class="line">    dis = <span class="built_in">sqrt</span>(dd_x * dd_x + dd_y * dd_y);</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PointManager::PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">int</span> dd_x = p1.x - p2.x;</span><br><span class="line">    <span class="keyword">int</span> dd_y = p1.y - p2.y;</span><br><span class="line">    dis = <span class="built_in">sqrt</span>(dd_x * dd_x + dd_y * dd_y);</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; PointDistance(p1, p2) &lt;&lt; endl;</span></span><br><span class="line">    PointManager pm;</span><br><span class="line">    cout &lt;&lt; pm.<span class="built_in">PointDistance</span>(p1, p2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>友元函数提高了程序的运行效率（减少了类型检查和安全性检查（需要时间开销），破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员</p>
</blockquote>
<h3 id="7-10-2-友元类"><a href="#7-10-2-友元类" class="headerlink" title="7.10.2 友元类"></a>7.10.2 友元类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明一个友元类B</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">objA</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">        cout &lt;&lt; objA.a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">bObj</span><span class="params">(<span class="number">200</span>)</span></span>;</span><br><span class="line">    bObj.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>友元关系不能被继承。友元关系是单向的，不具有交换性。友元关系不具有传递性</p>
<h1 id="8-操作符重载"><a href="#8-操作符重载" class="headerlink" title="8 操作符重载"></a>8 操作符重载</h1><h2 id="8-1-加法运算符"><a href="#8-1-加法运算符" class="headerlink" title="8.1 加法运算符"></a>8.1 加法运算符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; c1, Complex&amp; c2)</span></span>;</span><br><span class="line">    <span class="comment">//friend Complex operator + (Complex&amp; c1, Complex&amp; c2);</span></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>+(Complex&amp; another) &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; c1, Complex&amp; c2)</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a + c2.a, c1.b + c2.b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作符重载写在全局</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">Complex <span class="keyword">operator</span> + (Complex &amp; c1, Complex &amp; c2) &#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a + c2.a, c1.b + c2.b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    c2.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="comment">//Complex c3 = complexAdd(c1, c2);</span></span><br><span class="line">    <span class="comment">//Complex c3 = c1.complexAdd(c2);</span></span><br><span class="line">    <span class="comment">//Complex c3 = c1 + c2;</span></span><br><span class="line">        <span class="comment">//Complex c3 = operator+(c1, c2);</span></span><br><span class="line">        Complex c3 = c1.<span class="keyword">operator</span>+(c2);</span><br><span class="line">    c3.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-双目运算符"><a href="#8-2-双目运算符" class="headerlink" title="8.2 双目运算符"></a>8.2 双目运算符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//friend Complex&amp; operator+=(Complex&amp; c1,Complex&amp; c2);</span></span><br><span class="line">    <span class="keyword">friend</span> Complex&amp; <span class="keyword">operator</span>-=(Complex&amp; c1, Complex&amp; c2);</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>+=(Complex&amp; another) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += another.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += another.b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>+=(Complex&amp; c1, Complex&amp; c2) &#123;</span><br><span class="line">    c1.a -= c2.a;</span><br><span class="line">    c1.b -= c2.b;</span><br><span class="line">    <span class="keyword">return</span> c1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    (c1 += c2) += c2;<span class="comment">//c1.operator+=(c2).operator(c2)  </span></span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    c2.<span class="built_in">printComplex</span>();</span><br><span class="line">    c1 -= c2;</span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-单目运算符"><a href="#8-3-单目运算符" class="headerlink" title="8.3 单目运算符"></a>8.3 单目运算符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//friend Complex&amp; operator++(Complex&amp; c);</span></span><br><span class="line">    <span class="comment">//friend const Complex operator++(Complex&amp;c1,int);</span></span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Complex <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        <span class="comment">//亚元：区分两个函数</span></span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a, <span class="keyword">this</span>-&gt;b)</span></span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b++;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//重载的是前++运算符</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>++(Complex&amp; c) &#123;</span><br><span class="line">    c.a++;</span><br><span class="line">    c.b++;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//重载的是后++运算符</span></span><br><span class="line"><span class="comment">//用const修饰表示不能连加，值不能改变</span></span><br><span class="line"><span class="comment">//用占位参数来表示前++和后++的区别</span></span><br><span class="line"><span class="keyword">const</span> Complex <span class="keyword">operator</span>++(Complex&amp; c1, <span class="keyword">int</span>) &#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a, c1.b)</span></span>;</span><br><span class="line">    c1.a++;</span><br><span class="line">    c1.b++;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//++++c1;</span></span><br><span class="line">    c1++;</span><br><span class="line">    <span class="comment">//后++普通情况不能累加</span></span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="comment">//++++c1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-4-左移右移操作符重载"><a href="#8-4-左移右移操作符重载" class="headerlink" title="8.4 左移右移操作符重载"></a>8.4 左移右移操作符重载</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Complex&amp; c);</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c);</span><br><span class="line">    <span class="comment">//&lt;&lt;操作符只能写在全局，不能够写在成员方法中，否则调用的顺序会变反  c1&lt;&lt;cout;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os)<span class="comment">//c1.operator&lt;&lt;(cout)&#123;</span></span><br><span class="line">        os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Complex&amp; c) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; c.a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; c.b &lt;&lt; <span class="string">&quot;,)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span>;</span><br><span class="line">    is &gt;&gt; c.a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span>;</span><br><span class="line">    is &gt;&gt; c.b;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cin &gt;&gt; c1;<span class="comment">//operator&gt;&gt;(cin,c1)</span></span><br><span class="line">    cout &lt;&lt; c1;</span><br><span class="line">    <span class="comment">//c1&lt;&lt;cout;</span></span><br><span class="line">    <span class="comment">//cout.operator&lt;&lt;(c1);</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; c1 &lt;&lt; &quot; &quot; &lt;&lt; c1 &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-5-等号操作符重载"><a href="#8-5-等号操作符重载" class="headerlink" title="8.5 等号操作符重载"></a>8.5 等号操作符重载</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="comment">//this-&gt;name = name;</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">const</span> Student&amp; another) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = another.id;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, another.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Student&amp; another) &#123;</span><br><span class="line">        <span class="comment">//1 防止自身赋值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123;</span><br><span class="line">            <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 先将自身的额外开辟的空间回收掉</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 执行深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;id = another.id;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, another.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 返回本身</span></span><br><span class="line">        <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line">    s2 = s1;</span><br><span class="line">    <span class="function">Student <span class="title">s3</span><span class="params">(<span class="number">2</span>, <span class="string">&quot;li4&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//s2 = s3 = s1;//s2 = 赋值操作符</span></span><br><span class="line">    s1.<span class="built_in">printS</span>();</span><br><span class="line">    s2.<span class="built_in">printS</span>();</span><br><span class="line">    s3.<span class="built_in">printS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-6-重载小括号"><a href="#8-6-重载小括号" class="headerlink" title="8.6 重载小括号"></a>8.6 重载小括号</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sqr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sqr</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value1 * value2;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Sqr <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="built_in">s</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//s.operator()(2);</span></span><br><span class="line">    <span class="comment">//将一个对象 当成一个普通函数来调用。</span></span><br><span class="line">        <span class="comment">//称这种对象是仿函数，伪函数，函数对象</span></span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    value = <span class="built_in">s</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-7-重载new和delete操作符"><a href="#8-7-重载new和delete操作符" class="headerlink" title="8.7 重载new和delete操作符"></a>8.7 重载new和delete操作符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载的new操作符 依然会触发对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了new操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span> size) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了new[]操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* p)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了delete操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>* p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了delete[]操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//char* array = malloc(sizeof(char) * 80);</span></span><br><span class="line">    <span class="comment">//int* value_p = new int;</span></span><br><span class="line">    A* array_p = <span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//array_p-&gt;operator new[](sizeof(A[10]));</span></span><br><span class="line">    <span class="keyword">delete</span>[]array_p;</span><br><span class="line">    A* ap = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//ap-&gt;operator new(sizeof(A));</span></span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-8-不建议重载-amp-，-操作符"><a href="#8-8-不建议重载-amp-，-操作符" class="headerlink" title="8.8 不建议重载&amp;，|操作符"></a>8.8 不建议重载&amp;，|操作符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test <span class="keyword">operator</span>+(Test &amp;another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;执行了+操作符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="function">Test <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;value + another.value)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&amp;&amp;(Test another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;执行了&amp;&amp;操作符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;value &amp;&amp; another.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>||(Test another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了||操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;value || another.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="comment">//重载&amp;&amp;,并不会发生短路现象</span></span><br><span class="line">    <span class="keyword">if</span> (t1 &amp;&amp; (t1 + t2)) &#123;<span class="comment">//t1.operator&amp;&amp;(t1.operator+(t2))</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为真&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为假&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (t1 || (t1 + t2)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为真&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为假&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-9-自定义智能指针"><a href="#8-9-自定义智能指针" class="headerlink" title="8.9 自定义智能指针"></a>8.9 自定义智能指针</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUER_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span> -&gt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyAutoPtr</span>(<span class="keyword">void</span>* ptr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = ptr;<span class="comment">//ptr=new A(10)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyAutoPtr</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~MyAutoPtr()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> ptr;</span><br><span class="line">            <span class="keyword">this</span>-&gt;ptr = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A* <span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A&amp; <span class="keyword">operator</span>*() &#123;</span><br><span class="line">        <span class="keyword">return</span> *ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    A* ap = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">10</span>);</span><br><span class="line">    ap-&gt;<span class="built_in">func</span>();</span><br><span class="line">    (*ap).<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">auto_ptr&lt;A&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> A(<span class="number">10</span>))</span></span>;</span><br><span class="line">    ptr-&gt;<span class="built_in">func</span>();</span><br><span class="line">    (*ptr).<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyAutoPtr <span class="title">my_p</span><span class="params">(<span class="keyword">new</span> A(<span class="number">10</span>))</span></span>;</span><br><span class="line">    my_p-&gt;<span class="built_in">func</span>();<span class="comment">//my_p.ptr-&gt;func()</span></span><br><span class="line">    (*my_p).<span class="built_in">func</span>();<span class="comment">//*ptr.func</span></span><br><span class="line">    <span class="comment">//重载*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-10-自定义字符串类"><a href="#8-10-自定义字符串类" class="headerlink" title="8.10 自定义字符串类"></a>8.10 自定义字符串类</h2><p>MyString.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str =<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化时候被调用的</span></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = another.len;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;str &lt;&lt; <span class="string">&quot;执行了析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>; </span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> &amp; MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;str[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString &amp;  MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;len = another.len;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, MyString&amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; s.str;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, MyString &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1 将s之前的字符串释放掉</span></span><br><span class="line">    <span class="keyword">if</span> (s.str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] s.str;</span><br><span class="line">        s.str = <span class="literal">NULL</span>;</span><br><span class="line">        s.len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 通过cin添加新的字符串</span></span><br><span class="line">    <span class="keyword">char</span> temp_str[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    cin &gt;&gt; temp_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(temp_str);</span><br><span class="line">    s.str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(s.str, temp_str);</span><br><span class="line">    s.len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString MyString::<span class="keyword">operator</span>+(MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    MyString temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">this</span>-&gt;len + another.len;</span><br><span class="line"></span><br><span class="line">    temp.len = len;</span><br><span class="line"></span><br><span class="line">    temp.str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(temp.str, <span class="number">0</span>, len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(temp.str, <span class="keyword">this</span>-&gt;str);</span><br><span class="line">    <span class="built_in">strcat</span>(temp.str, another.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyString.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>();</span><br><span class="line">    <span class="comment">//MyString(int len); //创建一个长度是len的string对象</span></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str);</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> MyString &amp;another);</span><br><span class="line">    ~<span class="built_in">MyString</span>();</span><br><span class="line">    <span class="comment">//重载操作符[]</span></span><br><span class="line">    <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> index);</span><br><span class="line">    <span class="comment">//重载操作符&gt;&gt;</span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, MyString &amp;s);</span><br><span class="line">    <span class="comment">//重载=操作符</span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;another);</span><br><span class="line">    <span class="comment">//重载==操作符</span></span><br><span class="line">    <span class="comment">//重载!=操作符</span></span><br><span class="line">    <span class="comment">//重载+操作符</span></span><br><span class="line">    MyString <span class="keyword">operator</span>+(MyString &amp;another);</span><br><span class="line">    <span class="comment">//重载操作符&lt;&lt;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, MyString&amp;s);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>自定义的字符串类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;123&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; s1 + s2 &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line">    MyString s3 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    s1[<span class="number">1</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = s3;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-继承"><a href="#9-继承" class="headerlink" title="9 继承"></a>9 继承</h1><h2 id="9-1-类和类之间的关系"><a href="#9-1-类和类之间的关系" class="headerlink" title="9.1 类和类之间的关系"></a>9.1 类和类之间的关系</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;funcA&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类B拥有类A的成员变量,B has A,//类B 依赖于类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//耦合度  高内聚  低耦合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类C的成员方法  需要类A的形参，C use A,//类C依赖于类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funC</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funC2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//D继承于A 类D如果是继承类A  类D is A.//类D继承于A耦合度很高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funcD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> :</span><span class="keyword">public</span> D &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-2-继承的基本概念"><a href="#9-2-继承的基本概念" class="headerlink" title="9.2 继承的基本概念"></a>9.2 继承的基本概念</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id, string name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; <span class="string">&quot;, name = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的学生表，增加score功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student2</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> score) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; <span class="string">&quot;, name = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;score = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过继承创建一个新的学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span> :</span><span class="keyword">public</span> Student &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student3</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> score) :<span class="built_in">Student</span>(id, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student::<span class="built_in">printS</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;score = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student3 <span class="title">s3</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>, <span class="number">80</span>)</span></span>;</span><br><span class="line">    s3.<span class="built_in">printS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-继承的方式"><a href="#9-3-继承的方式" class="headerlink" title="9.3 继承的方式"></a>9.3 继承的方式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.只要是父类中的private成员，不管是什么继承方式，儿子都访问不了</span></span><br><span class="line"><span class="comment">//2.如果是public继承，儿子中的访问控制权限保持不变</span></span><br><span class="line"><span class="comment">//3.如果是保护继承，儿子中父亲除了private成员，其余在儿子中都是protected</span></span><br><span class="line"><span class="comment">//4.如果是私有继承，儿子中父亲的除了private成员，其余在儿子中都是private成员</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> pub;<span class="comment">//在类的内部和外部都能访问</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> pro;<span class="comment">//在类的内部都可以访问，在类的外部不可以访问</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> pri;<span class="comment">//在类的内部可以访问，在类的外部不可以访问</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; pub &lt;&lt; endl; <span class="comment">//pub父类的public成员变量，在public继承类的内部,外部都可以访问</span></span><br><span class="line">        cout &lt;&lt; pro &lt;&lt; endl;<span class="comment">//pro 是父类protected成员变量 在public继承类的内部可以访问。外部访问不了 </span></span><br><span class="line">                            <span class="comment">//此时的pro在孙子能够访问，说此时pro不是private成员，而是protected成员</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; pri &lt;&lt; endl; //pri 是父类private成员变量 在public继承类的内部,外部不可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//孙子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubChild</span> :</span> <span class="keyword">public</span> Child</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; pro &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> :</span><span class="keyword">protected</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pub;<span class="comment">//此时pub通过protected继承 能够在类的内部访问。 </span></span><br><span class="line">            <span class="comment">//pub 在类的内部可以访问， 类的外部访问不了， 类的儿子可以访问</span></span><br><span class="line">            <span class="comment">//pub 就是protected成员</span></span><br><span class="line">        pro;<span class="comment">//pro和pub 是一样的性质，pro也是protected成员</span></span><br><span class="line">        <span class="comment">//pri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_child2</span> :</span><span class="keyword">public</span> Child2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pub;</span><br><span class="line">        pro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child3</span> :</span><span class="keyword">private</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        pub;<span class="comment">//pub 在类的内部可以访问。在类的内部可以访问，类的外部不能访问。</span></span><br><span class="line">            <span class="comment">//pub 在儿子中访问不了，说明pub在Child3中是 私有成员</span></span><br><span class="line">        pro;<span class="comment">//pro 根pub的性质是一样， 也是私有成员。</span></span><br><span class="line">        <span class="comment">//pri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_Child3</span> :</span><span class="keyword">public</span> Child3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_fun3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//pub;</span></span><br><span class="line">        <span class="comment">//pro;</span></span><br><span class="line">        <span class="comment">//都访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三看原则：  </span></span><br><span class="line"><span class="comment">//1 看调用的成员变量是在类的内部还是类的外部</span></span><br><span class="line"><span class="comment">//2 看儿子继承方式，</span></span><br><span class="line"><span class="comment">//3 当前变量在儿子中的变量在父亲中的访问控制权限</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Child c1;</span><br><span class="line">    c1.<span class="built_in">func</span>();</span><br><span class="line">    c1.pub;</span><br><span class="line">    <span class="comment">//c1.pri;</span></span><br><span class="line">    <span class="comment">//Child2 c2;</span></span><br><span class="line">    <span class="comment">//c2.pub;</span></span><br><span class="line">    <span class="comment">//c2.pro;</span></span><br><span class="line">    Child3 c3;</span><br><span class="line">    <span class="comment">//c3.pub;</span></span><br><span class="line">    <span class="comment">//c3.pro;</span></span><br><span class="line">    Child2 c2;</span><br><span class="line">    <span class="comment">//c2.pub;</span></span><br><span class="line">    <span class="comment">//c2.pro;</span></span><br><span class="line">    c1.pub;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承方式的练习</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>	b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;		 //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b;		 <span class="comment">//b此时是保护成员，类的内部可以访问</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c此时是公有成员，类的内部可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">protected</span>	A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;		 //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b;		 <span class="comment">//b 在子类中是protected权限，类的内部可以访问。</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c 子类的protected成员，类的内部可以访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">private</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;       //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl; <span class="comment">//b 此时是private成员，类的内部可以访问。</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c 此时是private成员，类的内部可以访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A	aa;</span><br><span class="line">    B	bb;</span><br><span class="line">    C	cc;</span><br><span class="line">    D	dd;</span><br><span class="line">    aa.c = <span class="number">100</span>;			 <span class="comment">//c 是公有，类的外部可以访问。</span></span><br><span class="line">    bb.c = <span class="number">100</span>;			 <span class="comment">//Bpublic 继承与A，保持权限不变，c 是公有，类的外部可以访问</span></span><br><span class="line">    <span class="comment">//cc.c = 100;		 //C protected 继承与A，c 在此类中是protected成员，类的外部不能访问。</span></span><br><span class="line">    <span class="comment">//dd.c = 100;		 //D private 继承与A，c在此类中private成员，类的外部不能访问。</span></span><br><span class="line">    aa.<span class="built_in">set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);	 <span class="comment">//能访问</span></span><br><span class="line">    bb.<span class="built_in">set</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);	 <span class="comment">//能访问</span></span><br><span class="line">    <span class="comment">//cc.set(40, 50, 60);//不能访问</span></span><br><span class="line">    <span class="comment">//dd.set(70, 80, 90);//不能访问</span></span><br><span class="line">    bb.<span class="built_in">print</span>();			 <span class="comment">//print 是定义在B类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    cc.<span class="built_in">print</span>();			 <span class="comment">//print 是定义在C类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    dd.<span class="built_in">print</span>();	 	     <span class="comment">//print 是定义在D类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-4-继承中的构造和析构"><a href="#9-4-继承中的构造和析构" class="headerlink" title="9.4 继承中的构造和析构"></a>9.4 继承中的构造和析构</h2><h3 id="9-4-1-类的兼容性和赋值原则"><a href="#9-4-1-类的兼容性和赋值原则" class="headerlink" title="9.4.1 类的兼容性和赋值原则"></a>9.4.1 类的兼容性和赋值原则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	子类对象可以当作父类对象使用。</span></span><br><span class="line"><span class="comment">	子类对象可以直接赋值给父类对象。</span></span><br><span class="line"><span class="comment">	子类对象可以直接初始化父类对象.</span></span><br><span class="line"><span class="comment">	***父类指针可以直接指向子类对象***</span></span><br><span class="line"><span class="comment">	父类引用可以直接引用子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(Parent* pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pp-&gt;<span class="built_in">printP</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Parent p;</span></span><br><span class="line">    <span class="comment">//Child c = p; //p对象填充不满c对象空间，</span></span><br><span class="line">    <span class="comment">//Child c;</span></span><br><span class="line">    <span class="comment">//Parent p = c;//c 对象所占用的内存空间 &gt;= p对象占用空间 能够填充满p对象所需要空间。</span></span><br><span class="line">    <span class="comment">//p = c;</span></span><br><span class="line">    <span class="comment">//c.printP(); //c 能够当做父类 p 来使用。</span></span><br><span class="line">    Parent* pp = <span class="literal">NULL</span>;<span class="comment">//父类指针</span></span><br><span class="line">    Child* cp = <span class="literal">NULL</span>;<span class="comment">//子类指针</span></span><br><span class="line">    Parent p;<span class="comment">//父类对象</span></span><br><span class="line">    Child c; <span class="comment">//子类对象</span></span><br><span class="line">    pp = &amp;c;<span class="comment">//c 内存布局能够满足父类指针的全部需求， 可以用一个儿子的对象地址给父类指针赋值。</span></span><br><span class="line">    <span class="built_in">myPrint</span>(&amp;p);</span><br><span class="line">    <span class="built_in">myPrint</span>(&amp;c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-4-2-子类的构造和析构"><a href="#9-4-2-子类的构造和析构" class="headerlink" title="9.4.2 子类的构造和析构"></a>9.4.2 子类的构造和析构</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//在调用子类的构造函数时候，一定会调用父类的构造函数</span></span><br><span class="line">    <span class="comment">//父类先构造，子类后构造</span></span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :<span class="built_in">Parent</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child(int, int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Child()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">printC</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-5-子类和父类的成员重名"><a href="#9-5-子类和父类的成员重名" class="headerlink" title="9.5 子类和父类的成员重名"></a>9.5 子类和父类的成员重名</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> p_a, <span class="keyword">int</span> c_a) :<span class="built_in">Parent</span>(p_a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = c_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; Parent::a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;<span class="comment">//child&#x27;s a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-6-继承中的static"><a href="#9-6-继承中的static" class="headerlink" title="9.6 继承中的static"></a>9.6 继承中的static</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A::a = <span class="number">100</span>;<span class="comment">//静态成员变量 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    A a2;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    A::a = <span class="number">300</span>;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    B b1;</span><br><span class="line">    B b2;</span><br><span class="line">    A::a = <span class="number">400</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b2.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-7-多继承"><a href="#9-7-多继承" class="headerlink" title="9.7 多继承"></a>9.7 多继承</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//家具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m; <span class="comment">//材质</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父亲类继承爷爷类,改成虚继承,防止儿子在多继承我的时候，出现爷爷中的变量会拷贝多份</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bed</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;在床上睡觉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sofa</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;在沙发上休息&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//沙发床</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SofaBed</span> :</span><span class="keyword">public</span> Bed, <span class="keyword">public</span> Sofa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SleepAndSit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sleep</span>();</span><br><span class="line">        <span class="built_in">sit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bed b;</span><br><span class="line">    b.<span class="built_in">sleep</span>();</span><br><span class="line">    Sofa s;</span><br><span class="line">    s.<span class="built_in">sit</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ------ &quot;</span> &lt;&lt; endl;</span><br><span class="line">    SofaBed sb;</span><br><span class="line">    sb.<span class="built_in">SleepAndSit</span>();</span><br><span class="line">    sb.m = <span class="number">100</span>;<span class="comment">//此时只有一个m</span></span><br><span class="line">    <span class="comment">//sb.Bed::m = 100;</span></span><br><span class="line">    <span class="comment">//sb.Sofa::m = 200;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-多态"><a href="#10-多态" class="headerlink" title="10 多态"></a>10 多态</h1><h2 id="10-1-什么是多态"><a href="#10-1-什么是多态" class="headerlink" title="10.1 什么是多态"></a>10.1 什么是多态</h2><h3 id="10-1-1-为什么要有多态"><a href="#10-1-1-为什么要有多态" class="headerlink" title="10.1.1 为什么要有多态"></a>10.1.1 为什么要有多态</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//岳不群</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuebuqun</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Yuebuqun</span>(string kongfu)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;kongfu = kongfu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span> <span class="comment">//标识修饰一个成员方法是一个虚函数。</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;岳不群&quot;</span> &lt;&lt; <span class="string">&quot;使出了&quot;</span> &lt;&lt; kongfu &lt;&lt; <span class="string">&quot;打人&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string kongfu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//林平之继承了岳不群</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linpingzhi</span> :</span><span class="keyword">public</span> Yuebuqun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Linpingzhi</span>(string kongfu) :<span class="built_in">Yuebuqun</span>(kongfu)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果说父类中有一个虚函数是fight（），子类如果去重写这个虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;林平之&quot;</span> &lt;&lt; <span class="string">&quot;使出了&quot;</span> &lt;&lt; kongfu &lt;&lt; <span class="string">&quot;打人&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linghuchong</span> :</span><span class="keyword">public</span> Yuebuqun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Linghuchong</span>(string kongfu) :<span class="built_in">Yuebuqun</span>(kongfu)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;令狐冲 &quot;</span> &lt;&lt; <span class="string">&quot;使用了&quot;</span> &lt;&lt; kongfu &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在全局提供一个打斗的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fightPeople</span><span class="params">(Yuebuqun* hero)</span><span class="comment">//Yuebuqun *hero = xiaopp;  Yuebuqun *hero = xiaoyy;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用打人的方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hero-&gt;<span class="built_in">fight</span>();<span class="comment">//希望传递进来的如果是子类，调用子类的fight</span></span><br><span class="line">                  <span class="comment">//如果传递进来的是父类， 调用父类的fight</span></span><br><span class="line">                    <span class="comment">//这种行为就是 多态行为。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态发生的三个必要条件：</span></span><br><span class="line"><span class="comment">//1. 要有继承。</span></span><br><span class="line"><span class="comment">//2. 要有虚函数重写。</span></span><br><span class="line"><span class="comment">//3. 父类指针或引用指向子类对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Yuebuqun* xiaoyy = <span class="keyword">new</span> <span class="built_in">Yuebuqun</span>(<span class="string">&quot;葵花宝典&quot;</span>);</span><br><span class="line">    <span class="comment">//xiaoyy-&gt;fight();</span></span><br><span class="line">    Linpingzhi* xiaopp = <span class="keyword">new</span> <span class="built_in">Linpingzhi</span>(<span class="string">&quot;辟邪剑谱&quot;</span>);</span><br><span class="line">    <span class="comment">//xiaopp-&gt;fight();</span></span><br><span class="line">    Linghuchong* xiaoll = <span class="keyword">new</span> <span class="built_in">Linghuchong</span>(<span class="string">&quot;独孤九剑&quot;</span>);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaoyy);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaopp);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaoll);</span><br><span class="line">    <span class="comment">//编译器默认做了一个安全的处理。 编译器认为不管传递的是子类对象还是父类对象</span></span><br><span class="line">    <span class="comment">//如果统一执行父类d方法 那么是一定可以被成功执行。</span></span><br><span class="line">    <span class="keyword">delete</span> xiaoyy;</span><br><span class="line">    <span class="keyword">delete</span> xiaopp;</span><br><span class="line">    <span class="keyword">delete</span> xiaoll;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-1-2-多态案例及多态的意义"><a href="#10-1-2-多态案例及多态的意义" class="headerlink" title="10.1.2 多态案例及多态的意义"></a>10.1.2 多态案例及多态的意义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//英雄类</span></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪兽类</span></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//战斗方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">playerFight</span><span class="params">(Hero* hp, Monster* mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//多态对于编译器来讲的，也是一个动态联编，也是一个迟邦定</span></span><br><span class="line">    <span class="keyword">if</span> (hp-&gt;<span class="built_in">getAd</span>() &gt; mp-&gt;<span class="built_in">getAd</span>()) &#123; <span class="comment">//hp-&gt;getAd 发生了多态</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;英雄胜利， 怪兽被打死&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;英雄挂了，怪兽赢了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2020年</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BugHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;调用了bugHero的方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">66666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hero h;</span><br><span class="line">    Monster m;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;h, &amp;m);</span><br><span class="line">    AdvHero advH;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;advH, &amp;m);</span><br><span class="line">    BugHero bH;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;bH, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123; <span class="comment">//迟邦定</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &gt; 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &lt;= 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-2-虚析构函数"><a href="#10-2-虚析构函数" class="headerlink" title="10.2 虚析构函数"></a>10.2 虚析构函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;p, <span class="string">&quot;A String..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;p;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() <span class="comment">//此刻会触发A()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;p, <span class="string">&quot;B String..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;p;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(A* ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ap-&gt;<span class="built_in">print</span>();<span class="comment">//在此发生多态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteFunc</span><span class="params">(A* ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> ap; <span class="comment">//此刻ap-&gt;~B() //~B() ---&gt; ~A()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//A *ap = new A;</span></span><br><span class="line">    <span class="comment">//func(ap);</span></span><br><span class="line">    B* bp = <span class="keyword">new</span> B;</span><br><span class="line">    <span class="built_in">func</span>(bp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">deleteFunc</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    B bObj;</span><br><span class="line">    <span class="comment">//bObj.~B();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-3-重载、重写、重定义"><a href="#10-3-重载、重写、重定义" class="headerlink" title="10.3 重载、重写、重定义"></a>10.3 重载、重写、重定义</h2><p>重载一定是同一个作用域下。重定义是发生在两个不同的类中，一个父类，一个子类</p>
<ul>
<li>普通函数重定义：父类的普通成员函数被子类重写</li>
<li>虚函数重写：如果父类的虚函数，被子类重写，就是虚函数重写，这个函数会发生多态</li>
</ul>
<h2 id="10-4-多态的实现原理"><a href="#10-4-多态的实现原理" class="headerlink" title="10.4 多态的实现原理"></a>10.4 多态的实现原理</h2><h3 id="10-4-1-多态的原理"><a href="#10-4-1-多态的原理" class="headerlink" title="10.4.1 多态的原理"></a>10.4.1 多态的原理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func(int ,int ,int )....&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :<span class="built_in">Parent</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child: func(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child :func(int ,int )...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child ::func(int ,int ,int )...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Parent *pp = new Parent(10);</span></span><br><span class="line">    <span class="comment">//Parent *cp = new Child(100, 200);</span></span><br><span class="line">    Parent* pp = <span class="keyword">new</span> <span class="built_in">Child</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">    pp-&gt;<span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//Parent ？ Child</span></span><br><span class="line">                    <span class="comment">//如果调用一个普通函数，编译器根本就不会查找虚函数表。</span></span><br><span class="line">                    <span class="comment">//只有你调用的函数，是虚函数的时候，才会去查找虚函数表</span></span><br><span class="line">    pp-&gt;<span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-4-2-验证vptr指针的存在"><a href="#10-4-2-验证vptr指针的存在" class="headerlink" title="10.4.2 验证vptr指针的存在"></a>10.4.2 验证vptr指针的存在</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent2::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parent p1;</span><br><span class="line">    Parent2 p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(p1) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p1) &lt;&lt; endl;<span class="comment">//多出来的4个字节就是vptr指针所占用的空间。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(p2) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
