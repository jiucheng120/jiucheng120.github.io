<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>离散数学</title>
      <link href="undefined/a42fd394/"/>
      <url>undefined/a42fd394/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习笔记</p></blockquote><span id="more"></span><h2 id="集合论基础"><a href="#集合论基础" class="headerlink" title="集合论基础"></a>集合论基础</h2><blockquote><p>集合论是现代数学的基础，现代数学是物理，化学，生物，计算机，经济学等等的基础，可见集合论的重要性</p></blockquote><h3 id="集合的初见"><a href="#集合的初见" class="headerlink" title="集合的初见"></a>集合的初见</h3><h4 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h4><p>集合是由指定范围内的满足给定条件的所有对象聚集在一起构成，每一个对象称为这个集合的元素</p><blockquote><p>朴素集合论（康托尔）$\rightarrow$ 公理化集合论</p></blockquote><p>ZFC公理化集合论：外延公理+空集存在公理+无序对公理+并集公理+幂集公理+无穷公理+替换公理+正则公理+选择公理</p><p>ZF公理化集合论：ZFC公理化集合论的前八个公理</p><h4 id="集合的符号表示"><a href="#集合的符号表示" class="headerlink" title="集合的符号表示"></a>集合的符号表示</h4><p>用带或不带下标的大写英文字母表示集合</p><p>用带或不带下标的小写英文字母表示元素</p><h4 id="集合的基数"><a href="#集合的基数" class="headerlink" title="集合的基数"></a>集合的基数</h4><p>集合$A$中的元素个数称为集合的基数，记为$|A|$</p><h3 id="特殊集合和集合间的关系"><a href="#特殊集合和集合间的关系" class="headerlink" title="特殊集合和集合间的关系"></a>特殊集合和集合间的关系</h3><h4 id="空集"><a href="#空集" class="headerlink" title="空集"></a>空集</h4><p>$|\emptyset|$=0，$|{\emptyset}|$=1</p><p>空集是绝对唯一的，全集是相对唯一的</p><h4 id="相等关系"><a href="#相等关系" class="headerlink" title="相等关系"></a>相等关系</h4><p>外延性原理：即外延公理。两个集合$A$和$B$相等，当且仅当它们的元素完全相同，记为$A=B$，否则$A$和$B$不相等，记为$A≠B$</p><h4 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h4><p>子集：$\subseteq$  $\subsetneq$</p><p>真子集：$\subset$  $\not\subset$</p><p>证明两个集合相等：$A\subseteq B$，$B\subseteq A$</p><p>子集个数：$2^n$</p><p>对于任意$n$元集合A，它的$m$元（0$\leq$m$\leq$n）子集个数为$C_n^{m}$</p><h4 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h4><p>设$A$为任意集合，把$A$的所有不同子集构成的集合叫做$A$的幂集，记作$P(A)$，即$P(A)=${$x|x\subseteq A$}</p><p>$x\in P(A)↔x\subseteq A$</p><h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3><p>交、并、补、差</p><h4 id="对称差集"><a href="#对称差集" class="headerlink" title="对称差集"></a>对称差集</h4><p>设$A$，$B$是两个集合，则集合$A$与$B$的对称差集定义为：$A⊕B=${$(x\in A$并且$x\notin B)$或者$(x\notin A$并且$x\in B)$}</p><h3 id="集合的运算定律"><a href="#集合的运算定律" class="headerlink" title="集合的运算定律"></a>集合的运算定律</h3><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,s6zR6lu6gFwbkoES-AasaWSIVE3N-LOxcY-aER1BIsNA/http://p.ananas.chaoxing.com/star3/origin/0f455c052474ce4503b2f577ac55a1a8.png"></p><h3 id="可数集合与不可数集合"><a href="#可数集合与不可数集合" class="headerlink" title="可数集合与不可数集合"></a>可数集合与不可数集合</h3><p>康托尔把无穷分为不同层次，定义一个新的符号：$ℵ$（阿列夫）。我们学习的是阿列夫零和阿列夫一</p><h4 id="自然数集"><a href="#自然数集" class="headerlink" title="自然数集"></a>自然数集</h4><blockquote><p>皮亚诺公理</p></blockquote><p>1891年，意大利数学家皮亚诺公开发表了<strong>基于序数</strong>的自然数定义公理。</p><p>皮亚诺公理：0是自然数；每个自然数$n$都有一个后继，这个后继也是一个自然数，记为$S(n)$；两个自然数相等当且仅当它们有相同的后继，即$m=n$当且仅当$S(m)=S(n)$；（归纳公理）若$φ$是关于一个自然数的预测，如果$φ(0)$为真，当$φ(n)$为真，则有$φ(S(n))$为真；则$φ(n)$对任意自然数$n$都成立</p><blockquote><p>冯•诺依曼的自然数定义</p></blockquote><p>20世纪初，集合称为数学的基本概念之后，数学奇才，计算机之父冯•诺依曼<strong>基于基数</strong>，利用一个集合的序列来定义自然数</p><p>具体内容：$\emptyset \in N$；若$n\in N$，则$n′≡ n \cup$ { $n$ } $\in N$</p><h4 id="等势"><a href="#等势" class="headerlink" title="等势"></a>等势</h4><p>设$A$，$B$为两个集合，若在$A$，$B$之间存在一种——对应的关系：$$ψ：A→B$$则称$A$与$B$是等势的，记作$A$~$B$</p><p>由等势定义可以看出，如果$A=B$，那么$A$~$B$，反之却不成立</p><h4 id="可数集合"><a href="#可数集合" class="headerlink" title="可数集合"></a>可数集合</h4><p>凡与自然数集合$N$等势的集合，称为可数集合，该集合的基数记为$ℵ_0$，读作阿列夫零</p><p>例如正奇数集合$O^+$，素数集合$P$，有理数集合$Q$</p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,stAp91CIn5rnwCZvlMKxwQ0oESZz5KpCrPGjvUf229Jw/http://p.ananas.chaoxing.com/star3/origin/a1637bc57f9c178bf55787cd918988fd.png"></p><p>从有限到无限，不仅仅是简单数量上的变化 (量变)，而引起了本质的改变 (质变)。</p><ul><li>两个无限集合的“大小”已经不能单纯使用集合中的元素个数来衡量。$ℵ_0$表示一切可数集合的基数，是一种抽象的表达。</li><li>表面上个数完全不相等的两个集合之间仍可能存在等势关系，如集合与其真子集之间，这体现了有限集合和无限集合</li></ul><h4 id="不可数集合"><a href="#不可数集合" class="headerlink" title="不可数集合"></a>不可数集合</h4><p>开区间 (0, 1) 称为不可数集合，凡与开区间 (0, 1) 等势的集合，称为不可数集合，该类集合的基数记为ℵ(读作阿列夫)</p><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><p>数理逻辑：用数学的方法研究逻辑推理的规律</p><h3 id="什么是命题"><a href="#什么是命题" class="headerlink" title="什么是命题"></a>什么是命题</h3><p>数理逻辑研究的中心问题是推理，而推理的前提和结论都是命题。因而<strong>命题</strong>是推理的基本单位。</p><h4 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h4><p>命题：具有<strong>确切真值</strong>的陈述句称为命题(proposition)。该命题可以取一个“值”，称为<strong>真值</strong>。真值只有“真”和“假”两种，分别用“$T$”(或“1”) 和“$F$”(或“0”)表示。</p><p>一切没有判断内容的句子，如命令句 (或祈使句)、感叹句、疑问句、二义性的陈述句等都不能作为命题。</p><h4 id="复合命题"><a href="#复合命题" class="headerlink" title="复合命题"></a>复合命题</h4><p>原子命题 (简单命题)：不能再分解为更为简单命题的命题。</p><p>复合命题：可以分解为更为简单命题的命题。这些简单命题之间是通过如“或者”、“并且”、“不”、“如果……则……”、“当且仅当”等这样的关联词和标点符号复合而成。</p><p>约定：通常用大写的带或不带下标的英文字母表示命题 (包括原子命题和复合命题)。$A$,$B$,$C$,· · · ,$P$,$Q$,$R$,· · · , $A_i$,$B_i$,$C_i$,· · · ,$P_i$,$Q_i$,$R_i$,· · ·</p><h3 id="命题联结词"><a href="#命题联结词" class="headerlink" title="命题联结词"></a>命题联结词</h3><p>回顾复合命题中，一般是通过联结词和标点符号将简单命题联结成复杂的语句，最常见的联结词主要有以下五种：“或者”、“并且”、“不”、“如果…… 则……”、“当且仅当”</p><h4 id="否定联结词"><a href="#否定联结词" class="headerlink" title="否定联结词"></a>否定联结词</h4><p>定义：设 P 是任意一个命题，复合命题“非 P”(或 “P 的否定”)称为 P 的否定式，记作¬P，“¬” 为否定联结词。P 为真当且仅当 ¬P 为假。</p><p>“¬” 是自然语言中的 “非”、“不”、“没有” 等的逻辑抽象。</p><h4 id="合取联结词"><a href="#合取联结词" class="headerlink" title="合取联结词"></a>合取联结词</h4><p>定义：设 P、Q 是任意两个命题，复合命题“P 并且 Q”(或 “P 和 Q”)称为 P 与 Q 的合取式，记作P ∧ Q，“∧” 为合取联结词。P ∧ Q 为真当且仅当 P，Q 同为真。</p><p>“∧” 是自然语言中的 “并且”、“既…又…”、“但”、“和”、“与”、“不仅…而且…”、“虽然…但是…”、“一面…, 一面…” 等的逻辑抽象；但不是所有的“和”，“与”都要使用合取联结词表示，要根据句子的语义进行分析。</p><h4 id="析取联结词"><a href="#析取联结词" class="headerlink" title="析取联结词"></a>析取联结词</h4><p>定义：设 P、Q 是任意两个命题，复合命题“P 或 Q”称为 P 与 Q 的析取式，记作P ∨ Q，“∨” 为析取联结词。P ∨ Q 为真当且仅当 P，Q 至少有一个为真。</p><p>联结词 “∨” 是自然语言中的 “或”、“或者” 等的逻辑抽象。自然语言中的 “或” 有 “可兼或”(或称为同或)、“不可兼或”(即异或) 两种。严格来讲，析取联结词实际上代表的是可兼或，异或有时会使用单独的异或联结词 “⊕” 或 “（接近与平均速率的那个符号…）” 来表示。</p><h4 id="蕴涵联结词"><a href="#蕴涵联结词" class="headerlink" title="蕴涵联结词"></a>蕴涵联结词</h4><p>定义：设 P、Q 是任两个命题，复合命题“如果 P，则 Q”称为 P 与 Q 的蕴涵式，记作P → Q，“→” 为蕴涵联结词。P → Q 为假当且仅当 P 为真且 Q 为假。一般把蕴涵式 P → Q中的 P 称为该蕴涵式的前件，Q 称为蕴涵式的后件。</p><p>在自然语言中，前件为假，不管结论真假，整个语句的意义，往往无法判断。但对于数理逻辑中的蕴涵联结词来说，当前件 P 为假时，不管 Q 的真假如何，则 P → Q 都为真。此时称为 “善意推定”。<br>~<a href="https://imageproxy.chaoxing.com/0x0,jpeg,s2CpyQAGqZnp-a6oCqYKscYFI_1R9y_hRQmgPaXaT-LE/http://p.ananas.chaoxing.com/star3/origin/d9007750513b507e53c5acc51edefb83.png"></a></p><h4 id="等价联结词"><a href="#等价联结词" class="headerlink" title="等价联结词"></a>等价联结词</h4><p>定义：设 P、Q 是任两个命题，复合命题“P 当且仅当 Q”称为 P 与 Q 的等价式，记作P ↔ Q，“↔” 为等价联结词(也称作双条件联结词)。P ↔ Q 为真当且仅当 P、Q 同为真假。</p><p>“↔” 是自然语言中的 “等价”、“充分必要条件”、“当且仅当” 等的逻辑抽象。</p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sufFbQYhJ8FzBc4lr-Pzw8cWSO8RKBsYZ3chPl9qniRg/http://p.ananas.chaoxing.com/star3/origin/a468027af6e079d37113f0a1c4371fbd.png"></p><h3 id="命题符号化及其应用"><a href="#命题符号化及其应用" class="headerlink" title="命题符号化及其应用"></a>命题符号化及其应用</h3><h4 id="命题联结词的优先级"><a href="#命题联结词的优先级" class="headerlink" title="命题联结词的优先级"></a>命题联结词的优先级</h4><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sC_l2vsrjolz_mq7wBQkZYrKOE_U7OD2e429v4fBXrgQ/http://p.ananas.chaoxing.com/star3/origin/767643b4d60933cb71629b7bd8783d0f.png"></p><h4 id="逻辑电路"><a href="#逻辑电路" class="headerlink" title="逻辑电路"></a>逻辑电路</h4><p>与门，或门，非门</p><h4 id="网页检索"><a href="#网页检索" class="headerlink" title="网页检索"></a>网页检索</h4><p>在布尔检索中，联接词 “∧”（一般用 AND 表示）用于匹配包含两个检索项的记录，联接词 “∨”（一般用 OR 表示）用于匹配包含两个检索项至少一个的记录，而联接词 “¬”（一般用 NOT 表示）用于排除某个特定的检索项。</p><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>计算机中的信息采用二进制的方式来表达。每个二进制位只能是 1 或 0，可对应于某一个布尔变量的真值。当我们需要判断该布尔变量的真值时，就可以利用按位与或按位或以及按位取反等来操作。</p><h3 id="命题公式和真值表"><a href="#命题公式和真值表" class="headerlink" title="命题公式和真值表"></a>命题公式和真值表</h3><h4 id="命题变元"><a href="#命题变元" class="headerlink" title="命题变元"></a>命题变元</h4><p>一个特定的命题是一个<strong>常值命题</strong>，它不是具有值 “T”(“1”)，就是具有值 “F”(“0”)。</p><p>一个任意的没有赋予具体内容的原子命题是一个变量命题，常称它为<strong>命题变量</strong> (或<strong>命题变元</strong>)，该命题变量无具体的真值，它的变域是集合{T, F}(或 {0, 1})。</p><p>复合命题是由原子命题与联结词构成的命题。所以，当其中的原子命题是命题变元时，此复合命题也即为命题变元的函数，且该函数的值仍为“真”或“假”值，这样的函数可形象地称为“真值函数” 或 “命题公式”，此命题公式没有确切的真值。</p><h4 id="命题公式"><a href="#命题公式" class="headerlink" title="命题公式"></a>命题公式</h4><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,shpKjR-VGEbKZsxZVgPeagc09p6GxB-Co5pV8nurf0bQ/http://p.ananas.chaoxing.com/star3/origin/7786c6cc83670e6306700cf7c1ebd20b.png"></p><h4 id="关于命题公式的说明"><a href="#关于命题公式的说明" class="headerlink" title="关于命题公式的说明"></a>关于命题公式的说明</h4><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sQCjuDcpmDL4lJ1CXoPZbyY-FTqMXHU0g0EAvp-kRJWQ/http://p.ananas.chaoxing.com/star3/origin/5b48244a4dc09f9382a7ce21c9458c74.png"></p><h4 id="公式的解释"><a href="#公式的解释" class="headerlink" title="公式的解释"></a>公式的解释</h4><p>设 P1、P2、P3、· · · 、Pn 是出现在公式 G 中的所有命题变元，指定 P1、P2、P3、· · · 、Pn 一组真值，则这组真值称为 G 的一个<strong>解释</strong>，常记为 I。</p><p>Z 如果公式 G 在解释 I 下是真的，则称I 满足 G，此时 I 是 G 的成真赋值；如果 G 在解释 I 下是假的，则称I 弄假于 G，此时 I 是 G 的成假赋值。</p><h4 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h4><ul><li>一般来说，若有 n 个命题变元，则应有 $2^n$ 个不同的解释。</li><li>利用真值表，可得到公式的所有成真赋值和成假赋值。</li></ul><p>由公式 G 在其所有可能的解释下所取真值构成的表，称为 G 的<strong>真值表</strong></p><blockquote><p>真值表画法</p></blockquote><p>一般我们将公式中的命题变元放在真值表的左边，将公式的结果放在真值表的右边。有时为了清楚起见，可将求公式的中间结果也放在真值表中。</p><h3 id="命题公式分类和等价"><a href="#命题公式分类和等价" class="headerlink" title="命题公式分类和等价"></a>命题公式分类和等价</h3><h4 id="命题公式分类"><a href="#命题公式分类" class="headerlink" title="命题公式分类"></a>命题公式分类</h4><p>公式 G 称为永真公式(重言式)，如果在它的所有解释之下其真值都为“真”。</p><p>公式 G 称为永假公式(矛盾式)，如果在它的所有解释之下其真值都为“假”。有时也称永假公式为不可满足公式。</p><p>公式 G 称为可满足公式，如果它不是永假的。</p><blockquote><p>三种特殊公式之间的联系：<br>G 是永真的当且仅当 ¬G 是永假的；<br>G 是可满足的当且仅当至少有一个解释 I，使 G 在 I 下为真。<br>若 G 是永真式，则 G 一定是可满足式，但反之可满足公式不一定是永真式；</p></blockquote><h4 id="公式的等价"><a href="#公式的等价" class="headerlink" title="公式的等价"></a>公式的等价</h4><p>设 $G$，$H$ 是两个命题公式，$P_1$，$P_2$，$P_3$，· · · ，$P_n$是出现在 $G$，$H$ 中所有的命题变元，如果对于$P_1$，$P_2$，$P_3$，· · · ，$P_n$ 的 $2^n$ 个解释，$G$ 与 $H$ 的真值结果都相同，则称公式 $G$ 与 $H$ 是等价的，记作$G = H$（或$G ⇔ H$）</p><p>对于任意两个公式$G$和$H$，$G=H$的充分必要条件是公式$G↔H$是永真公式</p><blockquote><p>命题公式的可判定性<br>可判定性：能否给出一个可行方法，完成对任意公式的判定类问题（类型或等价判定）。</p></blockquote><p>命题公式是可判定的</p><h3 id="命题等价关系及其应用"><a href="#命题等价关系及其应用" class="headerlink" title="命题等价关系及其应用"></a>命题等价关系及其应用</h3><h4 id="基本等价关系"><a href="#基本等价关系" class="headerlink" title="基本等价关系"></a>基本等价关系</h4><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sBZSaMGyu6x7RN2VXeyKairxksui4veJxDtUINO15N6I/http://p.ananas.chaoxing.com/star3/origin/03cb9997c9248476b9aaba06a8b4d9cf.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sQ-d-62Mvn6K3tSVpdrP16CiYh8SfHGH1pPe87Is93zM/http://p.ananas.chaoxing.com/star3/origin/7c1dcf17bf83bbe870c97a97bee1cb47.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sCEZsMWZsHs_Oqo0aUS0LrusGyNjgwm8ZvNpD5SouyDY/http://p.ananas.chaoxing.com/star3/origin/20c9a91189c6bd21d24c0fd750253f98.png"></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>开关电路，逻辑电路化简</p><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><h4 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h4><blockquote><p>引入范式</p></blockquote><p>真值表能够方便的给出命题公式的真值情况，但真值表的规模随命题变元的数量呈指数形式增长，因而我们考虑一种真值表的替代方法，这种方法是基于命题公式的一种标准形式。</p><p>命题变元或命题变元的否定称为<strong>文字</strong>。P, ¬P, Q, ¬Q, · · ·</p><p>有限个文字的析取称为<strong>简单析取式</strong>(或<strong>子句</strong>)。P ∨ Q ∨ ¬R, · · · P,¬P</p><p>有限个文字的合取称为<strong>简单合取式</strong>(或<strong>短语</strong>)。¬P ∧ Q ∧ R, · · · P,¬P</p><p>P 与 ¬P 称为<strong>互补对</strong>。</p><p>有限个简单合取式（短语）的析取式称为<strong>析取范式</strong>；如 (P ∧ Q) ∨ (¬P ∧ Q) ，又如 P ∧ ¬Q，P,¬P</p><p>有限个简单析取式（子句）的合取式称为<strong>合取范式</strong>。如 (P ∨ Q) ∧ (¬P ∨ Q)，又如 P ∨ ¬Q，P, ¬P</p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sZJymAFAWMrEED9R8b402Q8SFOmx12h5oB9uwU_tTHbo/http://p.ananas.chaoxing.com/star3/origin/765c0cac9147503cd2672d8a26f42b23.png"></p><p>总结：</p><ol><li>范式关注的是命题公式的当前书写形式；</li><li>单个的文字是子句、短语、析取范式，合取范式；</li><li>析取范式、合取范式仅含联结词集 {¬, ∧, ∨}，且否定联接词仅出现在命题变元之前。</li></ol><h4 id="范式存在定理"><a href="#范式存在定理" class="headerlink" title="范式存在定理"></a>范式存在定理</h4><p>对于任意命题公式，都存在与其等价的析取范式和合取范式</p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sveMfGQLgSkuk8edwuuGVAu8iueXuL-F4tu0nIjLXyX0/http://p.ananas.chaoxing.com/star3/origin/7c21c3ce7384fb7d6016a3adfa4547ff.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,syx8WESjF8sVRwa0JIJ-DofX3v618HY-_UyfZRuZq6Rk/http://p.ananas.chaoxing.com/star3/origin/d858c90bed4056e999980a64fc0c91c8.png"></p><h3 id="主范式"><a href="#主范式" class="headerlink" title="主范式"></a>主范式</h3><p>由于范式的不唯一性，我们考虑对构成范式的子句或短语进一步规范化，从而形成唯一的主析取范式和主合取范式。</p><h4 id="极小项和极大项"><a href="#极小项和极大项" class="headerlink" title="极小项和极大项"></a>极小项和极大项</h4><p>在含有 $n$ 个命题变元 $P_1$, $P_2$, $P_3$, · · · , $P_n$ 的<strong>短语</strong>或<strong>子句</strong>中，若每个命题变元与其否定不同时存在，但二者之一恰好出现一次且仅一次，并且出现的次序与 $P_1$, $P_2$, $P_3$, · · · , $P_n$ 一致，则称此短语或子句为关于 $P_1$, $P_2$, $P_3$, · · · , $P_n$ 的一个<strong>极小项</strong>或<strong>极大项</strong></p><p>一般来说，若有 $n$ 个命题变元，则应有 $2^n$ 个不同的极小项和 $2^n$ 个不同的极大项。</p><blockquote><p>极小项的性质</p></blockquote><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sr0QS3ZKwPZlsvVQO5yickLNHPiDTlfL7B2gICoGXPME/http://p.ananas.chaoxing.com/star3/origin/bbeb3f84039f241e9f3536e78d79786b.png"></p><blockquote><p>极大项的性质</p></blockquote><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,s7z-7iTqG6yPouzcPXGAaRpI9e8XZvs18Yh2taW8ZqCE/http://p.ananas.chaoxing.com/star3/origin/ae5b8ab41a0ec079a4be904cc529018a.png"></p><blockquote><p>对比极大值和极小值的性质</p></blockquote><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sghMXVjH2o6WQg_jZqjsGxeyErgP-bIEnMJ-mEBfjljk/http://p.ananas.chaoxing.com/star3/origin/3552af422d2960fac3a102d7289b1cfe.png"></p><h4 id="主析取范式和主合取范式"><a href="#主析取范式和主合取范式" class="headerlink" title="主析取范式和主合取范式"></a>主析取范式和主合取范式</h4><p>在给定的析取范式中，若每一个短语都是极小项，且按照编码从小到大的顺序排列，则称该范式为<strong>主析取范式</strong></p><p>在给定的合取范式中，若每一个子句都是极大项，且按照编码从小到大的顺序排列，则称该范式为<strong>主合取范式</strong></p><p>如果一个主析取范式不包含任何极小项，则称该主析取范式为 “空”；如果一个主合取范式不包含任何极大项，则称主合取范式为 “空”。</p><p>定理：任何一个公式都有与之等价的主析取范式和主合取范式</p><h4 id="主范式求解定理"><a href="#主范式求解定理" class="headerlink" title="主范式求解定理"></a>主范式求解定理</h4><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,saunDjRItiPT2oEsQlBY1UIBnhAVUXOTRmihN6tFasIQ/http://p.ananas.chaoxing.com/star3/origin/35e3e2d42162022a84326300710c801b.png"></p><blockquote><p>公式转换法</p></blockquote><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sk3a2vuIleyeVV4b9DtVkWiNr9jiRXhG2zwVTyIOHY8E/http://p.ananas.chaoxing.com/star3/origin/2c087e1efa8fbcd7ca7ff1e7ff3adab9.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,srkOaQ3UaDJ9VuqyKgCEalB5hZnp0QuvAjKMYh69Mr2U/http://p.ananas.chaoxing.com/star3/origin/3cf987686b84e8d3796a36a85cbc54be.png"></p><blockquote><p>真值表技术</p></blockquote><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sESR6HTkssEHvG4Q7Dxznmyl-qnXGGDNWVkioLqBiaJU/http://p.ananas.chaoxing.com/star3/origin/31464a8ba8dbc40feaf0cd13a4c5e80a.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sbmXgheN4mBk3wZvgOJ3YfKbI5m85oIp2bruWj7cA-iU/http://p.ananas.chaoxing.com/star3/origin/d29679f16cc79908746a43f30bcb7c9b.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sdKTGxrX-rZ_LV1qo2lqyQig6vz78JPpxkfVAE2T-7ZM/http://p.ananas.chaoxing.com/star3/origin/5a576121f09672a692d96e530e036667.png"></p><h4 id="范式的相互转换"><a href="#范式的相互转换" class="headerlink" title="范式的相互转换"></a>范式的相互转换</h4><p>由真值表技术可知，对于任一个命题公式而言，主析取范式所使用的极小项的编码和主合取范式所使用的极大项的编码是 “互补” 的关系。从而我们在求主析取范式和主合取范式时，可根据公式特点，先求出二者之一，然后可直接写出另一个。</p><h4 id="主范式的应用"><a href="#主范式的应用" class="headerlink" title="主范式的应用"></a>主范式的应用</h4><p>主范式可用于了解公式的真值情况，进行公式类型的判定以及等价关系的判定。</p><ul><li>如果主析取范式包含所有的极小项，则该公式为永真公式；</li><li>如果主合取范式包含所有的极大项，则该公式为永假公式；</li><li>若两个公式具有相同的主析取范式或主合取范式，则两公式等价。</li></ul><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sMdiciHSZvBjCEpyhEroRlzrcsYP_cXtVYM5Fcjqn-24/http://p.ananas.chaoxing.com/star3/origin/0b83e12514da00a1d6751679c4eae24d.png"></p><h3 id="命题蕴含公式"><a href="#命题蕴含公式" class="headerlink" title="命题蕴含公式"></a>命题蕴含公式</h3><h4 id="推理形式"><a href="#推理形式" class="headerlink" title="推理形式"></a>推理形式</h4><p>所谓<strong>推理</strong>，是指从一组前提合乎逻辑的推出结论的思维过程。在这里，我们使用命题公式来表达前提和结论。</p><p>定义：设$G_1$, $G_2$, · · · ,$G_n$, $H$是公式，称$H$ 是$G_1$,$G_2$, · · · , $G_n$的逻辑结果当且仅当对任意解释 $I$，如果$I$使得$G_1$ ∧ $G_2$ ∧ · · · ∧ $G_n$为真，则$I$也会使$H$为真。记为$G_1$, $G_2$, · · · ,$G_n ⇒ H$。“$⇒$”称为蕴涵关系。此时称 $G_1$, $G_2$, · · · , $G_n ⇒ H$ 为有效的, 否则称为无效的。$G_1$, $G_2$, · · · , $G_n$称为一组前提，有时用集合 $Γ$ 来表示，记为 $Γ$ = {$G_1$, $G_2$, · · · ,$G_n$}，$H$ 称为结论。此时也称 $H$ 是前提集合 $Γ$ 的逻辑结果。记为 $Γ ⇒ H$</p><h4 id="推理的判定定理"><a href="#推理的判定定理" class="headerlink" title="推理的判定定理"></a>推理的判定定理</h4><p>公式 H 是前提集合 Γ = {G1, G2, · · · , Gn} 的逻辑结果当且仅当 (G1 ∧ G2 ∧ · · · ∧ Gn) → H为永真公式。</p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sFssq6q6d1Dp8XjAExpGjX9HPptIyegE92W_X0dp8RpY/http://p.ananas.chaoxing.com/star3/origin/b48c64b077d833aa8246b1401c88d82f.png"></p><h4 id="推理定律——基本蕴含关系"><a href="#推理定律——基本蕴含关系" class="headerlink" title="推理定律——基本蕴含关系"></a>推理定律——基本蕴含关系</h4><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sOsTSfrz6-4qsgmtg5JJWvR7kcbk_NnuCVzcYW9szyPQ/http://p.ananas.chaoxing.com/star3/origin/d92b42c88831c0039f7d3ee8186a6f29.png"></p><p><img src="https://imageproxy.chaoxing.com/0x0,jpeg,sODYBRgLg47pDh7gB44dfkWHA8dgvY2QvWVSoGahVi3Q/http://p.ananas.chaoxing.com/star3/origin/494e02461d784f2cfdb03a135f7a79d3.png"></p><h3 id="演绎法推理"><a href="#演绎法推理" class="headerlink" title="演绎法推理"></a>演绎法推理</h3><h4 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h4><p>规则 P (称为前提引用规则)：在推导的过程中，可随时引入前提集合中的任意一个前提；</p><p>规则 T (称为逻辑结果引用规则)：在推导的过程中，可以随时引入公式 S，该公式 S 是由其前的一个或多个公式推导出来的逻辑结果。</p><p>规则 CP (称为附加前提规则)：如果能从给定的前提集合 Γ 与公式 P 推导出 S，则能从此前提集合 Γ 推导出 P → S。</p><blockquote><p> 关于规则 CP<br>原理：P → (Q → R) = (P ∧ Q) → R。<br>使用场合: 当结论公式是蕴涵式或析取式时使用。</p></blockquote><h4 id="自然演绎法"><a href="#自然演绎法" class="headerlink" title="自然演绎法"></a>自然演绎法</h4><p>三个推理规则加上全部的基本等价公式和基本蕴涵公式，可作为推理与演绎的基础，从而构造一个完整的命题演算推理系统。即所有命题逻辑的定理都可以用这些规则严格地证明出来。</p><p>定义：从前提集合 Γ 推出结论 H 的一个演绎是构造命题公式的一个有限序列：$$H_1, H_2, H_3, · · · , H_{n−1}, H_n$$其中，Hi 或者是 $Γ$ 中的某个前提，或者是前面的某些 $H_j$($j$ &lt; $i$) 的有效结论，并且 $H_n$ 就是 $H$，则称公式 $H$ 为该演绎的有效结论，或者称从前提 $Γ$ 能够演绎出结论 $H$ 来。</p><h4 id="演绎——直接证明法"><a href="#演绎——直接证明法" class="headerlink" title="演绎——直接证明法"></a>演绎——直接证明法</h4>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round&amp;nbsp;#721(Div.2)</title>
      <link href="undefined/592abd65/"/>
      <url>undefined/592abd65/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Codeforces Round #721(Div.2)的题解</p></blockquote><span id="more"></span><p><a href="https://codeforces.com/contest/1527">链接</a></p><h2 id="A-And-Then-There-Were-K"><a href="#A-And-Then-There-Were-K" class="headerlink" title="A. And Then There Were K"></a>A. And Then There Were K</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出 $n$, 求 $k$ 使得$n$ &amp; $(n-1)$ &amp; … &amp; $k = 0$</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求 $n$ 二进制的最高位 $t$，然后 $k$ 就等于 $2^t-1$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="built_in">pow</span>(<span class="number">2</span>, i) - <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为不熟悉位运算，然后用这个写一下，二进制还是多用些位运算比较好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            a = (a &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (a &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (t &gt;&gt; <span class="number">1</span>) - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接求（和上面一样的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            sum += <span class="built_in">pow</span>(<span class="number">2</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B1-Palindrome-Game-easy-version"><a href="#B1-Palindrome-Game-easy-version" class="headerlink" title="B1. Palindrome Game (easy version)"></a>B1. Palindrome Game (easy version)</h2><blockquote><p>博弈</p></blockquote><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>现在bob和alice正在玩一个小游戏：给你个字符串，当所有的0变成了1，那么游戏结束</p><p>现在你们有两个操作：</p><ol><li>将0变成1，但是将会有一点的代价</li><li>将整个棋盘翻转（不用改变任何字符的意思），这个没有代价，但是条件是需要在字符串非回文的情况下才可以，而且不能连续使用反转的权利（BOB上次用了，ALICE这次不能用）</li></ol><p>alice先手，请问双方都使用最佳策略，请输出获胜的一方。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>思路：保留最后使用反转棋盘的权利</p><p>简单版本是给你个一回文串：那么就可以直接记录0的位数</p><ol><li><p>如果是偶数的情况alice每恢复一个位置（战术：破坏回文），那么bob都会恢复回文，最后一步，bob进行翻转，bob取胜</p></li><li><p>如果0的位数是奇数，那么alice恢复一个位置，就一定是能保证整个字符串是回文串，那么bob只能破坏回文，那么alice恢复回文，最后alice反转，alice获胜。</p></li><li><p>但是需要考虑的一个情况就是：如果只有一位为0，那么第二种战术失效，谁先手，谁就输掉游戏。</p></li><li><p>如果没有0，则是平局</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> a;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            <span class="keyword">if</span> (a == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;DRAW&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum % <span class="number">2</span> == <span class="number">0</span> || sum == <span class="number">1</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;BOB&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B2-Palindrome-Game-hard-version"><a href="#B2-Palindrome-Game-hard-version" class="headerlink" title="B2. Palindrome Game (hard version)"></a>B2. Palindrome Game (hard version)</h2><h3 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h3><p>除了处理的字符串为可能为非回文外，与B1相同</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>考虑非回文的情况中，只有n为奇数且中间的数为0且0的总个数为2时平局，其他全为ALICE获胜；回文情况与B1相同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C-Sequence-Pair-Weight"><a href="#C-Sequence-Pair-Weight" class="headerlink" title="C. Sequence Pair Weight"></a>C. Sequence Pair Weight</h2><h3 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h3><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round&amp;nbsp;#713(Div.3)</title>
      <link href="undefined/682df6fc/"/>
      <url>undefined/682df6fc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Codeforces Round #713(Div.3)的题解</p></blockquote><span id="more"></span><p><a href="https://codeforces.com/contest/1512">链接</a></p><h2 id="A-Spy-Detected"><a href="#A-Spy-Detected" class="headerlink" title="A. Spy Detected!"></a>A. Spy Detected!</h2><p>求一组数组中不同元素的下标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> n, m, num;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] == a[<span class="number">1</span>]) &#123;</span><br><span class="line">            m = a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            m = a[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] != m) &#123;</span><br><span class="line">                num = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Almost-Rectangle"><a href="#B-Almost-Rectangle" class="headerlink" title="B. Almost Rectangle"></a>B. Almost Rectangle</h2><p>我觉得算是半个暴力吧哈哈哈哈哈，自己写的代码就是很粗糙</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> n, m, num, flag;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">405</span>][<span class="number">405</span>];</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                cin &gt;&gt; a[i][j];</span><br><span class="line">                <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line">                    b[<span class="number">0</span>][<span class="number">0</span>] = i;</span><br><span class="line">                    b[<span class="number">0</span>][<span class="number">1</span>] = j;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    b[<span class="number">1</span>][<span class="number">0</span>] = i;</span><br><span class="line">                    b[<span class="number">1</span>][<span class="number">1</span>] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b[<span class="number">0</span>][<span class="number">0</span>] == b[<span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[<span class="number">0</span>][<span class="number">0</span>] == n - <span class="number">1</span>) &#123;</span><br><span class="line">                a[b[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span>][b[<span class="number">0</span>][<span class="number">1</span>]] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                a[b[<span class="number">0</span>][<span class="number">0</span>] - <span class="number">1</span>][b[<span class="number">1</span>][<span class="number">1</span>]] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                a[b[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>][b[<span class="number">0</span>][<span class="number">1</span>]] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                a[b[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>][b[<span class="number">1</span>][<span class="number">1</span>]] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>][<span class="number">1</span>] == b[<span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[<span class="number">0</span>][<span class="number">1</span>] == n - <span class="number">1</span>) &#123;</span><br><span class="line">                a[b[<span class="number">0</span>][<span class="number">0</span>]][b[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                a[b[<span class="number">1</span>][<span class="number">0</span>]][b[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                a[b[<span class="number">0</span>][<span class="number">0</span>]][b[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                a[b[<span class="number">1</span>][<span class="number">0</span>]][b[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">1</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            a[b[<span class="number">0</span>][<span class="number">0</span>]][b[<span class="number">1</span>][<span class="number">1</span>]] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            a[b[<span class="number">1</span>][<span class="number">0</span>]][b[<span class="number">0</span>][<span class="number">1</span>]] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                cout &lt;&lt; a[i][j];</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-A-B-Palindrome"><a href="#C-A-B-Palindrome" class="headerlink" title="C. A-B Palindrome"></a>C. A-B Palindrome</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一个字符串s和两个数字a和b。s由‘0’，‘1’和‘？’组成，要求将s中的‘？’替换成‘1’或者‘0’，同时要求s中的‘0’的个数严格等于a，s中国‘1’的个数严格等于b，请问是否存在这样的回文串s，如果存在就输出处理好的回文串s，不存在就输出-1。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>双指针两头遍历，然后判断是不是回文串，a和b是否用完</p><ul><li>如果遇到两个字符不相等，且都不是？的时候，就一定输出-1</li><li>如果其中有一个字符是？，一个是0或1的话，我们肯定要把那个？改成和另一边一样，为了保证回文。</li><li>如果两边都是？的话，我们就先跳过，最后再处理。</li></ul><p>还有一点需要注意的就是，如果这个字符串是奇数的话，我们就把最中间那个字符单独考虑，如果中间那个字符是？的话，我们就看a和b那个是奇数，就让？变成0还是1.</p><p>为什么要这样判断呢？<br>因为我们已经处理过一遍字符串了，现在的字符串肯定是回文的，虽然还有一些？，但是？也是回文的。<br>我们不考虑中间那个点的时候，两边的a和b应该都是偶数，这样才能使对称的？都填上相同的数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, a, b, n;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        string str;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        n = a + b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">                str[i] = str[n - i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        a -= <span class="built_in">count</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        b -= <span class="built_in">count</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != n - i - <span class="number">1</span> &amp;&amp; str[i] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &gt; <span class="number">1</span>) str[i] = str[n - i - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>, a -= <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; <span class="number">1</span>) str[i] = str[n - i - <span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span>, b -= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a) str[i] = <span class="string">&#x27;0&#x27;</span>, a--;</span><br><span class="line">                <span class="keyword">else</span> str[i] = <span class="string">&#x27;1&#x27;</span>, b--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string vec = str;</span><br><span class="line">        <span class="built_in">reverse</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (vec == str &amp;&amp; a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; str &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Corrupted-Array"><a href="#D-Corrupted-Array" class="headerlink" title="D. Corrupted Array"></a>D. Corrupted Array</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> null = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line">ll b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">2</span>; i++) cin &gt;&gt; b[i];</span><br><span class="line">        <span class="built_in">sort</span>(b, b + n + <span class="number">2</span>);</span><br><span class="line">        ll sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) sum += b[i];</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sum - b[i]) == b[n + <span class="number">1</span>]) &#123;</span><br><span class="line">                id = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span>) &#123;</span><br><span class="line">            sum -= b[n];</span><br><span class="line">            <span class="keyword">if</span> (sum == b[n + <span class="number">1</span>]) id = n;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum == b[n]) id = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != id) cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1026 程序运行时间</title>
      <link href="undefined/b91332ee/"/>
      <url>undefined/b91332ee/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p><p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p><p>输入格式：</p><p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0, $10^7$]。</p><p>输出格式：</p><p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 4577973</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12:42:59</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1025 反转链表</title>
      <link href="undefined/12015b6e/"/>
      <url>undefined/12015b6e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>链表</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个常数 $K$ 以及一个单链表 $L$，请编写程序将 $L$ 中每 $K$ 个结点反转。例如：给定 $L$ 为 1→2→3→4→5→6，$K$ 为 3，则输出应该为 3→2→1→6→5→4；如果 $K$ 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 $K$ 个元素不反转。</p><p>输入格式：</p><p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤ $10^5$)、以及正整数 K (≤ $N$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p><p>接下来有 $N$ 行，每行格式为：<code>Address Data Next</code></p><p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p><p>输出格式：</p><p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>还应该考虑输入样例中有不在链表中的结点的情况。所以用个sum计数~</p><p>而且，algorithm头文件里面有reverse函数可以直接调用～</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> first, k, n, temp;</span><br><span class="line"> cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class="line"> <span class="keyword">int</span> data[<span class="number">100005</span>], next[<span class="number">100005</span>], list[<span class="number">100005</span>];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"> cin &gt;&gt; temp;</span><br><span class="line"> cin &gt;&gt; data[temp] &gt;&gt; next[temp];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//不⼀定所有的输⼊的结点都是有⽤的，加个计数器</span></span><br><span class="line"> <span class="keyword">while</span> (first != <span class="number">-1</span>) &#123;</span><br><span class="line"> list[sum++] = first;</span><br><span class="line"> first = next[first];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (sum - sum % k); i += k)</span><br><span class="line"> <span class="built_in">reverse</span>(<span class="built_in">begin</span>(list) + i, <span class="built_in">begin</span>(list) + i + k);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum - <span class="number">1</span>; i++)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, list[i], data[list[i]], list[i + <span class="number">1</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>, list[sum - <span class="number">1</span>], data[list[sum - <span class="number">1</span>]]);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1024 科学计数法</title>
      <link href="undefined/ca5a55fe/"/>
      <url>undefined/ca5a55fe/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串处理</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]<code>.</code>[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。</p><p>现以科学计数法的格式给出实数 $A$，请编写程序按普通数字表示法输出 $A$，并保证所有有效位都被保留。</p><p>输入格式：</p><p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p><p>输出格式：</p><p>对每个测试用例，在一行中按普通数字表示法输出 $A$，并保证所有有效位都被保留，包括末尾的 0。</p><p>输入样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+1.23400E-03</span><br></pre></td></tr></table></figure><p>输出样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.00123400</span><br></pre></td></tr></table></figure><p>输入样例 2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1.2E+10</span><br></pre></td></tr></table></figure><p>输出样例 2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-12000000000</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>柳神：</p><p>分析：n保存E后面的字符串所对应的数字，t保存E前面的字符串，不包括符号位。当n&lt;0时表示向前移动，那么先输出0. 然后输出abs(n)-1个0，然后继续输出t中的所有数字；当n&gt;0时候表示向后移动，那么先输出第一个字符，然后将t中尽可能输出n个字符，如果t已经输出到最后一个字符(j == t.length())那么就在后面补n-cnt个0，否则就补充一个小数点. 然后继续输出t剩余的没有输出的字符～</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">&#x27;E&#x27;</span>) i++;</span><br><span class="line">    string t = s.<span class="built_in">substr</span>(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(i + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0.&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">abs</span>(n) - <span class="number">1</span>; j++) cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.<span class="built_in">length</span>(); j++)</span><br><span class="line">            <span class="keyword">if</span> (t[j] != <span class="string">&#x27;.&#x27;</span>) cout &lt;&lt; t[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; t[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt, j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>, cnt = <span class="number">0</span>; j &lt; t.<span class="built_in">length</span>() &amp;&amp; cnt &lt; n; j++, cnt++) cout &lt;&lt;</span><br><span class="line">            t[j];</span><br><span class="line">        <span class="keyword">if</span> (j == t.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - cnt; k++) cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; t.<span class="built_in">length</span>(); k++) cout &lt;&lt; t[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理 </tag>
            
            <tag> PAT乙级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1023 组个最小数</title>
      <link href="undefined/985885a1/"/>
      <url>undefined/985885a1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>贪心</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p><p>现给定数字，请编写程序输出能够组成的最小的数。</p><p>输入格式：</p><p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p><p>输出格式：</p><p>在一行中输出能够组成的最小的数。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            a[i]--;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++)</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1022 D进制的A+B</title>
      <link href="undefined/899cf095/"/>
      <url>undefined/899cf095/</url>
      
        <content type="html"><![CDATA[<blockquote><p>进制转换</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入两个非负 10 进制整数 $A$ 和 $B$ (≤ $2^30$ − 1)，输出 $A$ + $B$ 的 $D$ (1 &lt; $D$ ≤ 10)进制数。</p><p>输入格式：</p><p>输入在一行中依次给出 3 个整数 $A$、$B$ 和 $D$。</p><p>输出格式：<br>输出 $A$ + $B$ 的 $D$ 进制数。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 8</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">int</span> t = a + b;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">        s[i++] = t % c;</span><br><span class="line">        t /= c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        cout &lt;&lt; s[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1021 个位数统计</title>
      <link href="undefined/35873256/"/>
      <url>undefined/35873256/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串处理</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 $k$ 位整数 $N$=$d_{k−1}$$10^{k-1}$ + ⋯ + $d_{1}$$10^1$ + $d_0$ (0 ≤ $d_i$ ≤ 9, $i$ = 0, ⋯ , $k$ − 1, $d_{k−1}$$&gt;0$) (0 ≤ $d_i$ ≤ 9, $i$ = 0, ⋯ , $k$ − 1, $d_{​k−1}$ &gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 $N$ = 100311，则有 2 个 0，3 个 1，和 1 个 3。</p><p>输入格式：<br>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $N$。</p><p>输出格式：<br>对 $N$ 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 $N$ 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意n为不超过1000位的整数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string n;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        a[n[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理 </tag>
            
            <tag> PAT乙级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1020 月饼</title>
      <link href="undefined/db3c06db/"/>
      <url>undefined/db3c06db/</url>
      
        <content type="html"><![CDATA[<blockquote><p>贪心</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p><p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p><p>输入格式：</p><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $D$ 表示市场最大需求量。随后一行给出 $N$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $N$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p><p>输出格式：</p><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心的经典例题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b, c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.c &gt; b.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    vector&lt;node&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].b;</span><br><span class="line">        a[i].c = a[i].b / a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].a &lt;= d)&#123;</span><br><span class="line">            sum += a[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += d * a[i].c;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d -= a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1019 数字黑洞</title>
      <link href="undefined/53a245f3/"/>
      <url>undefined/53a245f3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数学问题</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</p><p>例如，我们从6767开始，将得到</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</p><p>输入格式：</p><p>输入给出一个 (0,$10^4$) 区间内的正整数 $N$。</p><p>输出格式：</p><p>如果 $N$ 的 4 位数字全相等，则在一行内输出 <code>N - N = 0000</code>；否则将计算的每一步在一行内输出，直到 <code>6174</code> 作为差出现，输出格式见样例。注意每个数字按 <code>4</code> 位数格式输出。</p><p>输入样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6767</span><br></pre></td></tr></table></figure><p>输出样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br></pre></td></tr></table></figure><p>输入样例 2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2222</span><br></pre></td></tr></table></figure><p>输出样例 2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, y;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        a[<span class="number">0</span>] = n / <span class="number">1000</span>;</span><br><span class="line">        a[<span class="number">1</span>] = n / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">2</span>] = n / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">3</span>] = n % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        x = a[<span class="number">0</span>] * <span class="number">1000</span> + a[<span class="number">1</span>] * <span class="number">100</span> + a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>];</span><br><span class="line">        y = a[<span class="number">3</span>] * <span class="number">1000</span> + a[<span class="number">2</span>] * <span class="number">100</span> + a[<span class="number">1</span>] * <span class="number">10</span> + a[<span class="number">0</span>];</span><br><span class="line">        n = y - x;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, y);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; - &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, x);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, n);</span><br><span class="line">        cout&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">6174</span> || n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柳神的代码，应用了c++11新特性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">4</span> - s.<span class="built_in">length</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        string a = s, b = s;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> result = <span class="built_in">stoi</span>(a) - <span class="built_in">stoi</span>(b);</span><br><span class="line">        s = <span class="built_in">to_string</span>(result);</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">4</span> - s.<span class="built_in">length</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (s != <span class="string">&quot;6174&quot;</span> &amp;&amp; s != <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 数学问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1018 锤子剪刀布</title>
      <link href="undefined/be9e689/"/>
      <url>undefined/be9e689/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="题目图片"></p><p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><p>输入格式：</p><p>输入第 1 行给出正整数 $N$（≤$10^5$），即双方交锋的次数。随后 $N$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p><p>输出格式：</p><p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">3</span>], y[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w1 = <span class="number">0</span>, w2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;C&#x27;</span> &amp;&amp; b == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;C&#x27;</span> &amp;&amp; b == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;J&#x27;</span> &amp;&amp; b == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;J&#x27;</span> &amp;&amp; b == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; w1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n - w1 - w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n - w1 - w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">char</span> l[<span class="number">3</span>] = &#123; <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;J&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> max1 = x[<span class="number">0</span>] &gt;= x[<span class="number">1</span>] ? ((x[<span class="number">0</span>] &gt;= x[<span class="number">2</span>]) ? <span class="number">0</span> : <span class="number">2</span>) : ((x[<span class="number">1</span>] &gt;= x[<span class="number">2</span>]) ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> max2 = y[<span class="number">0</span>] &gt;= y[<span class="number">1</span>] ? ((y[<span class="number">0</span>] &gt;= y[<span class="number">2</span>]) ? <span class="number">0</span> : <span class="number">2</span>) : ((y[<span class="number">1</span>] &gt;= y[<span class="number">2</span>]) ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; l[max1] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; l[max2] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1017 A除以B</title>
      <link href="undefined/aa3c1048/"/>
      <url>undefined/aa3c1048/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大数运算</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>本题要求计算 $A/B$，其中 $A$ 是不超过 1000 位的正整数，$B$ 是 1 位正整数。你需要输出商数 $Q$ 和余数 $R$，使得 $A$ = $B$ × $Q$ + $R$ 成立。</p><p>输入格式：</p><p>输入在一行中依次给出 $A$ 和 $B$，中间以 1 空格分隔。</p><p>输出格式：</p><p>在一行中依次输出 $Q$ 和 $R$，中间以 1 空格分隔。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123456789050987654321 7</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>手动模拟除法。这道题我用万能头文件 <code>bits/stdc++.h</code> 最后一个测试点超时了，事实证明，头文件还是记记比较好</p><p>我的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="keyword">int</span> b, m, n;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">    m = (a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) / b;</span><br><span class="line">    <span class="keyword">if</span> ((m != <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>) || len == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">    n = (a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) % b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        m = (n * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>) / b;</span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">        n = (n * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>) % b;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 大数运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1016 部分A+B</title>
      <link href="undefined/63e31c49/"/>
      <url>undefined/63e31c49/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>正整数 $A$ 的 “$D_A$ （为 1 位整数）部分”定义为由 $A$ 中所有 $D_A$ 组成的新整数 $P_A$。例如：给定 $A$ = 3862767，$D_A$ = 6，则 $A$ 的“6 部分” $P_A$<br>是 66，因为 $A$ 中有 2 个 6。</p><p>现给定 $A$、$D_A$、$B$、$D_B$，请编写程序计算 $P_A$ + $P_B$。</p><p>输入格式：</p><p>输入在一行中依次给出 $A$、$D_A$、$B$、$D_B$，中间以空格分隔，其中 0 &lt; $A$,$B$ &lt; $10^9$。</p><p>输出格式：</p><p>在一行中输出 $P_A$ + $P_B$ 的值。</p><p>输入样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3862767 6 13530293 3</span><br></pre></td></tr></table></figure><p>输出样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">399</span><br></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3862767 1 13530293 8</span><br></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d, t;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">while</span> (a) &#123;</span><br><span class="line">        t = a % <span class="number">10</span>;</span><br><span class="line">        a /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == b) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c) &#123;</span><br><span class="line">        t = c % <span class="number">10</span>;</span><br><span class="line">        c /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == d) &#123;</span><br><span class="line">            y = y * <span class="number">10</span> + d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x + y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柳神的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    <span class="keyword">int</span> da, db, cnta = <span class="number">0</span>, cntb = <span class="number">0</span>, pa = <span class="number">0</span>, pb = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; da &gt;&gt; b &gt;&gt; db;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (da == (a[i] - <span class="string">&#x27;0&#x27;</span>)) cnta++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">length</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (db == (b[i] - <span class="string">&#x27;0&#x27;</span>)) cntb++;</span><br><span class="line">    <span class="keyword">if</span> (cnta != <span class="number">0</span>) pa = da;</span><br><span class="line">    <span class="keyword">if</span> (cntb != <span class="number">0</span>) pb = db;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnta; i++)</span><br><span class="line">        pa = <span class="number">10</span> * pa + da;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cntb; i++)</span><br><span class="line">        pb = <span class="number">10</span> * pb + db;</span><br><span class="line">    cout &lt;&lt; pa + pb;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ消息轰炸器</title>
      <link href="undefined/cd8fce3/"/>
      <url>undefined/cd8fce3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>QQ消息轰炸器，可调时间间隔，发送数量</p></blockquote><span id="more"></span><p>今天发现了一个好玩的东东，记录到博客上</p><p>注意更改一下消息间隔时间，提前复制好要发送的内容，打开要轰炸对象的聊天窗口，然后运行该代码</p><p>（该代码在vs2019下会报错，我使用的是dev）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> time ?<span class="comment">//更改发送消息间隔时间 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];<span class="comment">//使用前先复制要轰炸的内容 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要轰炸的对象的名称：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;name,<span class="number">40</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要轰炸的次数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">    HWND H =FindWindow(<span class="number">0</span>,name);<span class="comment">//找到对话窗口 </span></span><br><span class="line">    <span class="keyword">while</span>(i--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        SendMessage(H,WM_PASTE,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//粘贴内容 </span></span><br><span class="line">        SendMessage(H,WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);<span class="comment">//回车发送</span></span><br><span class="line">        Sleep(time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 业余 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++11新特性</title>
      <link href="undefined/fbe3d523/"/>
      <url>undefined/fbe3d523/</url>
      
        <content type="html"><![CDATA[<blockquote><p>c++11 是2011年官方为c++带来的新语法新标准</p></blockquote><span id="more"></span><h2 id="auto声明"><a href="#auto声明" class="headerlink" title="auto声明"></a>auto声明</h2><p>让编译器根据初始值类型直接推断出变量的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set的迭代器原始写法：</span></span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="keyword">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// auto写法：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于范围的for循环"><a href="#基于范围的for循环" class="headerlink" title="基于范围的for循环"></a>基于范围的for循环</h2><p>遍历数组中的每一个元素时使用时比较方便</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl; <span class="comment">// 输出数组中的每一个元素的值，每个元素占据一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : arr) <span class="comment">// i为引用变量</span></span><br><span class="line">    i = i * <span class="number">2</span>; <span class="comment">// 将数组中的每一个元素都乘以2，arr[4]的内容变为了&#123;0, 2, 4, 6&#125;</span></span><br></pre></td></tr></table></figure><p>当然上面的也可以替换为auto</p><h2 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h2><p><code>stoi</code> 转换为int</p><p><code>stod</code> 转换为double</p><p><code>stof</code> 转换为float</p><p><code>stold</code> 转换为long double</p><p><code>stol</code> 转换为long</p><p><code>stoll</code> 转换为long long</p><p><code>stoul</code> 转换为unsigh long</p><p><code>stoull</code> 转换为unsigh long long</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cctype头文件中的函数</title>
      <link href="undefined/5c3c6ef1/"/>
      <url>undefined/5c3c6ef1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>判断元素是否属于某个类型</p></blockquote><span id="more"></span><p><code>isalpha</code> 大小写字母</p><p><code>islower</code> 小写字母</p><p><code>isupper</code> 大写字母</p><p><code>isdigit</code> 数字</p><p><code>isalnum</code> 大小写字母，数字</p><p><code>isblank</code> space 和 \t</p><p><code>isspace</code> space 和 \t，\n，\r</p><p><code>tolower</code> 转换为小写字母</p><p><code>toupper</code> 转换为大写字母</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1015 德才论</title>
      <link href="undefined/dca58f07/"/>
      <url>undefined/dca58f07/</url>
      
        <content type="html"><![CDATA[<blockquote><p>排序</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><p>输入格式：</p><p>输入第一行给出 3 个正整数，分别为：N（≤105），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。</p><p>随后 N 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><p>输出格式：</p><p>输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>参考柳神的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num, a, b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(struct node a, struct node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.a + a.b != b.a + b.b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (a.a + a.b) &gt; (b.a + b.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.a != b.a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.a &gt; b.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    m = n;</span><br><span class="line">    vector&lt;node&gt; v[<span class="number">4</span>];</span><br><span class="line">    node t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t.num &gt;&gt; t.a &gt;&gt; t.b;</span><br><span class="line">        <span class="keyword">if</span> (t.a &lt; a || t.b &lt; a)</span><br><span class="line">        &#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &gt;= b &amp;&amp; t.b &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">0</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &gt;= b &amp;&amp; t.b &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">1</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &lt; b &amp;&amp; t.b &lt; b &amp;&amp; t.a &gt;= t.b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">2</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v[<span class="number">3</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; v[i][j].num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j].a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j].b &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1014 福尔摩斯的约会</title>
      <link href="undefined/65d96382/"/>
      <url>undefined/65d96382/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串处理</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>大侦探福尔摩斯接到一张字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间 <code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><p>输入格式：</p><p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p><p>输出格式：</p><p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b, c, d;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> pos, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; i &lt; b.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; (a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;G&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">0</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; i &lt; b.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; ((a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;N&#x27;</span>) || <span class="built_in">isdigit</span>(a[i])))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">1</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; c.<span class="built_in">length</span>() &amp;&amp; j &lt; d.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[j] == d[j] &amp;&amp; <span class="built_in">isalpha</span>(c[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    string week[<span class="number">7</span>] = &#123;<span class="string">&quot;MON &quot;</span>, <span class="string">&quot;TUE &quot;</span>, <span class="string">&quot;WED &quot;</span>, <span class="string">&quot;THU &quot;</span>, <span class="string">&quot;FRI &quot;</span>, <span class="string">&quot;SAT &quot;</span>, <span class="string">&quot;SUN &quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">isdigit</span>(t[<span class="number">1</span>]) ? t[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> : t[<span class="number">1</span>] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; week[t[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d&quot;</span>, m, pos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理 </tag>
            
            <tag> PAT乙级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1013 数素数</title>
      <link href="undefined/7a6aca52/"/>
      <url>undefined/7a6aca52/</url>
      
        <content type="html"><![CDATA[<blockquote><p>素数</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>令 $P_i$ 表示第 $i$ 个素数。现任给两个正整数 $M$ ≤ $N$ ≤ $10_4$，请输出 $P_M$ 到 $P_N$ 的所有素数。</p><p>输入格式：</p><p>输入在一行中给出 $M$ 和 $N$，其间以空格分隔。</p><p>输出格式：</p><p>输出从 $P_M$ 到 $P_N$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 27</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题与上一道题都没有能熟练使用 <code>vector</code>，另外记忆一下 <code>isprime</code> 的使用</p><p>我乱糟糟的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, k = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span> (k &gt;= m &amp;&amp; k &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">if</span> (l % <span class="number">10</span> != <span class="number">1</span>)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout &lt;&lt; i;</span><br><span class="line">                <span class="keyword">if</span> (l % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">                    cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柳神的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, N, num = <span class="number">2</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span> (cnt &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprime</span>(num))</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= M)</span><br><span class="line">                v.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]);</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1012 数字分类</title>
      <link href="undefined/77a65920/"/>
      <url>undefined/77a65920/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li>$A_1$ = 能被 5 整除的数字中所有偶数的和；</li><li>$A_2$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1$ − $n_2$ + $n_3$​​ − $n_4$​​ ⋯；</li><li>$A_3$ = 被 5 除后余 2 的数字的个数；</li><li>$A_4$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li>$A_5$ = 被 5 除后余 4 的数字中最大数字。</li></ul><p>输入格式：</p><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$，随后给出 $N$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><p>输出格式：</p><p>对给定的 $N$ 个正整数，按题目要求计算 $A_1$​ ~ $A_5$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><p>输入样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure><p>输出样例 1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><p>输入样例 2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><p>输出样例2 ：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我乱糟糟的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a1, a3, a4, a5, i, j;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a2</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; m % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            a1 += m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">1</span>)</span><br><span class="line">            a2[i++] = m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">2</span>)</span><br><span class="line">            a3++;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a4 += m;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">4</span> &amp;&amp; a5 &lt; m)</span><br><span class="line">            a5 = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b1 = a2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> b2;</span><br><span class="line">    <span class="keyword">if</span> (a4 != <span class="number">0</span>)</span><br><span class="line">        b2 = (<span class="keyword">double</span>)a4 / j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            b1 -= a2[k];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b1 += a2[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a1 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (b1 != <span class="number">0</span> || i != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; b1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a3 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a3;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)b2 != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>, b2);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a5 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a5;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柳神的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, num, A1 = <span class="number">0</span>, A2 = <span class="number">0</span>, A5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> A4 = <span class="number">0.0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        v[num % <span class="number">5</span>].<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; v[i][j] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                A1 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                A2 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                A2 -= v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">                A4 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span> &amp;&amp; v[i][j] &gt; A5)</span><br><span class="line">                A5 = v[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; A1 == <span class="number">0</span> || i != <span class="number">0</span> &amp;&amp; v[i].<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A1);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A2);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[<span class="number">2</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f&quot;</span>, A4 / v[<span class="number">3</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1011 A+B和C</title>
      <link href="undefined/429323b4/"/>
      <url>undefined/429323b4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定区间 [−$2^{31}$, $2^{​31}$]内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</p><p>输入格式：</p><p>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p><p>输出格式：</p><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 A+B&gt;C，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (a + b &gt; c)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;true&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;false&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1010 一元多项式求导</title>
      <link href="undefined/9d6225b6/"/>
      <url>undefined/9d6225b6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计函数求一元多项式的导数。（注：$x^n$（n为整数）的一阶导数为$nx^{n−1}$​。）</p><p>输入格式:</p><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><p>输出格式:</p><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; n*m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m<span class="number">-1</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;0 0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1009 说反话</title>
      <link href="undefined/88699ef4/"/>
      <url>undefined/88699ef4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串处理</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><p>输入格式：</p><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><p>输出格式：</p><p>每个测试用例的输出占一行，输出倒序后的句子。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用栈来实现说反话</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack&lt;string&gt; v;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s) v.<span class="built_in">push</span>(s);</span><br><span class="line">    cout &lt;&lt; v.<span class="built_in">top</span>();</span><br><span class="line">    v.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!v.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v.<span class="built_in">top</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理 </tag>
            
            <tag> PAT乙级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构（一）</title>
      <link href="undefined/167cd958/"/>
      <url>undefined/167cd958/</url>
      
        <content type="html"><![CDATA[<blockquote><p>链表，双向链表，栈和队列</p></blockquote><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// head 表示头结点的下标</span></span><br><span class="line"><span class="comment">// e[i] 表示节点i的值</span></span><br><span class="line"><span class="comment">// ne[i] 表示节点i的next指针是多少</span></span><br><span class="line"><span class="comment">// idx 存储当前已经用到了哪个点</span></span><br><span class="line"><span class="keyword">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标是k的点后面的点删掉</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k, x;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i != <span class="number">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1008 数组元素循环右移问题</title>
      <link href="undefined/93960f0b/"/>
      <url>undefined/93960f0b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个数组A中存有 $N$（$N$ &gt; 0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移 $M$（$M$ $\geq$ 0）个位置，即将A中的数据由（$A_0$ $A_1$ ……$A_{N-1}$）变换为 （$A_{N-M}$ …… $A_{N-1}$ $A_0$ $A_1$ …… $A_{N-M-1}$）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><p>输入格式：</p><p>每个输入包含一个测试用例，第1行输入N ( 1 $\leq$ N $\leq$ 100)、M（M $\geq$ 0）；第2行输入N个整数，之间用空格分隔。</p><p>输出格式：</p><p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 1 2 3 4 </span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="about:blank#%E9%A2%98%E8%A7%A3" title="题解"></a>题解</h2><p>WA代码（未考虑全面）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != n - m) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柳神代码</p><p>分析：数组长度为n，要想把数组循环右移m位，只需要先将整个数组a倒置，再将数组前m位倒置， 最后将数组后n-m位倒置即可完成循环右移m位～reverse函数可以实现将⼀个数组或者vector中元素倒置，这个函数在algorithm头文件中～（如果m大于n，那么循环右移m位相当于循环右移m%n位，因为 那些n倍数位的移动是多余的，所以在使用m之前，先将m = m%n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    m %= n;</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a), <span class="built_in">begin</span>(a) + n);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a), <span class="built_in">begin</span>(a) + m);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a) + m, <span class="built_in">begin</span>(a) + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; a[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1007 素数对猜想</title>
      <link href="undefined/bb78715c/"/>
      <url>undefined/bb78715c/</url>
      
        <content type="html"><![CDATA[<blockquote><p>素数</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>让我们定义 $d_n$ 为： $d_n$ = $p_{n+1}$ – $p_n$，其中 $p_i$ 是第 $i$ 个素数。显然有 $d_1$ = 1 且对于 n &gt; 1有 $d_n$ 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数 $N$ (&lt; 105)，请计算不超过 $N$ 的满足猜想的素数对的个数。</p><p>输入格式：</p><p>每个测试输入包含1个测试用例，给出正整数N。</p><p>输出格式：</p><p>每个测试用例的输出占一行，不超过N的满足猜想的素数对的个数。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sushu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sushu</span>(i - <span class="number">2</span>) &amp;&amp; <span class="built_in">sushu</span>(i)) cnt++;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1006 换个格式输出整数</title>
      <link href="undefined/decf7eb4/"/>
      <url>undefined/decf7eb4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串处理</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用“12…n”来表示个位数字n（&lt;10），换个格式来输出任⼀个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。</p><p>输入格式：</p><p>每个测试输入包含1个测试用例，给出正整数 n（&lt;1000）。</p><p>输出格式：</p><p>每个测试用例的输出占一行，用规定的格式输出n。</p><p>输入样例1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure><p>输出样例1：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><p>输入样例2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure><p>输出样例2：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分别用a, b, c存储百位，十位和个位</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a = n / <span class="number">100</span>;</span><br><span class="line">    b = n % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">    c = n % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) cout &lt;&lt; <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++) cout &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柳神代码</p><p>分析：因为n小于1000，所以数字不会超过百位～输入数据首先保存在a中，然后将a的每一个数字保存在int b[3]中，然后将b[2]、b[1]、b[0]中存储的数字看作输出次数依次输出B、S和12..b[0]～</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, i = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        b[i++] = a % <span class="number">10</span>;</span><br><span class="line">        a = a / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">2</span>]; k++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">1</span>]; k++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">0</span>]; k++)</span><br><span class="line">        cout &lt;&lt; k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理 </tag>
            
            <tag> PAT乙级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1005 继续(3n+1)猜想</title>
      <link href="undefined/d0f5313/"/>
      <url>undefined/d0f5313/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hash散列</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。</p><p>现在给定⼀系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><p>输入格式：</p><p>每个测试输入包含1个测试用例，第1行给出⼀个正整数K(&lt;100)，第2行给出K个互不相同的待验证的正整数n(1&lt;n&lt;=100)的值，数字间用空格隔开。</p><p>输出格式：</p><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对每⼀个输⼊的数字n进行验证，把验证过的数字对应的arr标记为1，而最开始验证的数字对应的arr仍为0。对这些输入的数字从大到小排序，输出所有arr=0的数字即为关键数字（即需要验证的数字）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        v[i] = n;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) n = <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[n] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            arr[n] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[v[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; v[i];</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> Hash散列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1004 成绩排名</title>
      <link href="undefined/e6d09e95/"/>
      <url>undefined/e6d09e95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>查找元素</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><p>输入格式：</p><p>每个测试输入包含1个测试用例，格式为</p><p>第1行：正整数n</p><p>第2行：第1个学生的姓名 学号 成绩</p><p>第3行：第2个学生的姓名 学号 成绩</p><p>… … …</p><p>第n+1行：第n个学生的姓名 学号 成绩</p><p>其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的⼀个整数，这里保证在⼀组测试用例中没有两个学生的成绩是相同的。</p><p>输出格式：</p><p>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。</p><p>输入样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">Joe Math990112 <span class="number">89</span></span><br><span class="line">Mike CS991301 <span class="number">100</span></span><br><span class="line">Mary EE990830 <span class="number">95</span></span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>相当于找出最大值和最小值的变形吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    string name, num, maxname, minname, maxnum, minnum;</span><br><span class="line">    <span class="keyword">int</span> grade, maxgrade = <span class="number">-1</span>, mingrade = <span class="number">101</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; name &gt;&gt; num &gt;&gt; grade;</span><br><span class="line">        <span class="keyword">if</span> (grade &gt; maxgrade) &#123;</span><br><span class="line">            maxgrade = grade;</span><br><span class="line">            maxname = name;</span><br><span class="line">            maxnum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(grade &lt; mingrade) &#123;</span><br><span class="line">            mingrade = grade;</span><br><span class="line">            minname = name;</span><br><span class="line">            minnum = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; maxname &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; maxnum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; minname &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; minnum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 查找元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1003 我要通过</title>
      <link href="undefined/d949a5c0/"/>
      <url>undefined/d949a5c0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数学</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。<br>得到“答案正确”的条件是：</p><ol><li> 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；</li><li> 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li><li> 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</li></ol><p>现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。</p><p>输入格式：</p><p>每个测试输入包含1个测试用例。第1行给出一个自然数n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。</p><p>输出格式：</p><p>每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分析：</p><p>任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；<br>那么正确的有这些：</p><p>PAT</p><p>APATA</p><p>AAPATAA</p><p>AAAPATAAA</p><p>…不说了，就是中间⼀个A左右加上等量的A（不加也行）都是正确的。</p><p>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母A组成的字符串。</p><p>拿上面的那几个正确的举例⼦，那么正确的有这些：</p><p>PAT —— 对于 aPbTc 来说ac是空，b是A。所以 PAAT 是正确的。同理PAAAAAT中间加多少个A都是正确哒～</p><p>APATA —— 对于aPbTc来说，abc都是A。所以 APAATAA 是正确的。再类推⼀下，那么 APAAATAAA 是正<br>确的。</p><p>AAPATAA —— 对于aPbTc来说，a和c是AA，b是A。所以AAPAATAAAA是正确的，再类推⼀下，AAPAAATAAAAAA 是正确的～～</p><p>所以说规律就是，可以在P和T中间加A并且在T后面加A，要求必须是，中间加上⼀个A，末尾就得加上几倍的(P前面A的那个字符串)。换句话说就是，中间的A的个数如果是3，那么末尾的A的个数就得是开头A的个数的3倍。很巧，当中间A为一个的时候，末尾和开头A的个数必须相等正好是第二条的要求～</p><p>一句话总结字符串的要求：只能有一个P一个T，中间末尾和开头可以随便插入A。但是必须满足开头的A的个数 * 中间的A的个数 = 结尾的A的个数，而且P和T中间不能没有A～</p><p>（以上摘录于柳神的博客）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, p = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            m[s[j]]++;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;P&#x27;</span>) p = j;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;T&#x27;</span>) t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m[<span class="string">&#x27;P&#x27;</span>] == <span class="number">1</span> &amp;&amp; m[<span class="string">&#x27;A&#x27;</span>] != <span class="number">0</span> &amp;&amp; m[<span class="string">&#x27;T&#x27;</span>] == <span class="number">1</span> &amp;&amp; m.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; t-p != <span class="number">1</span> &amp;&amp; p * (t-p<span class="number">-1</span>) == s.<span class="built_in">length</span>()-t<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素的显示模式</title>
      <link href="undefined/78f3576b/"/>
      <url>undefined/78f3576b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍css中元素的显示模式</p></blockquote><span id="more"></span><h3 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h3><h4 id="什么是元素显示模式"><a href="#什么是元素显示模式" class="headerlink" title="什么是元素显示模式"></a>什么是元素显示模式</h4><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页</p><p>元素显示模式就是元素（标签）以什么方式进行显示，比如 &lt; div &gt; 自己占一行，比如一行可以放多个 &lt; span &gt; </p><p>html元素一般分为块元素和行内元素两种类型</p><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>常见的块元素有： &lt;h1&gt; ~ &lt;h6&gt; 、 &lt;p&gt; 、 &lt;div&gt; 、 &lt;li&gt; </p><p>特点：</p><ul><li>独占一行</li><li>高度、宽度，外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素</li></ul><p>注意：</p><ul><li>文字类元素内不能使用块级元素</li><li>&lt;p&gt; 标签主要用于存放文字，因此 &lt;p&gt; 里面不能放块级元素，特别是不能放 &lt;div&gt; </li><li>同理， &lt;h1&gt; ~ &lt;h6&gt; 等都是文字类块级标签，里面也不能放其它块级元素</li></ul><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>常见的行内元素有 &lt;a&gt; 、 &lt;strong&gt; 、 &lt;b&gt; 、 &lt;em&gt; 、 &lt;i&gt; 、 &lt;del&gt; 、 &lt;s&gt; 、 &lt;ins&gt; 、 &lt;u&gt; 、 &lt;span&gt; ，有时也将行内元素称为内联元素</p><p>特点：</p><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素</li></ul><p>注意：</p><ul><li>链接里不能再放链接</li><li>特殊情况链接 &lt;a&gt; 里面可以放块级元素，但是给 &lt;a&gt; 转换一下块级模式最安全</li></ul><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>在行内元素中有几个特殊的标签—— &lt;img/&gt; 、&lt;input/&gt; 、&lt;td&gt;，它们同时具有块元素和行内元素的特点，可称它们为行内块元素</p><p>特点：</p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）</li><li>默认宽度就是它本身内容的宽度（行内元素特点）</li><li>高度，行高，外边距及内边距都可以控制（块级元素特点）</li></ul><h4 id="snipaste的使用"><a href="#snipaste的使用" class="headerlink" title="snipaste的使用"></a>snipaste的使用</h4><p>snipaste是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上</p><p>常用快捷方式：</p><ul><li>F1可以截图，同时测量大小，设置箭头，书写文字等</li><li>F3在桌面置顶显示</li><li>点击图片，Alt可以取色（按下Shift可以切换取色模式）</li><li>按下Esc取消图片显示</li></ul><h4 id="小技巧：单行文字垂直居中的代码"><a href="#小技巧：单行文字垂直居中的代码" class="headerlink" title="小技巧：单行文字垂直居中的代码"></a>小技巧：单行文字垂直居中的代码</h4><p>让文字的行高等于盒子的高度</p><h3 id="元素显示模式的相互转换代码"><a href="#元素显示模式的相互转换代码" class="headerlink" title="元素显示模式的相互转换代码"></a><u>元素显示模式的相互转换代码</u></h3><p>display: block;</p><p>display: inline;</p><p>display: inline-block;  //转换为行内块</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/*把行内元素a转换为块级元素*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vector容器</title>
      <link href="undefined/4ac124aa/"/>
      <url>undefined/4ac124aa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍vector容器</p></blockquote><span id="more"></span><h3 id="vector基本概念"><a href="#vector基本概念" class="headerlink" title="vector基本概念"></a>vector基本概念</h3><p>功能：vector数据结构和数组非常相似，也称为单端数组</p><p>区别：数组是静态空间，而vector可以动态扩展</p><p>动态扩展：并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间。vector迭代器是支持随机访问的迭代器</p><h3 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h3><p>功能：创建vector容器</p><p>函数原型：</p><ul><li><code>vector&lt;T&gt; v;</code>  //采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(),v.end());</code>  //将v[begin(),end())区间中的元素拷贝给本身(注意区间为前闭后开)</li><li><code>vector(n,elem);</code>  //构造函数将n个elem拷贝给本身</li><li><code>vector(const vector &amp;vec);</code>  //拷贝构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的构造</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;<span class="comment">//默认构造 无参构造</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="comment">//通过区间方式进行构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v2</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v2);<span class="comment">//均输出0到9</span></span><br><span class="line">    <span class="comment">//n个elem方式构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v3</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v3);<span class="comment">//输出10个100</span></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v4</span>(v3);</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h3><p>函数原型：</p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code>  //重载等号操作符</li><li><code>assign(beg,end);</code>  //将[beg,end)区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code>  //将n个elem拷贝赋值给本身</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="comment">//赋值 operator=</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">    v2 = v1;</span><br><span class="line">    <span class="built_in">printVector</span>(v2);</span><br><span class="line">    <span class="comment">//assign</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">    v3.<span class="built_in">assign</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line">    <span class="comment">//n个elem方式赋值</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">    v4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h3><p>函数原型：</p><p><code>empty();</code>//判断容器是否为空</p><p><code>capacity();</code>  //容器的容量</p><p><code>size();</code> //返回容器中元素的个数</p><p><code>resize(int num);</code>  //重新指定容器的长度为num，若容器变长，则以默认值填充新位置；若容器变短，则末尾超出容器长度的元素被删除</p><p><code>resize(int num,elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置；若容器变短，则末尾超出容器长度的元素被删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的容量和大小操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> (v1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1的容量为：&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1的大小为：&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新指定大小</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">15</span>);<span class="comment">//利用重载版本，可以指定默认填充值，参数2</span></span><br><span class="line">    <span class="built_in">printVector</span>(v1);<span class="comment">//如果重新指定的比原来长了，默认用0填充原来的位置</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v1);<span class="comment">//如果重新指定的比原来的短了，超出部分会删除掉</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>string容器</title>
      <link href="undefined/d1b5b4b6/"/>
      <url>undefined/d1b5b4b6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍string容器</p></blockquote><span id="more"></span><h3 id="string基本概念"><a href="#string基本概念" class="headerlink" title="string基本概念"></a>string基本概念</h3><ul><li>string是C++风格的字符串，而string本质上是一个类，类内部封装了char *，管理这个字符串，是一个char *型的容器</li><li>char*是一个指针</li></ul><p>特点:</p><ul><li>string类内部封装了很多成员方法，例如：查找find，拷贝copy，删除delete替换repliace，插入insert</li><li>string管理char *所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</li></ul><h3 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h3><p>构造函数原型：</p><ul><li><p><code>string();</code>   //创建一个空的字符串 例如：string str;</p><p><code>string(const char* s);</code>  //使用字符串s初始化</p></li><li><p><code>string(const string&amp; str);</code>  //使用一个string对象初始化另一个string对象</p></li><li><p><code>string(int n,char c)</code>  //使用n个字符c初始化</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s1;<span class="comment">//默认构造</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h3><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code>  //char* 类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code>  //把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code>  //字符赋给当前的字符串</li><li><code>string&amp; assign=(const char *s);</code>  //把字符串s赋给当前的字符串</li><li><code>string&amp; assign=(const char *s,int n);</code>  //把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign=(const char&amp; s);</code>  //把字符串s赋给当前的字符串</li><li><code>string&amp; assign(int n,char c);</code>  //用n个字符c赋给当前字符串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1;</span><br><span class="line">    str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str2;</span><br><span class="line">    str2 = str1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    string str3;</span><br><span class="line">    str3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    string str4;</span><br><span class="line">    str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">    string str5;</span><br><span class="line">    str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line">    string str6;</span><br><span class="line">    str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line">    string str7;</span><br><span class="line">    str7.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>operator方式较为常见</p><h3 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h3><p>函数原型：</p><ul><li><code>string&amp; operator+=(const char* str);</code>  //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code>  //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>  //重载+=操作符</li><li><code>string&amp; append(const char *s);</code>  //把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s,int n);</code>  //把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>  //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s,int pos,int n);</code>  //字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">    str1 += <span class="string">&quot;爱玩游戏&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    str1 += <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str2 = <span class="string">&quot;LOL DNF&quot;</span>;</span><br><span class="line">    str1 += str2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str3 = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot; love &quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot;game abcde&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//str3.append(str2);</span></span><br><span class="line">    str3.<span class="built_in">append</span>(str2, <span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h3><p>查找：查找指定字符串是否存在</p><p>替换：在指定位置替换字符串</p><p>函数原型：</p><ul><li><code>int find(const string&amp; str,int pos = 0) const;</code>  //查找str第一次出现位置，从pos开始查找</li><li><code>int find(const char* s,int pos = 0) const;</code>  //查找s第一次出现位置，从pos开始查找</li><li><code>int find(const char* s,int pos,int n) const;</code>  //从pos位置查找的前n个字符第一次位置</li><li><code>int find(const char c,int pos = 0) const;</code>  //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str,int pos = npos) const;</code>  //查找str最后一次位置，从pos开始查找</li><li><code>int rfind(const char* s,int pos = npos) const;</code>  //查找s最后一次出现位置，从pos开始查找</li><li><code>int rfind(const char* s,int pos,int n) const;</code>  //从pos查找s的前n个字符最后一次出现位置</li><li><code>int rfind(const char c,int pos = 0) const;</code>  //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos,int n,const string&amp; str);</code>  //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos,int n,const char* s);</code>  //替换从pos开始n个字符为字符串s</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到字符串&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到字符串，pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//rfind</span></span><br><span class="line">    str1.<span class="built_in">rfind</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 替换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    str1.<span class="built_in">replace</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);<span class="comment">//此处替换4个1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>find从左往右查，rfind从右往左查找</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h3 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h3><p>根据ASCII码比较，=返回0，&gt;返回1，&lt;返回-1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串比较</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h3><ul><li><code>char&amp; operator[](int n);</code>  //通过[]方式取字符</li><li><code>char&amp; at(int n);</code>  //通过at方法获取字符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string字符存取</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//1 通过[]访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//2 通过at方式访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; str.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//修改单个字符</span></span><br><span class="line">    str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//xello</span></span><br><span class="line">    str.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h3><ul><li><code>string&amp; insert(int pos,const char* s);</code>  //插入字符串</li><li><code>string&amp; insert(int pos,const string&amp; str);</code>  //插入字符串</li><li><code>string&amp; insert(int pos,int n,char c);</code>  //在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos,int n = npos);</code>  //删除从pos开始的n个字符</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串的插入和删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="comment">//h111ello</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入和删除的起始下标都是从0开始</p><h3 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h3><p>从字符串中获取想要的子串</p><p>函数原型：</p><ul><li><code>string substr(int pos = 0,int n=npos) const;</code>  //返回由pos开始的n个字符组组成的字符串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string求子串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    string subStr = str.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实用操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string email = <span class="string">&quot;zhangsan@sina.com&quot;</span>;</span><br><span class="line">    <span class="comment">//从邮件地址中 获取 用户名信息</span></span><br><span class="line">    <span class="keyword">int</span> pos = email.<span class="built_in">find</span>(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">    string userName = email.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;userName = &quot;</span> &lt;&lt; userName &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl初识</title>
      <link href="undefined/49ab1d75/"/>
      <url>undefined/49ab1d75/</url>
      
        <content type="html"><![CDATA[<blockquote><p>stl总体的简单认识</p></blockquote><span id="more"></span><h2 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a><u>STL六大组件</u></h2><p>容器，算法，迭代器，仿函数，适配器（配接器），空间配置器</p><p><strong>容器</strong>： 各种数据结构，如vector，list，deque，set，map等，用来存放数据</p><ul><li>序列式容器：强调值的排序，序列式容器中每个元素均有固定的位置</li><li>关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系</li></ul><p><strong>算法</strong>： 各种常用的算法，如sort，find，copy，for_each等。分为质变算法和非质变算法</p><ul><li>质变算法：是指运算过程中会更改区间的元素的内容。例如拷贝，替换，删除等等</li><li>非质变算法：是指运算过程中不会更改区间的元素内容，例如查找，计数，遍历，寻找极值等等</li></ul><p><strong>迭代器</strong>： 扮演了容器与算法之间的胶合剂</p><p><strong>仿函数</strong>： 行为类似函数，可作为算法的某种策略</p><p><strong>适配器</strong>： 一种用来修饰容器或者仿函数或迭代器接口的东西</p><p><strong>空间配置器</strong>： 负责空间的配置和管理</p><h2 id="容器算法迭代器初识"><a href="#容器算法迭代器初识" class="headerlink" title="容器算法迭代器初识"></a><u>容器算法迭代器初识</u></h2><h3 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h3><p>容器：vector</p><p>算法：for_each</p><p>迭代器：vector<int>::iterator</p><pre><code>v.begin()返回迭代器，这个迭代器指向容器中的第一个元素v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置v.rend()返回迭代器，这个迭代器指向容器中的第一个元素的上一个位置v.rbegin()返回迭代器，这个迭代器指向容器中的最后一个元素insert()</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器存放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个vector容器，数组</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="comment">//向容器插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line">    <span class="comment">//通过迭代器来访问容器中的数据</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();</span><br><span class="line">    <span class="comment">//第一种遍历方式</span></span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd) &#123;</span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种遍历方式</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三种遍历方式</span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector存放自定义数据类型"><a href="#vector存放自定义数据类型" class="headerlink" title="vector存放自定义数据类型"></a>vector存放自定义数据类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器中存放自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; (*it).m_Age &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型，指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Person*&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p4);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p5);</span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person*&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; (*it)-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; (*it)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vector容器嵌套容器"><a href="#vector容器嵌套容器" class="headerlink" title="vector容器嵌套容器"></a>vector容器嵌套容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建大容器</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;v;</span><br><span class="line">    <span class="comment">//创建小容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">    <span class="comment">//向小容器中添加数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        v2.<span class="built_in">push_back</span>(i + <span class="number">2</span>);</span><br><span class="line">        v3.<span class="built_in">push_back</span>(i + <span class="number">3</span>);</span><br><span class="line">        v4.<span class="built_in">push_back</span>(i + <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将小容器插入到大容器中</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v4);</span><br><span class="line">    <span class="comment">//通过大容器，把所有数据遍历一遍</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//(*it)-----容器vector&lt;int&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator vit = (*it).<span class="built_in">begin</span>(); vit != (*it).<span class="built_in">end</span>(); vit++) &#123;</span><br><span class="line">            cout &lt;&lt; *vit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法（一）</title>
      <link href="undefined/83fa91fc/"/>
      <url>undefined/83fa91fc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>排序和二分的笔记</p></blockquote><span id="more"></span><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>基于分治</p><ul><li>确定分界点：q[l],q[(l+r)/2], q[r]随机  ☆</li><li>调整区间</li><li>递归处理左右两端</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> x = q[l], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>也是基于分治，但是有差别</p><ul><li>确定分界点 mid = (l + r) / 2</li><li>递归排序left, right</li><li>归并——合二为一  ☆<br>时间复杂度$O(nlogn)$</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> q[N], tmp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">1</span>, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; i &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j])</span><br><span class="line">            tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= r; i++, j++)</span><br><span class="line">        q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1002写出这个数</title>
      <link href="undefined/78c3da96/"/>
      <url>undefined/78c3da96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>字符串处理</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每⼀位数字。</p><p>输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。</p><p>输出格式：</p><p>在一行内输出n的各位数字之和的每一位，拼音数字间有1空格，但一行中最后一个拼音数字后没有空格。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这里考虑的数值比较大，通过类似高精度的方法把sum的每一位数字都存到b数组里，最后方便输出</p><p>先开始想直接用字符串，而不是开数组，结果没有成功，只能开了字符串数组，至于输出拼音，就是用if来打表了，也可以把拼音存到数组里，剩下的应该没什么问题~~</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prt</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;yi&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;er&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;san&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;si&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;liu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;qi&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ba&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;jiu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">105</span>], b[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        sum += a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum) &#123;</span><br><span class="line">        b[i++] = sum % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != i - <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">Prt</span>(b[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串处理 </tag>
            
            <tag> PAT乙级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级-1001 害死人不偿命</title>
      <link href="undefined/748ff171/"/>
      <url>undefined/748ff171/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模拟</p></blockquote><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p><p>输入格式：</p><p>每个测试输⼊包含1个测试用例，即给出自然数n的值。</p><p>输出格式：</p><p>输出从n计算到1需要的步数。</p><p>输入样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>一道初学者的题，注意用step记录一下步数，然后循环就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, step = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; step &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528">题目链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT乙级 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="undefined/79666db/"/>
      <url>undefined/79666db/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="203f8048f9b7bb626e00ec489907b8c46bb84267de2517c2ca29d1fb4182e7c3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码（打赏五元备注邮箱以及文章，私发密码）</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复合选择器</title>
      <link href="undefined/9d2ca33f/"/>
      <url>undefined/9d2ca33f/</url>
      
        <content type="html"><![CDATA[<blockquote><p>详细介绍复合选择器</p></blockquote><span id="more"></span><p>css中根据选择器的类型分为基础选择器和复合选择器</p><ul><li>复合选择器可以更准确、更高效的选择目标元素</li><li>复合选择器是由两个或多个基础选择器，通过不同方式组合而成的</li><li>常用的复合选择器包括：后代选择器，子选择器，并集选择器，伪类选择器等等</li></ul><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器，可以选择父元素里面子元素，其写法是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代</p><p>语法：元素1  元素2 { 样式声明 }</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//改变<span class="selector-tag">ol</span>中的<span class="selector-tag">li</span></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素1，元素2可以为任何基础选择器</p><h2 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素</p><p>语法：元素1 &gt; 元素2 { 样式声明 }</p><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于集体声明</p><p>并集选择器是各选择器通过英文逗号(,)连接而成，任何形式的选择器都可以作为并集选择器的一部分，并集选择器习惯竖着写</p><p>语法：元素1，元素2 { 样式声明 }</p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊的效果，或选择第1个，第n个元素</p><p>伪类选择器书写最大的特点是用冒号（：）表示，比如：:hover、:first-child</p><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> //选择所有未访问的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>  //选择所有已被访问的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>  //选择鼠标指针位于其上的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  //选择活动链接（鼠标按下未弹起的链接）</span><br></pre></td></tr></table></figure><h3 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h3><p>:focus伪类选择器用于选取获得焦点的表单元素</p><p>焦点就是光标，一般情况 &lt; input &gt; 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span> :yellow;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景</title>
      <link href="undefined/5199d8b5/"/>
      <url>undefined/5199d8b5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍css中的背景设置</p></blockquote><span id="more"></span><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>background-color: transparent(透明的)，也可以改变为其他颜色</p><h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>background-image属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者超大的背景图片，优点是非常便于控制位置</p><p>background-image: none/ url(地址);</p><h2 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h2><p>backgrounf-repeat: repeat | no-repeat | repear-x | repeat-y</p><h2 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h2><p>background-position: x  y;</p><p>参数代表的意思是：x坐标和y坐标。可以使用<strong>方位名词</strong>或者<strong>精确单位</strong> </p><table><thead><tr><th align="center">参数值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">length</td><td align="center">百分数|由浮点数字和单位标识符组成的长度值</td></tr><tr><td align="center">position</td><td align="center">top|center|bottom|left|center|right</td></tr></tbody></table><ol><li>参数是方位名词<ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left top和top left效果一致</li><li>如果只指定了一个方位名词，另一个值忽略，则第二个值默认居中对齐</li></ul></li><li>参数是精确单位<ul><li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li><li>如果只指定一个数值，那该数值一个是x坐标，另一个默认垂直居中</li></ul></li><li>参数是混合单位<ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul></li></ol><h2 id="背景图像固定（背景附着）"><a href="#背景图像固定（背景附着）" class="headerlink" title="背景图像固定（背景附着）"></a>背景图像固定（背景附着）</h2><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动，后期可以制作视差滚动的效果</p><p>background-attachment: scroll|fixed</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">scroll</td><td align="center">背景图像是随对象内容滚动</td></tr><tr><td align="center">fixed</td><td align="center">背景图像固定</td></tr></tbody></table><h2 id="背景属性复合写法"><a href="#背景属性复合写法" class="headerlink" title="背景属性复合写法"></a>背景属性复合写法</h2><p>没有特定书写顺序，一般顺序为：</p><p>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p><h2 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h2><p>background: rgba(0, 0, 0, 0.3);</p><ul><li>最后一个参数是alpha透明度，取值范围在0~1之间</li><li>我们习惯把0.3的0省略掉，写为background: rgba(0, 0, 0, .3);</li><li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3新增属性，是IE9+版本浏览器才支持的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emmet语法</title>
      <link href="undefined/169e5e90/"/>
      <url>undefined/169e5e90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍一些方便书写的技巧</p></blockquote><span id="more"></span><p>emmet使用缩写，来提高html/css的编写速度</p><h2 id="快速生成html结构语法"><a href="#快速生成html结构语法" class="headerlink" title="快速生成html结构语法"></a>快速生成html结构语法</h2><ul><li><p>生成标签 直接输入标签名 按Tab键即可</p></li><li><p>如果想要生成多个相同标签，加上* 就可以，比如div*3就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用&gt; 比如ul&gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用+就可以了，比如fiv+p</p></li><li><p>如果生成带有类名或者id名字的，直接写.demo或者#two tab键就可以了</p></li><li><p>如果生成的div类名是有顺序的，可以用自增符号$</p></li><li><p>如果想要在生成的标签内部写内容可以用{ }表示</p><p>e.g. div$*5     div{文字} *5</p></li></ul><h2 id="快速生成CSS样式语法"><a href="#快速生成CSS样式语法" class="headerlink" title="快速生成CSS样式语法"></a>快速生成CSS样式语法</h2><p>输入简写的首字母，再按Tab键</p><h2 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h2><p>Shift+Ait+F或者“右键点击格式化文档”</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css三大特性</title>
      <link href="undefined/745215da/"/>
      <url>undefined/745215da/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍css的三大特性</p></blockquote><span id="more"></span><h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><ul><li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>子元素可以继承父元素的样式（text-, font-, line-这些元素的开头可以继承，以及color属性）</p><h3 id="行高的继承性"><a href="#行高的继承性" class="headerlink" title="行高的继承性"></a>行高的继承性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行高可以跟单位也可以不跟单位，如果子元素没有设置行高，则会继承父元素的行高为1.5，此时子元素的行高是：当前子元素的文字大小*1.5</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><table><thead><tr><th align="center">选择器</th><th align="center">选择器权重</th></tr></thead><tbody><tr><td align="center">继承或者 *</td><td align="center">0, 0, 0, 0</td></tr><tr><td align="center">标签选择器</td><td align="center">0, 0, 0, 1</td></tr><tr><td align="center">类选择器 伪类选择器</td><td align="center">0, 0, 1, 0</td></tr><tr><td align="center">ID选择器</td><td align="center">0, 1, 0, 0</td></tr><tr><td align="center">行内样式style = “ “</td><td align="center">1, 0, 0, 0</td></tr><tr><td align="center">!important</td><td align="center">无穷大</td></tr></tbody></table><ul><li>权重由四位数字组成，但是不会有进位</li></ul><h3 id="权重的叠加"><a href="#权重的叠加" class="headerlink" title="权重的叠加"></a>权重的叠加</h3><p>复合选择器会有权重叠加，但不会进位</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的扩展（六）</title>
      <link href="undefined/b9c59154/"/>
      <url>undefined/b9c59154/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多态</p></blockquote><span id="more"></span><h2 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h2><h3 id="为什么要有多态"><a href="#为什么要有多态" class="headerlink" title="为什么要有多态"></a>为什么要有多态</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//岳不群</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuebuqun</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Yuebuqun</span>(string kongfu)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;kongfu = kongfu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span> <span class="comment">//标识修饰一个成员方法是一个虚函数。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;岳不群&quot;</span> &lt;&lt; <span class="string">&quot;使出了&quot;</span> &lt;&lt; kongfu &lt;&lt; <span class="string">&quot;打人&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string kongfu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//林平之继承了岳不群</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linpingzhi</span> :</span><span class="keyword">public</span> Yuebuqun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Linpingzhi</span>(string kongfu) :<span class="built_in">Yuebuqun</span>(kongfu)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果说父类中有一个虚函数是fight（），子类如果去重写这个虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;林平之&quot;</span> &lt;&lt; <span class="string">&quot;使出了&quot;</span> &lt;&lt; kongfu &lt;&lt; <span class="string">&quot;打人&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linghuchong</span> :</span><span class="keyword">public</span> Yuebuqun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Linghuchong</span>(string kongfu) :<span class="built_in">Yuebuqun</span>(kongfu)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;令狐冲 &quot;</span> &lt;&lt; <span class="string">&quot;使用了&quot;</span> &lt;&lt; kongfu &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在全局提供一个打斗的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fightPeople</span><span class="params">(Yuebuqun* hero)</span><span class="comment">//Yuebuqun *hero = xiaopp;  Yuebuqun *hero = xiaoyy;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用打人的方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hero-&gt;<span class="built_in">fight</span>();<span class="comment">//希望传递进来的如果是子类，调用子类的fight</span></span><br><span class="line">                  <span class="comment">//如果传递进来的是父类， 调用父类的fight</span></span><br><span class="line">                    <span class="comment">//这种行为就是 多态行为。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态发生的三个必要条件：</span></span><br><span class="line"><span class="comment">//1. 要有继承。</span></span><br><span class="line"><span class="comment">//2. 要有虚函数重写。</span></span><br><span class="line"><span class="comment">//3. 父类指针或引用指向子类对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Yuebuqun* xiaoyy = <span class="keyword">new</span> <span class="built_in">Yuebuqun</span>(<span class="string">&quot;葵花宝典&quot;</span>);</span><br><span class="line">    <span class="comment">//xiaoyy-&gt;fight();</span></span><br><span class="line">    Linpingzhi* xiaopp = <span class="keyword">new</span> <span class="built_in">Linpingzhi</span>(<span class="string">&quot;辟邪剑谱&quot;</span>);</span><br><span class="line">    <span class="comment">//xiaopp-&gt;fight();</span></span><br><span class="line">    Linghuchong* xiaoll = <span class="keyword">new</span> <span class="built_in">Linghuchong</span>(<span class="string">&quot;独孤九剑&quot;</span>);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaoyy);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaopp);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaoll);</span><br><span class="line">    <span class="comment">//编译器默认做了一个安全的处理。 编译器认为不管传递的是子类对象还是父类对象</span></span><br><span class="line">    <span class="comment">//如果统一执行父类d方法 那么是一定可以被成功执行。</span></span><br><span class="line">    <span class="keyword">delete</span> xiaoyy;</span><br><span class="line">    <span class="keyword">delete</span> xiaopp;</span><br><span class="line">    <span class="keyword">delete</span> xiaoll;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态案例及多态的意义"><a href="#多态案例及多态的意义" class="headerlink" title="多态案例及多态的意义"></a>多态案例及多态的意义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//英雄类</span></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪兽类</span></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//战斗方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">playerFight</span><span class="params">(Hero* hp, Monster* mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//多态对于编译器来讲的，也是一个动态联编，也是一个迟邦定</span></span><br><span class="line">    <span class="keyword">if</span> (hp-&gt;<span class="built_in">getAd</span>() &gt; mp-&gt;<span class="built_in">getAd</span>()) &#123; <span class="comment">//hp-&gt;getAd 发生了多态</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;英雄胜利， 怪兽被打死&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;英雄挂了，怪兽赢了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2020年</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BugHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;调用了bugHero的方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">66666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hero h;</span><br><span class="line">    Monster m;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;h, &amp;m);</span><br><span class="line">    AdvHero advH;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;advH, &amp;m);</span><br><span class="line">    BugHero bH;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;bH, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123; <span class="comment">//迟邦定</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &gt; 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &lt;= 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;p, <span class="string">&quot;A String..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;p;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() <span class="comment">//此刻会触发A()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;p, <span class="string">&quot;B String..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;p;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(A* ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ap-&gt;<span class="built_in">print</span>();<span class="comment">//在此发生多态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteFunc</span><span class="params">(A* ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> ap; <span class="comment">//此刻ap-&gt;~B() //~B() ---&gt; ~A()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//A *ap = new A;</span></span><br><span class="line">    <span class="comment">//func(ap);</span></span><br><span class="line">    B* bp = <span class="keyword">new</span> B;</span><br><span class="line">    <span class="built_in">func</span>(bp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">deleteFunc</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    B bObj;</span><br><span class="line">    <span class="comment">//bObj.~B();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载、重写、重定义"><a href="#重载、重写、重定义" class="headerlink" title="重载、重写、重定义"></a>重载、重写、重定义</h2><p>重载一定是同一个作用域下。重定义是发生在两个不同的类中，一个父类，一个子类</p><ul><li>普通函数重定义：父类的普通成员函数被子类重写</li><li>虚函数重写：如果父类的虚函数，被子类重写，就是虚函数重写，这个函数会发生多态</li></ul><h2 id="多态的实现原理"><a href="#多态的实现原理" class="headerlink" title="多态的实现原理"></a>多态的实现原理</h2><h3 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func(int ,int ,int )....&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :<span class="built_in">Parent</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child: func(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child :func(int ,int )...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child ::func(int ,int ,int )...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Parent *pp = new Parent(10);</span></span><br><span class="line">    <span class="comment">//Parent *cp = new Child(100, 200);</span></span><br><span class="line">    Parent* pp = <span class="keyword">new</span> <span class="built_in">Child</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">    pp-&gt;<span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//Parent ？ Child</span></span><br><span class="line">                    <span class="comment">//如果调用一个普通函数，编译器根本就不会查找虚函数表。</span></span><br><span class="line">                    <span class="comment">//只有你调用的函数，是虚函数的时候，才会去查找虚函数表</span></span><br><span class="line">    pp-&gt;<span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证vptr指针的存在"><a href="#验证vptr指针的存在" class="headerlink" title="验证vptr指针的存在"></a>验证vptr指针的存在</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent2::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parent p1;</span><br><span class="line">    Parent2 p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(p1) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p1) &lt;&lt; endl;<span class="comment">//多出来的4个字节就是vptr指针所占用的空间。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(p2) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vptr指针分布初始化"><a href="#vptr指针分布初始化" class="headerlink" title="vptr指针分布初始化"></a>vptr指针分布初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="父类指针和子类指针的步长"><a href="#父类指针和子类指针的步长" class="headerlink" title="父类指针和子类指针的步长"></a>父类指针和子类指针的步长</h3><h2 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="大哥看场子"><a href="#大哥看场子" class="headerlink" title="大哥看场子"></a>大哥看场子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="纯虚函数和多继承"><a href="#纯虚函数和多继承" class="headerlink" title="纯虚函数和多继承"></a>纯虚函数和多继承</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="面对抽象类编程案例"><a href="#面对抽象类编程案例" class="headerlink" title="面对抽象类编程案例"></a>面对抽象类编程案例</h2><h3 id="动物园"><a href="#动物园" class="headerlink" title="动物园"></a>动物园</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="电脑组装"><a href="#电脑组装" class="headerlink" title="电脑组装"></a>电脑组装</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的扩展（五）</title>
      <link href="undefined/dccbda8d/"/>
      <url>undefined/dccbda8d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>继承和派生</p></blockquote><span id="more"></span><h2 id="类和类之间的关系"><a href="#类和类之间的关系" class="headerlink" title="类和类之间的关系"></a>类和类之间的关系</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;funcA&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类B拥有类A的成员变量,B has A,//类B 依赖于类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//耦合度  高内聚  低耦合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类C的成员方法  需要类A的形参，C use A,//类C依赖于类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funC</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funC2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//D继承于A 类D如果是继承类A  类D is A.//类D继承于A耦合度很高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funcD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> :</span><span class="keyword">public</span> D &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承的基本概念"><a href="#继承的基本概念" class="headerlink" title="继承的基本概念"></a>继承的基本概念</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id, string name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; <span class="string">&quot;, name = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的学生表，增加score功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student2</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> score) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; <span class="string">&quot;, name = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;score = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过继承创建一个新的学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span> :</span><span class="keyword">public</span> Student &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student3</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> score) :<span class="built_in">Student</span>(id, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student::<span class="built_in">printS</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;score = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student3 <span class="title">s3</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>, <span class="number">80</span>)</span></span>;</span><br><span class="line">    s3.<span class="built_in">printS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承的方式"><a href="#继承的方式" class="headerlink" title="继承的方式"></a>继承的方式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.只要是父类中的private成员，不管是什么继承方式，儿子都访问不了</span></span><br><span class="line"><span class="comment">//2.如果是public继承，儿子中的访问控制权限保持不变</span></span><br><span class="line"><span class="comment">//3.如果是保护继承，儿子中父亲除了private成员，其余在儿子中都是protected</span></span><br><span class="line"><span class="comment">//4.如果是私有继承，儿子中父亲的除了private成员，其余在儿子中都是private成员</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> pub;<span class="comment">//在类的内部和外部都能访问</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> pro;<span class="comment">//在类的内部都可以访问，在类的外部不可以访问</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> pri;<span class="comment">//在类的内部可以访问，在类的外部不可以访问</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; pub &lt;&lt; endl; <span class="comment">//pub父类的public成员变量，在public继承类的内部,外部都可以访问</span></span><br><span class="line">        cout &lt;&lt; pro &lt;&lt; endl;<span class="comment">//pro 是父类protected成员变量 在public继承类的内部可以访问。外部访问不了 </span></span><br><span class="line">                            <span class="comment">//此时的pro在孙子能够访问，说此时pro不是private成员，而是protected成员</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; pri &lt;&lt; endl; //pri 是父类private成员变量 在public继承类的内部,外部不可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//孙子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubChild</span> :</span> <span class="keyword">public</span> Child</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; pro &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> :</span><span class="keyword">protected</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pub;<span class="comment">//此时pub通过protected继承 能够在类的内部访问。 </span></span><br><span class="line">            <span class="comment">//pub 在类的内部可以访问， 类的外部访问不了， 类的儿子可以访问</span></span><br><span class="line">            <span class="comment">//pub 就是protected成员</span></span><br><span class="line">        pro;<span class="comment">//pro和pub 是一样的性质，pro也是protected成员</span></span><br><span class="line">        <span class="comment">//pri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_child2</span> :</span><span class="keyword">public</span> Child2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pub;</span><br><span class="line">        pro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child3</span> :</span><span class="keyword">private</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        pub;<span class="comment">//pub 在类的内部可以访问。在类的内部可以访问，类的外部不能访问。</span></span><br><span class="line">            <span class="comment">//pub 在儿子中访问不了，说明pub在Child3中是 私有成员</span></span><br><span class="line">        pro;<span class="comment">//pro 根pub的性质是一样， 也是私有成员。</span></span><br><span class="line">        <span class="comment">//pri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_Child3</span> :</span><span class="keyword">public</span> Child3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_fun3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//pub;</span></span><br><span class="line">        <span class="comment">//pro;</span></span><br><span class="line">        <span class="comment">//都访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三看原则：  </span></span><br><span class="line"><span class="comment">//1 看调用的成员变量是在类的内部还是类的外部</span></span><br><span class="line"><span class="comment">//2 看儿子继承方式，</span></span><br><span class="line"><span class="comment">//3 当前变量在儿子中的变量在父亲中的访问控制权限</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Child c1;</span><br><span class="line">    c1.<span class="built_in">func</span>();</span><br><span class="line">    c1.pub;</span><br><span class="line">    <span class="comment">//c1.pri;</span></span><br><span class="line">    <span class="comment">//Child2 c2;</span></span><br><span class="line">    <span class="comment">//c2.pub;</span></span><br><span class="line">    <span class="comment">//c2.pro;</span></span><br><span class="line">    Child3 c3;</span><br><span class="line">    <span class="comment">//c3.pub;</span></span><br><span class="line">    <span class="comment">//c3.pro;</span></span><br><span class="line">    Child2 c2;</span><br><span class="line">    <span class="comment">//c2.pub;</span></span><br><span class="line">    <span class="comment">//c2.pro;</span></span><br><span class="line">    c1.pub;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承方式的练习</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a; //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b; <span class="comment">//b此时是保护成员，类的内部可以访问</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c此时是公有成员，类的内部可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">protected</span>A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a; //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b; <span class="comment">//b 在子类中是protected权限，类的内部可以访问。</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c 子类的protected成员，类的内部可以访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">private</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;       //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl; <span class="comment">//b 此时是private成员，类的内部可以访问。</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c 此时是private成员，类的内部可以访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Aaa;</span><br><span class="line">    Bbb;</span><br><span class="line">    Ccc;</span><br><span class="line">    Ddd;</span><br><span class="line">    aa.c = <span class="number">100</span>; <span class="comment">//c 是公有，类的外部可以访问。</span></span><br><span class="line">    bb.c = <span class="number">100</span>; <span class="comment">//Bpublic 继承与A，保持权限不变，c 是公有，类的外部可以访问</span></span><br><span class="line">    <span class="comment">//cc.c = 100; //C protected 继承与A，c 在此类中是protected成员，类的外部不能访问。</span></span><br><span class="line">    <span class="comment">//dd.c = 100; //D private 继承与A，c在此类中private成员，类的外部不能访问。</span></span><br><span class="line">    aa.<span class="built_in">set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">//能访问</span></span><br><span class="line">    bb.<span class="built_in">set</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>); <span class="comment">//能访问</span></span><br><span class="line">    <span class="comment">//cc.set(40, 50, 60);//不能访问</span></span><br><span class="line">    <span class="comment">//dd.set(70, 80, 90);//不能访问</span></span><br><span class="line">    bb.<span class="built_in">print</span>(); <span class="comment">//print 是定义在B类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    cc.<span class="built_in">print</span>(); <span class="comment">//print 是定义在C类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    dd.<span class="built_in">print</span>();      <span class="comment">//print 是定义在D类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承中的构造和析构"><a href="#继承中的构造和析构" class="headerlink" title="继承中的构造和析构"></a>继承中的构造和析构</h2><h3 id="类的兼容性和赋值原则"><a href="#类的兼容性和赋值原则" class="headerlink" title="类的兼容性和赋值原则"></a>类的兼容性和赋值原则</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子类对象可以当作父类对象使用。</span></span><br><span class="line"><span class="comment">子类对象可以直接赋值给父类对象。</span></span><br><span class="line"><span class="comment">子类对象可以直接初始化父类对象.</span></span><br><span class="line"><span class="comment">***父类指针可以直接指向子类对象***</span></span><br><span class="line"><span class="comment">父类引用可以直接引用子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(Parent* pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pp-&gt;<span class="built_in">printP</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Parent p;</span></span><br><span class="line">    <span class="comment">//Child c = p; //p对象填充不满c对象空间，</span></span><br><span class="line">    <span class="comment">//Child c;</span></span><br><span class="line">    <span class="comment">//Parent p = c;//c 对象所占用的内存空间 &gt;= p对象占用空间 能够填充满p对象所需要空间。</span></span><br><span class="line">    <span class="comment">//p = c;</span></span><br><span class="line">    <span class="comment">//c.printP(); //c 能够当做父类 p 来使用。</span></span><br><span class="line">    Parent* pp = <span class="literal">NULL</span>;<span class="comment">//父类指针</span></span><br><span class="line">    Child* cp = <span class="literal">NULL</span>;<span class="comment">//子类指针</span></span><br><span class="line">    Parent p;<span class="comment">//父类对象</span></span><br><span class="line">    Child c; <span class="comment">//子类对象</span></span><br><span class="line">    pp = &amp;c;<span class="comment">//c 内存布局能够满足父类指针的全部需求， 可以用一个儿子的对象地址给父类指针赋值。</span></span><br><span class="line">    <span class="built_in">myPrint</span>(&amp;p);</span><br><span class="line">    <span class="built_in">myPrint</span>(&amp;c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子类的构造和析构"><a href="#子类的构造和析构" class="headerlink" title="子类的构造和析构"></a>子类的构造和析构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//在调用子类的构造函数时候，一定会调用父类的构造函数</span></span><br><span class="line">    <span class="comment">//父类先构造，子类后构造</span></span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :<span class="built_in">Parent</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child(int, int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Child()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">printC</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当子类和父类的成员重名"><a href="#当子类和父类的成员重名" class="headerlink" title="当子类和父类的成员重名"></a>当子类和父类的成员重名</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> p_a, <span class="keyword">int</span> c_a) :<span class="built_in">Parent</span>(p_a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = c_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        cout &lt;&lt; Parent::a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;<span class="comment">//child&#x27;s a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承中的static"><a href="#继承中的static" class="headerlink" title="继承中的static"></a>继承中的static</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A::a = <span class="number">100</span>;<span class="comment">//静态成员变量 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    A a2;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    A::a = <span class="number">300</span>;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    B b1;</span><br><span class="line">    B b2;</span><br><span class="line">    A::a = <span class="number">400</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b2.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//家具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m; <span class="comment">//材质</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父亲类继承爷爷类,改成虚继承,防止儿子在多继承我的时候，出现爷爷中的变量会拷贝多份</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bed</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;在床上睡觉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sofa</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;在沙发上休息&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//沙发床</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SofaBed</span> :</span><span class="keyword">public</span> Bed, <span class="keyword">public</span> Sofa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SleepAndSit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sleep</span>();</span><br><span class="line">        <span class="built_in">sit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bed b;</span><br><span class="line">    b.<span class="built_in">sleep</span>();</span><br><span class="line">    Sofa s;</span><br><span class="line">    s.<span class="built_in">sit</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ------ &quot;</span> &lt;&lt; endl;</span><br><span class="line">    SofaBed sb;</span><br><span class="line">    sb.<span class="built_in">SleepAndSit</span>();</span><br><span class="line">    sb.m = <span class="number">100</span>;<span class="comment">//此时只有一个m</span></span><br><span class="line">    <span class="comment">//sb.Bed::m = 100;</span></span><br><span class="line">    <span class="comment">//sb.Sofa::m = 200;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css层叠样式表</title>
      <link href="undefined/94d4a65c/"/>
      <url>undefined/94d4a65c/</url>
      
        <content type="html"><![CDATA[<blockquote><p>css的小总结</p></blockquote><span id="more"></span><h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a><u>CSS简介</u></h3><p>CSS规则由两个主要的部分构成：选择器以及一条或多条声明</p><ul><li>选择器是用于指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式</li><li>属性和属性值以“键值对”的形式出现</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li><li>属性和属性值之间用英文“:”分开</li><li>多个“键值对”之间用英文“;”进行区分</li></ul><h3 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a><u>CSS基础选择器</u></h3><p>选择器就是根据不同需求把不同的标签选出来</p><p>选择器分为基础选择器和复合选择器两个大类</p><ul><li>基础选择器是由单个选择器组成的</li><li>基础选择器又包括：标签选择器、类选择器、id选择器和通配符选择器</li></ul><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>用html标签名称作为选择器</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>用“.类名”作为选择器</p><p>对应改变样式的文字或图片应在其标签属性添加class=”类名”</p><p>长名称和词组可以使用中横线来为选择器命名；不要使用纯数字、中文命名，尽量使用英文字母来表示</p><p>可在class中写多个类名，用空格隔开</p><h5 id="常见的类命名规则如下："><a href="#常见的类命名规则如下：" class="headerlink" title="常见的类命名规则如下："></a>常见的类命名规则如下：</h5><table><thead><tr><th align="center">内容</th><th align="center">类名</th></tr></thead><tbody><tr><td align="center">头</td><td align="center">header</td></tr><tr><td align="center">内容</td><td align="center">content/container</td></tr><tr><td align="center">尾</td><td align="center">footer</td></tr><tr><td align="center">导航</td><td align="center">nav</td></tr><tr><td align="center">侧栏</td><td align="center">sidebar</td></tr><tr><td align="center">栏目</td><td align="center">column</td></tr><tr><td align="center">页面外围控制整体布局宽度</td><td align="center">wrapper</td></tr><tr><td align="center">左右中</td><td align="center">left right center</td></tr><tr><td align="center">登录条</td><td align="center">loginbar</td></tr><tr><td align="center">标志</td><td align="center">logo</td></tr><tr><td align="center">广告</td><td align="center">banner</td></tr><tr><td align="center">页面主体</td><td align="center">main</td></tr><tr><td align="center">热点</td><td align="center">hot</td></tr><tr><td align="center">新闻</td><td align="center">news</td></tr><tr><td align="center">下载</td><td align="center">download</td></tr><tr><td align="center">子导航</td><td align="center">subnav</td></tr><tr><td align="center">菜单</td><td align="center">menu</td></tr><tr><td align="center">子菜单</td><td align="center">submenu</td></tr></tbody></table><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>用“#id名”作为选择器</p><p>特点：只能调用一次，经常和js一起使用</p><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>用“*”作为选择器</p><p>特点：改变所有</p><h3 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a><u>CSS字体属性</u></h3><h4 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h4><blockquote><p>font-family: 字体;</p></blockquote><p>各种字体之间必须使用英文状态下的逗号隔开。一般情况下，如果有空格隔开的多个单词组成的字体，加引号</p><p>最常见的几个字体： font-family: ‘Microsoft Yahei’,tahoma,arial,’Hiragino Sans GB’;</p><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><blockquote><p>font-size: 数字px;</p></blockquote><p>谷歌浏览器默认的文字大小是16px，我们可以给body指定整个页面文字的大小</p><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><blockquote><p>font-weight: </p></blockquote><p>属性：<br>名称 | 含义<br>:—:|:—:<br>normal | 正常的字体<br>bold | 粗体<br>bolder | IES+特粗体<br>lighter | IES+细体<br>number | IES+100……<br>normal相当于number为400，声明此值将取消之前任何设置</p><p>bold相当于number为700，也相当于b对象的作用</p><p>number后面不需要加单位</p><h4 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><blockquote><p>font-style: </p></blockquote><p>属性：normal,italic</p><h4 id="复合属性"><a href="#复合属性" class="headerlink" title="复合属性"></a>复合属性</h4><blockquote><p>font:   font-style font-weight font-size/line-height font-family;</p></blockquote><p>不需要设置的属性可以省略，但必须保留font-size和font-family属性，否则font属性将不起作用</p><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a><u>文本属性</u></h3><h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><blockquote><p>color:</p></blockquote><p>表示方法：预定义的颜色值，十六进制，RGB代码（rgb(255,0,0)）</p><h4 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h4><blockquote><p>text-align:   (水平对齐方式)</p></blockquote><p>属性值：right,left,center</p><h4 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h4><blockquote><p>text-decoration:   (规定添加到文本的修饰)</p></blockquote><p>属性：none(默认)，underline(下划线)，overline(上划线)，line-through(删除线)</p><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><blockquote><p>text indent:   数字px/em;</p></blockquote><h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><blockquote><p>line-height:   数字px;</p></blockquote><p>行间距包括上间距，文本高度，下间距</p><h3 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a><u>CSS的引入方式</u></h3><h4 id="CSS的三种样式表"><a href="#CSS的三种样式表" class="headerlink" title="CSS的三种样式表"></a>CSS的三种样式表</h4><p><strong>内部样式表</strong></p><p>写到html页面内部，是将所有的CSS代码抽取出来，单独放到一个&lt;style&gt;中</p><p><strong>行内样式表</strong></p><p><strong>外部样式表</strong></p><p>须在html页面中，使用&lt;link&gt;标签引入这个文件</p><blockquote><link rel="stylesheet" href="css文件路径"></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的扩展（四）</title>
      <link href="undefined/b3551fca/"/>
      <url>undefined/b3551fca/</url>
      
        <content type="html"><![CDATA[<blockquote><p>友元和操作符重载</p></blockquote><span id="more"></span><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>友元函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointManager</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明全局函数PointDistance是我类Point类的一个友元函数</span></span><br><span class="line">    <span class="comment">//friend double PointDistance(Point&amp; p1, Point&amp; p2);</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">double</span> <span class="title">PointManager::PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span></span>;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">int</span> dd_x = p1.x - p2.x;</span><br><span class="line">    <span class="keyword">int</span> dd_y = p1.y - p2.y;</span><br><span class="line">    dis = <span class="built_in">sqrt</span>(dd_x * dd_x + dd_y * dd_y);</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PointManager::PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">int</span> dd_x = p1.x - p2.x;</span><br><span class="line">    <span class="keyword">int</span> dd_y = p1.y - p2.y;</span><br><span class="line">    dis = <span class="built_in">sqrt</span>(dd_x * dd_x + dd_y * dd_y);</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; PointDistance(p1, p2) &lt;&lt; endl;</span></span><br><span class="line">    PointManager pm;</span><br><span class="line">    cout &lt;&lt; pm.<span class="built_in">PointDistance</span>(p1, p2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>友元函数提高了程序的运行效率（减少了类型检查和安全性检查（需要时间开销），破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员</p></blockquote><p>友元类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明一个友元类B</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">objA</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">        cout &lt;&lt; objA.a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">bObj</span><span class="params">(<span class="number">200</span>)</span></span>;</span><br><span class="line">    bObj.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>友元关系不能被继承。友元关系是单向的，不具有交换性。友元关系不具有传递性</p><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; c1, Complex&amp; c2)</span></span>;</span><br><span class="line">    <span class="comment">//friend Complex operator + (Complex&amp; c1, Complex&amp; c2);</span></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>+(Complex&amp; another) &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; c1, Complex&amp; c2)</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a + c2.a, c1.b + c2.b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作符重载写在全局</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">Complex <span class="keyword">operator</span> + (Complex &amp; c1, Complex &amp; c2) &#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a + c2.a, c1.b + c2.b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    c2.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="comment">//Complex c3 = complexAdd(c1, c2);</span></span><br><span class="line">    <span class="comment">//Complex c3 = c1.complexAdd(c2);</span></span><br><span class="line">    <span class="comment">//Complex c3 = c1 + c2;</span></span><br><span class="line">        <span class="comment">//Complex c3 = operator+(c1, c2);</span></span><br><span class="line">        Complex c3 = c1.<span class="keyword">operator</span>+(c2);</span><br><span class="line">    c3.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双目运算符"><a href="#双目运算符" class="headerlink" title="双目运算符"></a>双目运算符</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//friend Complex&amp; operator+=(Complex&amp; c1,Complex&amp; c2);</span></span><br><span class="line">    <span class="keyword">friend</span> Complex&amp; <span class="keyword">operator</span>-=(Complex&amp; c1, Complex&amp; c2);</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>+=(Complex&amp; another) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += another.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += another.b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>+=(Complex&amp; c1, Complex&amp; c2) &#123;</span><br><span class="line">    c1.a -= c2.a;</span><br><span class="line">    c1.b -= c2.b;</span><br><span class="line">    <span class="keyword">return</span> c1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    (c1 += c2) += c2;<span class="comment">//c1.operator+=(c2).operator(c2)  </span></span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    c2.<span class="built_in">printComplex</span>();</span><br><span class="line">    c1 -= c2;</span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//friend Complex&amp; operator++(Complex&amp; c);</span></span><br><span class="line">    <span class="comment">//friend const Complex operator++(Complex&amp;c1,int);</span></span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Complex <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        <span class="comment">//亚元：区分两个函数</span></span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a, <span class="keyword">this</span>-&gt;b)</span></span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b++;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//重载的是前++运算符</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>++(Complex&amp; c) &#123;</span><br><span class="line">    c.a++;</span><br><span class="line">    c.b++;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//重载的是后++运算符</span></span><br><span class="line"><span class="comment">//用const修饰表示不能连加，值不能改变</span></span><br><span class="line"><span class="comment">//用占位参数来表示前++和后++的区别</span></span><br><span class="line"><span class="keyword">const</span> Complex <span class="keyword">operator</span>++(Complex&amp; c1, <span class="keyword">int</span>) &#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a, c1.b)</span></span>;</span><br><span class="line">    c1.a++;</span><br><span class="line">    c1.b++;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//++++c1;</span></span><br><span class="line">    c1++;</span><br><span class="line">    <span class="comment">//后++普通情况不能累加</span></span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="comment">//++++c1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左移右移操作符重载"><a href="#左移右移操作符重载" class="headerlink" title="左移右移操作符重载"></a>左移右移操作符重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Complex&amp; c);</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c);</span><br><span class="line">    <span class="comment">//&lt;&lt;操作符只能写在全局，不能够写在成员方法中，否则调用的顺序会变反  c1&lt;&lt;cout;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os)<span class="comment">//c1.operator&lt;&lt;(cout)&#123;</span></span><br><span class="line">        os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Complex&amp; c) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; c.a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; c.b &lt;&lt; <span class="string">&quot;,)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span>;</span><br><span class="line">    is &gt;&gt; c.a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span>;</span><br><span class="line">    is &gt;&gt; c.b;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cin &gt;&gt; c1;<span class="comment">//operator&gt;&gt;(cin,c1)</span></span><br><span class="line">    cout &lt;&lt; c1;</span><br><span class="line">    <span class="comment">//c1&lt;&lt;cout;</span></span><br><span class="line">    <span class="comment">//cout.operator&lt;&lt;(c1);</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; c1 &lt;&lt; &quot; &quot; &lt;&lt; c1 &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算符重载提高"><a href="#运算符重载提高" class="headerlink" title="运算符重载提高"></a>运算符重载提高</h2><h3 id="等号操作符重载"><a href="#等号操作符重载" class="headerlink" title="等号操作符重载"></a>等号操作符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="comment">//this-&gt;name = name;</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">const</span> Student&amp; another) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = another.id;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, another.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Student&amp; another) &#123;</span><br><span class="line">        <span class="comment">//1 防止自身赋值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123;</span><br><span class="line">            <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 先将自身的额外开辟的空间回收掉</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 执行深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;id = another.id;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, another.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 返回本身</span></span><br><span class="line">        <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line">    s2 = s1;</span><br><span class="line">    <span class="function">Student <span class="title">s3</span><span class="params">(<span class="number">2</span>, <span class="string">&quot;li4&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//s2 = s3 = s1;//s2 = 赋值操作符</span></span><br><span class="line">    s1.<span class="built_in">printS</span>();</span><br><span class="line">    s2.<span class="built_in">printS</span>();</span><br><span class="line">    s3.<span class="built_in">printS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载小括号"><a href="#重载小括号" class="headerlink" title="重载小括号"></a>重载小括号</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sqr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sqr</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value1 * value2;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Sqr <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="built_in">s</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//s.operator()(2);</span></span><br><span class="line">    <span class="comment">//将一个对象 当成一个普通函数来调用。</span></span><br><span class="line">        <span class="comment">//称这种对象是仿函数，伪函数，函数对象</span></span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    value = <span class="built_in">s</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载new和delete操作符"><a href="#重载new和delete操作符" class="headerlink" title="重载new和delete操作符"></a>重载new和delete操作符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载的new操作符 依然会触发对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了new操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span> size) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了new[]操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* p)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了delete操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>* p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了delete[]操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//char* array = malloc(sizeof(char) * 80);</span></span><br><span class="line">    <span class="comment">//int* value_p = new int;</span></span><br><span class="line">    A* array_p = <span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//array_p-&gt;operator new[](sizeof(A[10]));</span></span><br><span class="line">    <span class="keyword">delete</span>[]array_p;</span><br><span class="line">    A* ap = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//ap-&gt;operator new(sizeof(A));</span></span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不建议重载-amp-，-操作符"><a href="#不建议重载-amp-，-操作符" class="headerlink" title="不建议重载&amp;，|操作符"></a>不建议重载&amp;，|操作符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test <span class="keyword">operator</span>+(Test &amp;another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;执行了+操作符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="function">Test <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;value + another.value)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&amp;&amp;(Test another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;执行了&amp;&amp;操作符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;value &amp;&amp; another.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>||(Test another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了||操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;value || another.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="comment">//重载&amp;&amp;,并不会发生短路现象</span></span><br><span class="line">    <span class="keyword">if</span> (t1 &amp;&amp; (t1 + t2)) &#123;<span class="comment">//t1.operator&amp;&amp;(t1.operator+(t2))</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为真&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为假&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (t1 || (t1 + t2)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为真&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为假&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义智能指针"><a href="#自定义智能指针" class="headerlink" title="自定义智能指针"></a>自定义智能指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUER_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span> -&gt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyAutoPtr</span>(<span class="keyword">void</span>* ptr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = ptr;<span class="comment">//ptr=new A(10)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyAutoPtr</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~MyAutoPtr()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> ptr;</span><br><span class="line">            <span class="keyword">this</span>-&gt;ptr = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A* <span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A&amp; <span class="keyword">operator</span>*() &#123;</span><br><span class="line">        <span class="keyword">return</span> *ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    A* ap = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">10</span>);</span><br><span class="line">    ap-&gt;<span class="built_in">func</span>();</span><br><span class="line">    (*ap).<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">auto_ptr&lt;A&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> A(<span class="number">10</span>))</span></span>;</span><br><span class="line">    ptr-&gt;<span class="built_in">func</span>();</span><br><span class="line">    (*ptr).<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyAutoPtr <span class="title">my_p</span><span class="params">(<span class="keyword">new</span> A(<span class="number">10</span>))</span></span>;</span><br><span class="line">    my_p-&gt;<span class="built_in">func</span>();<span class="comment">//my_p.ptr-&gt;func()</span></span><br><span class="line">    (*my_p).<span class="built_in">func</span>();<span class="comment">//*ptr.func</span></span><br><span class="line">    <span class="comment">//重载*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义字符串类"><a href="#自定义字符串类" class="headerlink" title="自定义字符串类"></a>自定义字符串类</h3><p>MyString.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str =<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化时候被调用的</span></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = another.len;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;str &lt;&lt; <span class="string">&quot;执行了析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>; </span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> &amp; MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;str[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString &amp;  MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;len = another.len;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, MyString&amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; s.str;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, MyString &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1 将s之前的字符串释放掉</span></span><br><span class="line">    <span class="keyword">if</span> (s.str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] s.str;</span><br><span class="line">        s.str = <span class="literal">NULL</span>;</span><br><span class="line">        s.len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 通过cin添加新的字符串</span></span><br><span class="line">    <span class="keyword">char</span> temp_str[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    cin &gt;&gt; temp_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(temp_str);</span><br><span class="line">    s.str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(s.str, temp_str);</span><br><span class="line">    s.len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString MyString::<span class="keyword">operator</span>+(MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    MyString temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">this</span>-&gt;len + another.len;</span><br><span class="line"></span><br><span class="line">    temp.len = len;</span><br><span class="line"></span><br><span class="line">    temp.str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(temp.str, <span class="number">0</span>, len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(temp.str, <span class="keyword">this</span>-&gt;str);</span><br><span class="line">    <span class="built_in">strcat</span>(temp.str, another.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyString.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>();</span><br><span class="line">    <span class="comment">//MyString(int len); //创建一个长度是len的string对象</span></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str);</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> MyString &amp;another);</span><br><span class="line">    ~<span class="built_in">MyString</span>();</span><br><span class="line">    <span class="comment">//重载操作符[]</span></span><br><span class="line">    <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> index);</span><br><span class="line">    <span class="comment">//重载操作符&gt;&gt;</span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, MyString &amp;s);</span><br><span class="line">    <span class="comment">//重载=操作符</span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;another);</span><br><span class="line">    <span class="comment">//重载==操作符</span></span><br><span class="line">    <span class="comment">//重载!=操作符</span></span><br><span class="line">    <span class="comment">//重载+操作符</span></span><br><span class="line">    MyString <span class="keyword">operator</span>+(MyString &amp;another);</span><br><span class="line">    <span class="comment">//重载操作符&lt;&lt;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, MyString&amp;s);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>自定义的字符串类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;123&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; s1 + s2 &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line">    MyString s3 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    s1[<span class="number">1</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = s3;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html笔记</title>
      <link href="undefined/5bada17d/"/>
      <url>undefined/5bada17d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于html的总结</p></blockquote><span id="more"></span><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><u>基础知识</u></h2><p><code>&lt;html&gt;</code>   <code>&lt;/html</code> 根标签，页面中最大的标签</p><p><code>&lt;head&gt;</code>  <code>&lt;/head&gt;</code> 文档的头部</p><p><code>&lt;title&gt;</code>  <code>&lt;/title&gt;</code> 文档的标题</p><p><code>&lt;body&gt;</code>  <code>&lt;/body&gt;</code> 文档的主体</p><p><code>&lt;br/</code> 单标签（少见）</p><p>快捷键：ctrl+S， ctrl+”+” ，Alt+B</p><h2 id="必须写的三个代码"><a href="#必须写的三个代码" class="headerlink" title="必须写的三个代码"></a><u>必须写的三个代码</u></h2><p><code>&lt;!DOCTYPE&gt;</code> 采取HTML5版本，文档类型声明标签，不属于HTML标签</p><p><code>&lt;html lang=&quot;en&quot;&gt;</code> 表示英文网站，zh-CN表示中文网站，fr表示法语网站，但不影响所有语言表示</p><p><code>&lt;meta char set=&quot;UTF-8&quot;&gt;</code> 字符集是多个字符的集合，以便计算机能够识别和存储各种文字</p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a><u>常用标签</u></h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a><u>标题标签</u></h3><p><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 根据重要性递减，每个标题独占一行</p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a><u>段落标签</u></h3><p><code>&lt;p&gt;</code> <code>&lt;p&gt;</code></p><ul><li><p>段落之间有空隙</p></li><li><p>根据网页大小换行</p></li></ul><h3 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a><u>换行标签</u></h3><p><code>&lt;br&gt;</code>打断，换行 </p><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a><u>水平分割线</u></h3><p><code>&lt;hr&gt;</code></p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a><u>文本格式化标签</u></h3><ul><li><p><code>&lt;strong&gt; &lt;/strong&gt;</code>  <code>&lt;b&gt; &lt;/b&gt;</code>  加粗</p></li><li><p><code>&lt;em&gt; &lt;/em&gt;</code>  <code>&lt;i&gt; &lt;/i&gt;</code>  斜体</p></li><li><p><code>&lt;del&gt; &lt;/del&gt;</code>  <code>&lt;s&gt; &lt;/s&gt;</code>  删除线</p></li><li><p><code>&lt;ins&gt; &lt;/ins&gt;</code>  <code>&lt;u&gt; &lt;/u&gt;</code>  下划线</p></li></ul><p>效果一样，但前者更推荐使用</p><h3 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a><u>盒子标签</u></h3><p>无语义的盒子</p><ul><li><code>&lt;div&gt; &lt;/div&gt;</code>表示分割，分区，用于布局，单独占一行。大盒子</li><li> <code>&lt;span&gt; &lt;/span&gt;</code>表示跨度跨距，一行可以放多个。小盒子</li></ul><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a><u>图像标签</u></h3><p><code>&lt;img src=&quot;&quot; /&gt;</code> 单标签，必须将被插入的文件和html文件放到一个目录下</p><p>属性：</p><ul><li><p>src用于指定图像文件的路径和文件名</p></li><li><p>alt替换文本。图像不能显示的文字</p></li><li><p>title提示文本。鼠标放到图像上显示的文字</p></li><li><p>width设置图像的宽度</p></li><li><p>height设置图像的高度，宽度高度修改一个会等比缩放</p></li><li><p>border设置图像边框粗细</p></li></ul><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a><u>超链接标签</u></h3><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;;</code></p><p>target（_ self为默认值，_blank为在新窗口中打开方式）</p><h4 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h4><h4 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h4><p>网页之间的跳转</p><h4 id="空链接"><a href="#空链接" class="headerlink" title="空链接"></a>空链接</h4><p><code>&lt;a href=&quot;#&quot;&gt;文本&lt;/a&gt;</code></p><h4 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h4><p>地址链接的是.exe或.zip压缩包</p><h4 id="网页元素链接"><a href="#网页元素链接" class="headerlink" title="网页元素链接"></a>网页元素链接</h4><h4 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h4><p> <code>&lt;a href=&quot;#two&quot;&gt;文本&lt;/a&gt;</code> </p><p> <code>&lt;h3 id=&quot;two&quot;&gt;文本&lt;/h3&gt;</code> </p><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a><u>注释标签</u></h3><p><code>&lt;!-- --&gt;</code>   “ctrl+/“</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a><u>特殊字符</u></h3><p>空格符 <code>&amp;nbsp;</code></p><p>&lt;  <code>&amp;lt;</code></p><p>&gt;  <code>&amp;gt;</code></p><p>&amp;  <code>&amp;amp;</code></p><p>&yen;  <code>&amp;yen;</code></p><p>&copy;  <code>&amp;copy;</code> （版权）</p><p>&reg;  <code>&amp;reg;</code>  （注册商标）</p><p>&deg;   <code>&amp;deg;</code> （摄氏度）</p><p>&plusmn;  <code>&amp;plusmn;</code>  （正负号）</p><p>&times;  <code>&amp;times;  </code>  </p><p>&divide;  <code>&amp;divide;</code></p><p>&sup2;   <code>&amp;sup2;</code></p><p>&sup3;   <code>&amp;sup3;</code></p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a><u>表格标签</u></h3><h4 id="表格结构："><a href="#表格结构：" class="headerlink" title="表格结构："></a>表格结构：</h4><p><code>&lt;table&gt; &lt;/table&gt;</code> 定义表格的标签</p><p><code>&lt;tr&gt; &lt;/tr&gt;</code> 定义表格中的行</p><p><code>&lt;td&gt; &lt;/td&gt;</code> 表格中的单元格</p><p><code>&lt;th&gt; &lt;/th&gt;</code> 表头单元格，加粗居中</p><h4 id="表格属性："><a href="#表格属性：" class="headerlink" title="表格属性："></a>表格属性：</h4><p>align：left,center,right&nbsp;&nbsp;对齐方式</p><p>width    像素值或百分比</p><p>height</p><p>border：1或””&nbsp;&nbsp;规定是否拥有边框，以及线的宽度</p><p>cellspacing：规定单元格之间的空白，默认2像素。像素值</p><p>cellpadding：规定单元边沿与其内容之间的空白，默认1像素。像素值</p><h4 id="结构标签："><a href="#结构标签：" class="headerlink" title="结构标签："></a>结构标签：</h4><p><code>&lt;thread&gt; &lt;/thread&gt;</code>：用于定义表格的头部，内部必须拥有&lt;tr&gt;标签</p><p><code>&lt;tbody&gt; &lt;/tbody&gt;</code>：用于定义表格的主体</p><h4 id="合并单元格："><a href="#合并单元格：" class="headerlink" title="合并单元格："></a>合并单元格：</h4><p>跨行合并：rowspan=”合并单元格的个数”，最上侧单元格为目标单元格，写合并代码</p><p>跨列合并：colspan=”合并单元格的个数”，最左侧单元格为目标单元格，写合并代码</p><p>注意合并单元格之后删除多余的单元格</p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a><u>列表标签</u></h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><code>&lt;ul&gt;</code> 表示html页面中项目的无序列表，其中只能嵌套<code>&lt;li&gt; &lt;/li&gt;</code></p><p><code>&lt;li&gt;</code>表示列表项，<code>&lt;li&gt; &lt;/li&gt;</code>之间相当于容器，可以容纳所有元素</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><code>&lt;ol&gt;</code> 表示html页面中项目的有序列表，其中只能嵌套<code>&lt;li&gt; &lt;/li&gt;</code></p><p><code>&lt;li&gt;</code>与无序列表中相同</p><h4 id="自定义列表-常用于对名词进行解释和描述"><a href="#自定义列表-常用于对名词进行解释和描述" class="headerlink" title="自定义列表:常用于对名词进行解释和描述"></a>自定义列表:常用于对名词进行解释和描述</h4><p><code>&lt;dl&gt;</code> 表示html页面中项目的定义描述列表，其中只能嵌套&lt;li&gt;&lt;/li&gt;，但对他们的个数没有限制</p><p><code>&lt;dt&gt;</code> 定义项目或名字</p><p><code>&lt;dd&gt;</code> 描述每一个项目或名字</p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a><u>表单标签</u></h3><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><p>表单域是一个包含表单元素的区域</p><p><code>&lt;form&gt;</code> 用于定义表单域</p><p><code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器</p><p>属性：</p><ul><li><p>action用于指定接收并处理表单数据的服务器程序的url地址</p></li><li><p>method用于设置表单数据的提交方式，其取值为get或post</p></li><li><p>name用于指定表单的名称，以区分同一个页面中的多个表单域</p></li></ul><h4 id="表单控件（表单元素）"><a href="#表单控件（表单元素）" class="headerlink" title="表单控件（表单元素）"></a>表单控件（表单元素）</h4><p><strong>&lt;input&gt;输入表单元素</strong></p><p>type=”属性值”</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button 定义可点击按钮（多数情况用于通过js启动脚本)</span><br><span class="line">checkbox 定义复选框</span><br><span class="line">file 定义输入字段和浏览按钮，供文件上传</span><br><span class="line">hidden 定义隐藏的输入字段</span><br><span class="line">image 定义图像形式的提交按钮</span><br><span class="line">password 定义密码字段。该字段的字符被掩码</span><br><span class="line">radio 定义单选按钮</span><br><span class="line">reset 定义重置按钮。清除表单中的所有数据</span><br><span class="line">submit 定义提交按钮。提交按钮会把表单数据发送到服务器</span><br><span class="line">text 定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符</span><br></pre></td></tr></table></figure><p>name=”名称”（定义input元素的名称）</p><p>value=” 内容”（规定input元素的值——未输入元素时显示的字样）</p><p>checked=”checked”（规定此inout元素首次加载时应当被选中）</p><p>maxlength=”正整数”（规定输入字段中的字符的最大长度）</p><p>id=”内容”（对表单对应的标注标签有指引作用）</p><p><code>&lt;label&gt;</code> 为input元素定义标注（用于绑定一个表单元素，当点击<code>&lt;label&gt;</code> 内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验；语法：<code>&lt;label for=&quot;sex&quot;&gt;女&lt;/label&gt;</code> 注：sex为对应input的id）</p><p><strong>select下拉表单元素（有多个选择，节约页面空间）</strong></p><p><code>&lt;select&gt; &lt;/select&gt;</code> 包含 <code>&lt;option&gt; &lt;/option&gt;</code></p><p>在<code>&lt;option&gt;</code>中定义selected=”selected”时，当前项即为默认选中项</p><p><strong>textarea文本域元素</strong></p><p><code>&lt;textarea&gt;</code> 用于定义多行文本输入的控件（常见于留言板，评论）</p><p>语法：<code>&lt;textarea rows=&quot;显示的行数&quot; cols=&quot;每行中的字符数&quot;&gt;文本内容（默认内容）&lt;/textarea&gt;</code>（实际开发一般用CSS改变大小）</p><h4 id="提示信息"><a href="#提示信息" class="headerlink" title="提示信息"></a>提示信息</h4><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a><u>路径</u></h2><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a><u>相对路径</u></h3><p>（图片相对于html页面的位置）</p><p>同一级路径  <code>&lt;img src=&quot;baidu.gif&quot; &gt;</code> </p><p>下一级路径  <code>&lt;img src=&quot;images/baidu.gif&quot; /&gt;</code></p><p>上一级路径  <code>&lt;img src=&quot;../baidu.gif&quot; /&gt;</code></p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a><u>绝对路径</u></h3><p>（E:\或者网址）</p><h2 id="查阅文档"><a href="#查阅文档" class="headerlink" title="查阅文档"></a><u>查阅文档</u></h2><p><a href="https://www.runoob.com/tags/html-reference.html">html参考手册</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的扩展（三）</title>
      <link href="undefined/47806af/"/>
      <url>undefined/47806af/</url>
      
        <content type="html"><![CDATA[<blockquote><p>构造与析构</p></blockquote><span id="more"></span><h2 id="构造和析构"><a href="#构造和析构" class="headerlink" title="构造和析构"></a>构造和析构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// test类的构造函数</span></span><br><span class="line">    <span class="comment">// 在对象被创建的时候，用来初始化对象的函数</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123; <span class="comment">// 无参数的构造函数</span></span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">        name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(name, <span class="string">&quot;zhang3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;  y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="comment">// 析构函数可以释放一些不必要的东西</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(name);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;free sycc!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">        t1.<span class="built_in">prinT</span>();</span><br><span class="line">        <span class="comment">// 在一个对象临死之前，要自动调用析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Test t1;</span></span><br><span class="line">    <span class="comment">// t1.init(10, 20);</span></span><br><span class="line">    <span class="comment">// (普通类函数定义对象的写法)</span></span><br><span class="line">    <span class="comment">// t1此时是未知的，最好初始化</span></span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">    Test t3;<span class="comment">// 调用类的无参数构造函数</span></span><br><span class="line">    t3.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数可以被重载</span></span><br><span class="line"><span class="comment">// 析构函数不可以被重载，析构函数只有一个</span></span><br></pre></td></tr></table></figure><p>构造函数和析构函数都没有返回值,析构函数没有形参</p><h2 id="构造函数的分类"><a href="#构造函数的分类" class="headerlink" title="构造函数的分类"></a>构造函数的分类</h2><h3 id="无参构造函数"><a href="#无参构造函数" class="headerlink" title="无参构造函数"></a>无参构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span><span class="comment">// 默认的，无作用</span></span></span><br><span class="line">    <span class="comment">// 默认的无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示提供一个有参的构造函数</span></span><br><span class="line">    <span class="comment">// 默认的无参 构造函数就不复存在</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的析构函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test t1;<span class="comment">// 调用Test无参构造</span></span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><p>即复制构造函数</p><p>同一个类的对象在内存中有完全相同的结构，如果作为一个整体进行复制是完全可行的。这个复制过程只需要复制数据成员，而函数成员是共用的（只有一份代码）。在建立对象时可用同一类的另一个对象来初始化该对象，这时所用的构造函数称为复制构造函数。复制构造函数的参数必须是引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;,y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 显示的拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test &amp;)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 会有一个默认的拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// =赋值操作符</span></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;</span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">    Test t3 = t1;</span><br><span class="line">    <span class="comment">// 依然是初始化t2的时候调用t3拷贝构造函数</span></span><br><span class="line">    Test t4;</span><br><span class="line">    t4 = t1;</span><br><span class="line">    <span class="comment">// 调用的不是t4的拷贝构造函数，而是t4的赋值操作符函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认拷贝构造函数"><a href="#默认拷贝构造函数" class="headerlink" title="默认拷贝构造函数"></a>默认拷贝构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        m_a = <span class="number">0</span>;</span><br><span class="line">        m_b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">const</span> A&amp; another) &#123;</span><br><span class="line">        m_a = another.m_a;</span><br><span class="line">        m_b = another.m_b;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(const A&amp;...)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中</span></span><br><span class="line"><span class="comment">//会有个默认的无参构造函数：</span></span><br><span class="line"><span class="comment">//当没有任何显示的构造函数（显示的无参，显示有参，显示拷贝构造）的时候，默认无参构造函数就会出现</span></span><br><span class="line"><span class="comment">//会有默认的拷贝构造:</span></span><br><span class="line"><span class="comment">//当没有显示的拷贝构造函数，默认的拷贝构造就会出现</span></span><br><span class="line"><span class="comment">//会有默认的析构函数：</span></span><br><span class="line"><span class="comment">//当没有显示的析构函数的时候，默认的析构函数就会出现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="function">A <span class="title">a1</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拷贝构造函数的应用场景</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(int x,int y)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test &amp;)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const Test &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;  y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数调用的顺序，跟构造相反，谁先构造的，谁后析构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;<span class="comment">// Test t2 = t1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    Test t2;</span><br><span class="line">    t2 = t1;<span class="comment">// =操作符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Test t)</span> </span>&#123; <span class="comment">// Test t = t1;Test t的拷贝构造函数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    t.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test3 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="built_in">func</span>(t1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test3 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">Test <span class="title">temp</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    temp.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;<span class="comment">// 匿名的对象 = temp(构造)</span></span><br><span class="line"><span class="comment">// 一次析构</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test4 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func2</span>();<span class="comment">// 返回一个匿名对象</span></span><br><span class="line">    <span class="comment">// 当一个函数返回一个匿名对象的时候，</span></span><br><span class="line">    <span class="comment">// 函数外部没有任何变量去接收它</span></span><br><span class="line">    <span class="comment">// 这个匿名对象将不会再被使用，</span></span><br><span class="line">    <span class="comment">// 编译器会直接将这个匿名对象回收掉，</span></span><br><span class="line">    <span class="comment">// 而不是等待整个函数执行完毕再回收</span></span><br><span class="line">    <span class="comment">// 故此处有两次析构</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test4 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test5 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t1 = <span class="built_in">func2</span>();</span><br><span class="line">    <span class="comment">// 不会触发t1的拷贝构造，而是将匿名对象转正t1</span></span><br><span class="line">    <span class="comment">// 把这个匿名对象起了名字叫做t1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test5 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test6 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t1;<span class="comment">// t1已经被初始化了</span></span><br><span class="line">    t1 = <span class="built_in">func2</span>();<span class="comment">//不会被转正</span></span><br><span class="line">    <span class="comment">// 仍然是匿名对象，t1会调用等号操作符</span></span><br><span class="line">    <span class="comment">// t1.operator=匿名对象</span></span><br><span class="line">    <span class="comment">// 编译器会立刻回收匿名对象</span></span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test6 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="comment">//test2();</span></span><br><span class="line">    <span class="comment">//test3();</span></span><br><span class="line">    <span class="comment">//test4();</span></span><br><span class="line">    <span class="comment">//test5();</span></span><br><span class="line">    <span class="built_in">test6</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Teacher</span>(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* name) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Teacher(int,char*)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_id = id;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">        m_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; m_id &lt;&lt; <span class="string">&quot;,name = &quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示的提供一个拷贝构造函数，来完成深拷贝动作</span></span><br><span class="line">    <span class="built_in">Teacher</span>(<span class="keyword">const</span> Teacher&amp; another) &#123;</span><br><span class="line">        m_id = another.m_id;</span><br><span class="line">        <span class="comment">// 深拷贝动作  </span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.m_name);</span><br><span class="line">        m_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);<span class="comment">// 一定要释放，且释放一次</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, another.m_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Teacher</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Teacher()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (m_name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(m_name);</span><br><span class="line">            m_name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_id;</span><br><span class="line">    <span class="keyword">char</span>* m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">(t1)</span></span>;<span class="comment">// t2的默认拷贝构造</span></span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造函数的参数列表"><a href="#构造函数的参数列表" class="headerlink" title="构造函数的参数列表"></a>构造函数的参数列表</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的初始化列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(A &amp;a1,A &amp;a2,<span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(A&amp;,A&amp;,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造对象成员的顺序跟初始化列表的顺序无关</span></span><br><span class="line">    <span class="comment">// 而是与对象的定义顺序有关</span></span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(int,int,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        m_a1.<span class="built_in">printA</span>();</span><br><span class="line">        m_a2.<span class="built_in">printA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    A m_a1;</span><br><span class="line">    A m_a2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(10), a2(100);</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a1, a2, <span class="number">1000</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">300</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的初始化列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(A&amp;a1, A&amp;a2, <span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(A&amp;,A&amp;,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        m_a1.<span class="built_in">printA</span>();</span><br><span class="line">        m_a2.<span class="built_in">printA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    A m_a1;</span><br><span class="line">    A m_a2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(10), a2(100);</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a1, a2, <span class="number">1000</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当A的对象是B的一个成员的时候，在初始化对象的时候，无法给B分配空间，因为无法初始化A类对象</p><p>初始化列表中的初始化顺序，与声明顺序有关，与前后赋值顺序无关</p><p>当类成员中含有一个const对象时，或者是一个引用时，他们也必须要通过成员初始化列表进行初始化，因为这两种对象要在声明后马上初始化，而在构造函数中，做的是对他们的赋值，这样是不被允许的</p><h2 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABCD</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ABCD</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">        _b = b;</span><br><span class="line">        _c = c;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ABCD() construct,a:%d,b:%d,c:%d\n&quot;</span>, _a, _b, _c);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ABCD</span>() &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;~ABCD() construct,a:%d,b:%d,c:%d\n&quot;</span>, _a, _b, _c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _a;</span><br><span class="line">    <span class="keyword">int</span> _b;</span><br><span class="line">    <span class="keyword">int</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyE</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyE</span>() :<span class="built_in">abcd1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="built_in">abcd2</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="built_in">m</span>(<span class="number">100</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyD()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyE</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~MyD()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MyE</span>(<span class="keyword">const</span> MyE&amp; obj) :<span class="built_in">abcd1</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="built_in">abcd2</span>(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="built_in">m</span>(<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MyD(const MyD&amp;obj)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ABCD abcd1;</span><br><span class="line">    ABCD abcd2;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">doThing</span><span class="params">(MyE mye1)</span> </span>&#123;<span class="comment">//mye1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;doThing() mye1.abcd1.a:%d\n&quot;</span>, mye1.abcd1.<span class="built_in">getA</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyE myE;</span><br><span class="line">    <span class="built_in">doThing</span>(myE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;run2 start...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">ABCD</span>(<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>);<span class="comment">//临时对象的生命周期</span></span><br><span class="line">    <span class="comment">//ABCD abcd = ABCD(100,200,300);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;run2 end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = <span class="number">0</span>;</span><br><span class="line">        m_b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;prinT:&quot;</span> &lt;&lt; m_a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* array_p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array_p[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, array_p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (array_p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(array_p);</span><br><span class="line">        array_p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test* tp = (Test*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Test));</span><br><span class="line">    tp-&gt;<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(tp);</span><br><span class="line">        tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int a(10);等价于a=10</span></span><br><span class="line">    <span class="keyword">int</span>* array_p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array_p[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array_p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (array_p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]array_p;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test* tp = <span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 触发有参构造</span></span><br><span class="line">    tp-&gt;<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="comment">// Test* tp2 = new Test;// 触发无参构造</span></span><br><span class="line">    <span class="comment">// tp2-&gt;prinT();</span></span><br><span class="line">    <span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> tp;</span><br><span class="line">        tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C语言输出的m_a,m_b为乱码</span></span><br></pre></td></tr></table></figure><p>malloc,free是函数，标准库(stdlib.h)。new在堆上初始化一个对象的时候，会触发对象的构造函数，malloc不能；delete触发析构函数而free则不</p><h2 id="静态成员变量和成员函数"><a href="#静态成员变量和成员函数" class="headerlink" title="静态成员变量和成员函数"></a>静态成员变量和成员函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AA</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_c++;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>&amp; <span class="title">getCC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// static修饰的静态成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_c;</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量的初始化，一定要在类的外边</span></span><br><span class="line"><span class="keyword">int</span> AA::m_c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">AA <span class="title">a1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">AA <span class="title">a2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    当m_c为<span class="keyword">public</span>成员变量时</span><br><span class="line">    AA::m_c = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// a1.m_c = 200相同作用</span></span><br><span class="line">    <span class="comment">// 共用静态区</span></span><br><span class="line">    <span class="comment">// 访问空间中的静态区</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    a1.<span class="built_in">getCC</span>() = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//AA::getCC() = 200相同作用</span></span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static练习"><a href="#static练习" class="headerlink" title="static练习"></a>static练习</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Box</span>(<span class="keyword">int</span> l, <span class="keyword">int</span> w) &#123;</span><br><span class="line">        len = l;</span><br><span class="line">        width = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = len * width * hight;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;高度是&quot;</span> &lt;&lt; hight &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;体积是&quot;</span> &lt;&lt; v&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeHight</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        hight = h;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Box::hight = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">b1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Box <span class="title">b2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    b1.<span class="built_in">volume</span>();</span><br><span class="line">    b2.<span class="built_in">volume</span>();</span><br><span class="line">    Box::<span class="built_in">changeHight</span>(<span class="number">300</span>);</span><br><span class="line">    b1.<span class="built_in">volume</span>();</span><br><span class="line">    b2.<span class="built_in">volume</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static占用的大小"><a href="#static占用的大小" class="headerlink" title="static占用的大小"></a>static占用的大小</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> j;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">// 4</span></span><br><span class="line">&#125;;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> j;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getK</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        k = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(C1) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(C2) &lt;&lt; endl;</span><br><span class="line">    C2 c1, c2;</span><br><span class="line">    c1.<span class="built_in">getK</span>();<span class="comment">// 返回c1的k</span></span><br><span class="line">    c2.<span class="built_in">getK</span>();<span class="comment">// 返回c2的k</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(S1) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(S2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有普通成员变量才会占对象空间 </span></span><br></pre></td></tr></table></figure><h2 id="强化练习-仓库货物管理"><a href="#强化练习-仓库货物管理" class="headerlink" title="强化练习 仓库货物管理"></a>强化练习 仓库货物管理</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Goods</span>() &#123;</span><br><span class="line">        weight = <span class="number">0</span>;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建了一个重量为&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Goods</span>(<span class="keyword">int</span> w) &#123;</span><br><span class="line">        <span class="comment">//需要创建一个w的货物，并且仓库加上这个重量</span></span><br><span class="line">        weight = w;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">        total_weight += w;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建了一个重量为&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Goods</span>() &#123;</span><br><span class="line">        <span class="comment">//仓库减少这个货物的重量</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;删除了一箱重量是&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">        total_weight -= weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_total_weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total_weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Goods* next;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total_weight;<span class="comment">//仓库总重量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Goods::total_weight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Goods* &amp;head,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用二级指针或一级指针引用来改变</span></span><br><span class="line">    <span class="comment">//创建一个货物 重量是w</span></span><br><span class="line">    Goods* new_goods = <span class="keyword">new</span> <span class="built_in">Goods</span>(w);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        head = new_goods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        new_goods-&gt;next = head;</span><br><span class="line">        head = new_goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">(Goods*&amp; head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;仓库中已经没有货物了。。&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Goods* temp = head;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;saled.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    Goods* head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1 进货&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2 出货&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0 退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">//进货</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入要创建货物的重量&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; w;</span><br><span class="line">            <span class="built_in">buy</span>(head, w);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="comment">//出货</span></span><br><span class="line">            <span class="built_in">sale</span>(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="comment">//退出</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前仓库的总重量是&quot;</span> &lt;&lt; Goods::<span class="built_in">get_total_weight</span>() &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><h3 id="如何区分变量属于哪个对象"><a href="#如何区分变量属于哪个对象" class="headerlink" title="如何区分变量属于哪个对象"></a>如何区分变量属于哪个对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        mI = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getI</span><span class="params">(Test* <span class="keyword">this</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this就是指向调用该成员函数方法的对象地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;mI;</span><br><span class="line">        <span class="comment">//return mI;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> mI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test_init</span><span class="params">(Test* pthis, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    pthis-&gt;mI = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getI</span><span class="params">(struct Test* pthis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pthis-&gt;mI;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//Test(&amp;t1,10)</span></span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">getI</span>();<span class="comment">//getI(&amp;t1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this指针-1"><a href="#this指针-1" class="headerlink" title="this指针"></a>this指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_k = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;<span class="comment">// 成员函数尾部出现const,修饰this指针</span></span><br><span class="line">        <span class="comment">// 此时类型为const Test const*</span></span><br><span class="line">        <span class="comment">// this-&gt;m_k = 100;(√)</span></span><br><span class="line">        <span class="comment">// this指针不是const Test* int型</span></span><br><span class="line">        <span class="comment">// this++;(×)</span></span><br><span class="line">        <span class="comment">// this指针是一个常指针，Test const*</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_k;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">// Test(&amp;t1,10)</span></span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;<span class="comment">// Test(&amp;t1,20)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局函数和成员函数"><a href="#全局函数和成员函数" class="headerlink" title="全局函数和成员函数"></a>全局函数和成员函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="function">Test <span class="title">TestAdd</span><span class="params">(Test&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="function">Test <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// +=方法</span></span><br><span class="line">    <span class="function">Test&amp; <span class="title">TestAdd2</span><span class="params">(Test&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += another.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += another.b;</span><br><span class="line">        <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 如果想返回一个对象本身，在成员方法中，用*this返回</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">// 1 在全局提供一个两个Test相加的函数</span></span><br><span class="line"><span class="function">Test <span class="title">TestAdd</span><span class="params">(Test&amp; t1, Test&amp; t2)</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">temp</span><span class="params">(t1.getA() + t2.getA(), t1.getB() + t2.getB())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="comment">// Test t3 = TestAdd(t1, t2);</span></span><br><span class="line">    Test t3 = t1.<span class="built_in">TestAdd</span>(t2);</span><br><span class="line">    t3.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="comment">// ((t1+=t2)+=t2)+=t2</span></span><br><span class="line">    <span class="comment">// 如果想对一个对象连续调用成员方法，每次都会改变对象本身，成员方法需要返回引用</span></span><br><span class="line">    t1.<span class="built_in">TestAdd2</span>(t2).<span class="built_in">TestAdd2</span>(t2);</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回对象本身</span></span><br></pre></td></tr></table></figure><h2 id="自定义的数组类"><a href="#自定义的数组类" class="headerlink" title="自定义的数组类"></a>自定义的数组类</h2><p>代码如下：<br> MyArray.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyArray</span>();</span><br><span class="line">    <span class="built_in">MyArray</span>(<span class="keyword">int</span> len);</span><br><span class="line">    <span class="built_in">MyArray</span>(<span class="keyword">const</span> MyArray&amp; another);</span><br><span class="line">    ~<span class="built_in">MyArray</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span>* space;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>MyArray.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyArray::<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;MyArray()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;space = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyArray::<span class="built_in">MyArray</span>(<span class="keyword">int</span> len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = len;</span><br><span class="line">        <span class="comment">//给space开辟空间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray(int len)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyArray::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray&amp; another) &#123;</span><br><span class="line">    <span class="keyword">if</span> (another.len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len + another.len;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;space[i] = another.space[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray::MyArray(const MyArray&amp; another)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MyArray::<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;space != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;space;</span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="literal">NULL</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray::~MyArray()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyArray::setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;space != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;space[index] = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyArray::getData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;space[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyArray::getLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyArray <span class="title">array1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">// 开辟10元素的数组</span></span><br><span class="line">    <span class="comment">// 赋值操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array1.<span class="built_in">setData</span>(i, i + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array1.<span class="built_in">getData</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    MyArray array2 = array1;</span><br><span class="line">    <span class="comment">/*MyArray array3;</span></span><br><span class="line"><span class="comment">array3 = array1;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的扩展（二）</title>
      <link href="undefined/4966a5fd/"/>
      <url>undefined/4966a5fd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>类与对象</p></blockquote><span id="more"></span><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>类是一种数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">(struct Hero&amp; h)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hero&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; h.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sex = &quot;</span> &lt;&lt; h.sex &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvHero</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">// 访问控制权限</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;advHero&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;sex = &quot;</span> &lt;&lt; sex &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="comment">// &#123;&#125;以内叫类的内部，以外叫类的外部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> kind[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line">    <span class="comment">// 在public下面定义成员变量和函数 是能够在类的内部和外部都可以访问的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kind = &quot;</span> &lt;&lt; kind &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;color = &quot;</span> &lt;&lt; color &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; kind &lt;&lt; <span class="string">&quot;开始写字了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; kind &lt;&lt; <span class="string">&quot;跑起来了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 在private下面定义的成员变量和方法只能够在类的内部访问</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="keyword">char</span> kind[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hero h;</span><br><span class="line">    <span class="built_in">strcpy</span>(h.name, <span class="string">&quot;gailun&quot;</span>);</span><br><span class="line">    h.sex = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printHero</span>(h);</span><br><span class="line">    AdvHero advH;</span><br><span class="line">    <span class="built_in">strcpy</span>(advH.name, <span class="string">&quot;ChunBro&quot;</span>);</span><br><span class="line">    advH.sex = <span class="number">1</span>;</span><br><span class="line">    advH.<span class="built_in">printHero</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Animal dog;</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.kind, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.color, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    Animal sheep;</span><br><span class="line">    <span class="built_in">strcpy</span>(sheep.kind, <span class="string">&quot;sheep&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(sheep.color, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">    dog.<span class="built_in">write</span>();</span><br><span class="line">    sheep.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><p>类把数据（事物的属性）和函数（事物的行为——操作）封装为一个整体。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_date</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;year, month, day&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; d.year;</span><br><span class="line">    cin &gt;&gt; d.month;</span><br><span class="line">    cin &gt;&gt; d.day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印data的接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_date</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; d.year &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; d.month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; d.day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_leap_year</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((d.year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (d.year % <span class="number">100</span> != <span class="number">0</span>) || (d.year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 成员方法 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;year, month, day&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; year;</span><br><span class="line">        cin &gt;&gt; month;</span><br><span class="line">        cin &gt;&gt; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印data的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_leap_year</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_year</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_year</span><span class="params">(<span class="keyword">int</span> new_year)</span> </span>&#123;</span><br><span class="line">        year = new_year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">// 保护控制权限。在类的继承中跟private有区别，在单个类中，跟private是一模一样的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个类类的内部，默认的访问控制权限是private</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个结构体默认的访问控制权限是public</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    Date d1;</span><br><span class="line">    <span class="built_in">init_date</span>(d1);</span><br><span class="line">    <span class="built_in">print_date</span>(d1);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_leap_year</span>(d1) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyDate my_date;</span><br><span class="line">    my_date.<span class="built_in">init_date</span>();</span><br><span class="line">    my_date.<span class="built_in">print_date</span>();</span><br><span class="line">    <span class="keyword">if</span> (my_date.<span class="built_in">is_leap_year</span>() == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter,setter</span></span><br><span class="line">    cout &lt;&lt; my_date.<span class="built_in">get_year</span>() &lt;&lt; endl;</span><br><span class="line">    my_date.<span class="built_in">set_year</span>(<span class="number">2000</span>);</span><br><span class="line">    cout &lt;&lt; my_date.<span class="built_in">get_year</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*错误写法：</span></span><br><span class="line"><span class="comment">Hero h;</span></span><br><span class="line"><span class="comment">h.year = 1000;*/</span></span><br><span class="line">    Hero2 h2;</span><br><span class="line">    h2.year = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">char</span> *food)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot;吃&quot;</span> &lt;&lt; food &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(class Dog &amp;dog, <span class="keyword">char</span> *food)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; dog.name &lt;&lt; <span class="string">&quot;吃&quot;</span> &lt;&lt; food &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.name, <span class="string">&quot;狗&quot;</span>);</span><br><span class="line">    <span class="built_in">eat</span>(dog, <span class="string">&quot;翔&quot;</span>);</span><br><span class="line">    dog.<span class="built_in">eat</span>(<span class="string">&quot;翔&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例一：求圆的周长和面积"><a href="#案例一：求圆的周长和面积" class="headerlink" title="案例一：求圆的周长和面积"></a>案例一：求圆的周长和面积</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的周长</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCircleGirth</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span>*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCircleArea</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*r*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用面向对象实现</span></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> *m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r*m_r*<span class="number">3.14</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> m_r; <span class="comment">// 圆的私有成员 半径</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_area = m_r*m_r*<span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">return</span> m_area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_girth = m_r * <span class="number">2</span> * <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">return</span> m_girth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> m_r;</span><br><span class="line">    <span class="keyword">double</span> m_girth; <span class="comment">//周长</span></span><br><span class="line">    <span class="keyword">double</span> m_area;<span class="comment">//面积</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> r = <span class="number">10</span>; <span class="comment">// 圆的半径</span></span><br><span class="line">    <span class="keyword">double</span> g = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">0</span>;</span><br><span class="line">    g = <span class="built_in">getCircleGirth</span>(r);</span><br><span class="line">    a = <span class="built_in">getCircleArea</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Circle c;</span><br><span class="line"></span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; c.<span class="built_in">getR</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; c.<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; c.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Circle2 c2;</span><br><span class="line"></span><br><span class="line">    c2.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; c2.<span class="built_in">getR</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; c2.<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; c2.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例二：求圆的面积-多文件"><a href="#案例二：求圆的面积-多文件" class="headerlink" title="案例二：求圆的面积(多文件)"></a>案例二：求圆的面积(多文件)</h2><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Circle.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;面积&quot;</span> &lt;&lt; c.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Circle.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Circle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Circle::setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    m_r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_area = m_r *m_r *<span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">return</span> m_area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_girth = m_r * <span class="number">2</span> * <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m_girth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例三：求立方体是否相等"><a href="#案例三：求立方体是否相等" class="headerlink" title="案例三：求立方体是否相等"></a>案例三：求立方体是否相等</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立方体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setABC</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">        m_c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_a*m_b) * <span class="number">2</span> + (m_a*m_c) * <span class="number">2</span> + (m_b*m_c) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_a*m_b*m_c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同类之间无私处</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeCube</span><span class="params">(Cube &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_a == another.m_a &amp;&amp;</span><br><span class="line">            m_b == another.<span class="built_in">getB</span>() &amp;&amp;</span><br><span class="line">            m_c == another.<span class="built_in">getC</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeCube</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">getA</span>() == c2.<span class="built_in">getA</span>() &amp;&amp;</span><br><span class="line">        c1.<span class="built_in">getB</span>() == c2.<span class="built_in">getB</span>() &amp;&amp;</span><br><span class="line">        c1.<span class="built_in">getC</span>() == c2.<span class="built_in">getC</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Cube c1;</span><br><span class="line">    c1.<span class="built_in">setABC</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    Cube c2;</span><br><span class="line">    c2.<span class="built_in">setABC</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 的体积是&quot;</span> &lt;&lt; c1.<span class="built_in">getVolume</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 的面积是&quot;</span> &lt;&lt; c1.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">judgeCube</span>(c1, c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ------ &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">judgeCube</span>(c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例四：求点是否在圆内"><a href="#案例四：求点是否在圆内" class="headerlink" title="案例四：求点是否在圆内"></a>案例四：求点是否在圆内</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x0 = x;</span><br><span class="line">        y0 = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个判断点是否在圆内</span></span><br><span class="line">    <span class="comment">// true 在内部</span></span><br><span class="line">    <span class="comment">// false 在外部</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint</span><span class="params">(Point &amp;p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dd;</span><br><span class="line"></span><br><span class="line">        dd = (p.<span class="built_in">getX</span>() - x0)*(p.<span class="built_in">getX</span>() - x0) + (p.<span class="built_in">getY</span>() - y0)*(p.<span class="built_in">getY</span>() - y0);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dd &gt; m_r*m_r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x0;</span><br><span class="line">    <span class="keyword">int</span> y0;</span><br><span class="line">    <span class="keyword">int</span> m_r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setXY</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    Point p;</span><br><span class="line">    p.<span class="built_in">setXY</span>(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (c.<span class="built_in">judgePoint</span>(p) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;圆的内部&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;圆的外部&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例五-判断两个圆是否相交"><a href="#案例五-判断两个圆是否相交" class="headerlink" title="案例五 判断两个圆是否相交"></a>案例五 判断两个圆是否相交</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两点距离的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">pointDistance</span><span class="params">(Point &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d_x = m_x - another.m_x;</span><br><span class="line">        <span class="keyword">int</span> d_y = m_y - another.m_y;</span><br><span class="line">        <span class="keyword">double</span> dis = <span class="built_in">sqrt</span>(d_x*d_x + d_y*d_y);</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        p0.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断圆是否跟我相交</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIntersection</span><span class="params">(Circle &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两个半径之和</span></span><br><span class="line">        <span class="keyword">int</span> rr = m_r + another.m_r;</span><br><span class="line">        <span class="comment">// 两圆心之间距离</span></span><br><span class="line">        <span class="keyword">double</span> dis = p0.<span class="built_in">pointDistance</span>(another.p0);</span><br><span class="line">        <span class="keyword">if</span> (dis &lt;= rr) &#123;</span><br><span class="line">            <span class="comment">// 相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_r;</span><br><span class="line">    Point p0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c1, c2;</span><br><span class="line">    <span class="keyword">int</span> x, y, r;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的半径&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    c1.<span class="built_in">setR</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的x&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; y;</span><br><span class="line">    c1.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的半径&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    c2.<span class="built_in">setR</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的x&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; y;</span><br><span class="line">    c2.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">isIntersection</span>(c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相交&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相交&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的扩展（一）</title>
      <link href="undefined/79704925/"/>
      <url>undefined/79704925/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内联函数，默认参数和占位参数，以及函数重载和函数指针的笔记</p></blockquote><span id="more"></span><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><blockquote><p>原理：内联函数直接将代码贴到函数调用的地方，使得程序在调用函数时不用来回跳跃等其它操作，从而达到提高程序运行速度的目的（但其占用内存更大）</p></blockquote><ul><li>适用场景：函数体很“小”，且被“频繁”调用</li><li>inline和宏定义的区别：inline函数是函数，宏不是函数；内联函数在编译时展开，宏是在编译时展开的；在编译的时候，内联函数可以直接被镶嵌到目标代码中，宏定义只是简单地做文本替换；内联函数可以完成类型检查、语句是否正确等编译功能，宏不具备这样的能力；宏定义在处理宏参数时要非常小心，容易产生二义性，而内联函数定义时不会产生二义性</li><li>C++中内联编译的限制：不能存在任何形式的循环语句，函数体不能过于庞大，不能对函数进行取址操作，函数内联声明必须在调用语句之前</li></ul><p>在类定义中的定义的函数都是内联函数，即使没有使用 inline 说明符。对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。如果已定义的函数多于一行，编译器会忽略 inline 限定符（即看作普通函数处理）</p><p>注意：定义为普通函数，声明为内联函数，仍为普通函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b)</span></span><br><span class="line">((a)&gt;(b)?(a):(b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printAB</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;,b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">MAX</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="built_in">printAB</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算机内存由慢到快网盘，硬盘，内存，缓存，寄存器</span></span><br></pre></td></tr></table></figure><h2 id="默认参数和占位参数"><a href="#默认参数和占位参数" class="headerlink" title="默认参数和占位参数"></a>默认参数和占位参数</h2><h3 id="单个默认参数"><a href="#单个默认参数" class="headerlink" title="单个默认参数"></a>单个默认参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a = <span class="number">666</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">// 这个不填参数的时候，会使用你的默认参数，填参数时，使用你填的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多个默认参数"><a href="#多个默认参数" class="headerlink" title="多个默认参数"></a>多个默认参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_volume</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;w = &quot;</span> &lt;&lt; width &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;h = &quot;</span> &lt;&lt; height &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> len * width * height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">30</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;体积是&quot;</span> &lt;&lt; <span class="built_in">get_volume</span>(len, w, h) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数个数一一对应</span></span><br><span class="line"><span class="comment">// 传参从右往左传，可以一部分为默认参数，一部分传参</span></span><br></pre></td></tr></table></figure><p>默认参数为当没有实参时，默认的值。 当函数有一个参数为默认参数，那么从这个参数起，后面的参数都必须有默认参数。在函数的声明和定义中，默认参数只能写一次，不然编译器会报错，特别是在分文件编写中</p><h3 id="占位参数"><a href="#占位参数" class="headerlink" title="占位参数"></a>占位参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func1</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">func2</span>(<span class="number">199</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>占位参数只有参数类型声明，而没有参数名声明，一般情况下，在函数体内部无法使用占位参数。占位参数必须填入实参，占位参数也可以有默认值。占位参数与默认参数结合起来使用，兼容C语言程序中可能出现的不规范写法。</p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数重载的话不要写默认参数，为了避免调用出现函数冲突</span></span><br><span class="line"><span class="comment">// 可以写占用参数，但不要与默认参数一起使用</span></span><br><span class="line"><span class="comment">// 如果调用func(10,20)则出错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c = <span class="number">300</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;print1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;print2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, x);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">10.0</span>);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">3.14f</span>);<span class="comment">// (double)</span></span><br><span class="line">    <span class="built_in">print1</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//(int)</span></span><br><span class="line">    <span class="comment">// 匹配类型优先，其次为隐式转换</span></span><br><span class="line">    <span class="comment">// 若都匹配不到，则调用失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数名相同，参数列表(个数，类型，顺序)不同；函数返回值并不是构成函数重载的条件</p><h2 id="函数重载和函数指针"><a href="#函数重载和函数指针" class="headerlink" title="函数重载和函数指针"></a>函数重载和函数指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int,int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义一种函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(MY_FUNC)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义一个指向一种函数类型的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*MY_FUNC_P)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    MY_FUNC* fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = func;</span><br><span class="line">    <span class="built_in">fp</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    MY_FUNC_P fp1 = <span class="literal">NULL</span>;</span><br><span class="line">    fp1 = func;</span><br><span class="line">    <span class="built_in">fp1</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span> (*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    fp3 = func;</span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    fp3 = func;<span class="comment">//fp3-&gt;func(int,int)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数指针不可自加</span></span><br><span class="line">    <span class="comment">// 实际上在给函数指针赋值的时候，是会发生函数重载匹配的</span></span><br><span class="line">    <span class="comment">// 在调用函数指针的时候，所调用的函数就已经固定了，而非重载，此处不能隐式转换</span></span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span>(*fp4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    fp4 = func;<span class="comment">//fp4-&gt;func(int,int,int)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">30</span>);<span class="comment">//func(int,int)</span></span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">fp4</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++对c的增强</title>
      <link href="undefined/cecfc2f4/"/>
      <url>undefined/cecfc2f4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍了c++在c基础上的增强</p></blockquote><span id="more"></span><h2 id="命名空间（namespace）"><a href="#命名空间（namespace）" class="headerlink" title="命名空间（namespace）"></a>命名空间（namespace）</h2><h3 id="命名空间的使用"><a href="#命名空间的使用" class="headerlink" title="命名空间的使用"></a>命名空间的使用</h3><p>方式一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>命名空间更好的控制标识符的作用域</p></li><li><p>cout代表黑屏幕，cin代表键盘</p></li><li><p>iostream提供一个叫命名空间的东西，标准的命名空间是std</p></li></ul><h3 id="命名空间的定义"><a href="#命名空间的定义" class="headerlink" title="命名空间的定义"></a>命名空间的定义</h3><h4 id="命名空间的普通定义"><a href="#命名空间的普通定义" class="headerlink" title="命名空间的普通定义"></a>命名空间的普通定义</h4><p>方式一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; spaceA::g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> spaceA;</span><br><span class="line">    cout &lt;&lt; g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> spaceA::g_a;</span><br><span class="line">    cout &lt;&lt; g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命名空间的嵌套定义"><a href="#命名空间的嵌套定义" class="headerlink" title="命名空间的嵌套定义"></a>命名空间的嵌套定义</h4><p>方式一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> spaceB::spaceC;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    spaceB::spaceC::teacher t1;</span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> spaceB::spaceC::teacher;</span><br><span class="line">    teacher t1;</span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-对C的增强"><a href="#C-对C的增强" class="headerlink" title="C++对C的增强"></a>C++对C的增强</h2><h3 id="定义函数时必须写明类型，即int不可省略"><a href="#定义函数时必须写明类型，即int不可省略" class="headerlink" title="定义函数时必须写明类型，即int不可省略"></a>定义函数时必须写明类型，即int不可省略</h3><h3 id="声明结构体类型后，定义结构体变量时，C中需写struct，C-则不需要"><a href="#声明结构体类型后，定义结构体变量时，C中需写struct，C-则不需要" class="headerlink" title="声明结构体类型后，定义结构体变量时，C中需写struct，C++则不需要"></a>声明结构体类型后，定义结构体变量时，C中需写struct，C++则不需要</h3><h3 id="全局变量重定义的加强-随用随定义"><a href="#全局变量重定义的加强-随用随定义" class="headerlink" title="全局变量重定义的加强(随用随定义)"></a>全局变量重定义的加强(随用随定义)</h3><h3 id="布尔类型的增强"><a href="#布尔类型的增强" class="headerlink" title="布尔类型的增强"></a>布尔类型的增强</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    flag = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bool类型的字节数为1</span></span><br></pre></td></tr></table></figure><ul><li>bool只能取0,1，非0自动转换为1，值只能为true和false</li></ul><h3 id="三目运算符的增强"><a href="#三目运算符的增强" class="headerlink" title="三目运算符的增强"></a>三目运算符的增强</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>,b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c = a &lt; b ? a : b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">        (a &lt; b ? a : b) = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//*((a &lt; b) ? &amp;a : &amp;b) = 50;（C,C++通用写法）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>C++中三目运算符可以做左值，C中三目运算符不能做左值</li><li>C++中三目运算符返回变量自身，C中返回变量的值</li><li>C++中两种赋值同时出现时，不论谁前谁后，都是*((a &lt; b) ? &amp;a : &amp;b) = 50的结果优先</li></ul><h3 id="const的增强"><a href="#const的增强" class="headerlink" title="const的增强"></a>const的增强</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*)&amp;a;</span><br><span class="line">    *b = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//改变的为临时开辟的变量</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>C++中通过指针不能改变所指向常变量的值</li><li>C++中将const存于符号表中，无空间和地址</li><li>C++中const定义的为常量(与#define类似，但运行时段不同，define无法被输出)</li></ul><h3 id="枚举类型的增强"><a href="#枚举类型的增强" class="headerlink" title="枚举类型的增强"></a>枚举类型的增强</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">season</span> &#123;</span></span><br><span class="line">    SPR = <span class="number">0</span>,</span><br><span class="line">    SUM,</span><br><span class="line">    AUT,</span><br><span class="line">    WIN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//enum season s=2;(×)</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">season</span> <span class="title">s</span> =</span> AUT;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++中枚举变量赋值只能赋左边的元素名，不能赋数字</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
