<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>QQ消息轰炸器</title>
    <url>/undefined/cd8fce3/</url>
    <content><![CDATA[<blockquote>
<p>QQ消息轰炸器，可调时间间隔，发送数量</p>
</blockquote>
<span id="more"></span>
<p>今天发现了一个好玩的东东，记录到博客上</p>
<p>注意更改一下消息间隔时间，提前复制好要发送的内容，打开要轰炸对象的聊天窗口，然后运行该代码</p>
<p>（该代码在vs2019下会报错，我使用的是dev）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> time ?<span class="comment">//更改发送消息间隔时间 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];<span class="comment">//使用前先复制要轰炸的内容 </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要轰炸的对象的名称：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;name,<span class="number">40</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要轰炸的次数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">    HWND H =FindWindow(<span class="number">0</span>,name);<span class="comment">//找到对话窗口 </span></span><br><span class="line">    <span class="keyword">while</span>(i--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        SendMessage(H,WM_PASTE,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//粘贴内容 </span></span><br><span class="line">        SendMessage(H,WM_KEYDOWN,VK_RETURN,<span class="number">0</span>);<span class="comment">//回车发送</span></span><br><span class="line">        Sleep(time);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>业余</category>
      </categories>
      <tags>
        <tag>小游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>C++11新特性</title>
    <url>/undefined/fbe3d523/</url>
    <content><![CDATA[<blockquote>
<p>C++11 是2011年官方为c++带来的新语法新标准</p>
</blockquote>
<span id="more"></span>
<h2 id="auto声明"><a href="#auto声明" class="headerlink" title="auto声明"></a>auto声明</h2><p>让编译器根据初始值类型直接推断出变量的类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set的迭代器原始写法：</span></span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="keyword">int</span>&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// auto写法：</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于范围的for循环"><a href="#基于范围的for循环" class="headerlink" title="基于范围的for循环"></a>基于范围的for循环</h2><p>遍历数组中的每一个元素时使用时比较方便</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : arr)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; endl; <span class="comment">// 输出数组中的每一个元素的值，每个元素占据一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;i : arr) <span class="comment">// i为引用变量</span></span><br><span class="line">    i = i * <span class="number">2</span>; <span class="comment">// 将数组中的每一个元素都乘以2，arr[4]的内容变为了&#123;0, 2, 4, 6&#125;</span></span><br></pre></td></tr></table></figure>

<p>当然上面的也可以替换为auto</p>
<h2 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h2><p><code>stoi</code> 转换为int</p>
<p><code>stod</code> 转换为double</p>
<p><code>stof</code> 转换为float</p>
<p><code>stold</code> 转换为long double</p>
<p><code>stol</code> 转换为long</p>
<p><code>stoll</code> 转换为long long</p>
<p><code>stoul</code> 转换为unsigh long</p>
<p><code>stoull</code> 转换为unsigh long long</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>stl初识</title>
    <url>/undefined/49ab1d75/</url>
    <content><![CDATA[<blockquote>
<p>stl总体的简单认识</p>
</blockquote>
<span id="more"></span>
<h2 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a><u>STL六大组件</u></h2><p>容器，算法，迭代器，仿函数，适配器（配接器），空间配置器</p>
<p><strong>容器</strong>： 各种数据结构，如vector，list，deque，set，map等，用来存放数据</p>
<ul>
<li>序列式容器：强调值的排序，序列式容器中每个元素均有固定的位置</li>
<li>关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系</li>
</ul>
<p><strong>算法</strong>： 各种常用的算法，如sort，find，copy，for_each等。分为质变算法和非质变算法</p>
<ul>
<li>质变算法：是指运算过程中会更改区间的元素的内容。例如拷贝，替换，删除等等</li>
<li>非质变算法：是指运算过程中不会更改区间的元素内容，例如查找，计数，遍历，寻找极值等等</li>
</ul>
<p><strong>迭代器</strong>： 扮演了容器与算法之间的胶合剂</p>
<p><strong>仿函数</strong>： 行为类似函数，可作为算法的某种策略</p>
<p><strong>适配器</strong>： 一种用来修饰容器或者仿函数或迭代器接口的东西</p>
<p><strong>空间配置器</strong>： 负责空间的配置和管理</p>
<h2 id="容器算法迭代器初识"><a href="#容器算法迭代器初识" class="headerlink" title="容器算法迭代器初识"></a><u>容器算法迭代器初识</u></h2><h3 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h3><p>容器：vector</p>
<p>算法：for_each</p>
<p>迭代器：vector<int>::iterator</p>
<pre><code>v.begin()返回迭代器，这个迭代器指向容器中的第一个元素
v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置
v.rend()返回迭代器，这个迭代器指向容器中的第一个元素的上一个位置
v.rbegin()返回迭代器，这个迭代器指向容器中的最后一个元素
insert()
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器存放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个vector容器，数组</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="comment">//向容器插入数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line">    <span class="comment">//通过迭代器来访问容器中的数据</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itBegin = v.<span class="built_in">begin</span>();</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;::iterator itEnd = v.<span class="built_in">end</span>();</span><br><span class="line">    <span class="comment">//第一种遍历方式</span></span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd) &#123;</span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种遍历方式</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三种遍历方式</span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vector存放自定义数据类型"><a href="#vector存放自定义数据类型" class="headerlink" title="vector存放自定义数据类型"></a>vector存放自定义数据类型</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器中存放自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    string m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">    v.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; (*it).m_Age &lt;&lt; endl;</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型，指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Person*&gt;v;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="comment">//向容器中添加数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p4);</span><br><span class="line">    v.<span class="built_in">push_back</span>(&amp;p5);</span><br><span class="line">    <span class="comment">//遍历容器中的数据</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person*&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; (*it)-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; (*it)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vector容器嵌套容器"><a href="#vector容器嵌套容器" class="headerlink" title="vector容器嵌套容器"></a>vector容器嵌套容器</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建大容器</span></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;v;</span><br><span class="line">    <span class="comment">//创建小容器</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">    <span class="comment">//向小容器中添加数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">        v2.<span class="built_in">push_back</span>(i + <span class="number">2</span>);</span><br><span class="line">        v3.<span class="built_in">push_back</span>(i + <span class="number">3</span>);</span><br><span class="line">        v4.<span class="built_in">push_back</span>(i + <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将小容器插入到大容器中</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(v1);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v2);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v3);</span><br><span class="line">    v.<span class="built_in">push_back</span>(v4);</span><br><span class="line">    <span class="comment">//通过大容器，把所有数据遍历一遍</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//(*it)-----容器vector&lt;int&gt;</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator vit = (*it).<span class="built_in">begin</span>(); vit != (*it).<span class="built_in">end</span>(); vit++) &#123;</span><br><span class="line">            cout &lt;&lt; *vit &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>cctype头文件中的函数</title>
    <url>/undefined/5c3c6ef1/</url>
    <content><![CDATA[<blockquote>
<p>判断元素是否属于某个类型</p>
</blockquote>
<span id="more"></span>
<p><code>isalpha</code> 大小写字母</p>
<p><code>islower</code> 小写字母</p>
<p><code>isupper</code> 大写字母</p>
<p><code>isdigit</code> 数字</p>
<p><code>isalnum</code> 大小写字母，数字</p>
<p><code>isblank</code> space 和 \t</p>
<p><code>isspace</code> space 和 \t，\n，\r</p>
<p><code>tolower</code> 转换为小写字母</p>
<p><code>toupper</code> 转换为大写字母</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>vector容器</title>
    <url>/undefined/4ac124aa/</url>
    <content><![CDATA[<blockquote>
<p>介绍vector容器</p>
</blockquote>
<span id="more"></span>
<h3 id="vector基本概念"><a href="#vector基本概念" class="headerlink" title="vector基本概念"></a>vector基本概念</h3><p>功能：vector数据结构和数组非常相似，也称为单端数组</p>
<p>区别：数组是静态空间，而vector可以动态扩展</p>
<p>动态扩展：并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间。vector迭代器是支持随机访问的迭代器</p>
<h3 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h3><p>功能：创建vector容器</p>
<p>函数原型：</p>
<ul>
<li><code>vector&lt;T&gt; v;</code>  //采用模板实现类实现，默认构造函数</li>
<li><code>vector(v.begin(),v.end());</code>  //将v[begin(),end())区间中的元素拷贝给本身(注意区间为前闭后开)</li>
<li><code>vector(n,elem);</code>  //构造函数将n个elem拷贝给本身</li>
<li><code>vector(const vector &amp;vec);</code>  //拷贝构造函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的构造</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;<span class="comment">//默认构造 无参构造</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="comment">//通过区间方式进行构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v2</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v2);<span class="comment">//均输出0到9</span></span><br><span class="line">    <span class="comment">//n个elem方式构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v3</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v3);<span class="comment">//输出10个100</span></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">v4</span>(v3);</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vector赋值操作"><a href="#vector赋值操作" class="headerlink" title="vector赋值操作"></a>vector赋值操作</h3><p>函数原型：</p>
<ul>
<li><code>vector&amp; operator=(const vector &amp;vec);</code>  //重载等号操作符</li>
<li><code>assign(beg,end);</code>  //将[beg,end)区间中的数据拷贝赋值给本身</li>
<li><code>assign(n,elem);</code>  //将n个elem拷贝赋值给本身</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="comment">//赋值 operator=</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v2;</span><br><span class="line">    v2 = v1;</span><br><span class="line">    <span class="built_in">printVector</span>(v2);</span><br><span class="line">    <span class="comment">//assign</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v3;</span><br><span class="line">    v3.<span class="built_in">assign</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">printVector</span>(v3);</span><br><span class="line">    <span class="comment">//n个elem方式赋值</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v4;</span><br><span class="line">    v4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h3><p>函数原型：</p>
<p><code>empty();</code>//判断容器是否为空</p>
<p><code>capacity();</code>  //容器的容量</p>
<p><code>size();</code> //返回容器中元素的个数</p>
<p><code>resize(int num);</code>  //重新指定容器的长度为num，若容器变长，则以默认值填充新位置；若容器变短，则末尾超出容器长度的元素被删除</p>
<p><code>resize(int num,elem);</code>  //重新指定容器的长度为num，若容器变长，则以elem值填充新位置；若容器变短，则末尾超出容器长度的元素被删除</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的容量和大小操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printVector</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> (v1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1的容量为：&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;v1的大小为：&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新指定大小</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">15</span>);<span class="comment">//利用重载版本，可以指定默认填充值，参数2</span></span><br><span class="line">    <span class="built_in">printVector</span>(v1);<span class="comment">//如果重新指定的比原来长了，默认用0填充原来的位置</span></span><br><span class="line">    v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printVector</span>(v1);<span class="comment">//如果重新指定的比原来的短了，超出部分会删除掉</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>string容器</title>
    <url>/undefined/d1b5b4b6/</url>
    <content><![CDATA[<blockquote>
<p>介绍string容器</p>
</blockquote>
<span id="more"></span>
<h3 id="string基本概念"><a href="#string基本概念" class="headerlink" title="string基本概念"></a>string基本概念</h3><ul>
<li>string是C++风格的字符串，而string本质上是一个类，类内部封装了char *，管理这个字符串，是一个char *型的容器</li>
<li>char*是一个指针</li>
</ul>
<p>特点:</p>
<ul>
<li>string类内部封装了很多成员方法，例如：查找find，拷贝copy，删除delete替换repliace，插入insert</li>
<li>string管理char *所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</li>
</ul>
<h3 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h3><p>构造函数原型：</p>
<ul>
<li><p><code>string();</code>   //创建一个空的字符串 例如：string str;</p>
<p><code>string(const char* s);</code>  //使用字符串s初始化</p>
</li>
<li><p><code>string(const string&amp; str);</code>  //使用一个string对象初始化另一个string对象</p>
</li>
<li><p><code>string(int n,char c)</code>  //使用n个字符c初始化</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s1;<span class="comment">//默认构造</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    <span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s4 = &quot;</span> &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string赋值操作"><a href="#string赋值操作" class="headerlink" title="string赋值操作"></a>string赋值操作</h3><p>赋值的函数原型：</p>
<ul>
<li><code>string&amp; operator=(const char* s);</code>  //char* 类型字符串 赋值给当前的字符串</li>
<li><code>string&amp; operator=(const string &amp;s);</code>  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; operator=(char c);</code>  //字符赋给当前的字符串</li>
<li><code>string&amp; assign=(const char *s);</code>  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign=(const char *s,int n);</code>  //把字符串s的前n个字符赋给当前的字符串</li>
<li><code>string&amp; assign=(const char&amp; s);</code>  //把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign(int n,char c);</code>  //用n个字符c赋给当前字符串</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1;</span><br><span class="line">    str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str2;</span><br><span class="line">    str2 = str1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    string str3;</span><br><span class="line">    str3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    string str4;</span><br><span class="line">    str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">    string str5;</span><br><span class="line">    str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>, <span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line">    string str6;</span><br><span class="line">    str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line">    string str7;</span><br><span class="line">    str7.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>operator方式较为常见</p>
<h3 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h3><p>函数原型：</p>
<ul>
<li><code>string&amp; operator+=(const char* str);</code>  //重载+=操作符</li>
<li><code>string&amp; operator+=(const char c);</code>  //重载+=操作符</li>
<li><code>string&amp; operator+=(const string&amp; str);</code>  //重载+=操作符</li>
<li><code>string&amp; append(const char *s);</code>  //把字符串s连接到当前字符串结尾</li>
<li><code>string&amp; append(const char *s,int n);</code>  //把字符串s的前n个字符连接到当前字符串结尾</li>
<li><code>string&amp; append(const string &amp;s);</code>  //同operator+=(const string&amp; str)</li>
<li><code>string&amp; append(const string &amp;s,int pos,int n);</code>  //字符串s中从pos开始的n个字符连接到字符串结尾</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">    str1 += <span class="string">&quot;爱玩游戏&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    str1 += <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str2 = <span class="string">&quot;LOL DNF&quot;</span>;</span><br><span class="line">    str1 += str2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    string str3 = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot; love &quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    str3.<span class="built_in">append</span>(<span class="string">&quot;game abcde&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//str3.append(str2);</span></span><br><span class="line">    str3.<span class="built_in">append</span>(str2, <span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h3><p>查找：查找指定字符串是否存在</p>
<p>替换：在指定位置替换字符串</p>
<p>函数原型：</p>
<ul>
<li><code>int find(const string&amp; str,int pos = 0) const;</code>  //查找str第一次出现位置，从pos开始查找</li>
<li><code>int find(const char* s,int pos = 0) const;</code>  //查找s第一次出现位置，从pos开始查找</li>
<li><code>int find(const char* s,int pos,int n) const;</code>  //从pos位置查找的前n个字符第一次位置</li>
<li><code>int find(const char c,int pos = 0) const;</code>  //查找字符c第一次出现位置</li>
<li><code>int rfind(const string&amp; str,int pos = npos) const;</code>  //查找str最后一次位置，从pos开始查找</li>
<li><code>int rfind(const char* s,int pos = npos) const;</code>  //查找s最后一次出现位置，从pos开始查找</li>
<li><code>int rfind(const char* s,int pos,int n) const;</code>  //从pos查找s的前n个字符最后一次出现位置</li>
<li><code>int rfind(const char c,int pos = 0) const;</code>  //查找字符c最后一次出现位置</li>
<li><code>string&amp; replace(int pos,int n,const string&amp; str);</code>  //替换从pos开始n个字符为字符串str</li>
<li><code>string&amp; replace(int pos,int n,const char* s);</code>  //替换从pos开始n个字符为字符串s</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> pos = str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到字符串&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到字符串，pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//rfind</span></span><br><span class="line">    str1.<span class="built_in">rfind</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 替换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    str1.<span class="built_in">replace</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);<span class="comment">//此处替换4个1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>find从左往右查，rfind从右往左查找</li>
<li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li>
<li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li>
</ul>
<h3 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h3><p>根据ASCII码比较，=返回0，&gt;返回1，&lt;返回-1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串比较</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h3><ul>
<li><code>char&amp; operator[](int n);</code>  //通过[]方式取字符</li>
<li><code>char&amp; at(int n);</code>  //通过at方法获取字符</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string字符存取</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//1 通过[]访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//2 通过at方式访问单个字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        cout &lt;&lt; str.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//修改单个字符</span></span><br><span class="line">    str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//xello</span></span><br><span class="line">    str.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h3><ul>
<li><code>string&amp; insert(int pos,const char* s);</code>  //插入字符串</li>
<li><code>string&amp; insert(int pos,const string&amp; str);</code>  //插入字符串</li>
<li><code>string&amp; insert(int pos,int n,char c);</code>  //在指定位置插入n个字符c</li>
<li><code>string&amp; erase(int pos,int n = npos);</code>  //删除从pos开始的n个字符</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串的插入和删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="comment">//h111ello</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str = &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插入和删除的起始下标都是从0开始</p>
<h3 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h3><p>从字符串中获取想要的子串</p>
<p>函数原型：</p>
<ul>
<li><code>string substr(int pos = 0,int n=npos) const;</code>  //返回由pos开始的n个字符组组成的字符串</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//string求子串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    string subStr = str.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实用操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string email = <span class="string">&quot;zhangsan@sina.com&quot;</span>;</span><br><span class="line">    <span class="comment">//从邮件地址中 获取 用户名信息</span></span><br><span class="line">    <span class="keyword">int</span> pos = email.<span class="built_in">find</span>(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">    string userName = email.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;userName = &quot;</span> &lt;&lt; userName &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记</title>
    <url>/undefined/ac1879a7/</url>
    <content><![CDATA[<blockquote>
<p>CSS学习笔记</p>
</blockquote>
<span id="more"></span>
<h1 id="1-css简介"><a href="#1-css简介" class="headerlink" title="1 css简介"></a>1 css简介</h1><p>css为层叠样式表语言，css规则由两个主要的部分构成：选择器以及一条或多条声明</p>
<ul>
<li>选择器是用于指定css样式的HTML标签，花括号内是对该对象设置的具体样式</li>
<li>属性和属性值以“键值对”的形式出现</li>
<li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等</li>
<li>属性和属性值之间用英文“:”分开</li>
<li>多个“键值对”之间用英文“;”进行区分</li>
</ul>
<h1 id="2-CSS基础选择器"><a href="#2-CSS基础选择器" class="headerlink" title="2 CSS基础选择器"></a>2 CSS基础选择器</h1><p>选择器就是根据不同需求把不同的标签选出来</p>
<p>选择器分为基础选择器和复合选择器两个大类</p>
<ul>
<li>基础选择器是由单个选择器组成的</li>
<li>基础选择器又包括：标签选择器、类选择器、id选择器和通配符选择器</li>
</ul>
<p><code>display: none/block</code>隐藏/显示（块）指定的内容</p>
<h2 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1 标签选择器"></a>2.1 标签选择器</h2><p>用html标签名称作为选择器</p>
<h2 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2 类选择器"></a>2.2 类选择器</h2><p>用“.类名”作为选择器</p>
<p>对应改变样式的文字或图片应在其标签属性添加class=”类名”</p>
<p>长名称和词组可以使用中横线来为选择器命名；不要使用纯数字、中文命名，尽量使用英文字母来表示</p>
<p>可在class中写多个类名，用空格隔开</p>
<p>常见的类命名规则如下：</p>
<table>
<thead>
<tr>
<th align="center">内容</th>
<th align="center">类名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">头</td>
<td align="center">header</td>
</tr>
<tr>
<td align="center">内容</td>
<td align="center">content/container</td>
</tr>
<tr>
<td align="center">尾</td>
<td align="center">footer</td>
</tr>
<tr>
<td align="center">导航</td>
<td align="center">nav</td>
</tr>
<tr>
<td align="center">侧栏</td>
<td align="center">sidebar</td>
</tr>
<tr>
<td align="center">栏目</td>
<td align="center">column</td>
</tr>
<tr>
<td align="center">页面外围控制整体布局宽度</td>
<td align="center">wrapper</td>
</tr>
<tr>
<td align="center">左右中</td>
<td align="center">left right center</td>
</tr>
<tr>
<td align="center">登录条</td>
<td align="center">loginbar</td>
</tr>
<tr>
<td align="center">标志</td>
<td align="center">logo</td>
</tr>
<tr>
<td align="center">广告</td>
<td align="center">banner</td>
</tr>
<tr>
<td align="center">页面主体</td>
<td align="center">main</td>
</tr>
<tr>
<td align="center">热点</td>
<td align="center">hot</td>
</tr>
<tr>
<td align="center">新闻</td>
<td align="center">news</td>
</tr>
<tr>
<td align="center">下载</td>
<td align="center">download</td>
</tr>
<tr>
<td align="center">子导航</td>
<td align="center">subnav</td>
</tr>
<tr>
<td align="center">菜单</td>
<td align="center">menu</td>
</tr>
<tr>
<td align="center">子菜单</td>
<td align="center">submenu</td>
</tr>
</tbody></table>
<h2 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3 id选择器"></a>2.3 id选择器</h2><p>用“#id名”作为选择器</p>
<p>特点：只能调用一次，经常和js一起使用</p>
<h2 id="2-4-通配符选择器"><a href="#2-4-通配符选择器" class="headerlink" title="2.4 通配符选择器"></a>2.4 通配符选择器</h2><p>用“*”作为选择器</p>
<p>特点：改变所有</p>
<h1 id="3-CSS字体属性"><a href="#3-CSS字体属性" class="headerlink" title="3 CSS字体属性"></a>3 CSS字体属性</h1><h2 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h2><blockquote>
<p>font-family: 字体;</p>
</blockquote>
<p>各种字体之间必须使用英文状态下的逗号隔开。一般情况下，如果有空格隔开的多个单词组成的字体，加引号</p>
<p>最常见的几个字体： font-family: ‘Microsoft Yahei’,tahoma,arial,’Hiragino Sans GB’;</p>
<h2 id="3-2-字体大小"><a href="#3-2-字体大小" class="headerlink" title="3.2 字体大小"></a>3.2 字体大小</h2><blockquote>
<p>font-size: 数字px;</p>
</blockquote>
<p>谷歌浏览器默认的文字大小是16px，我们可以给body指定整个页面文字的大小</p>
<h2 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h2><blockquote>
<p>font-weight: </p>
</blockquote>
<p>属性：<br>名称 | 含义<br>:—:|:—:<br>normal | 正常的字体<br>bold | 粗体<br>bolder | IES+特粗体<br>lighter | IES+细体<br>number | IES+100……<br>normal相当于number为400，声明此值将取消之前任何设置</p>
<p>bold相当于number为700，也相当于b对象的作用</p>
<p>number后面不需要加单位</p>
<h2 id="3-4-文字样式"><a href="#3-4-文字样式" class="headerlink" title="3.4 文字样式"></a>3.4 文字样式</h2><blockquote>
<p>font-style: </p>
</blockquote>
<p>属性：normal,italic</p>
<h2 id="3-5-复合属性"><a href="#3-5-复合属性" class="headerlink" title="3.5 复合属性"></a>3.5 复合属性</h2><blockquote>
<p>font:   font-style font-weight font-size/line-height font-family;</p>
</blockquote>
<p>不需要设置的属性可以省略，但必须保留font-size和font-family属性，否则font属性将不起作用</p>
<h1 id="4-文本属性"><a href="#4-文本属性" class="headerlink" title="4 文本属性"></a>4 文本属性</h1><h2 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h2><blockquote>
<p>color:</p>
</blockquote>
<p>表示方法：预定义的颜色值，十六进制，RGB代码（rgb(255,0,0)）</p>
<h2 id="4-2-对齐文本"><a href="#4-2-对齐文本" class="headerlink" title="4.2 对齐文本"></a>4.2 对齐文本</h2><blockquote>
<p>text-align:   (水平对齐方式)</p>
</blockquote>
<p>属性值：right,left,center</p>
<h2 id="4-3-装饰文本"><a href="#4-3-装饰文本" class="headerlink" title="4.3 装饰文本"></a>4.3 装饰文本</h2><blockquote>
<p>text-decoration:   (规定添加到文本的修饰)</p>
</blockquote>
<p>属性：none(默认)，underline(下划线)，overline(上划线)，line-through(删除线)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#baidu</span> &#123;</span><br><span class="line">   <span class="attribute">text-decoration</span> : underline;</span><br><span class="line">   <span class="comment">/* text-decoration : overline; */</span></span><br><span class="line">   <span class="comment">/* text-decoration : line-through; */</span></span><br><span class="line">   <span class="comment">/* text-decoration : blink; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h2><blockquote>
<p>text indent:   数字px/em;</p>
</blockquote>
<h2 id="4-5-行间距"><a href="#4-5-行间距" class="headerlink" title="4.5 行间距"></a>4.5 行间距</h2><blockquote>
<p>line-height:   数字px;</p>
</blockquote>
<p>行间距包括上间距，文本高度，下间距</p>
<h1 id="5-CSS的引入方式"><a href="#5-CSS的引入方式" class="headerlink" title="5 CSS的引入方式"></a>5 CSS的引入方式</h1><h2 id="5-1-内部样式表"><a href="#5-1-内部样式表" class="headerlink" title="5.1 内部样式表"></a>5.1 内部样式表</h2><p>写到html页面内部，是将所有的CSS代码抽取出来，单独放到一个<code>&lt;style&gt;</code>中</p>
<h2 id="5-2-行内样式表"><a href="#5-2-行内样式表" class="headerlink" title="5.2 行内样式表"></a>5.2 行内样式表</h2><h2 id="5-3-外部样式表"><a href="#5-3-外部样式表" class="headerlink" title="5.3 外部样式表"></a>5.3 外部样式表</h2><p>须在html页面中，使用<code>&lt;link&gt;</code>标签引入这个文件</p>
<p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></p>
<h1 id="6-css三大特性"><a href="#6-css三大特性" class="headerlink" title="6 css三大特性"></a>6 css三大特性</h1><h2 id="6-1-层叠性"><a href="#6-1-层叠性" class="headerlink" title="6.1 层叠性"></a>6.1 层叠性</h2><ul>
<li>样式冲突，遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h2 id="6-2-继承性"><a href="#6-2-继承性" class="headerlink" title="6.2 继承性"></a>6.2 继承性</h2><p>子元素可以继承父元素的样式（text-, font-, line-这些元素的开头可以继承，以及color属性）</p>
<p><strong>行高的继承性</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行高可以跟单位也可以不跟单位，如果子元素没有设置行高，则会继承父元素的行高为1.5，此时子元素的行高是：当前子元素的文字大小*1.5</p>
<h2 id="6-3-优先级"><a href="#6-3-优先级" class="headerlink" title="6.3 优先级"></a>6.3 优先级</h2><table>
<thead>
<tr>
<th align="center">选择器</th>
<th align="center">选择器权重</th>
</tr>
</thead>
<tbody><tr>
<td align="center">继承或者 *</td>
<td align="center">0, 0, 0, 0</td>
</tr>
<tr>
<td align="center">标签选择器</td>
<td align="center">0, 0, 0, 1</td>
</tr>
<tr>
<td align="center">类选择器 伪类选择器</td>
<td align="center">0, 0, 1, 0</td>
</tr>
<tr>
<td align="center">ID选择器</td>
<td align="center">0, 1, 0, 0</td>
</tr>
<tr>
<td align="center">行内样式style = “ “</td>
<td align="center">1, 0, 0, 0</td>
</tr>
<tr>
<td align="center">!important</td>
<td align="center">无穷大</td>
</tr>
</tbody></table>
<ul>
<li>权重由四位数字组成，但是不会有进位</li>
</ul>
<p><strong>权重的叠加</strong></p>
<p>复合选择器会有权重叠加，但不会进位</p>
<h1 id="7-emmet语法"><a href="#7-emmet语法" class="headerlink" title="7 emmet语法"></a>7 emmet语法</h1><p>emmet使用缩写，来提高html/css的编写速度</p>
<h2 id="7-1-快速生成html结构语法"><a href="#7-1-快速生成html结构语法" class="headerlink" title="7.1 快速生成html结构语法"></a>7.1 快速生成html结构语法</h2><ul>
<li><p>生成标签 直接输入标签名 按Tab键即可</p>
</li>
<li><p>如果想要生成多个相同标签，加上<code>*</code>就可以，比如<code>div*3</code>就可以快速生成3个div</p>
</li>
<li><p>如果有父子级关系的标签，可以用<code>&gt;</code> 比如<code>ul&gt;li</code>就可以了</p>
</li>
<li><p>如果有兄弟关系的标签，用<code>+</code>就可以了，比如<code>fiv+p</code></p>
</li>
<li><p>如果生成带有类名或者id名字的，直接写<code>.demo</code>或者<code>#two</code>tab键就可以了</p>
</li>
<li><p>如果生成的div类名是有顺序的，可以用自增符号<code>$</code></p>
</li>
<li><p>如果想要在生成的标签内部写内容可以用{ }表示</p>
<p>e.g. div$*5     div{文字} *5</p>
</li>
</ul>
<h2 id="7-2-快速生成CSS样式语法"><a href="#7-2-快速生成CSS样式语法" class="headerlink" title="7.2 快速生成CSS样式语法"></a>7.2 快速生成CSS样式语法</h2><p>输入简写的首字母，再按Tab键</p>
<h2 id="7-3-快速格式化代码"><a href="#7-3-快速格式化代码" class="headerlink" title="7.3 快速格式化代码"></a>7.3 快速格式化代码</h2><p>Shift+Ait+F或者“右键点击格式化文档”</p>
<h1 id="8-复合选择器"><a href="#8-复合选择器" class="headerlink" title="8 复合选择器"></a>8 复合选择器</h1><p>css中根据选择器的类型分为基础选择器和复合选择器</p>
<ul>
<li>复合选择器可以更准确、更高效的选择目标元素</li>
<li>复合选择器是由两个或多个基础选择器，通过不同方式组合而成的</li>
<li>常用的复合选择器包括：后代选择器，子选择器，并集选择器，伪类选择器等等</li>
</ul>
<h2 id="8-1-后代选择器"><a href="#8-1-后代选择器" class="headerlink" title="8.1 后代选择器"></a>8.1 后代选择器</h2><p>后代选择器又称为包含选择器，可以选择父元素里面子元素，其写法是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代</p>
<p>语法：元素1  元素2 { 样式声明 }</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//改变<span class="selector-tag">ol</span>中的<span class="selector-tag">li</span></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>元素1，元素2可以为任何基础选择器</p>
<h2 id="8-2-子选择器"><a href="#8-2-子选择器" class="headerlink" title="8.2 子选择器"></a>8.2 子选择器</h2><p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素</p>
<p>语法：元素1 &gt; 元素2 { 样式声明 }</p>
<h2 id="8-3-并集选择器"><a href="#8-3-并集选择器" class="headerlink" title="8.3 并集选择器"></a>8.3 并集选择器</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于集体声明</p>
<p>并集选择器是各选择器通过英文逗号(,)连接而成，任何形式的选择器都可以作为并集选择器的一部分，并集选择器习惯竖着写</p>
<p>语法：元素1，元素2 { 样式声明 }</p>
<h2 id="8-4-伪类选择器"><a href="#8-4-伪类选择器" class="headerlink" title="8.4 伪类选择器"></a>8.4 伪类选择器</h2><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊的效果，或选择第1个，第n个元素</p>
<p>伪类选择器书写最大的特点是用冒号（：）表示，比如：:hover、:first-child</p>
<h3 id="8-4-1-链接伪类选择器"><a href="#8-4-1-链接伪类选择器" class="headerlink" title="8.4.1 链接伪类选择器"></a>8.4.1 链接伪类选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> //选择所有未访问的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>  //选择所有已被访问的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>  //选择鼠标指针位于其上的链接</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  //选择活动链接（鼠标按下未弹起的链接）</span><br></pre></td></tr></table></figure>

<h3 id="8-4-2-focus伪类选择器"><a href="#8-4-2-focus伪类选择器" class="headerlink" title="8.4.2 :focus伪类选择器"></a>8.4.2 :focus伪类选择器</h3><p>:focus伪类选择器用于选取获得焦点的表单元素</p>
<p>焦点就是光标，一般情况 &lt; input &gt; 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span> :yellow;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-元素的显示模式"><a href="#9-元素的显示模式" class="headerlink" title="9 元素的显示模式"></a>9 元素的显示模式</h1><h2 id="9-1-什么是元素显示模式"><a href="#9-1-什么是元素显示模式" class="headerlink" title="9.1 什么是元素显示模式"></a>9.1 什么是元素显示模式</h2><p>作用：网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页</p>
<p>元素显示模式就是元素（标签）以什么方式进行显示，比如 <code>&lt;div&gt;</code> 自己占一行，比如<code>&lt;span&gt;</code>一行可以放多个，两者左上角都有x，y的坐标</p>
<p>html元素一般分为块元素和行内元素两种类型</p>
<h2 id="9-2-块元素"><a href="#9-2-块元素" class="headerlink" title="9.2 块元素"></a>9.2 块元素</h2><p>常见的块元素有： <code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code> 、 <code>&lt;p&gt;</code> 、 <code>&lt;div&gt;</code> 、 <code>&lt;li&gt;</code></p>
<p>特点：</p>
<ul>
<li>独占一行</li>
<li>高度、宽度，外边距以及内边距都可以控制</li>
<li>宽度默认是容器（父级宽度）的100%</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素</li>
</ul>
<p>注意：</p>
<ul>
<li>文字类元素内不能使用块级元素</li>
<li><code>&lt;p&gt;</code> 标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li>
<li>同理，<code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其它块级元素</li>
</ul>
<p>外边距，边框，内边距（理解）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>内边距和外边距<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">         #div1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 内补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">         #div2 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 在div2这个节点顶部top打一个补丁，这个补丁离top 10px */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 外补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span> : <span class="number">10px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 盒子套盒子 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果盒子套盒子，需要定位的话，可以使用外补丁和内补丁。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-3-行内元素"><a href="#9-3-行内元素" class="headerlink" title="9.3 行内元素"></a>9.3 行内元素</h2><p>常见的行内元素有<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;span&gt;</code>，有时也将行内元素称为内联元素</p>
<p>特点：</p>
<ul>
<li>相邻行内元素在一行上，一行可以显示多个</li>
<li>高、宽直接设置是无效的</li>
<li>默认宽度就是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其他行内元素</li>
</ul>
<p>注意：</p>
<ul>
<li>链接里不能再放链接</li>
<li>特殊情况链接 &lt;a&gt; 里面可以放块级元素，但是给 &lt;a&gt; 转换一下块级模式最安全</li>
</ul>
<h2 id="9-4-行内块元素"><a href="#9-4-行内块元素" class="headerlink" title="9.4 行内块元素"></a>9.4 行内块元素</h2><p>在行内元素中有几个特殊的标签—— &lt;img/&gt; 、&lt;input/&gt; 、&lt;td&gt;，它们同时具有块元素和行内元素的特点，可称它们为行内块元素</p>
<p>特点：</p>
<ul>
<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）</li>
<li>默认宽度就是它本身内容的宽度（行内元素特点）</li>
<li>高度，行高，外边距及内边距都可以控制（块级元素特点）</li>
</ul>
<h2 id="9-5-snipaste的使用"><a href="#9-5-snipaste的使用" class="headerlink" title="9.5 snipaste的使用"></a>9.5 snipaste的使用</h2><p>snipaste是一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上</p>
<p>常用快捷方式：</p>
<ul>
<li>F1可以截图，同时测量大小，设置箭头，书写文字等</li>
<li>F3在桌面置顶显示</li>
<li>点击图片，Alt可以取色（按下Shift可以切换取色模式）</li>
<li>按下Esc取消图片显示</li>
</ul>
<p>小技巧：单行文字垂直居中的代码</p>
<p>让文字的行高等于盒子的高度</p>
<h2 id="9-6-元素显示模式的相互转换代码"><a href="#9-6-元素显示模式的相互转换代码" class="headerlink" title="9.6 元素显示模式的相互转换代码"></a>9.6 元素显示模式的相互转换代码</h2><p>display: block;</p>
<p>display: inline;</p>
<p>display: inline-block;  //转换为行内块</p>
<p>display: none;  // 隐藏</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="comment">/*把行内元素a转换为块级元素*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-7-ul，ol序号的显示"><a href="#9-7-ul，ol序号的显示" class="headerlink" title="9.7 ul，ol序号的显示"></a>9.7 ul，ol序号的显示</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">   <span class="comment">/* list-style-type: circle; */</span></span><br><span class="line">   <span class="attribute">list-style-type</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">   <span class="comment">/* list-style-type: none; */</span></span><br><span class="line">   <span class="attribute">list-style-type</span> : upper-roman;</span><br><span class="line">   <span class="comment">/* 罗马数字*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-背景"><a href="#10-背景" class="headerlink" title="10 背景"></a>10 背景</h1><h2 id="10-1-背景颜色"><a href="#10-1-背景颜色" class="headerlink" title="10.1 背景颜色"></a>10.1 背景颜色</h2><p>background-color: transparent(透明的)，也可以改变为其他颜色</p>
<h2 id="10-2-背景图片"><a href="#10-2-背景图片" class="headerlink" title="10.2 背景图片"></a>10.2 背景图片</h2><p>background-image属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者超大的背景图片，优点是非常便于控制位置</p>
<p>background-image: none/ url(地址);</p>
<p>普通图片：<code>float:left/right</code>设置浮动样式</p>
<h2 id="10-3-背景平铺"><a href="#10-3-背景平铺" class="headerlink" title="10.3 背景平铺"></a>10.3 背景平铺</h2><p>backgrounf-repeat: repeat | no-repeat | repear-x | repeat-y</p>
<h2 id="10-4-背景图片位置"><a href="#10-4-背景图片位置" class="headerlink" title="10.4 背景图片位置"></a>10.4 背景图片位置</h2><p>background-position: x  y;</p>
<p>参数代表的意思是：x坐标和y坐标。可以使用<strong>方位名词</strong>或者<strong>精确单位</strong> </p>
<table>
<thead>
<tr>
<th align="center">参数值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">length</td>
<td align="center">百分数|由浮点数字和单位标识符组成的长度值</td>
</tr>
<tr>
<td align="center">position</td>
<td align="center">top|center|bottom|left|center|right</td>
</tr>
</tbody></table>
<ol>
<li>参数是方位名词<ul>
<li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如left top和top left效果一致</li>
<li>如果只指定了一个方位名词，另一个值忽略，则第二个值默认居中对齐</li>
</ul>
</li>
<li>参数是精确单位<ul>
<li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li>
<li>如果只指定一个数值，那该数值一个是x坐标，另一个默认垂直居中</li>
</ul>
</li>
<li>参数是混合单位<ul>
<li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>内边距和外边距<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">         #div1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#00FFFF</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 内补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">         #div2 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> red;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 在div2这个节点顶部top打一个补丁，这个补丁离top 10px */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 外补丁 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span> : <span class="number">10px</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 盒子套盒子 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果盒子套盒子，需要定位的话，可以使用外补丁和内补丁。 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="10-5-背景图像固定（背景附着）"><a href="#10-5-背景图像固定（背景附着）" class="headerlink" title="10.5 背景图像固定（背景附着）"></a>10.5 背景图像固定（背景附着）</h2><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动，后期可以制作视差滚动的效果</p>
<p>background-attachment: scroll|fixed</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">scroll</td>
<td align="center">背景图像是随对象内容滚动</td>
</tr>
<tr>
<td align="center">fixed</td>
<td align="center">背景图像固定</td>
</tr>
</tbody></table>
<h2 id="10-6-背景属性复合写法"><a href="#10-6-背景属性复合写法" class="headerlink" title="10.6 背景属性复合写法"></a>10.6 背景属性复合写法</h2><p>没有特定书写顺序，一般顺序为：</p>
<p>background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;</p>
<h2 id="10-7-背景色半透明"><a href="#10-7-背景色半透明" class="headerlink" title="10.7 背景色半透明"></a>10.7 背景色半透明</h2><p>background: rgba(0, 0, 0, 0.3);</p>
<ul>
<li>最后一个参数是alpha透明度，取值范围在0~1之间</li>
<li>我们习惯把0.3的0省略掉，写为background: rgba(0, 0, 0, .3);</li>
<li>背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>
<li>CSS3新增属性，是IE9+版本浏览器才支持的</li>
</ul>
<h1 id="11-设置鼠标悬停效果"><a href="#11-设置鼠标悬停效果" class="headerlink" title="11 设置鼠标悬停效果"></a>11 设置鼠标悬停效果</h1><p>选择器括号前加<code>:hover</code>，<code>:</code>前后均不能有空格</p>
<p>光标样式：<code>cursor</code>（属性）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* :hover 是专门用来设置鼠标悬停效果的 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: red;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：:hover在使用的时候，这个冒号两边都是不允许有空格的。 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">   <span class="attribute">border-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="12-图片"><a href="#12-图片" class="headerlink" title="12 图片"></a>12 图片</h1><p>图片的浮动效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">   <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML笔记</title>
    <url>/undefined/5bada17d/</url>
    <content><![CDATA[<blockquote>
<p>关于HTML的总结</p>
</blockquote>
<span id="more"></span>
<p><a href="https://www.runoob.com/tags/html-reference.html">html参考手册（菜鸟教程）</a><br><a href="https://www.w3schools.com/html/">HTML教程（w3school）</a></p>
<p>html为超文本标记语言，W3C（万维网联盟）组织制定的标准</p>
<h2 id="B-S架构原理"><a href="#B-S架构原理" class="headerlink" title="B/S架构原理"></a>B/S架构原理</h2><p>HTTP协议：浏览器和web服务器传消息的协议</p>
<p>第一步，用户在浏览器地址栏上输入URL；第二步，回车（通过浏览器向服务器发送了一个请求）；第三步，服务器会给浏览器一个响应，最终响应一段HTML代码给浏览器，浏览器对HTML代码进行执行展示一个结果</p>
<h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><p><code>&lt;html&gt; &lt;/html</code> 根标签，页面中最大的标签</p>
<p><code>&lt;head&gt; &lt;/head&gt;</code> 文档的头部</p>
<p><code>&lt;title&gt; &lt;/title&gt;</code> 文档的标题</p>
<p><code>&lt;body&gt; &lt;/body&gt;</code> 文档的主体</p>
<p><code>&lt;br/</code> 单标签（少见）</p>
<p>快捷键：ctrl+S， ctrl+”+” ，Alt+B</p>
<h2 id="必须写的三个代码"><a href="#必须写的三个代码" class="headerlink" title="必须写的三个代码"></a>必须写的三个代码</h2><p><code>&lt;!DOCTYPE&gt;</code> 采取HTML5版本，文档类型声明标签，不属于HTML标签</p>
<p><code>&lt;html lang=&quot;en&quot;&gt;</code> 表示英文网站，zh-CN表示中文网站，fr表示法语网站，但不影响所有语言表示</p>
<p><code>&lt;meta char set=&quot;UTF-8&quot;&gt;</code> 说明字符编码方式。字符集是多个字符的集合，以便计算机能够识别和存储各种文字。Windows操作系统浏览器默认使用GBK的简体中文的方式打开，一般工作区中文件的编码方式都是UTF-8，因为unicode更加通用</p>
<h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p><code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 根据重要性递减，每个标题独占一行</p>
<h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p><code>&lt;p&gt;</code> <code>&lt;p&gt;</code></p>
<ul>
<li><p>段落之间有空隙</p>
</li>
<li><p>根据网页大小换行</p>
</li>
</ul>
<h3 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h3><p><code>&lt;br&gt;</code>打断，换行 </p>
<h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><p><code>&lt;hr&gt;</code></p>
<h3 id="预留格式"><a href="#预留格式" class="headerlink" title="预留格式"></a>预留格式</h3><p><code>&lt;pre&gt; &lt;/pre&gt;</code></p>
<h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><ul>
<li><p><code>&lt;strong&gt; &lt;/strong&gt;</code>  <code>&lt;b&gt; &lt;/b&gt;</code>  加粗</p>
</li>
<li><p><code>&lt;em&gt; &lt;/em&gt;</code>  <code>&lt;i&gt; &lt;/i&gt;</code>  斜体</p>
</li>
<li><p><code>&lt;del&gt; &lt;/del&gt;</code>  <code>&lt;s&gt; &lt;/s&gt;</code>  删除线</p>
</li>
<li><p><code>&lt;ins&gt; &lt;/ins&gt;</code>  <code>&lt;u&gt; &lt;/u&gt;</code>  下划线</p>
</li>
<li><p><code>&lt;sup&gt; &lt;/sup&gt;</code> 右上角</p>
</li>
<li><p><code>&lt;sub&gt; &lt;/sub</code> 右下角</p>
</li>
<li><p><code>&lt;front&gt; &lt;/front&gt;</code> 字体标签（属性：color，size）</p>
</li>
</ul>
<h3 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a>盒子标签</h3><p>无语义的盒子</p>
<ul>
<li><code>&lt;div&gt; &lt;/div&gt;</code>表示分割，分区，用于布局，单独占一行。大盒子</li>
<li> <code>&lt;span&gt; &lt;/span&gt;</code>表示跨度跨距，一行可以放多个。小盒子</li>
</ul>
<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p><code>&lt;img src=&quot;&quot; /&gt;</code> 单标签，必须将被插入的文件和html文件放到一个目录下</p>
<p>属性：</p>
<ul>
<li><p>src用于指定图像文件的路径和文件名</p>
</li>
<li><p>alt替换文本。图像不能显示的文字</p>
</li>
<li><p>title提示文本。鼠标放到图像上显示的文字</p>
</li>
<li><p>width设置图像的宽度</p>
</li>
<li><p>height设置图像的高度，宽度高度修改一个会等比缩放</p>
</li>
<li><p>border设置图像边框粗细</p>
</li>
</ul>
<h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;;</code></p>
<p>target（_ self为默认值（当前窗口），_ blank为在新窗口中打开方式，_ parent为当前窗口的父窗口，_ top为当前窗口的顶级窗口，内部窗口：<code>&lt;iframe&gt; &lt;/iframe&gt;</code>）</p>
<p>（1）外部链接：</p>
<p>（2）内部链接：网页之间的跳转</p>
<p>（3）空链接：<code>&lt;a href=&quot;#&quot;&gt;文本&lt;/a&gt;</code></p>
<p>（4）下载链接：地址链接的是.exe或.zip压缩包</p>
<p>（5）网页元素链接</p>
<p>（6）锚点链接  </p>
<p> <code>&lt;a href=&quot;#two&quot;&gt;文本&lt;/a&gt;</code> </p>
<p> <code>&lt;h3 id=&quot;two&quot;&gt;文本&lt;/h3&gt;</code> </p>
<h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><p><code>&lt;!-- --&gt;</code>   “ctrl+/“</p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>空格符 <code>&amp;nbsp;</code></p>
<p>&lt;  <code>&amp;lt;</code></p>
<p>&gt;  <code>&amp;gt;</code></p>
<p>&amp;  <code>&amp;amp;</code></p>
<p>&yen;  <code>&amp;yen;</code></p>
<p>&copy;  <code>&amp;copy;</code> （版权）</p>
<p>&reg;  <code>&amp;reg;</code>  （注册商标）</p>
<p>&deg;   <code>&amp;deg;</code> （摄氏度）</p>
<p>&plusmn;  <code>&amp;plusmn;</code>  （正负号）</p>
<p>&times;  <code>&amp;times;  </code>  </p>
<p>&divide;  <code>&amp;divide;</code></p>
<p>&sup2;   <code>&amp;sup2;</code></p>
<p>&sup3;   <code>&amp;sup3;</code></p>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><h4 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h4><p><code>&lt;table&gt; &lt;/table&gt;</code> 定义表格的标签</p>
<p><code>&lt;tr&gt; &lt;/tr&gt;</code> 定义表格中的行</p>
<p><code>&lt;th&gt; &lt;/th&gt;</code> 表头单元格，加粗居中</p>
<p><code>&lt;td&gt; &lt;/td&gt;</code> 表格中的单元格</p>
<h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p>align：left,center,right 对齐方式</p>
<p>width（height）: “50%”或”300px” （像素值或百分比）</p>
<p>border：1或”1px” 规定是否拥有边框和线的宽度</p>
<p>cellspacing：规定单元格之间的空白，默认2像素 （像素值）</p>
<p>cellpadding：规定单元边沿与其内容之间的空白，默认1像素（像素值）</p>
<h4 id="结构标签"><a href="#结构标签" class="headerlink" title="结构标签"></a>结构标签</h4><p><code>&lt;thead&gt; &lt;/thead&gt;</code>：用于定义表格的头部，内部必须拥有<code>&lt;tr&gt;</code>标签</p>
<p><code>&lt;tbody&gt; &lt;/tbody&gt;</code>：用于定义表格的主体</p>
<p><code>&lt;hfoot&gt; &lt;/tfoot&gt;</code>：形式和<code>&lt;tbody&gt;</code>一样</p>
<h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>跨行合并：rowspan=”合并单元格的个数”，最上侧单元格为目标单元格，写合并代码</p>
<p>跨列合并：colspan=”合并单元格的个数”，最左侧单元格为目标单元格，写合并代码</p>
<p>注意合并单元格之后删除多余的单元格</p>
<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><code>&lt;ul&gt;</code> 表示html页面中项目的无序列表，其中只能嵌套<code>&lt;li&gt; &lt;/li&gt;</code></p>
<p><code>&lt;li&gt;</code>表示列表项，<code>&lt;li&gt; &lt;/li&gt;</code>之间相当于容器，可以容纳所有元素</p>
<p>属性：<code>type</code>：circle，square，disc</p>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><code>&lt;ol&gt;</code> 表示html页面中项目的有序列表，其中只能嵌套<code>&lt;li&gt; &lt;/li&gt;</code></p>
<p><code>&lt;li&gt;</code>与无序列表中相同</p>
<p>属性：<code>type</code>：”A”，”a”，”1”，”Ⅰ”</p>
<h4 id="自定义列表-常用于对名词进行解释和描述"><a href="#自定义列表-常用于对名词进行解释和描述" class="headerlink" title="自定义列表:常用于对名词进行解释和描述"></a>自定义列表:常用于对名词进行解释和描述</h4><p><code>&lt;dl&gt;</code> 表示html页面中项目的定义描述列表，其中只能嵌套&lt;li&gt;&lt;/li&gt;，但对他们的个数没有限制</p>
<p><code>&lt;dt&gt;</code> 定义项目或名字</p>
<p><code>&lt;dd&gt;</code> 描述每一个项目或名字</p>
<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><p>表单域是一个包含表单元素的区域</p>
<p><code>&lt;form&gt;</code> 用于定义表单域，把它范围内的表单元素信息提交给服务器</p>
<p>属性：</p>
<ul>
<li><p>action用于指定接收并处理表单数据的服务器程序的url地址</p>
</li>
<li><p>method用于设置表单数据的提交方式，其取值为get或post</p>
</li>
<li><p>name用于指定表单的名称，以区分同一个页面中的多个表单域</p>
</li>
</ul>
<h4 id="表单控件（表单元素）"><a href="#表单控件（表单元素）" class="headerlink" title="表单控件（表单元素）"></a>表单控件（表单元素）</h4><p>readonly和disabled都是只读的，readonly修饰的表单项可以提交给服务器，disabled不会提交<br><strong><code>&lt;input/&gt;</code>输入表单元素</strong></p>
<p><code>type</code>=”属性值”</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">button 定义可点击按钮（多数情况用于通过js启动脚本)</span><br><span class="line">checkbox 定义复选框</span><br><span class="line">file 定义输入字段和浏览按钮，供文件上传</span><br><span class="line">hidden 定义隐藏的输入字段（不希望用户在浏览器说看到，但是要提交）</span><br><span class="line">image 定义图像形式的提交按钮</span><br><span class="line">password 定义密码字段。该字段的字符被掩码</span><br><span class="line">radio 定义单选按钮</span><br><span class="line">reset 定义重置按钮。清除表单中的所有数据</span><br><span class="line">submit 定义提交按钮。提交按钮会把表单数据发送到服务器</span><br><span class="line">text 定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符</span><br></pre></td></tr></table></figure>

<p><code>name</code>=”名称”（定义<code>input</code>元素的名称），有<code>name</code>才能提交成功，<code>submit</code>按钮不能有<code>name</code>属性（最终提交后的网址为name = value &amp; name = value &amp; name = value，即提交的数据格式）</p>
<p><code>value</code>=”内容”（规定<code>input</code>元素的值——未输入元素时显示的字样，也可以由用户输入提交给服务器）</p>
<p><code>checked</code>（规定此<code>input</code>元素首次加载时应当被选中）</p>
<p><code>maxlength</code>=”正整数”（规定输入字段中的字符的最大长度）</p>
<p><code>id</code>=”内容”（对表单对应的标注标签有指引作用）</p>
<p><strong>select下拉表单元素（有多个选择，节约页面空间）</strong></p>
<p><code>&lt;select&gt; &lt;/select&gt;</code> 包含 <code>&lt;option&gt; &lt;/option&gt;</code>，<code>multiple</code>表示下拉列表多选</p>
<p>在<code>&lt;option&gt;</code>中定义selected时，当前项即为默认选中项</p>
<p><code>&lt;label&gt;</code> 为input元素定义标注（用于绑定一个表单元素，当点击<code>&lt;label&gt;</code> 内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验；语法：<code>&lt;label for=&quot;sex&quot;&gt;女&lt;/label&gt;</code> 注：sex为对应input的id）</p>
<p><strong>textarea文本域元素</strong></p>
<p><code>&lt;textarea&gt;</code> 用于定义多行文本输入的控件（常见于留言板，评论）</p>
<p>语法：<code>&lt;textarea rows=&quot;显示的行数&quot; cols=&quot;每行中的字符数&quot;&gt;文本内容（默认内容）&lt;/textarea&gt;</code>（实际开发一般用CSS改变大小）</p>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>（图片相对于html页面的位置）</p>
<p>同一级路径  <code>&lt;img src=&quot;baidu.gif&quot; &gt;</code> </p>
<p>下一级路径  <code>&lt;img src=&quot;images/baidu.gif&quot; /&gt;</code></p>
<p>上一级路径  <code>&lt;img src=&quot;../baidu.gif&quot; /&gt;</code></p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>（E:\或者网址）</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON笔记</title>
    <url>/undefined/15e4d064/</url>
    <content><![CDATA[<blockquote>
<p>JSON学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-创建JSON对象"><a href="#1-创建JSON对象" class="headerlink" title="1 创建JSON对象"></a>1 创建JSON对象</h1><p>JSON 是一种数据格式，并不是编程语言</p>
<h2 id="1-1-JSON语法"><a href="#1-1-JSON语法" class="headerlink" title="1.1 JSON语法"></a>1.1 JSON语法</h2><p>相比于XML ，JSON格式最大的优点是易于人的阅读和编写，通常不需要特殊的工具，就能读懂和修改，是一种轻量级的数据交换格式。</p>
<p>JSON文件都是被包裹在一个大括号中 {}，通过key:value的方式来表达数据。看起来同 JavaScript 的对象表达方式十分相似，但是有所不同：JSON的Key必须包裹在一个双引号中，在实践中，编写 JSON 的时候，忘了给 Key 值加双引号或者是把双引号写成单引号是常见错误。</p>
<p>JSON 文件中无法使用注释，试图添加注释将会引发报错。</p>
<h2 id="1-2-JSON的数据格式"><a href="#1-2-JSON的数据格式" class="headerlink" title="1.2 JSON的数据格式"></a>1.2 JSON的数据格式</h2><ol>
<li>数字，包含浮点数和整数</li>
<li>字符串，需要包裹在双引号中</li>
<li>Bool值，true 或者 false</li>
<li>数组，需要包裹在方括号中 []</li>
<li>对象，需要包裹在大括号中 {}</li>
<li>Null</li>
</ol>
<p>其他任何格式都会触发报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、什么是<span class="built_in">JSON</span>？</span><br><span class="line">   JavaScript <span class="built_in">Object</span> Notation（JavaScript标记对象）简称<span class="built_in">JSON</span>。</span><br><span class="line">   <span class="built_in">JSON</span>是一种轻量级的数据交换格式。</span><br><span class="line">   </span><br><span class="line">   什么是轻量级：</span><br><span class="line">      体现在<span class="built_in">JSON</span>的体积小。虽然一个小的体积可能表示的数据很多。</span><br><span class="line">   </span><br><span class="line">   什么是数据交换：</span><br><span class="line">      C语言和Java语言之间交换数据，</span><br><span class="line">      python和Java语言之间交换数据，</span><br><span class="line">      javascript和java之间交换数据。</span><br><span class="line">   </span><br><span class="line">   在现代的开发中，能够做数据交换的，包括两个：</span><br><span class="line">      第一个：<span class="built_in">JSON</span></span><br><span class="line">      第二个：XML</span><br><span class="line">      <span class="built_in">JSON</span>和XML都是非常标准的数据交换格式。</span><br><span class="line">         XML体积大，解析难度大。</span><br><span class="line">         <span class="built_in">JSON</span>体积小，解析更容易。</span><br><span class="line">         XML和<span class="built_in">JSON</span>相对比来说，XML的语法严格，json的语法相对松散。</span><br><span class="line">   </span><br><span class="line"><span class="number">2</span>、在JavaScript当中，json是以对象的形式存在的。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、在javascript当中，怎么定义<span class="built_in">JSON</span>格式的对象，怎么访问对象的属性呢？</span><br><span class="line">   语法格式：</span><br><span class="line">      <span class="keyword">var</span> jsonObj = &#123;</span><br><span class="line">         <span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line">         <span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line">         <span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line">         <span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line">         <span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line">         <span class="string">&quot;属性名&quot;</span> : 属性值,</span><br><span class="line">         ....</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      注意：属性值，可以是任意类型。</span><br><span class="line">      <span class="built_in">JSON</span>是一种无类型的对象，直接一个大括号包起来就是一个<span class="built_in">JSON</span>对象了。</span><br><span class="line">      </span><br><span class="line"><span class="number">4</span>、注意：在JS中[]和&#123;&#125;有什么区别？</span><br><span class="line">   [] 是数组对象</span><br><span class="line">   &#123;&#125; 是json对象</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> emp = &#123;</span><br><span class="line">    <span class="string">&quot;empno&quot;</span> : <span class="number">7369</span>,</span><br><span class="line">    <span class="string">&quot;ename&quot;</span> : <span class="string">&quot;smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sal&quot;</span> : <span class="number">800</span></span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 怎么访问对象的属性？</span></span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">console.log(emp.empno)</span><br><span class="line">console.log(emp.ename)</span><br><span class="line">console.log(emp.sal)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line">console.log(emp[<span class="string">&quot;empno&quot;</span>])</span><br><span class="line">console.log(emp[<span class="string">&quot;ename&quot;</span>])</span><br><span class="line">console.log(emp[<span class="string">&quot;sal&quot;</span>])</span><br><span class="line">            </span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span> : <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">&quot;aihao&quot;</span> : [<span class="string">&quot;抽烟&quot;</span>,<span class="string">&quot;喝酒&quot;</span>,<span class="string">&quot;烫头&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">console.log(person.name)</span><br><span class="line">            </span><br><span class="line">console.log(person.sex ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>),</span><br><span class="line">            </span><br><span class="line"><span class="keyword">var</span> aihaos = person.aihao;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span><br><span class="line">    console.log(aihaos[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-JSON对象的属性值"><a href="#2-JSON对象的属性值" class="headerlink" title="2 JSON对象的属性值"></a>2 JSON对象的属性值</h1><p>JSON对象的属性值可以为JSON对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json对象1</span></span><br><span class="line"><span class="comment">/* var addr = &#123;</span></span><br><span class="line"><span class="comment">   &quot;city&quot; : &quot;北京&quot;,</span></span><br><span class="line"><span class="comment">   &quot;street&quot; : &quot;大兴&quot;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// json对象2</span></span><br><span class="line"><span class="comment">/* var user = &#123;</span></span><br><span class="line"><span class="comment">   &quot;username&quot; : &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment">   &quot;password&quot; : &quot;123&quot;,</span></span><br><span class="line"><span class="comment">   &quot;email&quot; : &quot;zhangsan@123.com&quot;,</span></span><br><span class="line"><span class="comment">   &quot;address&quot; : addr</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">   <span class="string">&quot;username&quot;</span> : <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">   <span class="string">&quot;password&quot;</span> : <span class="string">&quot;123&quot;</span>,</span><br><span class="line">   <span class="string">&quot;email&quot;</span> : <span class="string">&quot;zhangsan@123.com&quot;</span>,</span><br><span class="line">   <span class="string">&quot;address&quot;</span> : &#123;<span class="string">&quot;city&quot;</span> : <span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;street&quot;</span> : <span class="string">&quot;宝安&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zhangsan住在哪个城市怎么访问？</span></span><br><span class="line"><span class="built_in">console</span>.log(user.username + <span class="string">&quot;居住在&quot;</span> + user.address.city)</span><br></pre></td></tr></table></figure>

<p> <strong>案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设计一个JSON格式的数据可以表示全班人数和每个学生信息</span></span><br><span class="line"><span class="keyword">var</span> students = &#123;</span><br><span class="line">   <span class="string">&quot;total&quot;</span> : <span class="number">3</span>,</span><br><span class="line">   <span class="string">&quot;data&quot;</span> : [&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;陈赓&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">20</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;吴雨阳&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">21</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;殷远庭&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 理解了吗？JSON很容易解析,一顿&quot;点&quot;就行.</span></span><br><span class="line"><span class="built_in">console</span>.log(students.data[<span class="number">0</span>].name)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问以上的json对象,将总人数取出,将每个学生的信息取出</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;总人数：&quot;</span> + students.total)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问每一个学生数据</span></span><br><span class="line"><span class="keyword">var</span> arr = students.data;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">   <span class="keyword">var</span> s = arr[i];</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;姓名：&quot;</span> + s.name + <span class="string">&quot;,年龄：&quot;</span> + s.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-通过JSON传输数据"><a href="#3-通过JSON传输数据" class="headerlink" title="3 通过JSON传输数据"></a>3 通过JSON传输数据</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、java和javascript两个语言怎么交换数据呢？</span><br><span class="line">   可以使用<span class="type">JSON</span>格式的字符串。</span><br><span class="line">   <span class="type">JSON</span>就是一种轻量级的数据交换格式。</span><br><span class="line">   </span><br><span class="line"><span class="number">2</span>、java的JDBC连接数据库查询数据，然后将数据拼接成<span class="type">JSON</span>格式的字符串，将<span class="type">JSON</span>格式的字符串传给javascript，然后在javascript当中把<span class="type">json</span>格式的字符串转换成<span class="type">JSON</span>对象，这样就可以从<span class="type">json</span>对象中取数据了，这样就完成了数据的交换。</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json对象</span></span><br><span class="line"><span class="comment">/* var json = &#123;</span></span><br><span class="line"><span class="comment">   &quot;name&quot; : &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment">   &quot;age&quot; : 20</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 双引号当中的是一个普通的不能再普通的字符串,这个字符串是java给我们浏览器的.</span></span><br><span class="line"><span class="keyword">var</span> fromJavaJSON = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;zhangsan\&quot;, \&quot;age\&quot;:20&#125;&quot;</span>;  <span class="comment">//这个不是json对象,是一个字符串.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你需要将json格式的字符串转换成json对象.</span></span><br><span class="line"><span class="comment">// eval函数的作用是:将后面的字符串当做一段JS代码解释并执行.</span></span><br><span class="line"><span class="built_in">window</span>.eval(<span class="string">&quot;var stu = &quot;</span> + fromJavaJSON) <span class="comment">//重点中的重点,这个可以将json格式的字符串转换成json对象.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面代码执行结束之后,等同于这里创建了一个json对象.</span></span><br><span class="line"><span class="comment">/* var stu = &#123;</span></span><br><span class="line"><span class="comment">   &quot;name&quot; : &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment">   &quot;age&quot; : 20</span></span><br><span class="line"><span class="comment">&#125;; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换成json对象的目的是为了取数据.(这样javascript和java之间两个不同的编程语言就完成了数据的交换！)</span></span><br><span class="line"><span class="built_in">console</span>.log(stu.name + <span class="string">&quot;,&quot;</span> + stu.age)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.eval(<span class="string">&quot;var i = 0&quot;</span>)</span><br><span class="line">alert(i)</span><br></pre></td></tr></table></figure>

<h1 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4 正则表达式"></a>4 正则表达式</h1><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、什么是正则表达式，有什么用？</span><br><span class="line">   正则表达式是一门独立的学科，基本每个语言都支持。</span><br><span class="line">   正则表达式不是JS专属的。不过在JS中使用居多。</span><br><span class="line">   通常使用正则表达式进行字符串格式匹配。</span><br><span class="line">   </span><br><span class="line">   正则表达式是有一堆特殊的符号组成的一个表达式。</span><br><span class="line">   每一个特殊的符号都有特殊的代表含义。</span><br><span class="line">   </span><br><span class="line">   例如：</span><br><span class="line">      qq号的正则表达式。</span><br><span class="line">      邮箱地址的正则表达式。</span><br><span class="line">      </span><br><span class="line">   邮箱地址格式验证：</span><br><span class="line">      程序中有一个邮箱地址的正则表达式。</span><br><span class="line">      用户输入了一个邮箱地址。</span><br><span class="line">      那么邮箱地址的正则表达式和邮箱地址进行匹配，能匹配成功，表示合法，反之表示不合法。</span><br><span class="line">      </span><br><span class="line"><span class="number">2</span>、对于javascript程序员来说，我们对于正则表达式掌握到什么程度呢？</span><br><span class="line">   第一：能够看懂正则表达式</span><br><span class="line">   第二：简单的正则要会写</span><br><span class="line">   第三：要能够独立的从网络当中搜索到你想要的正则表达式（搜索能力要有）</span><br><span class="line">   第四：要会创建JS的正则表达式对象。</span><br><span class="line">   第五：要会调用JS正则表达式对象的方法。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、常见的正则表达式符号有哪些？</span><br><span class="line">   . 匹配除换行符以外的任意字符 </span><br><span class="line">   <span class="string">\w</span> 匹配字母或数字或下划线或汉字 </span><br><span class="line">   <span class="string">\s</span> 匹配任意的空白符 </span><br><span class="line">   <span class="string">\d</span> 匹配数字 </span><br><span class="line">   <span class="string">\b</span> 匹配单词的开始或结束 </span><br><span class="line">   ^ 匹配字符串的开始 </span><br><span class="line">   $ 匹配字符串的结束 </span><br><span class="line">   </span><br><span class="line">   * 重复零次或更多次 <span class="number">0</span>-N次</span><br><span class="line">   + 重复一次或更多次  <span class="number">1</span>-N次</span><br><span class="line">   ? 重复零次或一次  <span class="number">0</span>或<span class="number">1</span>次</span><br><span class="line">   &#123;n&#125; 重复n次  n次</span><br><span class="line">   &#123;n,&#125; 重复n次或更多次  n+次</span><br><span class="line">   &#123;n,m&#125; 重复n到m次  n到m次</span><br><span class="line">   注意：数量永远匹配的都是前面的那个字符出现的次数。</span><br><span class="line">   </span><br><span class="line">   <span class="string">\W</span> 匹配任意不是字母，数字，下划线，汉字的字符 </span><br><span class="line">   <span class="string">\S</span> 匹配任意不是空白符的字符 </span><br><span class="line">   <span class="string">\D</span> 匹配任意非数字的字符 </span><br><span class="line">   <span class="string">\B</span> 匹配不是单词开头或结束的位置 </span><br><span class="line">   [^x] 匹配除了x以外的任意字符 </span><br><span class="line">   [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 </span><br><span class="line">   </span><br><span class="line">   | 表示或者</span><br><span class="line">   </span><br><span class="line">   [a-z]&#123;<span class="number">1</span>&#125; a到z所有的字符中的任意<span class="number">1</span>个。</span><br><span class="line">   </span><br><span class="line">   [a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">3</span>,&#125; 前面这堆中的任意字符至少出现<span class="number">3</span>个。</span><br><span class="line">   </span><br><span class="line">   [<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>,&#125;    qq号的正则表达式，最小的qq号是<span class="number">10000</span></span><br><span class="line">   </span><br><span class="line">   [<span class="number">1</span>-<span class="number">9</span>] 没有指定数量的时候，默认是<span class="number">1</span>个。</span><br><span class="line">   </span><br><span class="line"><span class="number">4</span>、邮箱的正则表达式：</span><br><span class="line">   ^<span class="string">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span></span><br><span class="line">   这个邮箱地址从网上找了之后不一定能用，你需要测试。反复测试。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、在JS中怎么创建正则表达式对象呢？</span><br><span class="line"></span><br><span class="line">   包括两种方式，重点使用第一种</span><br><span class="line">   </span><br><span class="line">   第一种方式：直接量语法</span><br><span class="line">      <span class="keyword">var</span> regExp = <span class="regexp">/正则表达式/</span>标记</span><br><span class="line">      </span><br><span class="line">   第二种方式：使用内置类<span class="built_in">RegExp</span>类。</span><br><span class="line">      <span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>, <span class="string">&quot;标记&quot;</span>)</span><br><span class="line">   </span><br><span class="line">   标记是可选项！！！！！都有哪些值可选呢？</span><br><span class="line">      g：全局 <span class="built_in">global</span></span><br><span class="line">      i: 忽略大小写 ignorecase</span><br><span class="line">      gi: 全局扫描，并且忽略大小写。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、正则表达式对象有一个很重要的方法：</span><br><span class="line">   <span class="keyword">var</span> emailRegExp = /^<span class="string">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span></span><br><span class="line">   <span class="keyword">var</span> ok = emailRegExp.test(<span class="string">&quot;用户输入的字符串&quot;</span>);</span><br><span class="line">   返回值ok是<span class="literal">true</span>表示，匹配成功了。</span><br><span class="line">   </span><br><span class="line">   其实在JS中，字符串<span class="built_in">String</span>也是支持正则表达式的。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="string">&quot;1980-11-10&quot;</span>.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;/&quot;</span>))</span></span><br><span class="line"><span class="javascript">	<span class="comment">// g表示global全局的,所有的 - 替换成/</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="string">&quot;1980-11-10&quot;</span>.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="comment">//获取邮箱地址</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">&quot;email&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 创建正则表达式对象</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> regExp = <span class="regexp">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>;</span></span><br><span class="line"><span class="javascript">		<span class="comment">// 验证</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> ok = regExp.test(email);</span></span><br><span class="line">        if(ok)&#123;</span><br><span class="line"><span class="javascript">			alert(<span class="string">&quot;邮箱地址合法&quot;</span>)</span></span><br><span class="line"><span class="javascript">		&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">			alert(<span class="string">&quot;邮箱地址不合法&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;		</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">邮箱地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;验证邮箱地址&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkEmail()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1001 害死人不偿命</title>
    <url>/undefined/748ff171/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想：</p>
<p>对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p>
<p>输入格式：</p>
<p>每个测试输⼊包含1个测试用例，即给出自然数n的值。</p>
<p>输出格式：</p>
<p>输出从n计算到1需要的步数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>一道初学者的题，注意用step记录一下步数，然后循环就可以了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, step = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; step &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1003 我要通过</title>
    <url>/undefined/d949a5c0/</url>
    <content><![CDATA[<blockquote>
<p>数学</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于PAT的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。<br>得到“答案正确”的条件是：</p>
<ol>
<li> 字符串中必须仅有P, A, T这三种字符，不可以包含其它字符；</li>
<li> 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li>
<li> 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</li>
</ol>
<p>现在就请你为PAT写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例。第1行给出一个自然数n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过100，且不包含空格。</p>
<p>输出格式：</p>
<p>每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出YES，否则输出NO。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分析：</p>
<p>任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；<br>那么正确的有这些：</p>
<p>PAT</p>
<p>APATA</p>
<p>AAPATAA</p>
<p>AAAPATAAA</p>
<p>…不说了，就是中间⼀个A左右加上等量的A（不加也行）都是正确的。</p>
<p>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a, b, c 均或者是空字符串，或者是仅由字母A组成的字符串。</p>
<p>拿上面的那几个正确的举例⼦，那么正确的有这些：</p>
<p>PAT —— 对于 aPbTc 来说ac是空，b是A。所以 PAAT 是正确的。同理PAAAAAT中间加多少个A都是正确哒～</p>
<p>APATA —— 对于aPbTc来说，abc都是A。所以 APAATAA 是正确的。再类推⼀下，那么 APAAATAAA 是正<br>确的。</p>
<p>AAPATAA —— 对于aPbTc来说，a和c是AA，b是A。所以AAPAATAAAA是正确的，再类推⼀下，AAPAAATAAAAAA 是正确的～～</p>
<p>所以说规律就是，可以在P和T中间加A并且在T后面加A，要求必须是，中间加上⼀个A，末尾就得加上几倍的(P前面A的那个字符串)。换句话说就是，中间的A的个数如果是3，那么末尾的A的个数就得是开头A的个数的3倍。很巧，当中间A为一个的时候，末尾和开头A的个数必须相等正好是第二条的要求～</p>
<p>一句话总结字符串的要求：只能有一个P一个T，中间末尾和开头可以随便插入A。但是必须满足开头的A的个数 * 中间的A的个数 = 结尾的A的个数，而且P和T中间不能没有A～</p>
<p>（以上摘录于柳神的博客）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, p = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            m[s[j]]++;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;P&#x27;</span>) p = j;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">&#x27;T&#x27;</span>) t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m[<span class="string">&#x27;P&#x27;</span>] == <span class="number">1</span> &amp;&amp; m[<span class="string">&#x27;A&#x27;</span>] != <span class="number">0</span> &amp;&amp; m[<span class="string">&#x27;T&#x27;</span>] == <span class="number">1</span> &amp;&amp; m.<span class="built_in">size</span>() == <span class="number">3</span> &amp;&amp; t-p != <span class="number">1</span> &amp;&amp; p * (t-p<span class="number">-1</span>) == s.<span class="built_in">length</span>()-t<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1002写出这个数</title>
    <url>/undefined/78c3da96/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入一个自然数n，计算其各位数字之和，用汉语拼音写出和的每⼀位数字。</p>
<p>输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。这里保证n小于10100。</p>
<p>输出格式：</p>
<p>在一行内输出n的各位数字之和的每一位，拼音数字间有1空格，但一行中最后一个拼音数字后没有空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这里考虑的数值比较大，通过类似高精度的方法把sum的每一位数字都存到b数组里，最后方便输出</p>
<p>先开始想直接用字符串，而不是开数组，结果没有成功，只能开了字符串数组，至于输出拼音，就是用if来打表了，也可以把拼音存到数组里，剩下的应该没什么问题~~</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prt</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;yi&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;er&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;san&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;si&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;liu&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;qi&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ba&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;jiu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">105</span>], b[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, i;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        sum += a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum) &#123;</span><br><span class="line">        b[i++] = sum % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        sum /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j != i - <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">Prt</span>(b[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1004 成绩排名</title>
    <url>/undefined/e6d09e95/</url>
    <content><![CDATA[<blockquote>
<p>查找元素</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，格式为</p>
<p>第1行：正整数n</p>
<p>第2行：第1个学生的姓名 学号 成绩</p>
<p>第3行：第2个学生的姓名 学号 成绩</p>
<p>… … …</p>
<p>第n+1行：第n个学生的姓名 学号 成绩</p>
<p>其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的⼀个整数，这里保证在⼀组测试用例中没有两个学生的成绩是相同的。</p>
<p>输出格式：</p>
<p>对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。</p>
<p>输入样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">Joe Math990112 <span class="number">89</span></span><br><span class="line">Mike CS991301 <span class="number">100</span></span><br><span class="line">Mary EE990830 <span class="number">95</span></span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>相当于找出最大值和最小值的变形吧</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    string name, num, maxname, minname, maxnum, minnum;</span><br><span class="line">    <span class="keyword">int</span> grade, maxgrade = <span class="number">-1</span>, mingrade = <span class="number">101</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; name &gt;&gt; num &gt;&gt; grade;</span><br><span class="line">        <span class="keyword">if</span> (grade &gt; maxgrade) &#123;</span><br><span class="line">            maxgrade = grade;</span><br><span class="line">            maxname = name;</span><br><span class="line">            maxnum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(grade &lt; mingrade) &#123;</span><br><span class="line">            mingrade = grade;</span><br><span class="line">            minname = name;</span><br><span class="line">            minnum = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; maxname &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; maxnum &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; minname &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; minnum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>查找元素</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1005 继续(3n+1)猜想</title>
    <url>/undefined/d0f5313/</url>
    <content><![CDATA[<blockquote>
<p>Hash散列</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p>
<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对n=3进行验证的时候，我们需要计算3、5、8、4、2、1，则当我们对n=5、8、4、2进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这4个数已经在验证3的时候遇到过了，我们称5、8、4、2是被3“覆盖”的数。我们称一个数列中的某个数n为“关键数”，如果n不能被数列中的其他数字所覆盖。</p>
<p>现在给定⼀系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，第1行给出⼀个正整数K(&lt;100)，第2行给出K个互不相同的待验证的正整数n(1&lt;n&lt;=100)的值，数字间用空格隔开。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用1个空格隔开，但一行中最后一个数字后没有空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对每⼀个输⼊的数字n进行验证，把验证过的数字对应的arr标记为1，而最开始验证的数字对应的arr仍为0。对这些输入的数字从大到小排序，输出所有arr=0的数字即为关键数字（即需要验证的数字）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        v[i] = n;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) n = <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[n] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            arr[n] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[v[i]] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; v[i];</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>Hash散列</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1006 换个格式输出整数</title>
    <url>/undefined/decf7eb4/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用“12…n”来表示个位数字n（&lt;10），换个格式来输出任⼀个不超过3位的正整数。例如234应该被输出为BBSSS1234，因为它有2个“百”、3个“十”、以及个位的4。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，给出正整数 n（&lt;1000）。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，用规定的格式输出n。</p>
<p>输入样例1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure>

<p>输出样例1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure>

<p>输入样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure>

<p>输出样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>分别用a, b, c存储百位，十位和个位</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    a = n / <span class="number">100</span>;</span><br><span class="line">    b = n % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">    c = n % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++) cout &lt;&lt; <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++) cout &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) cout &lt;&lt; i + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神代码</p>
<p>分析：因为n小于1000，所以数字不会超过百位～输入数据首先保存在a中，然后将a的每一个数字保存在int b[3]中，然后将b[2]、b[1]、b[0]中存储的数字看作输出次数依次输出B、S和12..b[0]～</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, i = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        b[i++] = a % <span class="number">10</span>;</span><br><span class="line">        a = a / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">2</span>]; k++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">1</span>]; k++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;S&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; b[<span class="number">0</span>]; k++)</span><br><span class="line">        cout &lt;&lt; k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1007 素数对猜想</title>
    <url>/undefined/bb78715c/</url>
    <content><![CDATA[<blockquote>
<p>素数</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>让我们定义 $d_n$ 为： $d_n$ = $p_{n+1}$ – $p_n$，其中 $p_i$ 是第 $i$ 个素数。显然有 $d_1$ = 1 且对于 n &gt; 1有 $d_n$ 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p>
<p>现给定任意正整数 $N$ (&lt; 105)，请计算不超过 $N$ 的满足猜想的素数对的个数。</p>
<p>输入格式：</p>
<p>每个测试输入包含1个测试用例，给出正整数N。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，不超过N的满足猜想的素数对的个数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sushu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sushu</span>(i - <span class="number">2</span>) &amp;&amp; <span class="built_in">sushu</span>(i)) cnt++;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1008 数组元素循环右移问题</title>
    <url>/undefined/93960f0b/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个数组A中存有 $N$（$N$ &gt; 0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移 $M$（$M$ $\geq$ 0）个位置，即将A中的数据由（$A_0$ $A_1$ ……$A_{N-1}$）变换为 （$A_{N-M}$ …… $A_{N-1}$ $A_0$ $A_1$ …… $A_{N-M-1}$）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>
<p>输入格式：</p>
<p>每个输入包含一个测试用例，第1行输入N ( 1 $\leq$ N $\leq$ 100)、M（M $\geq$ 0）；第2行输入N个整数，之间用空格分隔。</p>
<p>输出格式：</p>
<p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5 6 1 2 3 4 </span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><a href="about:blank#%E9%A2%98%E8%A7%A3" title="题解"></a>题解</h2><p>WA代码（未考虑全面）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - m; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != n - m) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神代码</p>
<p>分析：数组长度为n，要想把数组循环右移m位，只需要先将整个数组a倒置，再将数组前m位倒置， 最后将数组后n-m位倒置即可完成循环右移m位～reverse函数可以实现将⼀个数组或者vector中元素倒置，这个函数在algorithm头文件中～（如果m大于n，那么循环右移m位相当于循环右移m%n位，因为 那些n倍数位的移动是多余的，所以在使用m之前，先将m = m%n）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    m %= n;</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a), <span class="built_in">begin</span>(a) + n);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a), <span class="built_in">begin</span>(a) + m);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(a) + m, <span class="built_in">begin</span>(a) + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; a[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1009 说反话</title>
    <url>/undefined/88699ef4/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>
<p>输入格式：</p>
<p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>
<p>输出格式：</p>
<p>每个测试用例的输出占一行，输出倒序后的句子。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>用栈来实现说反话</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack&lt;string&gt; v;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; s) v.<span class="built_in">push</span>(s);</span><br><span class="line">    cout &lt;&lt; v.<span class="built_in">top</span>();</span><br><span class="line">    v.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(!v.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v.<span class="built_in">top</span>();</span><br><span class="line">        v.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1010 一元多项式求导</title>
    <url>/undefined/9d6225b6/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>设计函数求一元多项式的导数。（注：$x^n$（n为整数）的一阶导数为$nx^{n−1}$​。）</p>
<p>输入格式:</p>
<p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>
<p>输出格式:</p>
<p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; n*m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m<span class="number">-1</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;0 0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1011 A+B和C</title>
    <url>/undefined/429323b4/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定区间 [−$2^{31}$, $2^{​31}$]内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</p>
<p>输入格式：</p>
<p>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p>
<p>输出格式：</p>
<p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 A+B&gt;C，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (a + b &gt; c)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;true&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;false&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1012 数字分类</title>
    <url>/undefined/77a65920/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>
<ul>
<li>$A_1$ = 能被 5 整除的数字中所有偶数的和；</li>
<li>$A_2$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1$ − $n_2$ + $n_3$​​ − $n_4$​​ ⋯；</li>
<li>$A_3$ = 被 5 除后余 2 的数字的个数；</li>
<li>$A_4$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>
<li>$A_5$ = 被 5 除后余 4 的数字中最大数字。</li>
</ul>
<p>输入格式：</p>
<p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$，随后给出 $N$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>
<p>输出格式：</p>
<p>对给定的 $N$ 个正整数，按题目要求计算 $A_1$​ ~ $A_5$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>
<p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure>

<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure>

<p>输入样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure>

<p>输出样例2 ：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我乱糟糟的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a1, a3, a4, a5, i, j;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a2</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; m % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">            a1 += m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">1</span>)</span><br><span class="line">            a2[i++] = m;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">2</span>)</span><br><span class="line">            a3++;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a4 += m;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">5</span> == <span class="number">4</span> &amp;&amp; a5 &lt; m)</span><br><span class="line">            a5 = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b1 = a2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> b2;</span><br><span class="line">    <span class="keyword">if</span> (a4 != <span class="number">0</span>)</span><br><span class="line">        b2 = (<span class="keyword">double</span>)a4 / j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; i; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            b1 -= a2[k];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b1 += a2[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a1 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (b1 != <span class="number">0</span> || i != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; b1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a3 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a3;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)b2 != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>, b2);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (a5 != <span class="number">0</span>)</span><br><span class="line">        cout &lt;&lt; a5;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, num, A1 = <span class="number">0</span>, A2 = <span class="number">0</span>, A5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> A4 = <span class="number">0.0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; num;</span><br><span class="line">        v[num % <span class="number">5</span>].<span class="built_in">push_back</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; v[i][j] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                A1 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                A2 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                A2 -= v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">                A4 += v[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">4</span> &amp;&amp; v[i][j] &gt; A5)</span><br><span class="line">                A5 = v[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; A1 == <span class="number">0</span> || i != <span class="number">0</span> &amp;&amp; v[i].<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A1);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A2);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[<span class="number">2</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f&quot;</span>, A4 / v[<span class="number">3</span>].<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1013 数素数</title>
    <url>/undefined/7a6aca52/</url>
    <content><![CDATA[<blockquote>
<p>素数</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>令 $P_i$ 表示第 $i$ 个素数。现任给两个正整数 $M$ ≤ $N$ ≤ $10_4$，请输出 $P_M$ 到 $P_N$ 的所有素数。</p>
<p>输入格式：</p>
<p>输入在一行中给出 $M$ 和 $N$，其间以空格分隔。</p>
<p>输出格式：</p>
<p>输出从 $P_M$ 到 $P_N$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5 27</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题与上一道题都没有能熟练使用 <code>vector</code>，另外记忆一下 <code>isprime</code> 的使用</p>
<p>我乱糟糟的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n, k = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span> (k &gt;= m &amp;&amp; k &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                l++;</span><br><span class="line">                <span class="keyword">if</span> (l % <span class="number">10</span> != <span class="number">1</span>)</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout &lt;&lt; i;</span><br><span class="line">                <span class="keyword">if</span> (l % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">                    cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, N, num = <span class="number">2</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">while</span> (cnt &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isprime</span>(num))</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= M)</span><br><span class="line">                v.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v[i]);</span><br><span class="line">        <span class="keyword">if</span> (cnt % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1014 福尔摩斯的约会</title>
    <url>/undefined/65d96382/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>大侦探福尔摩斯接到一张字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间 <code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>
<p>输入格式：</p>
<p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>
<p>输出格式：</p>
<p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a, b, c, d;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> pos, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; i &lt; b.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; (a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;G&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">0</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; a.<span class="built_in">length</span>() &amp;&amp; i &lt; b.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[i] &amp;&amp; ((a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;N&#x27;</span>) || <span class="built_in">isdigit</span>(a[i])))</span><br><span class="line">        &#123;</span><br><span class="line">            t[<span class="number">1</span>] = a[i];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; c.<span class="built_in">length</span>() &amp;&amp; j &lt; d.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[j] == d[j] &amp;&amp; <span class="built_in">isalpha</span>(c[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            pos = j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    string week[<span class="number">7</span>] = &#123;<span class="string">&quot;MON &quot;</span>, <span class="string">&quot;TUE &quot;</span>, <span class="string">&quot;WED &quot;</span>, <span class="string">&quot;THU &quot;</span>, <span class="string">&quot;FRI &quot;</span>, <span class="string">&quot;SAT &quot;</span>, <span class="string">&quot;SUN &quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">isdigit</span>(t[<span class="number">1</span>]) ? t[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> : t[<span class="number">1</span>] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; week[t[<span class="number">0</span>] - <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d&quot;</span>, m, pos);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1015 德才论</title>
    <url>/undefined/dca58f07/</url>
    <content><![CDATA[<blockquote>
<p>排序</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p>
<p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>
<p>输入格式：</p>
<p>输入第一行给出 3 个正整数，分别为：N（≤105），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。</p>
<p>随后 N 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p>
<p>输出格式：</p>
<p>输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>参考柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num, a, b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(struct node a, struct node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.a + a.b != b.a + b.b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (a.a + a.b) &gt; (b.a + b.b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.a != b.a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.a &gt; b.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, b, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    m = n;</span><br><span class="line">    vector&lt;node&gt; v[<span class="number">4</span>];</span><br><span class="line">    node t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t.num &gt;&gt; t.a &gt;&gt; t.b;</span><br><span class="line">        <span class="keyword">if</span> (t.a &lt; a || t.b &lt; a)</span><br><span class="line">        &#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &gt;= b &amp;&amp; t.b &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">0</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &gt;= b &amp;&amp; t.b &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">1</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t.a &lt; b &amp;&amp; t.b &lt; b &amp;&amp; t.a &gt;= t.b)</span><br><span class="line">        &#123;</span><br><span class="line">            v[<span class="number">2</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v[<span class="number">3</span>].<span class="built_in">push_back</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(), v[i].<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; v[i][j].num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j].a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i][j].b &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1017 A除以B</title>
    <url>/undefined/aa3c1048/</url>
    <content><![CDATA[<blockquote>
<p>大数运算</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>本题要求计算 $A/B$，其中 $A$ 是不超过 1000 位的正整数，$B$ 是 1 位正整数。你需要输出商数 $Q$ 和余数 $R$，使得 $A$ = $B$ × $Q$ + $R$ 成立。</p>
<p>输入格式：</p>
<p>输入在一行中依次给出 $A$ 和 $B$，中间以 1 空格分隔。</p>
<p>输出格式：</p>
<p>在一行中依次输出 $Q$ 和 $R$，中间以 1 空格分隔。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">123456789050987654321 7</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>手动模拟除法。这道题我用万能头文件 <code>bits/stdc++.h</code> 最后一个测试点超时了，事实证明，头文件还是记记比较好</p>
<p>我的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="keyword">int</span> b, m, n;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">    m = (a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) / b;</span><br><span class="line">    <span class="keyword">if</span> ((m != <span class="number">0</span> &amp;&amp; len &gt; <span class="number">1</span>) || len == <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">    n = (a[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) % b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        m = (n * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>) / b;</span><br><span class="line">        cout &lt;&lt; m;</span><br><span class="line">        n = (n * <span class="number">10</span> + a[i] - <span class="string">&#x27;0&#x27;</span>) % b;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>大数运算</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1016 部分A+B</title>
    <url>/undefined/63e31c49/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>正整数 $A$ 的 “$D_A$ （为 1 位整数）部分”定义为由 $A$ 中所有 $D_A$ 组成的新整数 $P_A$。例如：给定 $A$ = 3862767，$D_A$ = 6，则 $A$ 的“6 部分” $P_A$<br>是 66，因为 $A$ 中有 2 个 6。</p>
<p>现给定 $A$、$D_A$、$B$、$D_B$，请编写程序计算 $P_A$ + $P_B$。</p>
<p>输入格式：</p>
<p>输入在一行中依次给出 $A$、$D_A$、$B$、$D_B$，中间以空格分隔，其中 0 &lt; $A$,$B$ &lt; $10^9$。</p>
<p>输出格式：</p>
<p>在一行中输出 $P_A$ + $P_B$ 的值。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3862767 6 13530293 3</span><br></pre></td></tr></table></figure>

<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">399</span><br></pre></td></tr></table></figure>

<p>输入样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3862767 1 13530293 8</span><br></pre></td></tr></table></figure>

<p>输出样例2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d, t;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">while</span> (a) &#123;</span><br><span class="line">        t = a % <span class="number">10</span>;</span><br><span class="line">        a /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == b) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;	</span><br><span class="line">    <span class="keyword">while</span> (c) &#123;</span><br><span class="line">        t = c % <span class="number">10</span>;</span><br><span class="line">        c /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == d) &#123;</span><br><span class="line">            y = y * <span class="number">10</span> + d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x + y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    <span class="keyword">int</span> da, db, cnta = <span class="number">0</span>, cntb = <span class="number">0</span>, pa = <span class="number">0</span>, pb = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; da &gt;&gt; b &gt;&gt; db;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">length</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (da == (a[i] - <span class="string">&#x27;0&#x27;</span>)) cnta++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">length</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (db == (b[i] - <span class="string">&#x27;0&#x27;</span>)) cntb++;</span><br><span class="line">    <span class="keyword">if</span> (cnta != <span class="number">0</span>) pa = da;</span><br><span class="line">    <span class="keyword">if</span> (cntb != <span class="number">0</span>) pb = db;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnta; i++)</span><br><span class="line">        pa = <span class="number">10</span> * pa + da;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cntb; i++)</span><br><span class="line">        pb = <span class="number">10</span> * pb + db;</span><br><span class="line">    cout &lt;&lt; pa + pb;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1018 锤子剪刀布</title>
    <url>/undefined/be9e689/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="题目图片"></p>
<p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p>
<p>输入格式：</p>
<p>输入第 1 行给出正整数 $N$（≤$10^5$），即双方交锋的次数。随后 $N$ 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p>
<p>输出格式：</p>
<p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">3</span>], y[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w1 = <span class="number">0</span>, w2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;B&#x27;</span> &amp;&amp; b == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;C&#x27;</span> &amp;&amp; b == <span class="string">&#x27;J&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;C&#x27;</span> &amp;&amp; b == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">0</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;J&#x27;</span> &amp;&amp; b == <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">            w1++;</span><br><span class="line">            x[<span class="number">2</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">&#x27;J&#x27;</span> &amp;&amp; b == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">            w2++;</span><br><span class="line">            y[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; w1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n - w1 - w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n - w1 - w2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">char</span> l[<span class="number">3</span>] = &#123; <span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;J&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> max1 = x[<span class="number">0</span>] &gt;= x[<span class="number">1</span>] ? ((x[<span class="number">0</span>] &gt;= x[<span class="number">2</span>]) ? <span class="number">0</span> : <span class="number">2</span>) : ((x[<span class="number">1</span>] &gt;= x[<span class="number">2</span>]) ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> max2 = y[<span class="number">0</span>] &gt;= y[<span class="number">1</span>] ? ((y[<span class="number">0</span>] &gt;= y[<span class="number">2</span>]) ? <span class="number">0</span> : <span class="number">2</span>) : ((y[<span class="number">1</span>] &gt;= y[<span class="number">2</span>]) ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; l[max1] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; l[max2] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1019 数字黑洞</title>
    <url>/undefined/53a245f3/</url>
    <content><![CDATA[<blockquote>
<p>数学问题</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</p>
<p>例如，我们从6767开始，将得到</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
<p>现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</p>
<p>输入格式：</p>
<p>输入给出一个 (0,$10^4$) 区间内的正整数 $N$。</p>
<p>输出格式：</p>
<p>如果 $N$ 的 4 位数字全相等，则在一行内输出 <code>N - N = 0000</code>；否则将计算的每一步在一行内输出，直到 <code>6174</code> 作为差出现，输出格式见样例。注意每个数字按 <code>4</code> 位数格式输出。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">6767</span><br></pre></td></tr></table></figure>

<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br></pre></td></tr></table></figure>

<p>输入样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">2222</span><br></pre></td></tr></table></figure>

<p>输出样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, x, y;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        a[<span class="number">0</span>] = n / <span class="number">1000</span>;</span><br><span class="line">        a[<span class="number">1</span>] = n / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">2</span>] = n / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        a[<span class="number">3</span>] = n % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        x = a[<span class="number">0</span>] * <span class="number">1000</span> + a[<span class="number">1</span>] * <span class="number">100</span> + a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>];</span><br><span class="line">        y = a[<span class="number">3</span>] * <span class="number">1000</span> + a[<span class="number">2</span>] * <span class="number">100</span> + a[<span class="number">1</span>] * <span class="number">10</span> + a[<span class="number">0</span>];</span><br><span class="line">        n = y - x;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, y);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; - &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, x);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; = &quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>, n);</span><br><span class="line">        cout&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">6174</span> || n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>柳神的代码，应用了c++11新特性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">4</span> - s.<span class="built_in">length</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        string a = s, b = s;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> result = <span class="built_in">stoi</span>(a) - <span class="built_in">stoi</span>(b);</span><br><span class="line">        s = <span class="built_in">to_string</span>(result);</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">4</span> - s.<span class="built_in">length</span>(), <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; a &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (s != <span class="string">&quot;6174&quot;</span> &amp;&amp; s != <span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>数学问题</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1020 月饼</title>
    <url>/undefined/db3c06db/</url>
    <content><![CDATA[<blockquote>
<p>贪心</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p>
<p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p>
<p>输入格式：</p>
<p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$ 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 $D$ 表示市场最大需求量。随后一行给出 $N$ 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 $N$ 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>
<p>输出格式：</p>
<p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心的经典例题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b, c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.c &gt; b.c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    vector&lt;node&gt;<span class="built_in">a</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].b;</span><br><span class="line">        a[i].c = a[i].b / a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i].a &lt;= d)&#123;</span><br><span class="line">            sum += a[i].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sum += d * a[i].c;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d -= a[i].a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1021 个位数统计</title>
    <url>/undefined/35873256/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 $k$ 位整数 $N$=$d_{k−1}$$10^{k-1}$ + ⋯ + $d_{1}$$10^1$ + $d_0$ (0 ≤ $d_i$ ≤ 9, $i$ = 0, ⋯ , $k$ − 1, $d_{k−1}$$&gt;0$) (0 ≤ $d_i$ ≤ 9, $i$ = 0, ⋯ , $k$ − 1, $d_{​k−1}$ &gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 $N$ = 100311，则有 2 个 0，3 个 1，和 1 个 3。</p>
<p>输入格式：<br>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 $N$。</p>
<p>输出格式：<br>对 $N$ 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 $N$ 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>注意n为不超过1000位的整数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string n;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        a[n[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1022 D进制的A+B</title>
    <url>/undefined/899cf095/</url>
    <content><![CDATA[<blockquote>
<p>进制转换</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入两个非负 10 进制整数 $A$ 和 $B$ (≤ $2^30$ − 1)，输出 $A$ + $B$ 的 $D$ (1 &lt; $D$ ≤ 10)进制数。</p>
<p>输入格式：</p>
<p>输入在一行中依次给出 3 个整数 $A$、$B$ 和 $D$。</p>
<p>输出格式：<br>输出 $A$ + $B$ 的 $D$ 进制数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">123 456 8</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">int</span> t = a + b;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">        s[i++] = t % c;</span><br><span class="line">        t /= c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        cout &lt;&lt; s[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1023 组个最小数</title>
    <url>/undefined/985885a1/</url>
    <content><![CDATA[<blockquote>
<p>贪心</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p>
<p>现给定数字，请编写程序输出能够组成的最小的数。</p>
<p>输入格式：</p>
<p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p>
<p>输出格式：</p>
<p>在一行中输出能够组成的最小的数。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>水题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            a[i]--;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++)</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1024 科学计数法</title>
    <url>/undefined/ca5a55fe/</url>
    <content><![CDATA[<blockquote>
<p>字符串处理</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]<code>.</code>[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。</p>
<p>现以科学计数法的格式给出实数 $A$，请编写程序按普通数字表示法输出 $A$，并保证所有有效位都被保留。</p>
<p>输入格式：</p>
<p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p>
<p>输出格式：</p>
<p>对每个测试用例，在一行中按普通数字表示法输出 $A$，并保证所有有效位都被保留，包括末尾的 0。</p>
<p>输入样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">+1.23400E-03</span><br></pre></td></tr></table></figure>
<p>输出样例 1：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0.00123400</span><br></pre></td></tr></table></figure>
<p>输入样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-1.2E+10</span><br></pre></td></tr></table></figure>
<p>输出样例 2：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-12000000000</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>柳神：</p>
<p>分析：n保存E后面的字符串所对应的数字，t保存E前面的字符串，不包括符号位。当n&lt;0时表示向前移动，那么先输出0. 然后输出abs(n)-1个0，然后继续输出t中的所有数字；当n&gt;0时候表示向后移动，那么先输出第一个字符，然后将t中尽可能输出n个字符，如果t已经输出到最后一个字符(j == t.length())那么就在后面补n-cnt个0，否则就补充一个小数点. 然后继续输出t剩余的没有输出的字符～</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i] != <span class="string">&#x27;E&#x27;</span>) i++;</span><br><span class="line">    string t = s.<span class="built_in">substr</span>(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">stoi</span>(s.<span class="built_in">substr</span>(i + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0.&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">abs</span>(n) - <span class="number">1</span>; j++) cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.<span class="built_in">length</span>(); j++)</span><br><span class="line">            <span class="keyword">if</span> (t[j] != <span class="string">&#x27;.&#x27;</span>) cout &lt;&lt; t[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; t[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cnt, j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>, cnt = <span class="number">0</span>; j &lt; t.<span class="built_in">length</span>() &amp;&amp; cnt &lt; n; j++, cnt++) cout &lt;&lt;</span><br><span class="line">            t[j];</span><br><span class="line">        <span class="keyword">if</span> (j == t.<span class="built_in">length</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - cnt; k++) cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt; t.<span class="built_in">length</span>(); k++) cout &lt;&lt; t[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1025 反转链表</title>
    <url>/undefined/12015b6e/</url>
    <content><![CDATA[<blockquote>
<p>链表</p>
</blockquote>
<span id="more"></span>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个常数 $K$ 以及一个单链表 $L$，请编写程序将 $L$ 中每 $K$ 个结点反转。例如：给定 $L$ 为 1→2→3→4→5→6，$K$ 为 3，则输出应该为 3→2→1→6→5→4；如果 $K$ 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 $K$ 个元素不反转。</p>
<p>输入格式：</p>
<p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤ $10^5$)、以及正整数 K (≤ $N$)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。</p>
<p>接下来有 $N$ 行，每行格式为：<code>Address Data Next</code></p>
<p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p>
<p>输出格式：</p>
<p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">00100 6 4</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 -1</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">00000 4 33218</span><br><span class="line">33218 3 12309</span><br><span class="line">12309 2 00100</span><br><span class="line">00100 1 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 -1</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>还应该考虑输入样例中有不在链表中的结点的情况。所以用个sum计数~</p>
<p>而且，algorithm头文件里面有reverse函数可以直接调用～</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> first, k, n, temp;</span><br><span class="line"> cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class="line"> <span class="keyword">int</span> data[<span class="number">100005</span>], next[<span class="number">100005</span>], list[<span class="number">100005</span>];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"> cin &gt;&gt; temp;</span><br><span class="line"> cin &gt;&gt; data[temp] &gt;&gt; next[temp];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//不⼀定所有的输⼊的结点都是有⽤的，加个计数器</span></span><br><span class="line"> <span class="keyword">while</span> (first != <span class="number">-1</span>) &#123;</span><br><span class="line"> list[sum++] = first;</span><br><span class="line"> first = next[first];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (sum - sum % k); i += k)</span><br><span class="line"> <span class="built_in">reverse</span>(<span class="built_in">begin</span>(list) + i, <span class="built_in">begin</span>(list) + i + k);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum - <span class="number">1</span>; i++)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, list[i], data[list[i]], list[i + <span class="number">1</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1&quot;</span>, list[sum - <span class="number">1</span>], data[list[sum - <span class="number">1</span>]]);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>PAT乙级-1026 程序运行时间</title>
    <url>/undefined/b91332ee/</url>
    <content><![CDATA[<blockquote>
<p>模拟</p>
</blockquote>
<span id="more"></span>

<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p>
<p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>
<p>输入格式：</p>
<p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0, $10^7$]。</p>
<p>输出格式：</p>
<p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p>
<p>输入样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">123 4577973</span><br></pre></td></tr></table></figure>
<p>输出样例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">12:42:59</span><br></pre></td></tr></table></figure>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336">题目链接</a></p>
]]></content>
      <categories>
        <category>PAT乙级</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax笔记</title>
    <url>/undefined/48d9bd16/</url>
    <content><![CDATA[<blockquote>
<p>AJAX学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-Ajax概述"><a href="#1-Ajax概述" class="headerlink" title="1 Ajax概述"></a>1 Ajax概述</h1><h2 id="1-1-AJAX-简介"><a href="#1-1-AJAX-简介" class="headerlink" title="1.1 AJAX 简介"></a>1.1 AJAX 简介</h2><p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的JS 和XML<br>通过AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong><br>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p>
<h2 id="1-2-XML-简介"><a href="#1-2-XML-简介" class="headerlink" title="1.2 XML 简介"></a>1.2 XML 简介</h2><p>XML 可扩展标记语言。<br>XML 被设计用来传输和存储数据。<br>XML 和HTML 类似，不同的是HTML 中都是预定义标签，而XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。</p>
<p>比如说我有一个学生数据：<br>name = “孙悟空” ; age = 18 ; gender = “男” ;<br>用XML 表示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>孙悟空<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>现在已经被JSON 取代了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;孙悟空&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">18</span>,<span class="attr">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-AJAX-的特点"><a href="#1-3-AJAX-的特点" class="headerlink" title="1.3 AJAX 的特点"></a>1.3 AJAX 的特点</h2><h3 id="1-3-1-AJAX-的优点"><a href="#1-3-1-AJAX-的优点" class="headerlink" title="1.3.1 AJAX 的优点"></a>1.3.1 AJAX 的优点</h3><p>可以无需刷新页面而与服务器端进行通信<br>允许你根据用户事件来更新部分页面内容</p>
<h3 id="1-3-2-AJAX-的缺点"><a href="#1-3-2-AJAX-的缺点" class="headerlink" title="1.3.2 AJAX 的缺点"></a>1.3.2 AJAX 的缺点</h3><p>1 没有浏览历史，不能回退<br>2 存在跨域问题(同源)<br>3 SEO 不友好</p>
<h1 id="2-HTTP相关问题"><a href="#2-HTTP相关问题" class="headerlink" title="2 HTTP相关问题"></a>2 HTTP相关问题</h1><h2 id="2-1-MDN-文档"><a href="#2-1-MDN-文档" class="headerlink" title="2.1 MDN 文档"></a>2.1 MDN 文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview</a></p>
<h2 id="2-2-HTTP-请求交互的基本过程"><a href="#2-2-HTTP-请求交互的基本过程" class="headerlink" title="2.2 HTTP 请求交互的基本过程"></a>2.2 HTTP 请求交互的基本过程</h2><p><img src="https://raw.githubusercontent.com/jiucheng120/clouding/master/data/2021/20211127160931.png"></p>
<p>1 前后应用从浏览器端向服务器发送HTTP 请求(请求报文)<br>2 后台服务器接收到请求后, 调度服务器应用处理请求文<br>3 向浏览器端返回HTTP响应(响应报文)</p>
<p>浏览器端接收到响应, 解析显示响应体/调用监视回调</p>
<h2 id="2-3-HTTP-请求报文"><a href="#2-3-HTTP-请求报文" class="headerlink" title="2.3 HTTP 请求报文"></a>2.3 HTTP 请求报文</h2><h3 id="2-3-1-请求行"><a href="#2-3-1-请求行" class="headerlink" title="2.3.1 请求行"></a>2.3.1 请求行</h3><p><code>method url</code><br><code>GET /product_detail?id=2</code><br><code>POST /login</code></p>
<h3 id="2-3-2-多个请求头"><a href="#2-3-2-多个请求头" class="headerlink" title="2.3.2 多个请求头"></a>2.3.2 多个请求头</h3><p><code>Host: www.baidu.com</code><br><code>Cookie: BAIDUID=AD3B0FA706E; BIDUPSID=AD3B0FA706;</code><br><code>Content-Type: application/x-www-form-urlencoded 或者application/json</code></p>
<h3 id="3-3-3-请求体"><a href="#3-3-3-请求体" class="headerlink" title="3.3.3 请求体"></a>3.3.3 请求体</h3><p><code>username=tom&amp;pwd=123</code><br><code>&#123;&quot;username&quot;: &quot;tom&quot;, &quot;pwd&quot;: 123&#125;</code></p>
<h2 id="2-4-HTTP-响应报文"><a href="#2-4-HTTP-响应报文" class="headerlink" title="2.4 HTTP 响应报文"></a>2.4 HTTP 响应报文</h2><p>1 响应状态行: status statusText<br>2 多个响应头<br><code>Content-Type: text/html;charset=utf-8</code><br><code>Set-Cookie: BD_CK_SAM=1;path=/</code><br>3 响应体<br><code>html 文本/json 文本/js/css/图片...</code></p>
<h2 id="2-5-post-请求体参数格式"><a href="#2-5-post-请求体参数格式" class="headerlink" title="2.5 post 请求体参数格式"></a>2.5 post 请求体参数格式</h2><p>1 <code>Content-Type: application/x-www-form-urlencoded;charset=utf-8</code><br>用于键值对参数，参数的键值用=连接, 参数之间用&amp;连接<br>例如: <code>name=%E5%B0%8F%E6%98%8E&amp;age=12</code><br>2 <code>Content-Type: application/json;charset=utf-8</code><br>用于 json 字符串参数<br>例如: <code>&#123;&quot;name&quot;: &quot;%E5%B0%8F%E6%98%8E&quot;, &quot;age&quot;: 12&#125; Content-Type: multipart/form-data</code><br>用于文件上传请求</p>
<h2 id="2-6-常见的响应状态码"><a href="#2-6-常见的响应状态码" class="headerlink" title="2.6 常见的响应状态码"></a>2.6 常见的响应状态码</h2><p><code>200 OK</code> 请求成功。一般用于GET 与POST 请求<br><code>201 Created</code> 已创建。成功请求并创建了新的资源<br><code>401 Unauthorized</code> 未授权/请求要求用户的身份认证<br><code>404 Not Found</code> 服务器无法根据客户端的请求找到资源<br><code>500 Internal Server Error</code> 服务器内部错误，无法完成请求</p>
<h2 id="2-7-不同类型的请求及其作用"><a href="#2-7-不同类型的请求及其作用" class="headerlink" title="2.7 不同类型的请求及其作用"></a>2.7 不同类型的请求及其作用</h2><p>1 <code>GET</code>: 从服务器端读取数据（查）<br>2 <code>POST</code>: 向服务器端添加新数据 （增）<br>3 <code>PUT</code>: 更新服务器端已经数据 （改）<br>4 <code>DELETE</code>: 删除服务器端数据 （删）</p>
<h2 id="2-8-API-的分类"><a href="#2-8-API-的分类" class="headerlink" title="2.8 API 的分类"></a>2.8 API 的分类</h2><p>1 REST API: restful （Representational State Transfer (资源)表现层状态转化）<br>(1) 发送请求进行CRUD 哪个操作由请求方式来决定<br>(2) 同一个请求路径可以进行多个操作<br>(3) 请求方式会用到GET/POST/PUT/DELETE</p>
<p>2 非REST API: restless<br>(1) 请求方式不决定请求的CRUD 操作<br>(2) 一个请求路径只对应一个操作<br>(3) 一般只有GET/POST</p>
<h2 id="2-9-一般http请求与ajax请求的区别"><a href="#2-9-一般http请求与ajax请求的区别" class="headerlink" title="2.9 一般http请求与ajax请求的区别"></a>2.9 一般http请求与ajax请求的区别</h2><p>1 ajax请求 是一种特别的 http请求<br>2 对服务器端来说, 没有任何区别, 区别在浏览器端<br>3 浏览器端发请求: 只有XHR 或fetch 发出的才是ajax 请求, 其它所有的都是非ajax 请求<br>4 浏览器端接收到响应<br>(1) 一般请求: 浏览器一般会直接显示响应体数据, 也就是我们常说的刷新/跳转页面<br>(2) ajax请求: 浏览器不会对界面进行任何更新操作, 只是调用监视的回调函数并传入响应相关数据</p>
<h1 id="3-原生AJAX-的基本使用-XHR"><a href="#3-原生AJAX-的基本使用-XHR" class="headerlink" title="3 原生AJAX 的基本使用 XHR"></a>3 原生AJAX 的基本使用 XHR</h1><h2 id="3-0-准备工作"><a href="#3-0-准备工作" class="headerlink" title="3.0 准备工作"></a>3.0 准备工作</h2><h3 id="3-0-1-安装node-js"><a href="#3-0-1-安装node-js" class="headerlink" title="3.0.1 安装node.js"></a>3.0.1 安装node.js</h3><p><a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
<h3 id="3-0-2-安装express（服务端框架）"><a href="#3-0-2-安装express（服务端框架）" class="headerlink" title="3.0.2 安装express（服务端框架）"></a>3.0.2 安装express（服务端框架）</h3><p><a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p>
<p>1 初始化环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>

<p>2 下载express包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<p>3 编写js代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  设置响应</span></span><br><span class="line">  response.send(<span class="string">&quot;Hello Express&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>4 运行js程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node .\01express使用.js</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/jiucheng120/clouding/master/data/2021/20211127162437.png" alt="20210209165304650"></p>
<p>5 打开网页显示页面</p>
<p>6 调试程序可以查看请求和响应</p>
<h3 id="3-0-3-安装nodemon自动重启工具"><a href="#3-0-3-安装nodemon自动重启工具" class="headerlink" title="3.0.3 安装nodemon自动重启工具"></a>3.0.3 安装nodemon自动重启工具</h3><p>文件内容有修改自动重新启动服务<br><a href="https://www.npmjs.com/package/nodemon">https://www.npmjs.com/package/nodemon</a></p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure>


<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ndoemon server.js</span><br></pre></td></tr></table></figure>

<h2 id="3-1-理解"><a href="#3-1-理解" class="headerlink" title="3.1 理解"></a>3.1 理解</h2><p>1 使用XMLHttpRequest (XHR)对象可以与服务器交互, 也就是发送ajax 请求<br>2 前端可以获取到数据，而无需让整个的页面刷新。<br>3 这使得Web 页面可以只更新页面的局部，而不影响用户的操作。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a><br><code>XMLHttpRequest</code>，AJAX 的所有操作都是通过该对象进行的</p>
<h2 id="3-2-核心对象使用步骤"><a href="#3-2-核心对象使用步骤" class="headerlink" title="3.2 核心对象使用步骤"></a>3.2 核心对象使用步骤</h2><h3 id="3-2-1-创建XMLHttpRequest-对象"><a href="#3-2-1-创建XMLHttpRequest-对象" class="headerlink" title="3.2.1 创建XMLHttpRequest 对象"></a>3.2.1 创建XMLHttpRequest 对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-设置请求信息（请求方法和url）"><a href="#3-2-2-设置请求信息（请求方法和url）" class="headerlink" title="3.2.2 设置请求信息（请求方法和url）"></a>3.2.2 设置请求信息（请求方法和url）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line">xhr.open(method, url);</span><br><span class="line"><span class="comment">//可以设置请求头，一般不设置</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-发送请求"><a href="#3-2-3-发送请求" class="headerlink" title="3.2.3 发送请求"></a>3.2.3 发送请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.send(body) <span class="comment">//get请求不传 body 参数，只有post请求使用</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-4-接收响应（事件绑定，处理服务端返回的结果）"><a href="#3-2-4-接收响应（事件绑定，处理服务端返回的结果）" class="headerlink" title="3.2.4 接收响应（事件绑定，处理服务端返回的结果）"></a>3.2.4 接收响应（事件绑定，处理服务端返回的结果）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//xhr.responseXML 接收 xml格式 的响应数据</span></span><br><span class="line"><span class="comment">//xhr.responseText 接收 文本格式 的响应数据</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// readyState 是 xhr对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> text = xhr.responseText;</span><br><span class="line">        <span class="built_in">console</span>.log(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-使用案例"><a href="#3-3-使用案例" class="headerlink" title="3.3 使用案例"></a>3.3 使用案例</h2><h3 id="3-3-1-GET-请求"><a href="#3-3-1-GET-请求" class="headerlink" title="3.3.1 GET 请求"></a>3.3.1 GET 请求</h3><p>点击返回响应信息</p>
<p>创建两个文件，浏览器端使用的html文件和服务器端使用的js文件</p>
<p>服务器端 server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line">app.get(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头 设置允许跨域</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体</span></span><br><span class="line">  response.send(<span class="string">&quot;Hello Ajax&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听服务</span></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务已经启动, 8000 端口监听中...&quot;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>

<p>前端页面 html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax GET 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #result &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#90b</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取button元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//绑定事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 创建对象 </span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 初始化 设置请求方法和url</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3. 发送</span></span></span><br><span class="line">      xhr.send();</span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 事件绑定 处理服务端返回的结果</span></span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断 (服务端返回了所有的结果)</span></span></span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line"><span class="javascript">          <span class="comment">//判断响应状态码 200  404  403 401 500</span></span></span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理结果 行 头 空行 体</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 响应</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;状态码&#x27;</span>, xhr.status); <span class="comment">// 状态码</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;状态字符串&#x27;</span>, xhr.statusText); <span class="comment">// 状态字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;所有响应头&#x27;</span>, xhr.getAllResponseHeaders()); <span class="comment">// 所有响应头</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;响应体&#x27;</span>, xhr.response); <span class="comment">// 响应体</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//设置 result 的文本</span></span></span><br><span class="line">        	result.innerHTML=xhr.response;</span><br><span class="line"><span class="javascript">      	  &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">      	  &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>GET 请求设置请求参数</strong></p>
<p>设置url参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server?a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-3-2-POST请求"><a href="#3-3-2-POST请求" class="headerlink" title="3.3.2 POST请求"></a>3.3.2 POST请求</h3><p>鼠标放到div中，发post请求，将响应体放在div中呈现</p>
<p>server.js添加post</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许跨域</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体</span></span><br><span class="line">  response.send(<span class="string">&quot;Hello Ajax POST&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>post.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax POST 请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #result &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#903</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取元素对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 绑定事件</span></span></span><br><span class="line"><span class="javascript">    result.addEventListener(<span class="string">&quot;mouseover&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 创建对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 初始化 设置类型（请求方式）与url</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 3. 发送   设置请求参数（请求体）</span></span></span><br><span class="line"><span class="javascript">      xhr.send(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 4. 事件绑定</span></span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断</span></span></span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;=200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理服务端返回的结果</span></span></span><br><span class="line">            result.innerHTML = xhr.response;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>设置请求头信息</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置请求体内容的类型</span></span><br><span class="line">xhr.setRequesHeader(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-from-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">// 自定义头信息</span></span><br><span class="line">xhr.setRequesHeader(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ykyk&#x27;</span>);</span><br></pre></td></tr></table></figure>


<p>server.js中设置响应头允许自定义请求头 post改成all</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&#x27;Access-Control-Allow-Header&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-json数据请求"><a href="#3-4-json数据请求" class="headerlink" title="3.4 json数据请求"></a>3.4 json数据请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许跨域</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应头, 设置允许自定义头信息</span></span><br><span class="line">  response.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  <span class="comment">// 响应一个数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    name: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 对 对象 进行 字符串 转换</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="comment">// 设置响应体 </span></span><br><span class="line">  response.send(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #result &#123;</span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#89b</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 绑定键盘按下事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">      <span class="comment">// *2*.(自动转换) 设置响应体数据的类型(自动转换)</span></span></span><br><span class="line"><span class="javascript">      xhr.responseType = <span class="string">&#x27;json&#x27;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="javascript">      xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/json-server&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送</span></span></span><br><span class="line">      xhr.send();</span><br><span class="line"><span class="javascript">      <span class="comment">// 事件绑定</span></span></span><br><span class="line"><span class="javascript">      xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if(xhr.readyState === 4)&#123;</span><br><span class="line">          if(xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.response);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 手动对数据转化 (字符串再转换成json)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// let data = JSON.parse(xhr.response); //转换成json</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// result.innerHTML = data.name;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// *2*. (自动转换)自动转换(自动转换)</span></span></span><br><span class="line"><span class="javascript">            result.innerHTML = xhr.response.name; <span class="comment">//已经自动变成json</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-请求超时与网络异常"><a href="#3-5-请求超时与网络异常" class="headerlink" title="3.5 请求超时与网络异常"></a>3.5 请求超时与网络异常</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 超时设置 （2秒）</span></span><br><span class="line">xhr.timeout = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 超时回调</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;网络超时，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 网络异常回调</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;网络异常，请稍后重试&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-取消请求"><a href="#3-6-取消请求" class="headerlink" title="3.6 取消请求"></a>3.6 取消请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动取消</span></span><br><span class="line">xhr.abort()</span><br></pre></td></tr></table></figure>

<h2 id="3-7-请求重复发送问题"><a href="#3-7-请求重复发送问题" class="headerlink" title="3.7 请求重复发送问题"></a>3.7 请求重复发送问题</h2><h2 id="3-8-解决-IE-缓存问题"><a href="#3-8-解决-IE-缓存问题" class="headerlink" title="3.8 解决 IE 缓存问题"></a>3.8 解决 IE 缓存问题</h2><p><strong>问题：</strong>在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。<br><strong>解决方式：</strong>浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url 地址即可避免缓存问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;/testAJAX?t=&quot;</span>+<span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure>

<h2 id="3-9-AJAX-请求状态"><a href="#3-9-AJAX-请求状态" class="headerlink" title="3.9 AJAX 请求状态"></a>3.9 AJAX 请求状态</h2><p><code>xhr.readyState</code> 可以用来查看请求当前的状态<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></p>
<p>0: 表示XMLHttpRequest 实例已经生成，但是open()方法还没有被调用<br>1: 表示send()方法还没有被调用，仍然可以使用setRequestHeader()，设定HTTP请求的头信息<br>2: 表示send()方法已经执行，并且头信息和状态码已经收到<br>3: 表示正在接收服务器传来的body 部分的数据<br>4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p>
<h2 id="3-10-API总结"><a href="#3-10-API总结" class="headerlink" title="3.10 API总结"></a>3.10 API总结</h2><p><code>XMLHttpRequest()</code>：创建 XHR 对象的构造函数<br><code>status</code>：响应状态码值，如 200、404<br><code>statusText</code>：响应状态文本，如 ’ok‘、‘not found’<br><code>readyState</code>：标识请求状态的只读属性 0-1-2-3-4<br><code>onreadystatechange</code>：绑定 readyState 改变的监听<br><code>responseType</code>：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应<br><code>response</code>：响应体数据，类型取决于 responseType 的指定<br><code>timeout</code>：指定请求超时时间，默认为 0 代表没有限制<br><code>ontimeout</code>：绑定超时的监听<br><code>onerror</code>：绑定请求网络错误的监听<br><code>open()</code>：初始化一个请求，参数为：(method, url[, async])<br><code>send(data)</code>：发送请求<br><code>abort()</code>：中断请求 （发出到返回之间）<br><code>getResponseHeader(name)</code>：获取指定名称的响应头值<br><code>getAllResponseHeaders()</code>：获取所有响应头组成的字符串<br><code>setRequestHeader(name, value)</code>：设置请求头</p>
<h1 id="4-jQuery-中的AJAX"><a href="#4-jQuery-中的AJAX" class="headerlink" title="4 jQuery 中的AJAX"></a>4 jQuery 中的AJAX</h1><h2 id="4-1-get-请求"><a href="#4-1-get-请求" class="headerlink" title="4.1 get 请求"></a>4.1 get 请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.get(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure>

<p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p>
<h2 id="4-2-post-请求"><a href="#4-2-post-请求" class="headerlink" title="4.2 post 请求"></a>4.2 post 请求</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.post(url, [data], [callback], [type])</span><br></pre></td></tr></table></figure>

<p>url:请求的URL 地址<br>data:请求携带的参数<br>callback:载入成功时回调函数<br>type:设置返回内容格式，xml, html, script, json, text, _default</p>
<h2 id="4-3-通用方法"><a href="#4-3-通用方法" class="headerlink" title="4.3 通用方法"></a>4.3 通用方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"><span class="comment">// url</span></span><br><span class="line">url: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line">data: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line"><span class="comment">// 请求类型</span></span><br><span class="line">type: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="comment">// 响应体结果</span></span><br><span class="line">dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="comment">// 成功的回调</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data);&#125;,</span><br><span class="line"><span class="comment">// 超时时间</span></span><br><span class="line">timeout: <span class="number">2000</span>,</span><br><span class="line"><span class="comment">// 失败的回调</span></span><br><span class="line">error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;出错拉~&#x27;</span>);&#125;,</span><br><span class="line"><span class="comment">// 头信息</span></span><br><span class="line">headers: &#123;</span><br><span class="line">    c: <span class="number">300</span>,</span><br><span class="line">    d: <span class="number">400</span></span><br><span class="line">&#125;	</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="5-跨域"><a href="#5-跨域" class="headerlink" title="5 跨域"></a>5 跨域</h1><h2 id="5-1-同源策略"><a href="#5-1-同源策略" class="headerlink" title="5.1 同源策略"></a>5.1 同源策略</h2><p>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略<br>同源： 协议、域名、端口号必须完全相同<br>跨域： 违背同源策略就是跨域</p>
<h2 id="5-2-如何解决跨域"><a href="#5-2-如何解决跨域" class="headerlink" title="5.2 如何解决跨域"></a>5.2 如何解决跨域</h2><h3 id="5-2-1-JSONP"><a href="#5-2-1-JSONP" class="headerlink" title="5.2.1 JSONP"></a>5.2.1 JSONP</h3><h4 id="1-JSONP-是什么"><a href="#1-JSONP-是什么" class="headerlink" title="1 JSONP 是什么"></a>1 JSONP 是什么</h4><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>才智开发出来，只支持get 请求。</p>
<h4 id="2-JSONP-怎么工作的？"><a href="#2-JSONP-怎么工作的？" class="headerlink" title="2 JSONP 怎么工作的？"></a>2 JSONP 怎么工作的？</h4><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用script 标签的跨域能力来发送请求的。</p>
<h4 id="3-JSONP-的使用"><a href="#3-JSONP-的使用" class="headerlink" title="3 JSONP 的使用"></a>3 JSONP 的使用</h4><p>1）动态的创建一个script 标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>2）设置script 的src，设置回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">script.src = <span class="string">&quot;http://localhost:3000/testAJAX?callback=abc&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">alert(data.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3）将script 添加到body 中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure>

<p>4）服务器中路由的处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/testAJAX&quot;</span> , <span class="function"><span class="keyword">function</span> (<span class="params">req , res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;收到请求&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> callback = req.query.callback;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">res.send(callback+<span class="string">&quot;(&quot;</span>+<span class="built_in">JSON</span>.stringify(obj)+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="4-jQuery-中的JSONP"><a href="#4-jQuery-中的JSONP" class="headerlink" title="4 jQuery 中的JSONP"></a>4 jQuery 中的JSONP</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery-1.12.3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">				btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">					$.getJSON(<span class="string">&quot;http://api.douban.com/v2/movie/in_theaters?callback=?&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">						<span class="comment">//获取所有的电影的条目</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> subjects = data.subjects;</span></span><br><span class="line"><span class="javascript">						<span class="comment">//遍历电影条目</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;subjects.length ; i++)&#123;</span></span><br><span class="line"><span class="javascript">							$(<span class="string">&quot;#list&quot;</span>).append(<span class="string">&quot;&lt;li&gt;&quot;</span>+</span></span><br><span class="line"><span class="javascript">							subjects[i].title+<span class="string">&quot;&lt;br /&gt;&quot;</span>+</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;&lt;img src=\&quot;&quot;</span>+subjects[i].images.large+<span class="string">&quot;\&quot; &gt;&quot;</span>+</span></span><br><span class="line"><span class="javascript">							<span class="string">&quot;&lt;/li&gt;&quot;</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-CORS"><a href="#5-2-2-CORS" class="headerlink" title="5.2.2 CORS"></a>5.2.2 CORS</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
<h4 id="1-CORS-是什么？"><a href="#1-CORS-是什么？" class="headerlink" title="1 CORS 是什么？"></a>1 CORS 是什么？</h4><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方<br>案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持<br>get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些<br>源站通过浏览器有权限访问哪些资源</p>
<h4 id="2-CORS-怎么工作的？"><a href="#2-CORS-怎么工作的？" class="headerlink" title="2 CORS 怎么工作的？"></a>2 CORS 怎么工作的？</h4><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行。</p>
<h4 id="3-CORS-的使用"><a href="#3-CORS-的使用" class="headerlink" title="3 CORS 的使用"></a>3 CORS 的使用</h4><p>主要是服务器端的设置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.get(<span class="string">&quot;/testAJAX&quot;</span> , <span class="function"><span class="keyword">function</span> (<span class="params">req , res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//通过res 来设置响应头，来允许跨域请求</span></span><br><span class="line">    <span class="comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span><br><span class="line">    res.set(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    res.send(<span class="string">&quot;testAJAX 返回的响应&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新特性</title>
    <url>/undefined/de81bfb9/</url>
    <content><![CDATA[<blockquote>
<p>ES6新特性</p>
</blockquote>
<span id="more"></span>

<p>很好的文档：</p>
<p><a href="https://es6.ruanyifeng.com/">ES6 入门教程 - ECMAScript 6入门 (ruanyifeng.com)</a></p>
<h1 id="1-let关键字"><a href="#1-let关键字" class="headerlink" title="1 let关键字"></a>1 let关键字</h1><p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p>
<p>1 不允许重复声明</p>
<p>2 块儿级作用域</p>
<p>3 不存在变量提升</p>
<p>4 不影响作用域链</p>
<p><font color=red><strong>应用场景：以后声明变量使用let就对了</strong></font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b,c,d;</span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 变量不能重复声明</span></span><br><span class="line"><span class="comment">// let star = &#x27;罗志祥&#x27;;</span></span><br><span class="line"><span class="comment">// let star = &#x27;小猪&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 块儿级作用域  全局, 函数, eval</span></span><br><span class="line"><span class="comment">// if else while for </span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     let girl = &#x27;周扬青&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(girl);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 不存在变量提升</span></span><br><span class="line"><span class="comment">// console.log(song);</span></span><br><span class="line"><span class="comment">// let song = &#x27;恋爱达人&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 不影响作用域链</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(school);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例：点击 DIV 换色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>点击 DIV 换色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .item &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="built_in">rgb</span>(<span class="number">42</span>, <span class="number">156</span>, <span class="number">156</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>点击切换颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取div元素对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> items = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;item&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//遍历并绑定事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;items.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            items[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//修改当前元素的背景颜色</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.style.background = &#x27;pink&#x27;;</span></span></span><br><span class="line"><span class="javascript">                items[i].style.background = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-const关键字"><a href="#2-const关键字" class="headerlink" title="2 const关键字"></a>2 const关键字</h1><p>const 关键字用来声明常量，const 声明有以下特点</p>
<p>1 声明必须赋初始值</p>
<p>2 标识符一般为大写</p>
<p>3 不允许重复声明</p>
<p>4 值不允许修改</p>
<p>5 块儿级作用域</p>
<p><font color=red><strong>注意: 对象属性修改和数组元素变化不会触发const错误</strong></font></p>
<p><strong><font color=red>应用场景：声明对象类型使用 const，非对象类型声明选择 let</font></strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> SCHOOL = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 一定要赋初始值</span></span><br><span class="line"><span class="comment">// const A;</span></span><br><span class="line"><span class="comment">//2. 一般常量使用大写(潜规则)</span></span><br><span class="line"><span class="comment">// const a = 100;</span></span><br><span class="line"><span class="comment">//3. 常量的值不能修改</span></span><br><span class="line"><span class="comment">// SCHOOL = &#x27;ATGUIGU&#x27;;</span></span><br><span class="line"><span class="comment">//4. 块儿级作用域</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     const PLAYER = &#x27;UZI&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(PLAYER);</span></span><br><span class="line"><span class="comment">//5. 对于数组和对象的元素修改, 不算做对常量的修改, 不会报错</span></span><br><span class="line"><span class="keyword">const</span> TEAM = [<span class="string">&#x27;UZI&#x27;</span>,<span class="string">&#x27;MXLG&#x27;</span>,<span class="string">&#x27;Ming&#x27;</span>,<span class="string">&#x27;Letme&#x27;</span>];</span><br><span class="line"><span class="comment">// TEAM.push(&#x27;Meiko&#x27;);</span></span><br></pre></td></tr></table></figure>

<h1 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3 变量的解构赋值"></a>3 变量的解构赋值</h1><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;张学友&#x27;</span>, <span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="string">&#x27;郭富城&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [zhang, liu, li, guo] = arr;</span><br><span class="line"><span class="comment">//对象的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> lin = &#123;</span><br><span class="line"> name: <span class="string">&#x27;林志颖&#x27;</span>,</span><br><span class="line"> tags: [<span class="string">&#x27;车手&#x27;</span>, <span class="string">&#x27;歌手&#x27;</span>, <span class="string">&#x27;小旋风&#x27;</span>, <span class="string">&#x27;演员&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;name, tags&#125; = lin;</span><br><span class="line"><span class="comment">//复杂解构</span></span><br><span class="line"><span class="keyword">let</span> wangfei = &#123;</span><br><span class="line"> name: <span class="string">&#x27;王菲&#x27;</span>,</span><br><span class="line"> age: <span class="number">18</span>,</span><br><span class="line"> songs: [<span class="string">&#x27;红豆&#x27;</span>, <span class="string">&#x27;流年&#x27;</span>, <span class="string">&#x27;暧昧&#x27;</span>, <span class="string">&#x27;传奇&#x27;</span>],</span><br><span class="line"> history: [</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;窦唯&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;李亚鹏&#x27;</span>&#125;,</span><br><span class="line"> &#123;<span class="attr">name</span>: <span class="string">&#x27;谢霆锋&#x27;</span>&#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">songs</span>: [one, two, three], <span class="attr">history</span>: [first, second, third]&#125; = </span><br><span class="line">wangfei;</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</strong></font></p>
<h1 id="4-模板字符串"><a href="#4-模板字符串" class="headerlink" title="4 模板字符串"></a>4 模板字符串</h1><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p>
<p>1 字符串中可以出现换行符</p>
<p>2 可以使用 ${xxx} 形式输出变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;沈腾&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;玛丽&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;魏翔&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;li&gt;艾伦&lt;/li&gt;</span></span><br><span class="line"><span class="string"> &lt;/ul&gt;`</span>;</span><br><span class="line"><span class="comment">// 变量拼接</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;王宁&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;star&#125;</span>在前几年离开了开心麻花`</span>;</span><br></pre></td></tr></table></figure>

<h1 id="5-简化对象写法"><a href="#5-简化对象写法" class="headerlink" title="5 简化对象写法"></a>5 简化对象写法</h1><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> slogon = <span class="string">&#x27;永远追求行业更高标准&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> improve = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;可以提高你的技能&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//属性和方法简写</span></span><br><span class="line"><span class="keyword">let</span> atguigu = &#123;</span><br><span class="line"> name,</span><br><span class="line"> slogon,</span><br><span class="line"> improve,</span><br><span class="line"> <span class="function"><span class="title">change</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;可以改变你&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注意：对象简写形式简化了代码，所以以后用简写就对了</strong></font></p>
<h1 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6 箭头函数"></a>6 箭头函数</h1><p>ES6 允许使用「箭头」（=&gt;）定义函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 通用写法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> arg1 + arg2 + arg3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>箭头函数的注意点:</p>
<p>1 如果形参只有一个，则小括号可以省略</p>
<p>2 函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果</p>
<p>3 箭头函数 this 指向声明时所在作用域下 this 的值</p>
<p>4 箭头函数不能作为构造函数实例化</p>
<p>5 不能使用 arguments</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 2. 省略小括号的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> num * <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 3. 省略花括号的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn3 = <span class="function"><span class="params">score</span> =&gt;</span> score * <span class="number">20</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 4. this 指向声明时所在作用域中 this 的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> fn4 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line"> name: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> fn5 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> fn5();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注意：箭头函数不会更改</strong> <strong>this</strong> <strong>指向，用来指定回调函数会非常合适</strong></font></p>
<h1 id="7-rest参数"><a href="#7-rest参数" class="headerlink" title="7 rest参数"></a>7 rest参数</h1><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 作用与 arguments 类似</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* rest 参数必须是最后一个形参</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(a,b,args);</span><br><span class="line">&#125;</span><br><span class="line">minus(<span class="number">100</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注意：****rest</strong> <strong>参数非常适合不定个数参数函数的场景</strong></font></p>
<h1 id="8-spread扩展运算符"><a href="#8-spread扩展运算符" class="headerlink" title="8 spread扩展运算符"></a>8 spread扩展运算符</h1><p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开数组</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">let</span> tfboys = [<span class="string">&#x27;德玛西亚之力&#x27;</span>,<span class="string">&#x27;德玛西亚之翼&#x27;</span>,<span class="string">&#x27;德玛西亚皇子&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(...tfboys)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 展开对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> skillOne = &#123;</span><br><span class="line"> q: <span class="string">&#x27;致命打击&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillTwo = &#123;</span><br><span class="line"> w: <span class="string">&#x27;勇气&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillThree = &#123;</span><br><span class="line"> e: <span class="string">&#x27;审判&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> skillFour = &#123;</span><br><span class="line"> r: <span class="string">&#x27;德玛西亚正义&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> gailun = &#123;...skillOne, ...skillTwo,...skillThree,...skillFour&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="9-Symbol"><a href="#9-Symbol" class="headerlink" title="9 Symbol"></a>9 Symbol</h1><h2 id="9-1-Symbol基本使用"><a href="#9-1-Symbol基本使用" class="headerlink" title="9.1 Symbol基本使用"></a>9.1 Symbol基本使用</h2><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。</p>
<p>Symbol 特点</p>
<p>1 Symbol 的值是唯一的，用来解决命名冲突的问题</p>
<p>2 Symbol 值不能与其他数据进行运算</p>
<p>3 Symbol 定义的对象属性不能使用for…in循环遍历，但是可以使用Reflect.ownKeys 来获取对象的所有键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s1, <span class="keyword">typeof</span> s1);</span><br><span class="line"><span class="comment">//添加标识的 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2_2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s2 === s2_2);</span><br><span class="line"><span class="comment">//使用 Symbol for 定义</span></span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3_2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s3 === s3_2);</span><br></pre></td></tr></table></figure>

<p><font color=red><strong>注: 遇到唯一性的场景时要想到Symbol</strong></font></p>
<h2 id="9-2-Symbol内置值"><a href="#9-2-Symbol内置值" class="headerlink" title="9.2 Symbol内置值"></a>9.2 Symbol内置值</h2><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行。</p>
<p>1 Symbol.hasInstance </p>
<p>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</p>
<p>2 Symbol.isConcatSpreadable</p>
<p>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</p>
<p>3 Symbol.species </p>
<p>创建衍生对象时，会使用该属性</p>
<p>4 Symbol.match </p>
<p>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</p>
<p>5 Symbol.replace </p>
<p>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</p>
<p>6 Symbol.search </p>
<p>当该对象被 str.search (myObject)方法调用时，会返回该方法的返回值。</p>
<p>7 Symbol.split </p>
<p>当该对象被 str.split(myObject)方法调用时，会返回该方法的返回值。</p>
<p>8 Symbol.iterator </p>
<p>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</p>
<p>9 Symbol.toPrimitive </p>
<p>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p>
<p>10 Symbol. toStringTag </p>
<p>在该对象上面调用 toString 方法时，返回该方法的返回值</p>
<p>11 Symbol. unscopables </p>
<p>该对象指定了使用 with 关键字时，哪些属性会被 with环境排除。</p>
<h1 id="10-迭代器"><a href="#10-迭代器" class="headerlink" title="10 迭代器"></a>10 迭代器</h1><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。</p>
<p>1 ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</p>
<p>2 原生具备 iterator 接口的数据(可用 for of 遍历)</p>
<p>​    a) Array</p>
<p>​    b) Arguments</p>
<p>​    c) Set</p>
<p>​    d) Map</p>
<p>​    e) String</p>
<p>​    f) TypedArray</p>
<p>​    g) NodeList</p>
<p>3 工作原理</p>
<p>​    a) 创建一个指针对象，指向当前数据结构的起始位置</p>
<p>​    b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</p>
<p>​    c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</p>
<p>​    d) 每调用 next 方法返回一个包含 value 和 done 属性的对象</p>
<p><font color=red><strong>注: 需要自定义遍历数据的时候，要想到迭代器。</strong></font></p>
<h1 id="11-生成器"><a href="#11-生成器" class="headerlink" title="11 生成器"></a>11 生成器</h1><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾巴&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;真奇怪&#x27;</span>; &#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure>

<p>代码说明：</p>
<p>1 * 的位置没有限制</p>
<p>2 生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到yield 语句后的值</p>
<p>3 yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next方法，执行一段代码</p>
<p>4 next 方法可以传递实参，作为 yield 语句的返回值</p>
<h1 id="12-Promise"><a href="#12-Promise" class="headerlink" title="12 Promise"></a>12 Promise</h1><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</p>
<p>1 Promise 构造函数: Promise (excutor) {}</p>
<p>2 Promise.prototype.then 方法</p>
<p>3 Promise.prototype.catch 方法</p>
<h1 id="13-Set"><a href="#13-Set" class="headerlink" title="13 Set"></a>13 Set</h1><p>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p>
<p>1 size </p>
<p>返回集合的元素个数</p>
<p>2 add </p>
<p>增加一个新元素，返回当前集合</p>
<p>3 delete 删除元素，返回 boolean 值</p>
<p>4 has </p>
<p>检测集合中是否包含某个元素，返回 boolean 值</p>
<p>5 clear </p>
<p>清空集合，返回 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空集合</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">//创建一个非空集合</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="comment">//集合属性与方法</span></span><br><span class="line"><span class="comment">//返回集合的元素个数</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.size);</span><br><span class="line"><span class="comment">//添加新元素</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.add(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.delete(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//检测是否存在某个值</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.has(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//清空集合</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.clear());</span><br></pre></td></tr></table></figure>



<h1 id="14-Map"><a href="#14-Map" class="headerlink" title="14 Map"></a>14 Map</h1><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历。Map 的属性和方法：</p>
<p>1 size </p>
<p>返回 Map 的元素个数</p>
<p>2 set </p>
<p>增加一个新元素，返回当前 Map</p>
<p>3 get </p>
<p>返回键名对象的键值</p>
<p>4 has </p>
<p>检测 Map 中是否包含某个元素，返回 boolean 值</p>
<p>5 clear </p>
<p>清空集合，返回 undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空 map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">//创建一个非空 map</span></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line"> [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;尚硅谷&#x27;</span>],</span><br><span class="line"> [<span class="string">&#x27;slogon&#x27;</span>,<span class="string">&#x27;不断提高行业标准&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">//属性和方法</span></span><br><span class="line"><span class="comment">//获取映射元素的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.size);</span><br><span class="line"><span class="comment">//添加映射值</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.set(<span class="string">&#x27;age&#x27;</span>, <span class="number">6</span>));</span><br><span class="line"><span class="comment">//获取映射值</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.get(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line"><span class="comment">//检测是否有该映射</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.has(<span class="string">&#x27;age&#x27;</span>));</span><br><span class="line"><span class="comment">//清除</span></span><br><span class="line"><span class="built_in">console</span>.log(m2.clear());</span><br></pre></td></tr></table></figure>

<h1 id="15-class类"><a href="#15-class类" class="headerlink" title="15 class类"></a>15 class类</h1><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p>知识点：</p>
<p>1 class 声明类</p>
<p>2 constructor 定义构造函数初始化</p>
<p>3 extends 继承父类</p>
<p>4 super 调用父级构造方法</p>
<p>5 static 定义静态方法和属性</p>
<p>6 父类方法可以重写</p>
<p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"> <span class="comment">//构造方法</span></span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">brand, color, price</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.brand = brand;</span><br><span class="line"> <span class="built_in">this</span>.color = color;</span><br><span class="line"> <span class="built_in">this</span>.price = price;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//对象方法</span></span><br><span class="line"> <span class="function"><span class="title">call</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话!!!&#x27;</span>)</span><br><span class="line"> &#125; &#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">brand, color, price, screen, pixel</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>(brand, color, price);</span><br><span class="line"> <span class="built_in">this</span>.screen = screen;</span><br><span class="line"> <span class="built_in">this</span>.pixel = pixel;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//子类方法</span></span><br><span class="line"> <span class="function"><span class="title">photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以拍照!!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以玩游戏!!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//方法重写</span></span><br><span class="line"> <span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以进行视频通话!!&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//静态方法</span></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以运行程序&#x27;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;我可以建立连接&#x27;</span>)</span><br><span class="line"> &#125; &#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">const</span> Nokia = <span class="keyword">new</span> Phone(<span class="string">&#x27;诺基亚&#x27;</span>, <span class="string">&#x27;灰色&#x27;</span>, <span class="number">230</span>);</span><br><span class="line"><span class="keyword">const</span> iPhone6s = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;白色&#x27;</span>, <span class="number">6088</span>, </span><br><span class="line"><span class="string">&#x27;4.7inch&#x27;</span>,<span class="string">&#x27;500w&#x27;</span>);</span><br><span class="line"><span class="comment">//调用子类方法</span></span><br><span class="line">iPhone6s.playGame();</span><br><span class="line"><span class="comment">//调用重写方法</span></span><br><span class="line">iPhone6s.call();</span><br><span class="line"><span class="comment">//调用静态方法</span></span><br><span class="line">SmartPhone.run();</span><br></pre></td></tr></table></figure>

<h1 id="16-数值拓展"><a href="#16-数值拓展" class="headerlink" title="16 数值拓展"></a>16 数值拓展</h1><h2 id="16-1-二进制和八进制"><a href="#16-1-二进制和八进制" class="headerlink" title="16.1 二进制和八进制"></a>16.1 二进制和八进制</h2><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示。</p>
<h2 id="16-2-Number-isFinite-与-Number-isNaN"><a href="#16-2-Number-isFinite-与-Number-isNaN" class="headerlink" title="16.2 Number.isFinite() 与 Number.isNaN()"></a>16.2 Number.isFinite() 与 Number.isNaN()</h2><p>Number.isFinite() 用来检查一个数值是否为有限的</p>
<p>Number.isNaN() 用来检查一个值是否为 NaN</p>
<h2 id="16-3-Number-parseInt-与-Number-parseFloat"><a href="#16-3-Number-parseInt-与-Number-parseFloat" class="headerlink" title="16.3 Number.parseInt() 与 Number.parseFloat()"></a>16.3 Number.parseInt() 与 Number.parseFloat()</h2><p>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变。</p>
<h2 id="16-4-Math-trunc"><a href="#16-4-Math-trunc" class="headerlink" title="16.4 Math.trunc"></a>16.4 Math.trunc</h2><p>用于去除一个数的小数部分，返回整数部分。</p>
<h2 id="16-5-Number-isInteger"><a href="#16-5-Number-isInteger" class="headerlink" title="16.5 Number.isInteger"></a>16.5 Number.isInteger</h2><p>Number.isInteger() 用来判断一个数值是否为整数</p>
<h1 id="17-对象拓展"><a href="#17-对象拓展" class="headerlink" title="17 对象拓展"></a>17 对象拓展</h1><p>ES6 新增了一些 Object 对象的方法</p>
<p>1 Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）</p>
<p>2 Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象</p>
<p>3 __proto__、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型</p>
<h1 id="18-模块化"><a href="#18-模块化" class="headerlink" title="18 模块化"></a>18 模块化</h1><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p>
<h2 id="18-1-模块化的好处"><a href="#18-1-模块化的好处" class="headerlink" title="18.1 模块化的好处"></a>18.1 模块化的好处</h2><p>模块化的优势有以下几点：</p>
<p>1 防止命名冲突</p>
<p>2 代码复用</p>
<p>3 高维护性</p>
<h2 id="18-2-模块化规范产品"><a href="#18-2-模块化规范产品" class="headerlink" title="18.2 模块化规范产品"></a>18.2 模块化规范产品</h2><p>ES6 之前的模块化规范有：</p>
<p>1 CommonJS =&gt; NodeJS、Browserify</p>
<p>2 AMD =&gt; requireJS</p>
<p>3 CMD =&gt; seaJS</p>
<h2 id="18-3-ES6模块化语法"><a href="#18-3-ES6模块化语法" class="headerlink" title="18.3 ES6模块化语法"></a>18.3 ES6模块化语法</h2><p>模块功能主要由两个命令构成：export 和 import。 </p>
<ul>
<li><p>export 命令用于规定模块的对外接口</p>
</li>
<li><p>import 命令用于输入其他模块提供的功能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript笔记</title>
    <url>/undefined/e803913c/</url>
    <content><![CDATA[<blockquote>
<p>JavaScript学习笔记</p>
</blockquote>
<span id="more"></span>

<p>一些好的文档：</p>
<p><a href="https://wangdoc.com/javascript/">JavaScript 教程 - 网道 (wangdoc.com)</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript基础 - 学习 Web 开发 | MDN (mozilla.org)</a></p>
<p><a href="https://www.w3school.com.cn/js/index.asp">JavaScript 教程 (w3school.com.cn)</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">JavaScript教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<h1 id="1-ECMAScript"><a href="#1-ECMAScript" class="headerlink" title="1 ECMAScript"></a>1 ECMAScript</h1><p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言</p>
<h2 id="1-1-输出方式"><a href="#1-1-输出方式" class="headerlink" title="1.1 输出方式"></a>1.1 输出方式</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">输出方式</span><br><span class="line">   <span class="selector-tag">1</span>. 弹窗</span><br><span class="line">   <span class="selector-tag">alert</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">confirm</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">prompt</span>(需要输出的内容)</span><br><span class="line">   注意点：如果需要输出的内容不是数字，那么就必须通过单引号或者双引号括起来</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">2</span>. 网页内容区域来输出</span><br><span class="line">   <span class="selector-tag">document</span><span class="selector-class">.write</span>(需要输出的内容)</span><br><span class="line"></span><br><span class="line">   <span class="selector-tag">3</span>. 通过开发者工具控制台的形式来输出</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.log</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.warn</span>(需要输出的内容)</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.error</span>(需要输出的内容)</span><br></pre></td></tr></table></figure>

<h2 id="1-2-HTML中嵌入JS代码的方式"><a href="#1-2-HTML中嵌入JS代码的方式" class="headerlink" title="1.2 HTML中嵌入JS代码的方式"></a>1.2 HTML中嵌入JS代码的方式</h2><p>行间事件；</p>
<p>脚本块；</p>
<p>引入外部独立的JS文件</p>
<blockquote>
<p>引入外部独立的CSS文件，这个标签link中属性是href，JS则为src</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-标识符"><a href="#1-3-标识符" class="headerlink" title="1.3 标识符"></a>1.3 标识符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标识符命名规则：</span><br><span class="line">   标识符只能由数字、字母、下划线、美元符号组成，不能含有其它特殊符号</span><br><span class="line">   标识符不能以数字开始</span><br><span class="line">   标识符严格区分大小写</span><br><span class="line">   关键字不能做标识符</span><br><span class="line">   标识符理论上没有长度限制</span><br></pre></td></tr></table></figure>

<h2 id="1-4-变量"><a href="#1-4-变量" class="headerlink" title="1.4 变量"></a>1.4 变量</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">在javascript当中，如果一个变量声明的时候没有使用<span class="keyword">var</span>关键字的话，这个变量不管是在哪里声明的，都是全局变量。这种全局变量在声明的时候必须手动赋值，不能采用系统默认值。</span><br></pre></td></tr></table></figure>

<h2 id="1-5-数据类型"><a href="#1-5-数据类型" class="headerlink" title="1.5 数据类型"></a>1.5 数据类型</h2><p>es6数据类型：记忆方法</p>
<p>bouns</p>
<p>boolean bigint</p>
<p>object</p>
<p>undefined</p>
<p>null number</p>
<p>string symbol</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span>运算符的运算结果是以下<span class="number">6</span>个字符串之一：</span><br><span class="line">   <span class="string">&quot;undefined&quot;</span></span><br><span class="line">   <span class="string">&quot;number&quot;</span></span><br><span class="line">   <span class="string">&quot;string&quot;</span></span><br><span class="line">   <span class="string">&quot;boolean&quot;</span></span><br><span class="line">   <span class="string">&quot;object&quot;</span></span><br><span class="line">   <span class="string">&quot;function&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>属于<span class="literal">Null</span>类型,但是typeof运算符的运算结果是<span class="string">&quot;object&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-1-Undefined"><a href="#1-5-1-Undefined" class="headerlink" title="1.5.1 Undefined"></a>1.5.1 Undefined</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、只有一个值，它的值就是：<span class="literal">undefined</span></span><br><span class="line"><span class="number">2</span>、当一个变量声明之后没有手动赋值，系统默认赋值<span class="literal">undefined</span></span><br><span class="line"><span class="number">3</span>、Undefined类型属于原始类型。</span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-Null"><a href="#1-5-2-Null" class="headerlink" title="1.5.2 Null"></a>1.5.2 Null</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="literal">Null</span>类型也是属于原始类型。</span><br><span class="line"><span class="number">2</span>、<span class="literal">Null</span>类型只有<span class="number">1</span>个值：<span class="literal">null</span></span><br><span class="line"><span class="number">3</span>、注意: typeof <span class="literal">null</span> 运算结果是：<span class="string">&quot;object&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-3-Number"><a href="#1-5-3-Number" class="headerlink" title="1.5.3 Number"></a>1.5.3 Number</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Number</span>类型属于原始类型。</span><br><span class="line"><span class="number">2</span>、<span class="built_in">Number</span>类型都有哪些值？</span><br><span class="line">   <span class="number">-1</span> </span><br><span class="line">   <span class="number">0</span> </span><br><span class="line">   <span class="number">1</span> </span><br><span class="line">   <span class="number">3</span> </span><br><span class="line">   <span class="number">3.14</span> </span><br><span class="line">   <span class="literal">NaN</span></span><br><span class="line">   <span class="literal">Infinity</span></span><br><span class="line">   ....</span><br><span class="line"><span class="number">3</span>、<span class="literal">NaN</span>？</span><br><span class="line">   Not a <span class="built_in">Number</span>，表示不是一个数字。</span><br><span class="line">   但<span class="literal">NaN</span>一个值。</span><br><span class="line">   它属于<span class="built_in">Number</span>类型。</span><br><span class="line">   </span><br><span class="line"><span class="number">4</span>、什么情况下结果是一个<span class="literal">NaN</span>？</span><br><span class="line">   当一个数学表达式的运算结果本应该返回一个数字，</span><br><span class="line">   但是最终无法返回一个数字的时候，结果是<span class="literal">NaN</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、<span class="literal">Infinity</span>是无穷大，当除数是<span class="number">0</span>的时候，最终计算结果是无穷大。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、强调：</span><br><span class="line">   JavaScript当中的<span class="built_in">Number</span>类型代表了java中的：</span><br><span class="line">      byte short int long float double </span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、在<span class="built_in">Number</span>类型这一块，有一个函数叫做：<span class="built_in">isNaN</span>()函数，这个函数</span><br><span class="line">最终返回布尔类型，返回<span class="literal">true</span>表示不是一个数字，返回<span class="literal">false</span>表示是一个</span><br><span class="line">数字。</span><br><span class="line">   <span class="built_in">isNaN</span> : <span class="keyword">is</span> Not a <span class="built_in">Number</span></span><br><span class="line">   true: 表示不是一个数字</span><br><span class="line">   false:表示是一个数字</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">isNaN</span>(数据)：这个函数有一个特点，它会首先尝试将“数据”转换成</span><br><span class="line">   数字，如果转换失败了，则结果就是<span class="literal">true</span>。转换为数字成功了，那么</span><br><span class="line">   结果就是<span class="literal">false</span>。</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">isNaN</span>这个函数是干啥的？</span><br><span class="line">      就是用来判断“数据”是否是一个数字！！！！！</span><br><span class="line">      </span><br><span class="line"><span class="number">8</span>、在<span class="built_in">Number</span>类型这一块还有一个函数叫做：<span class="built_in">Number</span>()函数，这个函数的作用可以将不是</span><br><span class="line">数字类型的数据转换成数字类型的数据。</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、<span class="built_in">parseInt</span>()函数，将字符串数字转换成数字，并且取整。向下取整。</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、<span class="built_in">Math</span>.ceil()，这是一个<span class="built_in">Math</span>工具类中的一个函数，向上取整。</span><br></pre></td></tr></table></figure>

<h3 id="1-5-4-Boolean"><a href="#1-5-4-Boolean" class="headerlink" title="1.5.4 Boolean"></a>1.5.4 Boolean</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">Boolean</span>类型属于原始类型。</span><br><span class="line"><span class="number">2</span>、<span class="built_in">Boolean</span>类型只有两个值：<span class="literal">true</span>,<span class="literal">false</span>，没有其他值。</span><br><span class="line"><span class="number">3</span>、<span class="built_in">Boolean</span>类型中有一个函数：<span class="built_in">Boolean</span>()函数，这个函数的作用是？</span><br><span class="line">   将不是布尔类型的转换成布尔类型。</span><br><span class="line">   </span><br><span class="line">   转换规律是什么？</span><br><span class="line">      <span class="string">&quot;只要有东西&quot;</span>结果就是<span class="literal">true</span>。</span><br><span class="line">      有数据就是<span class="literal">true</span>，无数据就是<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-5-String"><a href="#1-5-5-String" class="headerlink" title="1.5.5 String"></a>1.5.5 String</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="built_in">String</span>类型属于原始类型（基本数据类型）</span><br><span class="line"><span class="number">2</span>、在JS中怎么定义字符串，包括两种方式：</span><br><span class="line">   <span class="keyword">var</span> s = <span class="string">&quot;字符串&quot;</span>;</span><br><span class="line">   <span class="keyword">var</span> s = <span class="string">&#x27;字符串&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"><span class="number">3</span>、在JS当中提供了创建字符串的两种方式：</span><br><span class="line">   如果采用这种方式创建的字符串就属于原始类型！</span><br><span class="line">      <span class="keyword">var</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">   如果采用这种方式创建的字符串就属于<span class="built_in">Object</span>类型，这里使用了<span class="built_in">Object</span>类的子类<span class="built_in">String</span>，<span class="built_in">String</span>类是JS内置的，可以直接使用：</span><br><span class="line">      <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="number">4</span>、在JS中不管是原始类型的字符串，还是<span class="built_in">Object</span>类型的字符串，他们的方法和属性都是通用的。</span><br><span class="line"><span class="number">5</span>、<span class="built_in">String</span>当中的常用属性和方法：</span><br><span class="line">   常用属性：</span><br><span class="line">      length属性，获取字符串长度</span><br><span class="line">   常用方法：</span><br><span class="line">      charAt 方法 获取指定下标位置的字符</span><br><span class="line">      concat 方法 连接字符串</span><br><span class="line">      indexOf 方法 获取某个字符串在当前字符串中第一次出现处的索引</span><br><span class="line">      lastIndexOf 方法 获取某个字符串在当前字符串中最后一次出现处的索引</span><br><span class="line">      replace 方法 替换</span><br><span class="line">      split 方法  拆分字符串</span><br><span class="line">      substr 方法  截取字符串</span><br><span class="line">      substring 方法  截取字符串</span><br><span class="line">      toLowerCase 方法 转小写</span><br><span class="line">      toUpperCase 方法 转大写</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">Infinity</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="keyword">new</span> <span class="built_in">Object</span>())); <span class="comment">// true		</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(i)</span></span> <span class="comment">// 这里的代码实际上是这样的:if(Boolean(i))</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-6-Object"><a href="#1-5-6-Object" class="headerlink" title="1.5.6 Object"></a>1.5.6 Object</h3><p>JS函数不能重载，只要出现同名函数,之前的函数就消失了</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在JS当中内置了一个类型Object，可以将Object类型看做是所有对象的超类/基类。</span><br><span class="line"><span class="number">2</span>、在JS当中默认定义的类型，没有特殊说明的话，默认继承Object。</span><br><span class="line"><span class="number">3</span>、Object类型中有哪些通用属性和方法呢？</span><br><span class="line">   属性：</span><br><span class="line">      prototype 属性 | <span class="function"><span class="keyword">constructor</span> 属性</span></span><br><span class="line"><span class="function">   方法：</span></span><br><span class="line"><span class="function">      <span class="title">toLocaleString</span> 方法 | <span class="title">toString</span> 方法 | <span class="title">valueOf</span> 方法</span></span><br><span class="line"><span class="function">      </span></span><br><span class="line"><span class="function">   重点掌握：</span></span><br><span class="line"><span class="function">      <span class="title">prototype</span>属性。（<span class="title">prototype</span>翻译为原型）这个属性可以</span></span><br><span class="line"><span class="function">      给对象动态扩展属性和方法。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="comment">// 演示prototype属性</span></span><br><span class="line"><span class="comment">// 后期给Object类型的对象扩展一个doSome()方法</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.doSome = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;测试prototype属性！~~~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 后期给Object类型的对象扩展一个username属性.</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.username = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用doSome方法</span></span><br><span class="line">obj.doSome()</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 访问对象的username属性</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.username)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 可以给String扩展一个方法吗？</span></span><br><span class="line"><span class="comment">// 给String类型的对象扩展一个mysubstr的方法.</span></span><br><span class="line"><span class="built_in">String</span>.prototype.mysubstr = <span class="function"><span class="keyword">function</span>(<span class="params">startIndex, length</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// this表示当前的字符串对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.substr(startIndex, length);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;abcdef&quot;</span>.mysubstr(<span class="number">2</span>,<span class="number">3</span>)) <span class="comment">//cde</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;kingsoft&quot;</span>.mysubstr(<span class="number">3</span>,<span class="number">3</span>))  <span class="comment">//gso</span></span><br></pre></td></tr></table></figure>

<p>定义类的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、在JS中怎么定义类？包括两种方式</span><br><span class="line">   第一种方式：</span><br><span class="line">      <span class="function"><span class="keyword">function</span> 类名(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   第二种方式：</span><br><span class="line">      类名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         <span class="built_in">this</span>.属性名 = 参数;</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">this</span>.方法名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">如果没有使用<span class="keyword">new</span><span class="type"></span>运算符调用,表示普通函数调用.不会在堆中<span class="keyword">new</span><span class="type"></span>对象，使用<span class="keyword">new</span><span class="type"></span>运算符去调用这个函数,显然是把它当做一个类来看待,这个会导致浏览器的堆当中开辟一个新对象!</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、==和===有什么区别？</span><br><span class="line">   == 等同运算符：只比较值是否相等。</span><br><span class="line">   === 全等运算符：既比较值是否相等，同时又比较数据类型是否相同。</span><br><span class="line"><span class="number">2</span>、<span class="literal">null</span> <span class="literal">undefined</span> <span class="literal">NaN</span>的区别？</span><br><span class="line">   类型都是不一样的</span><br><span class="line">   <span class="literal">null</span>和<span class="literal">undefined</span>是等同关系。</span><br></pre></td></tr></table></figure>

<h2 id="1-6-事件"><a href="#1-6-事件" class="headerlink" title="1.6 事件"></a>1.6 事件</h2><h3 id="1-6-1-JS中的常用事件"><a href="#1-6-1-JS中的常用事件" class="headerlink" title="1.6.1 JS中的常用事件"></a>1.6.1 JS中的常用事件</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">JS的常用事件：</span><br><span class="line">   （<span class="number">1</span>）blur             失去焦点</span><br><span class="line">   （<span class="number">5</span>）focus            获得焦点</span><br><span class="line">   </span><br><span class="line">   （<span class="number">3</span>）click            鼠标单击</span><br><span class="line">   （<span class="number">4</span>）dblclick          鼠标双击</span><br><span class="line">   </span><br><span class="line">   （<span class="number">6</span>）keydown          键盘按下</span><br><span class="line">   （<span class="number">7</span>）keyup            键盘弹起</span><br><span class="line">   </span><br><span class="line">   （<span class="number">9</span>）<span class="built_in">mousedown</span>         鼠标按下</span><br><span class="line">   （<span class="number">10</span>）mouseover        鼠标经过</span><br><span class="line">   （<span class="number">11</span>）<span class="built_in">mousemove</span>        鼠标移动</span><br><span class="line">   （<span class="number">12</span>）mouseout         鼠标离开</span><br><span class="line">   （<span class="number">13</span>）<span class="built_in">mouseup</span>          鼠标弹起</span><br><span class="line">   </span><br><span class="line">   （<span class="number">16</span>）submit          表单提交</span><br><span class="line">   （<span class="number">14</span>）reset           表单重置</span><br><span class="line">   </span><br><span class="line">   （<span class="number">15</span>）<span class="keyword">select</span>          文本被选定</span><br><span class="line">   （<span class="number">2</span>）change           下拉列表选中项改变，或文本框内容改变</span><br><span class="line">   （<span class="number">8</span>）load             页面加载完毕</span><br><span class="line">   </span><br><span class="line">提醒：任何一个事件都有对应的事件句柄。事件句柄是在事件名称前添加on就行。</span><br></pre></td></tr></table></figure>

<h3 id="1-6-2-注册事件"><a href="#1-6-2-注册事件" class="headerlink" title="1.6.2 注册事件"></a>1.6.2 注册事件</h3><h4 id="1-第一种方式"><a href="#1-第一种方式" class="headerlink" title="1 第一种方式"></a>1 第一种方式</h4><p>事件句柄</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">在标签中使用“事件句柄”，在事件句柄后面编写JS代码</span><br><span class="line">   当这个事件句柄对应的事件发生之后，“注册”在事件句柄当中的这个代码被监听器调用。</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">onclick</span> 鼠标单击的事件句柄，只有当鼠标单击事件click发生之后，注册在<span class="keyword">onclick</span>后面的代码会被执行。</span><br><span class="line">   </span><br><span class="line">   以下<span class="keyword">button</span>标签中的sayHello()函数，在页面打开的时候并不会执行，只是在页面打开的过程中完成事件的绑定，完成事件的注册，以后只有当该事件发生之后sayHello()函数才会执行，像这种函数又一种特殊的称谓：回调函数。英语单词叫做：callback function</span><br><span class="line">   </span><br><span class="line">   这个回调函数的特点是：</span><br><span class="line">      监听器负责调用，程序员不负责调用。</span><br><span class="line">      当事件发生之后，监听器会负责调用该函数。</span><br><span class="line">      像这种函数被称为回调函数。callback。</span><br></pre></td></tr></table></figure>

<h4 id="2-第二种方式"><a href="#2-第二种方式" class="headerlink" title="2 第二种方式"></a>2 第二种方式</h4><p>DOM</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">通过<span class="built_in">document</span>.getElementById()绑定赋给一个变量，然后给这个变量注册事件，绑定回调函数</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hellobtn&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">/* 定义一个函数 */</span></span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;sum function invoke!&quot;</span>)</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">/* 根据id获取button对象 */</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> hellobtnElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;hellobtn&quot;</span>);</span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">// 元素中有什么属性,就能&quot;点&quot;什么.</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">/* 这行代码在页面打开的时候会执行，这行代码执行的意义是：将sum这个回调函数绑定到hellobtn的click事件上 */</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">/* 这个回调函数sum在什么时候执行？click事件发生之后才会被监听器调用！ */</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">//hellobtnElt.onclick = sum  //不要这样写: hellobtnElt.onclick = sum()</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">// 回调函数可以是一个匿名函数</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 这行代码的执行只是完成事件click的注册,给click事件注册一个回调函数.</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 这行代码执行的时候，回调函数并不会被执行。</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 只有当这个按钮发生click事件之后,这个回调函数会自动被监听器来调用.</span></span></span><br><span class="line"><span class="javascript">   hellobtnElt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;我是一个回调函数，同时我没有名字，叫做匿名函数！&quot;</span>)</span></span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">   <span class="comment">// hellobtnElt.onclick = myfun</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">// 当用此种方法绑定已经定义好的函数时，若函数无参，则不写括号</span></span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-7-代码的执行顺序"><a href="#1-7-代码的执行顺序" class="headerlink" title="1.7 代码的执行顺序"></a>1.7 代码的执行顺序</h2><p>自上而下执行</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">load</span>事件：</span><br><span class="line">   <span class="number">1</span>、<span class="keyword">load</span>事件不是在页面加载过程中触发的。</span><br><span class="line">   <span class="number">2</span>、<span class="keyword">load</span>事件是在页面中所有的元素全部加载完毕之后才发生的。</span><br></pre></td></tr></table></figure>

<h2 id="1-8-void运算符"><a href="#1-8-void运算符" class="headerlink" title="1.8 void运算符"></a>1.8 void运算符</h2><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">   <span class="keyword">void</span>(表达式)</span><br><span class="line">   执行表达式，但不返回任何结果。</span><br><span class="line">   即使表达式有执行结果，最终经过<span class="keyword">void</span>运算之后就什么都没了。</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果href中不写路径，则默认为当前界面，并刷新--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;执行JS代码了!&#x27;)&quot;</span>&gt;</span>要求：保留住超链接的样式，并且点击我执行一段JS代码，执行完JS代码之后保证页面不跳转！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-9-控制语句"><a href="#1-9-控制语句" class="headerlink" title="1.9 控制语句"></a>1.9 控制语句</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、JS中的控制语句，和java相同，JS中除了java的控制语句之外，还有一些特别的：</span><br><span class="line">   选择结构：</span><br><span class="line">      <span class="keyword">if</span>语句</span><br><span class="line">      switch语句</span><br><span class="line">   循环结构：</span><br><span class="line">      <span class="keyword">for</span></span><br><span class="line">      <span class="keyword">while</span></span><br><span class="line">      <span class="keyword">do</span>..<span class="keyword">while</span></span><br><span class="line">   转向语句：</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"><span class="number">2</span>、JS有哪些特殊的语句呢？</span><br><span class="line">   了解一下，不需要掌握：</span><br><span class="line">      <span class="keyword">for</span>..<span class="keyword">in</span> 语句</span><br><span class="line">      with    语句</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Employee(<span class="number">7369</span>, <span class="string">&quot;SMITH&quot;</span>);</span><br><span class="line"><span class="comment">// console.log(x.empno + &quot;,&quot; + x.ename)</span></span><br><span class="line"><span class="comment">// with语句.</span></span><br><span class="line"><span class="function"><span class="title">with</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">    <span class="built_in">console</span>.log(empno + <span class="string">&quot;,&quot;</span> + ename)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-10-数组"><a href="#1-10-数组" class="headerlink" title="1.10 数组"></a>1.10 数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在JS的数组中数据的类型随意,可以不一致.</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">true</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">5</span>,<span class="literal">false</span>,<span class="number">76</span>,<span class="number">3.14</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for..in语句</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> fdsafdsafds <span class="keyword">in</span> arr)&#123; <span class="comment">//arr是数组的话,fdsafdsafds就是数组的下标.</span></span><br><span class="line">    <span class="comment">//console.log(fdsafdsafds)</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr[fdsafdsafds])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for..in语句还可以取对象的属性值.</span></span><br><span class="line">Employee = <span class="function"><span class="keyword">function</span>(<span class="params">empno,ename</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.empno = empno;</span><br><span class="line">    <span class="built_in">this</span>.ename = ename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> Employee(<span class="number">7369</span>, <span class="string">&quot;SMITH&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(e.empno + <span class="string">&quot;,&quot;</span> + e.ename)</span><br><span class="line"><span class="built_in">console</span>.log(e[<span class="string">&quot;empno&quot;</span>] + <span class="string">&quot;,&quot;</span> + e[<span class="string">&quot;ename&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// for..in语句遍历对象的属性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> fdsafdsa <span class="keyword">in</span> e)&#123; <span class="comment">// e是JS对象的话,fdsafdsa就是对象的属性名.并且属性名是字符串.</span></span><br><span class="line">    <span class="comment">//console.log(fdsafdsa)</span></span><br><span class="line">    <span class="comment">//console.log(typeof fdsafdsa) //string</span></span><br><span class="line">    <span class="built_in">console</span>.log(e[fdsafdsa])</span><br><span class="line">                </span><br><span class="line">    <span class="comment">// 这种方式就不行了.</span></span><br><span class="line">    <span class="comment">//console.log(e.fdsafdsa)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>含有内置对象Array</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建数组的第一种方式</span></span><br><span class="line"><span class="keyword">var</span> a = []; <span class="comment">//创建一个长度为0的数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JS中数组中的元素类型可以不一致.</span></span><br><span class="line"><span class="keyword">var</span> a2 = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="literal">false</span>,<span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// JS中数组的长度是可变的.</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">console</span>.log(a2[a2.length - <span class="number">1</span>]) <span class="comment">// 数组有length属性获取数组中元素的个数.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有扩容之前:[12,3,4,5,6,false,true]</span></span><br><span class="line"><span class="comment">// a2[100]会导致自动扩容:[12,3,4,5,6,false,true,undefined,undefined,undefined....., 1234]</span></span><br><span class="line"><span class="comment">// JS中数组没有下标越界这一说!</span></span><br><span class="line">a2[<span class="number">100</span>] = <span class="number">1234</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组的长度=&quot;</span> + a2.length) <span class="comment">//数组的长度=101 (下标0到100，正好101个元素)</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[<span class="number">100</span>]) <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[<span class="number">99</span>]) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a2[-<span class="number">100</span>]) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.length) <span class="comment">//101 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数组的第二种方式</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建长度为0的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.length) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">// 创建长度为3的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.length) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr2.length; i++)&#123;</span><br><span class="line">   <span class="comment">// 3个undefined</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;----&gt;&quot;</span> + arr2[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">67</span>, <span class="number">7</span>); <span class="comment">// 创建有指定值的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;$$$$$$=====&gt;&quot;</span> + arr3[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr3[<span class="number">3</span>] = <span class="number">45</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr3.length; i++)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&quot;******=====&gt;&quot;</span> + arr3[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Array常用方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为0的数组对象</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组的元素个数是：&quot;</span> + a.length)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">a.push(<span class="number">100</span>);</span><br><span class="line">a.push(<span class="number">200</span>);</span><br><span class="line">a.push(<span class="number">300</span>);</span><br><span class="line">a.push(<span class="number">10</span>);</span><br><span class="line">a.push(<span class="number">20</span>);</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;数组的元素个数是：&quot;</span> + a.length)</span><br><span class="line">            </span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// push方法:向数组中添加一个元素,并且加到末尾.</span></span><br><span class="line">a.push(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.length) <span class="comment">//4</span></span><br><span class="line"><span class="comment">// pop方法:将数组末尾的元素弹出,并且数组长度-1</span></span><br><span class="line"><span class="built_in">console</span>.log(a.pop()) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a.length) <span class="comment">//3</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 注意:数组的push和pop方法联合起来,实际上是模拟了栈数据结构!</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr.push(<span class="number">1</span>)</span><br><span class="line">arr.push(<span class="number">2</span>)</span><br><span class="line">arr.push(<span class="number">3</span>)</span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop())</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 翻转数组</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">65</span>,<span class="number">6</span>,<span class="number">67</span>];</span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line">array.reverse();</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> array)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;%%%%====&gt;&quot;</span> + array[i])</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 连接(将数组中的每一个元素以“$”连接成一个字符串)</span></span><br><span class="line"><span class="comment">//var str = array.join(&quot;$&quot;)</span></span><br><span class="line"><span class="keyword">var</span> str = array.join(<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">//&quot;67-6-65-5-1&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-11-内置对象Date"><a href="#1-11-内置对象Date" class="headerlink" title="1.11 内置对象Date"></a>1.11 内置对象Date</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 获取系统当前时间的.</span></span><br><span class="line"><span class="comment">//console.log(time.getYear()) //121 (getYear()方法过时了，不建议用了，获取的年是两位的。1985最终获取之后是85)</span></span><br><span class="line">            </span><br><span class="line"><span class="built_in">console</span>.log(time) <span class="comment">//Date Thu Mar 26 2021 17:55:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 进行格式转换</span></span><br><span class="line"><span class="comment">// 可以将年月日的信息都拿出来.然后自己拼接格式.</span></span><br><span class="line"><span class="keyword">var</span> year = time.getFullYear();</span><br><span class="line"><span class="keyword">var</span> month = time.getMonth(); <span class="comment">// 0-11 表示 1-12</span></span><br><span class="line"><span class="comment">//var day = time.getDay(); // 获取的是星期几</span></span><br><span class="line"><span class="keyword">var</span> day = time.getDate(); <span class="comment">// 获取一个月份中的第几天</span></span><br><span class="line"><span class="built_in">console</span>.log(year + <span class="string">&quot;年&quot;</span> + (month + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 获取时分秒毫秒</span></span><br><span class="line"><span class="comment">/* time.getHours()</span></span><br><span class="line"><span class="comment">time.getMinutes()</span></span><br><span class="line"><span class="comment">time.getSeconds()</span></span><br><span class="line"><span class="comment">time.getMilliseconds() */</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//在JS中提供了一个函数toLocaleString(),其实这个函数是Object中的.</span></span><br><span class="line"><span class="comment">// 转换成具有本地语言环境的日期格式</span></span><br><span class="line"><span class="keyword">var</span> strTime = time.toLocaleString();</span><br><span class="line"><span class="built_in">console</span>.log(strTime) <span class="comment">//2021/3/26 下午5:59:55</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">// 怎么获取自&quot;1970年1月1日 00:00:00 000&quot;到系统当前时间的总毫秒数.</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> timeMillis = now.getTime(); <span class="comment">//这个getTime()方法是一个重点方法.</span></span><br><span class="line"><span class="built_in">console</span>.log(timeMillis)</span><br></pre></td></tr></table></figure>

<h1 id="2-BOM"><a href="#2-BOM" class="headerlink" title="2 BOM"></a>2 BOM</h1><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>对象是BOM的顶级对象，操作窗口</span><br></pre></td></tr></table></figure>

<h2 id="2-1-window-onload"><a href="#2-1-window-onload" class="headerlink" title="2.1 window.onload"></a>2.1 window.onload</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-eval函数"><a href="#2-2-eval函数" class="headerlink" title="2.2 eval函数"></a>2.2 eval函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eval函数可以将一个字符串当做一段JS代码解释执行!</span></span><br><span class="line"><span class="built_in">window</span>.eval(<span class="string">&quot;var i = 100&quot;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment">//var i = 100</span></span><br><span class="line"><span class="built_in">console</span>.log(i)</span><br><span class="line"><span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-窗口的开启和关闭"><a href="#2-3-窗口的开启和关闭" class="headerlink" title="2.3 窗口的开启和关闭"></a>2.3 窗口的开启和关闭</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- window.open开启一个新窗口 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- window.open(url, target) ，和超链接效果差不多，都是可以发送请求给服务器的--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，默认是开启一个新窗口。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在当前窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_self&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在新窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_blank&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在父窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_parent&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启一个窗口，在顶级窗口中显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;开启百度&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;http://www.baidu.com&#x27;, &#x27;_top&#x27;)&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.open(&#x27;002.html&#x27;)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">002窗口</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭窗口&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.close()&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--点击按钮后回退到上一个窗口--&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器的网页访问（栈）</p>
<h2 id="2-4-alert和confirm方法"><a href="#2-4-alert和confirm方法" class="headerlink" title="2.4 alert和confirm方法"></a>2.4 alert和confirm方法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 弹出消息框</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.alert(<span class="string">&quot;hello world!&quot;</span>);</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 删除数据之前一定要提示用户是否真的删除,用户点击了确定才表示真的删除.</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 确认框</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//var ok = window.confirm(&quot;亲，确认删除数据吗？&quot;)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//console.log(ok) //返回值是一个布尔类型.</span></span></span><br><span class="line">      </span><br><span class="line">      /* if(ok)&#123;</span><br><span class="line"><span class="javascript">         alert(<span class="string">&quot;数据正在删除中，请稍后...&quot;</span>)</span></span><br><span class="line">      &#125; */</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&quot;亲，确认删除数据吗？&quot;</span>))&#123;</span></span><br><span class="line"><span class="javascript">         alert(<span class="string">&quot;数据正在删除中，请稍后...&quot;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 确认or取消</span></span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sayHello()&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;del()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5-将当前窗口设置为顶级窗口"><a href="#2-5-将当前窗口设置为顶级窗口" class="headerlink" title="2.5 将当前窗口设置为顶级窗口"></a>2.5 将当前窗口设置为顶级窗口</h2><p>先开始005.html出现在此页面的iframe标签中，点击按钮则打开005.html，变为顶级窗口</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>将当前窗口设置为顶级窗口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;005.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>005.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        005页面</span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">			<span class="comment">/* 如果当前这个窗口不是顶级窗口的话，将当前窗口设置为顶级窗口。 */</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span> <span class="title">setTop</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">// window是当前浏览器窗口,代表005.html</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// “当前窗口的顶级窗口&quot;如果&quot;不是自己&quot;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.top就是当前窗口对应的顶级窗口.</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.self表示当前自己这个窗口</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.top 是004窗口</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// window.self 是005窗口</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//console.log((window.top != window.self))</span></span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">				<span class="keyword">if</span>(<span class="built_in">window</span>.top != <span class="built_in">window</span>.self)&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// 将当前窗口设置为顶级窗口</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// window.self.location 是005的地址</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// 将顶级窗口的window.top.location地址设置为005</span></span></span><br><span class="line"><span class="javascript">					<span class="built_in">window</span>.top.location = <span class="built_in">window</span>.self.location;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;setTop()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;如果当前窗口不是顶级窗口的话,将当前窗口设置为顶级窗口&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-6-历史记录"><a href="#2-6-历史记录" class="headerlink" title="2.6 历史记录"></a>2.6 历史记录</h2><p>006.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>历史记录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;007.html&quot;</span>&gt;</span>007页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;前进&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.go(1)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>007.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        007页面007页面007页面007页面007页面007页面007页面007页面007页面007页面007页面</span><br><span class="line">        <span class="comment">&lt;!-- back()是后退一步！ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.back()&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- go(-1)也是后退一步 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后退&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.history.go(-1)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-7-window-location-href"><a href="#2-7-window-location-href" class="headerlink" title="2.7 window.location.href"></a>2.7 window.location.href</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">跳转页面可以通过多种方式：（这些都是发送请求！！！！）</span><br><span class="line"></span><br><span class="line">   第一种方式：直接在浏览器地址栏上写URL。（重点）</span><br><span class="line">   第二种方式：可以点击超链接（重点）</span><br><span class="line">   第三种方式：提交表单（重点）</span><br><span class="line">   第四种方式：<span class="keyword">window</span>.<span class="keyword">open</span>(url,target)  （了解）</span><br><span class="line">   第五种方式：js代码（重点）</span><br><span class="line">            <span class="keyword">window</span>.<span class="keyword">location</span>.href</span><br><span class="line">            <span class="keyword">window</span>.<span class="keyword">location</span></span><br><span class="line">            document.<span class="keyword">location</span>.href</span><br><span class="line">            document.<span class="keyword">location</span></span><br><span class="line">            </span><br><span class="line">   通过浏览器向服务器发送请求，通常是以上的五种方式。</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">goBaidu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//window.location.href = &quot;http://www.baidu.com&quot;;</span></span><br><span class="line">      <span class="comment">//window.location = &quot;http://www.jd.com&quot;;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//document.location.href = &quot;http://www.126.com&quot;;</span></span><br><span class="line">      <span class="built_in">document</span>.location = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;百度&quot;</span> onclick=<span class="string">&quot;goBaidu();&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h1 id="3-DOM"><a href="#3-DOM" class="headerlink" title="3 DOM"></a>3 DOM</h1><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>对象是DOM的顶级对象，严格意义上来说,<span class="built_in">window</span>是包含<span class="built_in">document</span>的.</span><br></pre></td></tr></table></figure>

<h2 id="3-1-BOM和DOM的关系"><a href="#3-1-BOM和DOM的关系" class="headerlink" title="3.1 BOM和DOM的关系"></a>3.1 BOM和DOM的关系</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.document)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>)</span><br><span class="line">                </span><br><span class="line">    <span class="comment">// window对象是BOM的顶级老大</span></span><br><span class="line">    <span class="comment">// document对象是DOM的顶级老大</span></span><br><span class="line">    <span class="comment">// 实际上完整的写法是: window.document, 只不过window. 可以省略.</span></span><br><span class="line">    <span class="comment">// var divObj = window.document.getElementById(&quot;div1&quot;)</span></span><br><span class="line">    <span class="keyword">var</span> divObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;========&gt;&quot;</span> + divObj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-捕捉回车键"><a href="#3-2-捕捉回车键" class="headerlink" title="3.2 捕捉回车键"></a>3.2 捕捉回车键</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById()</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>).onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// y代表的就是一个keydown事件对象.</span></span><br><span class="line">    <span class="comment">// console.log(&quot;keydown.....&quot;)</span></span><br><span class="line">    <span class="comment">// 在这里捕捉键值,当用户敲回车键了,则登录</span></span><br><span class="line">    <span class="comment">// 新知识点:所有的“键盘事件对象”,有keyCode属性,这个keyCode属性可以获取键值.</span></span><br><span class="line">    <span class="comment">// keyCode是键盘事件对象的属性.</span></span><br><span class="line">    <span class="comment">// 记住:键盘上回车键的键值永远都是13.ECS键的键值永远都是27.</span></span><br><span class="line">    <span class="keyword">if</span>(y.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;登录，正在进行身份认证，请稍后...&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y.keyCode == <span class="number">27</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;系统安全退出了！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-操作div和span"><a href="#3-3-操作div和span" class="headerlink" title="3.3 操作div和span"></a>3.3 操作div和span</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 设置div中的内容</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> divElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 通过元素的innerHTML属性来设置内部的内容</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// innerHTML 是属性,不是一个方法.</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// innerHTML属性会将后面的字符串当做一段HTML代码解释并执行!</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         divElt.innerHTML = &quot;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>用户名不能为空！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>&quot;;</span></span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// innerText也可以设置元素当中的内容.和innerHTML有什么区别呢？</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// innerText后面的字符串即使是一个HTML代码,也不会当做HTML执行,只是看做普通文本.</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         //divElt.innerText = &quot;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&gt;</span>用户名不能为空！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>&quot;;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> spanbtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;spanbtn&quot;</span>);</span></span><br><span class="line"><span class="javascript">      spanbtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> span1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;span1&quot;</span>);</span></span><br><span class="line"><span class="javascript">         <span class="comment">//span1.innerHTML = &quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">         span1.innerText = &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://www.baidu.com&#x27;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置div中的内容&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;spanbtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;设置span中的内容&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- div独占一行！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- span的大小会随着span中的内容多少变化而变化。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-复选框的全选和取消全选"><a href="#3-4-复选框的全选和取消全选" class="headerlink" title="3.4 复选框的全选和取消全选"></a>3.4 复选框的全选和取消全选</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="comment">// 页面加载完毕之后</span></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">      /* // 给id = &quot;firstChk&quot;元素绑定click</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> firstChkElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;firstChk&quot;</span>);</span></span><br><span class="line"><span class="javascript">      firstChkElt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取到所有的复选框对象</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(firstChkElt.checked)&#123; <span class="comment">//get复选框的选中状态</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> aihaoChk = aihaos[i];</span></span><br><span class="line"><span class="javascript">               aihaoChk.checked = <span class="literal">true</span>; <span class="comment">//set复选框的选中状态</span></span></span><br><span class="line">            &#125;  </span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> aihaoChk = aihaos[i];</span></span><br><span class="line"><span class="javascript">               aihaoChk.checked = <span class="literal">false</span>;<span class="comment">//set复选框的选中状态</span></span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; */</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 改良代码</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> firstChkElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;firstChk&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span></span><br><span class="line"><span class="javascript">      firstChkElt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line">            aihaos[i].checked = firstChkElt.checked;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 给每一个name=&quot;aihao&quot;复选框绑定鼠标单击事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">         aihaos[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 在这里控制第一个复选框的选中状态</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第一个复选框选中还是不选中取决于什么？</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 所有的aihao复选框的总数量,如果和总选中的数量相同的时候,第一个复选框选中,反之取消选中.</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> count = aihaos.length; <span class="comment">//总数量</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> checkedCount = <span class="number">0</span>; <span class="comment">//默认选中的数量是0</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aihaos.length; i++)&#123;</span></span><br><span class="line">               if(aihaos[i].checked)&#123;</span><br><span class="line">                  checkedCount++;</span><br><span class="line">               &#125;</span><br><span class="line"><span class="javascript">            &#125; <span class="comment">// 循环结束之后,所有的被选中的复选框数量就统计完了.</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 第一个复选框是选中呢,还是取消选中呢？</span></span></span><br><span class="line">            firstChkElt.checked = (count == checkedCount);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firstChk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>/&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>/&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aihao&quot;</span> <span class="attr">value</span>=<span class="string">&quot;firehair&quot;</span>/&gt;</span>烫头</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-获取一个文本框的value"><a href="#3-5-获取一个文本框的value" class="headerlink" title="3.5 获取一个文本框的value"></a>3.5 获取一个文本框的value</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 获取文本框对象</span></span><br><span class="line">         <span class="keyword">var</span> usernameElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">         <span class="comment">// 获取value</span></span><br><span class="line">         <span class="keyword">var</span> username = usernameElt.value; <span class="comment">// 文本框的value属性用来获取用户填写的信息.</span></span><br><span class="line">         alert(username)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;获取用户名&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-获取下拉列表选中项的value"><a href="#3-6-获取下拉列表选中项的value" class="headerlink" title="3.6 获取下拉列表选中项的value"></a>3.6 获取下拉列表选中项的value</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">数据库表存储省份和市区的数据</span><br><span class="line">t_province</span><br><span class="line">code(pk)     name</span><br><span class="line">----------------------</span><br><span class="line">001          山东省</span><br><span class="line">002          山西省</span><br><span class="line"></span><br><span class="line">t_city</span><br><span class="line">code(pk)       name             pcode(fk)</span><br><span class="line">------------------------------------------</span><br><span class="line">1               济南             001</span><br><span class="line">2               烟台             001</span><br><span class="line"></span><br><span class="line">只要前端浏览器能够获取到山东省的code，假设code=001</span><br><span class="line">那么后台java程序执行sql语句的时候这样执行：</span><br><span class="line"><span class="code">   select * from t_city where pcode = ?;</span></span><br><span class="line"><span class="code">   ps.setString(1, &quot;001&quot;);</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这里的<span class="built_in">this</span>代表当前的下拉列表对象。--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;province&quot;</span> onchange=<span class="string">&quot;alert(this.value)&quot;</span>&gt; </span><br><span class="line">   &lt;option value =<span class="string">&quot;&quot;</span>&gt;--请选择省份--&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;001&quot;</span>&gt;河北省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;002&quot;</span>&gt;河南省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;003&quot;</span>&gt;山东省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;004&quot;</span>&gt;山西省&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;province2&quot;</span>).onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">//这里的this代表的就是当前发生change事件的这个节点对象.</span></span><br><span class="line">         <span class="comment">//console.log(this.value)</span></span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">&quot;province2&quot;</span>).value)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;province2&quot;</span> &gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;&quot;</span>&gt;--请选择省份--&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;001&quot;</span>&gt;河北省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;002&quot;</span>&gt;河南省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;003&quot;</span>&gt;山东省&lt;/option&gt;</span><br><span class="line">   &lt;option value =<span class="string">&quot;004&quot;</span>&gt;山西省&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-7-显示网页时钟"><a href="#3-7-显示网页时钟" class="headerlink" title="3.7 显示网页时钟"></a>3.7 显示网页时钟</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /* window.onload = function()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;displayTimeBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取系统当前时间,把时间显示到div中</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 显示到div当中</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;timediv&quot;</span>).innerHTML = nowTime.toLocaleString();</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125; */</span><br><span class="line">   </span><br><span class="line">   /* function display()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;显示时间&quot;</span>)</span></span><br><span class="line">   &#125; */</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="comment">// 设置每个1S执行一次display()函数</span></span></span><br><span class="line"><span class="javascript">   <span class="comment">//window.setInterval(&quot;display()&quot;, 1000)</span></span></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;displayTimeBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 每隔1S调用一次displayTime()函数(设置周期性调用。)</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// 返回值是一个可以取消周期性调用的value.</span></span></span><br><span class="line"><span class="javascript">         v = <span class="built_in">window</span>.setInterval(<span class="string">&quot;displayTime()&quot;</span>, <span class="number">1000</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;stopTimeBtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 停止周期性的调用.</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">window</span>.clearInterval(v)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="javascript">   <span class="function"><span class="keyword">function</span> <span class="title">displayTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;timediv&quot;</span>).innerHTML = nowTime.toLocaleString();</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示系统当前时间&quot;</span> <span class="attr">id</span>=<span class="string">&quot;displayTimeBtn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;时间停止&quot;</span> <span class="attr">id</span>=<span class="string">&quot;stopTimeBtn&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;timediv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-8-拼接html的方式，设置table的tbody"><a href="#3-8-拼接html的方式，设置table的tbody" class="headerlink" title="3.8 拼接html的方式，设置table的tbody"></a>3.8 拼接html的方式，设置table的tbody</h2><p>（非常具有代表性的案例，必须敲5遍。）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">/* 从java过来一个json格式的字符串 */</span></span><br><span class="line">   <span class="keyword">var</span> fromJava = <span class="string">&quot;&#123;\&quot;total\&quot; : 2, \&quot;students\&quot; : [&#123;\&quot;name\&quot;:\&quot;李四\&quot;,\&quot;age\&quot;:19&#125;,&#123;\&quot;name\&quot;:\&quot;王五\&quot;,\&quot;age\&quot;:18&#125;]&#125;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;displaybtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 解析上面的json格式的字符串,将解析出来的数据放到tbody当中.</span></span><br><span class="line">         <span class="comment">// 转化json对象</span></span><br><span class="line">         <span class="built_in">window</span>.eval(<span class="string">&quot;var json = &quot;</span> + fromJava) <span class="comment">//json对象有了.</span></span><br><span class="line">         <span class="comment">// 设置总记录条数</span></span><br><span class="line">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;totalSpan&quot;</span>).innerHTML = json.total;</span><br><span class="line">         <span class="comment">// 拼接HTML</span></span><br><span class="line">         <span class="keyword">var</span> studentArray = json.students;</span><br><span class="line">         <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; studentArray.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> s = studentArray[i]</span><br><span class="line">            html += <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+s.name+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+s.age+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 将以上拼接的HTML设置到tbody当中</span></span><br><span class="line">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;stutbody&quot;</span>).innerHTML = html;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;查看学生信息列表&quot;</span> id=<span class="string">&quot;displaybtn&quot;</span> /&gt;</span><br><span class="line">&lt;hr &gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">&quot;1px&quot;</span> width=<span class="string">&quot;40%&quot;</span>&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">      &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;学生姓名&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;学生年龄&lt;/th&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tbody id=<span class="string">&quot;stutbody&quot;</span>&gt;</span><br><span class="line">      &lt;!-- &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;张三&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">20</span>&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">2</span> Vue-CLI开发Vue项目&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;李四&lt;/td&gt;</span><br><span class="line">         &lt;td&gt;<span class="number">22</span>&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt; --&gt;</span><br><span class="line">   &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">总记录条数：&lt;span id=<span class="string">&quot;totalSpan&quot;</span>&gt;<span class="number">0</span>&lt;/span&gt;条</span><br><span class="line">&lt;!-- 总记录条数：<span class="number">2</span>条 --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-9-表单验证"><a href="#3-9-表单验证" class="headerlink" title="3.9 表单验证"></a>3.9 表单验证</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">   /* </span><br><span class="line">   （1）用户名不能为空</span><br><span class="line">   （2）用户名必须在6-14位之间</span><br><span class="line">   （3）用户名只能有数字和字母组成，不能含有其它符号（正则表达式）</span><br><span class="line">   （4）密码和确认密码一致</span><br><span class="line">   （5）统一失去焦点验证</span><br><span class="line">   （6）错误提示信息统一在span标签中提示，并且要求字体12号，红色。</span><br><span class="line">   （7）文本框再次获得焦点后，清空错误提示信息</span><br><span class="line">   （8）最终表单中所有项均合法方可提交</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> nameErrorSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;nameError&quot;</span>);</span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 给id=&quot;username&quot;的节点绑定blur事件</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> usernameElt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span></span><br><span class="line"><span class="javascript">      usernameElt.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 获取用户名</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> username = usernameElt.value;</span></span><br><span class="line"><span class="javascript">         <span class="comment">// 去除掉前后空白</span></span></span><br><span class="line">         username = username.trim();</span><br><span class="line"><span class="javascript">         <span class="comment">// 用户名不能为空,不能为空串</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">//if(username.length == 0)&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">            nameErrorSpan.innerHTML = <span class="string">&quot;用户名不能为空&quot;</span>;</span></span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 用户名不是空,继续判断长度是否合法</span></span></span><br><span class="line">            if(username.length &lt; 6 || username.length &gt; 14)&#123;</span><br><span class="line"><span class="javascript">               nameErrorSpan.innerHTML = <span class="string">&quot;用户名长度必须在[6-14]之间&quot;</span>;  </span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 用户名不为空,并且长度也合法,接下来继续判断用户名中是否有特殊符号</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> regExp = <span class="regexp">/^[a-zA-Z0-9]+$/</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> ok = regExp.test(username)</span></span><br><span class="line">               if(ok)&#123;</span><br><span class="line"><span class="javascript">                  <span class="comment">// 合法</span></span></span><br><span class="line"><span class="javascript">                  nameErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">               &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 不合法</span></span></span><br><span class="line"><span class="javascript">                  nameErrorSpan.innerHTML = <span class="string">&quot;用户名只能由数字和字母组成&quot;</span>; </span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">// 获得焦点:清空span的错误信息.</span></span></span><br><span class="line"><span class="javascript">      usernameElt.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         nameErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> pwdErrorSpan = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwdError&quot;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 确认密码失去焦点就验证.</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> userpwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;userpwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//获取确认密码</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> confirmpwd = <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">         <span class="comment">//进行比对</span></span></span><br><span class="line">         if(userpwd != confirmpwd)&#123;</span><br><span class="line"><span class="javascript">            pwdErrorSpan.innerHTML = <span class="string">&quot;密码和确认密码不一致&quot;</span>;</span></span><br><span class="line"><span class="javascript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            pwdErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         pwdErrorSpan.innerHTML = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&quot;regbtn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// 验证用户名,怎么验证用户名？让用户名文本框失去焦点</span></span></span><br><span class="line"><span class="javascript">         <span class="comment">// 重点:使用JS代码怎么触发事件？？？？？？</span></span></span><br><span class="line"><span class="javascript">         usernameElt.focus(); <span class="comment">//触发文本框的获取焦点事件</span></span></span><br><span class="line"><span class="javascript">         usernameElt.blur();<span class="comment">//触发文本框的失去焦点事件</span></span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// 验证密码,怎么验证密码？让确认密码失去焦点</span></span></span><br><span class="line"><span class="javascript">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).focus();</span></span><br><span class="line"><span class="javascript">         <span class="built_in">document</span>.getElementById(<span class="string">&quot;confirmpwd&quot;</span>).blur();</span></span><br><span class="line">         </span><br><span class="line"><span class="javascript">         <span class="comment">// 当所有的span都是空的表示表单合法</span></span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span>(nameErrorSpan.innerHTML == <span class="string">&quot;&quot;</span> &amp;&amp; pwdErrorSpan.innerHTML == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//提交</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> formObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;userForm&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 通过调用submit()方法来完成表单的提交</span></span></span><br><span class="line">            formObj.submit();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;userForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/oa/save&quot;</span>&gt;</span></span><br><span class="line">   用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;nameError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userpwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userpwd&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 确认密码是不需要提交给服务器的，这个name不要写！ --&gt;</span></span><br><span class="line">   确认密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirmpwd&quot;</span>/&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwdError&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 表单所有项目都合法才能提交 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;input type=&quot;submit&quot; value=&quot;注册&quot; /&gt; --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- button不能提交表单，但是JS代码可以提交表单 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">id</span>=<span class="string">&quot;regbtn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-10-获取元素的三种方式"><a href="#3-10-获取元素的三种方式" class="headerlink" title="3.10 获取元素的三种方式"></a>3.10 获取元素的三种方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;2&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;3&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;aihao&quot;</span> value=<span class="string">&quot;4&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   <span class="comment">// 这是JS中非常经典的获取元素的三种方式.</span></span><br><span class="line">   <span class="comment">// 根据id获取一个元素</span></span><br><span class="line">   <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(div1)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//根据name属性获取多个元素</span></span><br><span class="line">   <span class="keyword">var</span> aihaos = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;aihao&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(aihaos)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据标签的名字获取</span></span><br><span class="line">   <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">   <span class="built_in">console</span>.log(divs)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0笔记</title>
    <url>/undefined/84d0b9c9/</url>
    <content><![CDATA[<blockquote>
<p>vue2.0学习笔记</p>
</blockquote>
<span id="more"></span>
<p>Vue 的核心库只关注视图层，方便与第三方库或既有项目整合。</p>
<p>HTML + CSS + JS : 视图 ： 给用户看，刷新后台给的数据</p>
<p>网络通信 ： axios</p>
<p>页面跳转 ： vue-router</p>
<p>状态管理：vuex</p>
<p>Vue-UI : ICE , Element UI</p>
<h1 id="1-前端核心分析"><a href="#1-前端核心分析" class="headerlink" title="1 前端核心分析"></a>1 前端核心分析</h1><h2 id="1-1-VUE-概述"><a href="#1-1-VUE-概述" class="headerlink" title="1.1 VUE 概述"></a>1.1 VUE 概述</h2><p>Vue (读音/vju/, 类似于view)是一套用于构建用户界面的==渐进式==（意味着你可以将Vue作为你应用的一部分嵌套其中）框架，发布于2014年2月。与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库(如: vue-router: 跳转，vue-resource: 通信，vuex:管理)或既有项目整合</p>
<h2 id="1-2-前端三要素"><a href="#1-2-前端三要素" class="headerlink" title="1.2 前端三要素"></a>1.2 前端三要素</h2><ul>
<li>HTML (结构) :超文本标记语言(Hyper Text Markup Language) ，决定网页的结构和内容</li>
<li>CSS (表现) :层叠样式表(Cascading Style sheets) ，设定网页的表现样式</li>
<li>JavaScript (行为) :是一种弱类型脚本语言，其源代码不需经过编译，而是由浏览器解释运行,用于控制网页的行为</li>
</ul>
<h2 id="1-3-JavaScript框架"><a href="#1-3-JavaScript框架" class="headerlink" title="1.3 JavaScript框架"></a>1.3 JavaScript框架</h2><ul>
<li><p>jQuery: 大家熟知的JavaScript框架，优点是简化了DOM操作，缺点是DOM操作太频繁,影响前端性能;在前端眼里使用它仅仅是为了兼容IE6、7、8;</p>
</li>
<li><p>Angular: Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发;对后台程序员友好，对前端程序员不太友好;最大的缺点是版本迭代不合理(如: 1代-&gt; 2代，除了名字，基本就是两个东西;截止发表博客时已推出了Angular6)</p>
</li>
<li><p>React: Facebook出品，一款高性能的JS前端框架;特点是提出了新概念[虚拟DOM]用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率;缺点是使用复杂，因为需要额外学习一门[JSX] 语言;</p>
</li>
<li><p>Vue:一款渐进式JavaScript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular (模块化)和React (虚拟DOM)的优点;</p>
</li>
<li><p>Axios :前端通信框架;因为Vue 的边界很明确，就是为了处理DOM,所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互;当然也可以直接选择使用jQuery提供的AJAX通信功能;</p>
</li>
</ul>
<p>前端三大框架：Angular、React、Vue</p>
<h1 id="2-第一个Vue程序"><a href="#2-第一个Vue程序" class="headerlink" title="2 第一个Vue程序"></a>2 第一个Vue程序</h1><h2 id="2-1-什么是MVVM"><a href="#2-1-什么是MVVM" class="headerlink" title="2.1 什么是MVVM"></a>2.1 什么是MVVM</h2><blockquote>
<p> MVVM (Model-View-ViewModel) 是一种软件架构设计模式，由微软WPF (用于替代WinForm，以前就是用这个技术开发桌面应用程序的)和Silverlight (类似于Java Applet,简单点说就是在浏览器上运行的WPF)的架构师Ken Cooper和Ted Peters 开发，是一种简化用户界面的事件驱动编程方式。由John Gossman (同样也是WPF和Silverlight的架构师)于2005年在他的博客上发表。</p>
</blockquote>
<p>MVVM 源自于经典的MVC (ModI-View-Controller) 模式。MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用，其作用如下:</p>
<ul>
<li>该层向上与视图层进行双向数据绑定</li>
<li>向下与Model层通过接口请求进行数据交互</li>
</ul>
<h2 id="2-2-为什么要使用MVVM"><a href="#2-2-为什么要使用MVVM" class="headerlink" title="2.2 为什么要使用MVVM"></a>2.2 为什么要使用MVVM</h2><p>MVVM模式和MVC模式一样，主要目的是分离视图(View)和模型(Model),有几大好处：</p>
<ul>
<li>低耦合:视图(View)可以独立于Model变化和修改,一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>
<li>可复用:你可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑。</li>
<li>独立开发:开发人员可以专注于业务逻辑和数据的开发(ViewModel),设计人员可以专注于页面设计。</li>
<li>可测试:界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。</li>
</ul>
<h2 id="2-3-Vue-是-MVVM-模式的实现者"><a href="#2-3-Vue-是-MVVM-模式的实现者" class="headerlink" title="2.3 Vue 是 MVVM 模式的实现者"></a>2.3 Vue 是 MVVM 模式的实现者</h2><ul>
<li><p>Model : 模型层（数据层）。在这里表示JavaScript对象，数据可能是固定的思数据, 更多的是来自服务器, 从网络上请求下来的数据</p>
</li>
<li><p>View : 视图层，在这里表示DOM （HTML操作的元素），给用户展示各种信息</p>
</li>
<li><p>ViewModel : 视图模型层，连接视图和数据的中间件，Vue.js就是MVVM中的ViewModel层的实现者，在MVVM架构中，是不允许数据和视图直接通信的，只能通过ViewModel来通信，而ViewModel就是定义了一个Observer观察者</p>
</li>
</ul>
<p>VM作用：</p>
<p>1 ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</p>
<p>2 ViewModel 能够监听到视图的变化，并能够通知数据发生改变</p>
<p>至此，我们就明白了，Vue.js 就是一个MVVM的实现者，他的核心就是实现了DOM监听与数据绑定</p>
<h2 id="2-4-Vue安装方式"><a href="#2-4-Vue安装方式" class="headerlink" title="2.4 Vue安装方式"></a>2.4 Vue安装方式</h2><p><strong>方式一. 直接CDN引入</strong></p>
<p>可以选择引入开发环境版本 / 生产环境版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 开发环境版本, 包含了帮助的命令行警告</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdeliver.net/npm/vue/dist/vue.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 生产环境版本, 优化了尺寸和速度</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdeliver.net/npm/vue&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二. 下载和引入</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 开发环境</span><br><span class="line">https:<span class="regexp">//</span>vuejs.org<span class="regexp">/js/</span>vue.js</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 生产环境</span><br><span class="line">https:<span class="regexp">//</span>vuejs.org<span class="regexp">/js/</span>vue.min.js</span><br></pre></td></tr></table></figure>

<p><strong>方式三. NPM安装</strong></p>
<p>通过webpack和CLI的使用</p>
<h1 id="3-Vue基本语法"><a href="#3-Vue基本语法" class="headerlink" title="3 Vue基本语法"></a>3 Vue基本语法</h1><p>模板语法：</p>
<p>创建Vue, options可以放什么</p>
<ul>
<li>el</li>
<li>data</li>
<li>methods</li>
<li>computed</li>
<li>生命周期函数<br>…</li>
</ul>
<h2 id="3-1-v-bind"><a href="#3-1-v-bind" class="headerlink" title="3.1 v-bind"></a>3.1 v-bind</h2><p>现在数据和DOM已经被建立了关联，所有的东西都是响应式的。我们在控制台操作对象的属性，界面可以实时更新。</p>
<p> 我们可以使用v-bind来绑定元素属性！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>鼠标悬停几秒钟查看此处动态绑定的提示信息！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-v-if-v-else"><a href="#3-2-v-if-v-else" class="headerlink" title="3.2 v-if v-else"></a>3.2 v-if v-else</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">       data: &#123;</span><br><span class="line"><span class="javascript">           type: <span class="string">&quot;A&quot;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-v-for"><a href="#3-3-v-for" class="headerlink" title="3.3 v-for"></a>3.3 v-for</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        姓名：&#123;&#123;item.name&#125;&#125;，年龄：&#123;&#123;item.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;lisi&quot;</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;wangwu&quot;</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>官方推荐, 使用v-for的时候, 加上一个 key属性</p>
<p>key的作用是为了高效的更新虚拟DOM，key要具有唯一性</p>
<h2 id="3-4-v-on-事件绑定"><a href="#3-4-v-on-事件绑定" class="headerlink" title="3.4 v-on 事件绑定"></a>3.4 v-on 事件绑定</h2><p>作用: 绑定事件监听<br>简写: @<br>写法:</p>
<ul>
<li>没有参数的情况下, 可以不写(); 如果方法本身有一个参数, 会默认将原生事件event参数传递进去</li>
<li>如果传入某个参数, 同时需要event时, 可以通过$event传入时间</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>狂神说Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;你点我干嘛？&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//方法必须绑定在Vue的Methods对象中，v-on:事件</span></span></span><br><span class="line"><span class="javascript">            sayHi: (<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-插值操作-Mustache"><a href="#3-5-插值操作-Mustache" class="headerlink" title="3.5 插值操作 Mustache"></a>3.5 插值操作 Mustache</h2><p>Mustache语法 (双大括号)<br>可以直接写变量<br>可以写简单的表达式</p>
<h2 id="3-6-v-once"><a href="#3-6-v-once" class="headerlink" title="3.6 v-once"></a>3.6 v-once</h2><p>后面不需要跟任何表达式<br>表示元素和组件只渲染一次, 不会随着数据的改变而变化</p>
<h2 id="3-7-v-html"><a href="#3-7-v-html" class="headerlink" title="3.7 v-html"></a>3.7 v-html</h2><p>后面往往跟一个string类型<br>会将string的html解析出来并渲染</p>
<h2 id="3-8-v-text"><a href="#3-8-v-text" class="headerlink" title="3.8 v-text"></a>3.8 v-text</h2><p>与Mustache相似, 一般不用, 不灵活</p>
<h2 id="3-9-v-pre"><a href="#3-9-v-pre" class="headerlink" title="3.9 v-pre"></a>3.9 v-pre</h2><p>用于跳过这个元素和它子元素的编译过程, 用于显示原本的Mustache语法</p>
<h2 id="3-10-v-cloak"><a href="#3-10-v-cloak" class="headerlink" title="3.10 v-cloak"></a>3.10 v-cloak</h2><p>在某些情况下, 我们浏览器可能会直接显示出未编译的Mustache标签</p>
<h2 id="3-11-v-show"><a href="#3-11-v-show" class="headerlink" title="3.11 v-show"></a>3.11 v-show</h2><p>当条件为false的时<br>v-if: 指令的元素, 不会渲染到dom中<br>v-show: dom增加一个行内样式display: none</p>
<h1 id="4-Vue双向绑定-v-model"><a href="#4-Vue双向绑定-v-model" class="headerlink" title="4 Vue双向绑定 v-model"></a>4 Vue双向绑定 v-model</h1><h2 id="4-1-什么是双向绑定"><a href="#4-1-什么是双向绑定" class="headerlink" title="4.1 什么是双向绑定"></a>4.1 什么是双向绑定</h2><p>Vue.js是一个MVVM框架，即数据双向绑定,即当数据发生变化的时候,视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。这也算是Vue.js的精髓之处了。</p>
<p> 值得注意的是，我们所说的数据双向绑定，一定是对于UI控件来说的，非UI控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用vuex，那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>
<h2 id="4-2-为什么要实现数据的双向绑定"><a href="#4-2-为什么要实现数据的双向绑定" class="headerlink" title="4.2 为什么要实现数据的双向绑定"></a>4.2 为什么要实现数据的双向绑定</h2><p>在Vue.js 中，如果使用vuex ，实际上数据还是单向的，之所以说是数据双向绑定，这是用的UI控件来说，对于我们处理表单，Vue.js的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项,方便跟踪;局部性数据流使用双向，简单易操作。</p>
<h2 id="4-3-在表单中使用双向数据绑定"><a href="#4-3-在表单中使用双向数据绑定" class="headerlink" title="4.3 在表单中使用双向数据绑定"></a>4.3 在表单中使用双向数据绑定</h2><p>你可以用<code>v-model</code>指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及<code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但<code>v-model</code>本质上不过是语法糖。它负责监听户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p> <strong>注意：v-model会忽略所有元素的value、checked、selected特性的初始值而总是将Vue实例的数据作为数据来源，你应该通过JavaScript在组件的data选项中声明。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>value:&#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            selected: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="5-Vue组件"><a href="#5-Vue组件" class="headerlink" title="5 Vue组件"></a>5 Vue组件</h1><h2 id="5-1-注册组件基本步骤"><a href="#5-1-注册组件基本步骤" class="headerlink" title="5.1 注册组件基本步骤"></a>5.1 注册组件基本步骤</h2><ol>
<li>调用Vue.extend()方法 - 创建组件构造器</li>
<li>调用Vue.component()方法 - 注册组件</li>
<li>在Vue实例的作用范围内 - 使用组件</li>
</ol>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    //使用组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpm</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">//创建组件构造器</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">    template: &#x27;</span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//注册组件</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, cpmC)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-局部组件"><a href="#5-2-局部组件" class="headerlink" title="5.2 局部组件"></a>5.2 局部组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpm</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> cpnC = Vue.extend(&#123;</span></span><br><span class="line">    template: &#x27;</span><br><span class="line"><span class="handlebars"><span class="xml">    	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        	<span class="tag">&lt;<span class="name">p</span>&gt;</span>模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data:&#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        cpn: cpnC</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h1 id="6-Axios通信"><a href="#6-Axios通信" class="headerlink" title="6 Axios通信"></a>6 Axios通信</h1><h2 id="6-1-什么是Axios"><a href="#6-1-什么是Axios" class="headerlink" title="6.1 什么是Axios"></a>6.1 什么是Axios</h2><p>Axios是一个开源的可以用在浏览器端和<code>NodeJS</code> 的异步通信框架，她的主要作用就是实现AJAX异步通信，其功能特点如下:</p>
<ul>
<li><p>从浏览器中创建<code>XMLHttpRequests</code></p>
</li>
<li><p>从node.js创建http请求</p>
</li>
<li><p>支持Promise API [JS中链式编程]</p>
</li>
<li><p>拦截请求和响应</p>
</li>
<li><p>转换请求数据和响应数据</p>
</li>
<li><p>取消请求</p>
</li>
<li><p>自动转换JSON数据</p>
</li>
<li><p>客户端支持防御XSRF (跨站请求伪造)</p>
</li>
</ul>
<p>GitHub: <a href="https://github.com/">https://github.com/</a> axios/axios<br>中文文档: <a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p>
<h2 id="6-2-为什么要使用Axios"><a href="#6-2-为什么要使用Axios" class="headerlink" title="6.2 为什么要使用Axios"></a>6.2 为什么要使用Axios</h2><p>由于<code>Vue.js</code>是一个视图层框架且作者(尤雨溪) 严格准守SoC (关注度分离原则)，所以<code>Vue.js</code>并不包含Ajax的通信功能，为了解决通信问题，作者单独开发了一个名为<code>vue-resource</code>的插件，不过在进入2.0 版本以后停止了对该插件的维护并推荐了<code>Axios</code> 框架。少用jQuery，因为它操作Dom太频繁 !</p>
<p>模拟Json数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;weg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sex&quot;</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;https://www.baidu.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;文苑路&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;南京&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bilibili&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;baidu&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;cqh video&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.4399.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>点我进入<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入axios--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            items: [<span class="string">&#x27;Java&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Php&#x27;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//data:vm的属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//data():vm方法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//请求的返回参数,必须和json字符串一样</span></span></span><br><span class="line">               info:&#123;</span><br><span class="line"><span class="javascript">                   name: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                   age: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                   sex: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                   url: <span class="literal">null</span>,</span></span><br><span class="line">                   address: &#123;</span><br><span class="line"><span class="javascript">                       street: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                       city: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                       country: <span class="literal">null</span></span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//钩子函数，链式编程，ES6新特性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&quot;../data.json&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> (<span class="built_in">this</span>.info=res.data))</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-Vue计算属性"><a href="#6-3-Vue计算属性" class="headerlink" title="6.3 Vue计算属性"></a>6.3 Vue计算属性</h2><p>计算属性的重点突出在属性两个字上(属性是名词)，首先它是个属性其次这个属性有计算的能力(计算是动词)，这里的计算就是个函数;简单点说，它就是一个能够将计算结果缓存起来的属性(将行为转化成了静态的属性)，仅此而已;可以想象为缓存！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层 模板--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>currentTime1: &#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>currentTime2: &#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,world!&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            currentTime1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now(); <span class="comment">// 返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//计算属性：methods，computed 方法名不能重名，重名字后，只会调用methods的方法</span></span></span><br><span class="line"><span class="javascript">            currentTime2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 返回一个时间戳</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论:<br> 调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢?此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点,计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销;</p>
</blockquote>
<h1 id="7-内容分发-slot"><a href="#7-内容分发-slot" class="headerlink" title="7 内容分发 slot"></a>7 内容分发 slot</h1><p>在Vue.js中我们使用 元素作为承载分发内容的出口，作者称其为插槽，可以应用在组合组件的场景中;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in todoItems&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//slot 插槽 这个组件要定义在前面不然出不来数据</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//属性</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//标题</span></span></span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;图书馆系列图书&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//列表</span></span></span><br><span class="line"><span class="javascript">            todoItems: [<span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;水浒传&#x27;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="8-自定义事件内容分发"><a href="#8-自定义事件内容分发" class="headerlink" title="8 自定义事件内容分发"></a>8 自定义事件内容分发</h1><p> 通过以上代码不难发现，数据项在Vue的实例中，但删除操作要在组件中完成，那么组件如何才能删除Vue实例中的数据呢?此时就涉及到参数传递与事件分发了，Vue为我们提供了自定义事件的功能很好的帮助我们解决了这个问题;</p>
<p> 使用<code>this.$emit (‘自定义事件名’,参数)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in todoItems&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.导入vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//slot 插槽 这个组件要定义在前面不然出不来数据</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//属性</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            remove: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.$emit 自定义事件分发</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//标题</span></span></span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;图书馆系列图书&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//列表</span></span></span><br><span class="line"><span class="javascript">            todoItems: [<span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;水浒传&#x27;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            removeItems: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;删除了&quot;</span>+<span class="built_in">this</span>.todoItems[index]+<span class="string">&quot;OK&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.todoItems.splice(index,<span class="number">1</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="9-第一个vue-cli项目"><a href="#9-第一个vue-cli项目" class="headerlink" title="9 第一个vue-cli项目"></a>9 第一个vue-cli项目</h1><h2 id="9-1-什么是vue-cli"><a href="#9-1-什么是vue-cli" class="headerlink" title="9.1 什么是vue-cli"></a>9.1 什么是vue-cli</h2><p>vue-cli 官方提供的一个脚手架,用于快速生成一个 vue 的项目模板;</p>
<p> 预先定义好的目录结构及基础代码，就好比咱们在创建 Maven 项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架,我们的开发更加的快速;</p>
<p> <strong>主要功能：</strong></p>
<ul>
<li>统一的目录结构</li>
<li>本地调试</li>
<li>热部署</li>
<li>单元测试</li>
<li>集成打包上线</li>
</ul>
<h2 id="9-2-需要的环境"><a href="#9-2-需要的环境" class="headerlink" title="9.2 需要的环境"></a>9.2 需要的环境</h2><ul>
<li>Node.js : <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li>
</ul>
<p>安装就无脑下一步就好,安装在自己的环境目录下</p>
<ul>
<li>Git : <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>镜像:<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></li>
</ul>
<p><strong>确认nodejs安装成功:</strong></p>
<p>cmd 下输入 <code>node -v</code>,查看是否能够正确打印出版本号即可!<br>cmd 下输入 <code>npm-v</code>,查看是否能够正确打印出版本号即可!<br>这个npm,就是一个软件包管理工具,就和linux下的apt软件安装差不多!</p>
<blockquote>
<p>npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具。通过 npm 可以安装、共享、分发代码,管理项目依赖关系。</p>
</blockquote>
<p><strong>安装 Node.js 淘宝镜像加速器（cnpm）</strong></p>
<p>这样子的话,下载会快很多~</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 就是全局安装</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line"><span class="comment"># 若安装失败，则将源npm源换成淘宝镜像</span></span><br><span class="line"><span class="comment"># 因为npm安装插件是从国外服务器下载，受网络影响大</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 然后再执行</span></span><br><span class="line">npm install cnpm -g</span><br></pre></td></tr></table></figure>

<p>安装的位置:C:\Users\Administrator\AppData\Roaming\npm</p>
<h2 id="9-3-安装vue-cli"><a href="#9-3-安装vue-cli" class="headerlink" title="9.3 安装vue-cli"></a>9.3 安装vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在命令台输入</span></span><br><span class="line">cnpm install vue-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否安装成功</span></span><br><span class="line">vue list</span><br></pre></td></tr></table></figure>

<h2 id="9-4-第一个-vue-cli-应用程序"><a href="#9-4-第一个-vue-cli-应用程序" class="headerlink" title="9.4 第一个 vue-cli 应用程序"></a>9.4 第一个 vue-cli 应用程序</h2><p>创建一个Vue项目,我们随便建立一个空的文件夹在电脑上。</p>
<p> 我这里在D盘下新建一个目录D:\Project\vue-study;</p>
<p>创建一个基于 webpack 模板的 vue 应用程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的 myvue 是项目名称，可以根据自己的需求起名</span></span><br><span class="line"></span><br><span class="line">vue init webpack myvue</span><br></pre></td></tr></table></figure>


<p>一路都选择no即可;</p>
<p> 初始化并运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myvue</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>


<p> 执行完成后,目录多了很多依赖</p>
<h1 id="10-Webpack"><a href="#10-Webpack" class="headerlink" title="10 Webpack"></a>10 Webpack</h1><p> WebPack 是一款<strong>模块加载器兼打包工具</strong>，它能把各种资源，如 JS、JSX、ES6、SASS、LESS、图片等<strong>都作为模块来处理和使用</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack@3.6.0 -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>


<p> 测试安装成功: 输入以下命令有版本号输出即为安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure>

<h2 id="10-1-什么是Webpack"><a href="#10-1-什么是Webpack" class="headerlink" title="10.1 什么是Webpack"></a>10.1 什么是Webpack</h2><p>本质上，webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler)。当webpack处理应用程序时，它会递归地构建一个依赖关系图(dependency graph),其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle.<br> Webpack是当下最热门的前端资源模块化管理和打包工具，它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时再异步加载。通过loader转换，任何形式的资源都可以当做模块，比如CommonsJS、AMD、ES6、 CSS、JSON、CoffeeScript、LESS等;<br> 伴随着移动互联网的大潮，当今越来越多的网站已经从网页模式进化到了WebApp模式。它们运行在现代浏览器里，使用HTML5、CSS3、ES6 等新的技术来开发丰富的功能，网页已经不仅仅是完成浏览器的基本需求; WebApp通常是一个SPA (单页面应用) ，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的JS代码，这给前端的开发流程和资源组织带来了巨大挑战。<br> 前端开发和其他开发工作的主要区别，首先是前端基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器的，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p>
<h2 id="10-2-使用Webpack"><a href="#10-2-使用Webpack" class="headerlink" title="10.2 使用Webpack"></a>10.2 使用Webpack</h2><p>1 先创建一个包 交由idea打开 会生成一个.idea文件 那么就说明该文件就交由idea负责</p>
<p>2 在idea中创建modules包，再创建hello.js,hello.js 暴露接口 相当于Java中的类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露一个方法</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;狂神说ES6&lt;/h1&gt;&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 创建main.js 当作是js主入口 , main.js 请求hello.js 调用sayHi()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi()</span><br></pre></td></tr></table></figure>

<p>4 在主目录创建webpack-config.js , webpack-config.js 这个相当于webpack的配置文件</p>
<p>enrty请求main.js的文件</p>
<p>output是输出的位置和名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">&#x27;./modules/main.js&#x27;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">&#x27;./js/bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5 在idea命令台输入webpack命令（idea要设置管理员启动）</p>
<p>6 完成上述操作之后会在主目录生成一个dist文件，生成的js文件夹路径为<code>/ dist/js/bundle.js</code></p>
<p>7 在主目录创建<code>index.html</code> 导入<code>bundle.js</code><br>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="11-vue-router路由"><a href="#11-vue-router路由" class="headerlink" title="11 vue-router路由"></a>11 vue-router路由</h1><p> Vue Router是Vue.js官方的路由管理器（路径跳转）。它和Vue.js的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有:</p>
<ul>
<li><p>嵌套的路由/视图表</p>
</li>
<li><p>模块化的、基于组件的路由配置</p>
</li>
<li><p>路由参数、查询、通配符</p>
</li>
<li><p>基于Vue.js过渡系统的视图过渡效果</p>
</li>
<li><p>细粒度的导航控制</p>
</li>
<li><p>带有自动激活的CSS class的链接</p>
</li>
<li><p>HTML5历史模式或hash模式，在IE9中自动降级</p>
</li>
<li><p>自定义的滚动条行为</p>
</li>
</ul>
<h2 id="11-1-安装"><a href="#11-1-安装" class="headerlink" title="11.1 安装"></a>11.1 安装</h2><p>基于第一个vue-cli进行测试学习;先查看node_modules中是否存在 vue-router<br> vue-router 是一个插件包，所以我们还是需要用 npm/cnpm 来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>

<p> 安装完之后去<code>node_modules</code>路径看看是否有vue-router信息 有的话则表明安装成功。</p>
<h2 id="11-2-vue-router-demo实例"><a href="#11-2-vue-router-demo实例" class="headerlink" title="11.2 vue-router demo实例"></a>11.2 vue-router demo实例</h2><ol>
<li><p>将之前案例由vue-cli生成的案例用idea打开</p>
</li>
<li><p>清理不用的东西 assert下的logo图片 component定义的helloworld组件 我们用自己定义的组件</p>
</li>
<li><p>清理代码 以下为清理之后的代码 src下的App.vue 和main.js以及根目录的index.html<br>这三个文件的关系是 index.html 调用main.js 调用App.vue</p>
</li>
</ol>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>myvue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>App.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;h1&gt;迪师傅&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;kuang&quot;&gt;Kuang&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在components目录下创建一个自己的组件Content,Test,Main(这两个和Content内容一样的就不放示例代码了</li>
</ol>
<p>Content.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;内容&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Content&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装路由,在src目录下,新建一个文件夹 : router,专门存放路由 index.js(默认配置文件都是这个名字)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&quot;../components/Content&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../components/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Kuang <span class="keyword">from</span> <span class="string">&quot;../components/Kuang&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component: Content</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/kuang&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;kuang&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component: Kuang</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在main.js中配置路由</li>
</ol>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描里面的路由配置</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">//配置路由</span></span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在App.vue中使用路由</p>
<p>App.vue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;h1&gt;迪师傅&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;kuang&quot;&gt;Kuang&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>启动测试一下 ： npm run dev</p>
</li>
<li><p>项目结构图&amp;运行效果图</p>
</li>
</ol>
<h1 id="12-vue-ElementUI"><a href="#12-vue-ElementUI" class="headerlink" title="12 vue + ElementUI"></a>12 vue + ElementUI</h1><p>根据之前创建vue-cli项目一样再来创建一个新项目</p>
<p>1 创建一个名为 hello-vue 的工程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack hello-vue</span><br></pre></td></tr></table></figure>

<p>2 安装依赖，我们需要安装 vue-router、element-ui、sass-loader 和node-sass 四个插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入工程目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> hello-vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 vue-router</span></span><br><span class="line"></span><br><span class="line">npm install vue-router --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 element-ui</span></span><br><span class="line"></span><br><span class="line">npm i element-ui -S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 SASS 加载器</span></span><br><span class="line"></span><br><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动测试</span></span><br><span class="line"></span><br><span class="line">npm run dev	</span><br></pre></td></tr></table></figure>

<p>3 Npm命令解释</p>
<ol>
<li><p>npm install moduleName：安装模块到项目目录下</p>
</li>
<li><p>npm install -g moduleName：-g 的意思是将模块安装到全局，具体安装到磁盘的哪个位置，要看 npm config prefix的位置</p>
</li>
<li><p>npm install moduleName -save：–save的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖，-S为该命令的缩写</p>
</li>
<li><p>npm install moduleName -save-dev：–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写</p>
</li>
</ol>
<p>4 创建成功后用idea打开，并删除净东西 创建views和router文件夹用来存放视图和路由</p>
<p>5 在views创建Main.vue</p>
<p>Main.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Main&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>6 在views中创建Login.vue视图组件</p>
<p>Login.vue:（用的ElementUI中的代码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-form ref&#x3D;&quot;loginForm&quot; :model&#x3D;&quot;form&quot; :rules&#x3D;&quot;rules&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;login-box&quot;&gt;</span><br><span class="line">      &lt;h3 class&#x3D;&quot;login-title&quot;&gt;欢迎登录&lt;&#x2F;h3&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;账号&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入账号&quot; v-model&#x3D;&quot;form.username&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class="line">        &lt;el-input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot; v-model&#x3D;&quot;form.password&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; v-on:click&#x3D;&quot;onSubmit(&#39;loginForm&#39;)&quot;&gt;登录&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;el-form-item&gt;</span><br><span class="line">    &lt;&#x2F;el-form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      title&#x3D;&quot;温馨提示&quot;</span><br><span class="line">      :visible.sync&#x3D;&quot;dialogVisible&quot;</span><br><span class="line">      width&#x3D;&quot;30%&quot;</span><br><span class="line">      :before-close&#x3D;&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;span&gt;请输入账号和密码&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;footer&quot; class&#x3D;&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;dialogVisible &#x3D; false&quot;&gt;确 定&lt;&#x2F;el-button&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-dialog&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Login&quot;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        form: &#123;</span><br><span class="line">          username: &#39;&#39;,</span><br><span class="line">          password: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 表单验证，需要在 el-form-item 元素中增加 prop 属性</span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [</span><br><span class="line">            &#123;required: true, message: &#39;账号不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line">            &#123;required: true, message: &#39;密码不可为空&#39;, trigger: &#39;blur&#39;&#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">    </span><br><span class="line">        &#x2F;&#x2F; 对话框显示和隐藏</span><br><span class="line">        dialogVisible: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      onSubmit(formName) &#123;</span><br><span class="line">        &#x2F;&#x2F; 为表单绑定验证功能</span><br><span class="line">        this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class="line">          if (valid) &#123;</span><br><span class="line">            &#x2F;&#x2F; 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span><br><span class="line">            this.$router.push(&quot;&#x2F;main&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            this.dialogVisible &#x3D; true;</span><br><span class="line">            return false;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">  .login-box &#123;</span><br><span class="line">    border: 1px solid #DCDFE6;</span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line">    box-shadow: 0 0 25px #909399;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .login-title &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto 40px auto;</span><br><span class="line">    color: #303133;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>7 创建路由</p>
<p>在 router 目录下创建一个名为 index.js 的 vue-router 路由配置文件</p>
<p>index.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>8 在main.js中配置相关</p>
<p>main.js是index.html调用的 所以前面注册的组件要在这里导入</p>
<p><strong>一定不要忘记扫描路由配置并将其用到new Vue中</strong></p>
<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">//扫描路由配置</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">//导入elementUI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"><span class="comment">//导入element css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(router);</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),<span class="comment">//ElementUI规定这样使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>9 在App.vue中配置显示视图</p>
<p>App.vue :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;login&quot;&gt;login&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>10 测试运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 测试：在浏览器打开 <a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a></p>
<p>如果出现错误: 可能是因为sass-loader的版本过高导致的编译错误，当前最高版本是8.0.2，需要退回到7.3.1 ；</p>
<p>去package.json文件里面的 “sass-loader”的版本更换成7.3.1，然后重新cnpm install就可以了；</p>
</blockquote>
<h1 id="13-路由嵌套"><a href="#13-路由嵌套" class="headerlink" title="13 路由嵌套"></a>13 路由嵌套</h1><p> 嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。</p>
<h2 id="13-1-Demo"><a href="#13-1-Demo" class="headerlink" title="13.1 Demo"></a>13.1 Demo</h2><p>1 创建用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件；</p>
<p>Profile.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;个人信息&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;UserProfile&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>2 在用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件；</p>
<p>List.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;用户列表&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;UserList&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>3 修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下：</p>
<p>Main.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside width&#x3D;&quot;200px&quot;&gt;</span><br><span class="line">        &lt;el-menu :default-openeds&#x3D;&quot;[&#39;1&#39;]&quot;&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;用户管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">                &lt;!--插入的地方--&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;profile&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">                &lt;!--插入的地方--&gt;</span><br><span class="line">                &lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;list&quot;&gt;用户列表&lt;&#x2F;router-link&gt;</span><br><span class="line">              &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;title&quot;&gt;&lt;i class&#x3D;&quot;el-icon-caret-right&quot;&gt;&lt;&#x2F;i&gt;内容管理&lt;&#x2F;template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;分类管理&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;内容列表&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">          &lt;&#x2F;el-submenu&gt;</span><br><span class="line">        &lt;&#x2F;el-menu&gt;</span><br><span class="line">      &lt;&#x2F;el-aside&gt;</span><br><span class="line">  &lt;el-container&gt;</span><br><span class="line">    &lt;el-header style&#x3D;&quot;text-align: right; font-size: 12px&quot;&gt;</span><br><span class="line">      &lt;el-dropdown&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;el-icon-setting&quot; style&#x3D;&quot;margin-right: 15px&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;个人信息&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">          &lt;el-dropdown-item&gt;退出登录&lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">        &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">      &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">    &lt;&#x2F;el-header&gt;</span><br><span class="line">    &lt;el-main&gt;</span><br><span class="line">      &lt;!--在这里展示视图--&gt;</span><br><span class="line">      &lt;router-view &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;el-main&gt;</span><br><span class="line">  &lt;&#x2F;el-container&gt;</span><br><span class="line">&lt;&#x2F;el-container&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;Main&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped lang&#x3D;&quot;scss&quot;&gt;</span><br><span class="line">  .el-header &#123;</span><br><span class="line">    background-color: #B3C0D1;</span><br><span class="line">    color: #333;</span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line">  .el-aside &#123;</span><br><span class="line">    color: #333;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>4 配置嵌套路由修改 router 目录下的 index.js 路由配置文件，使用children放入main中写入子模块，代码如下</p>
<p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">&quot;../views/user/List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserProfile <span class="keyword">from</span> <span class="string">&quot;../views/user/Profile&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      <span class="comment">//路由嵌套</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/profile&#x27;</span>,<span class="attr">component</span>: UserProfile&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;/user/list&#x27;</span>,<span class="attr">component</span>: UserList&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>5 路由嵌套效果图</p>
<h1 id="14-参数传递"><a href="#14-参数传递" class="headerlink" title="14 参数传递"></a>14 参数传递</h1><h2 id="14-1-Demo"><a href="#14-1-Demo" class="headerlink" title="14.1 Demo"></a>14.1 Demo</h2><p>1 前端传递参数</p>
<p> 此时我们在Main.vue中的route-link位置处 to 改为了 :to，是为了将这一属性当成对象使用，注意 router-link 中的 name 属性名称 一定要和 路由中的 name 属性名称 匹配，因为这样 Vue 才能找到对应的路由路径；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--name：传组件名 params：传递参数，需要绑定对象：v-bind--&gt;</span><br><span class="line">&lt;router-link v-bind:to&#x3D;&quot;&#123;name: &#39;UserProfile&#39;, params: &#123;id: 1&#125;&#125;&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>

<p>2 修改路由配置，增加props：true属性</p>
<p> 主要是router下的index.js中的 path 属性中增加了 :id 这样的占位符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">  component: UserProfile,</span><br><span class="line">  props:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 前端显示</p>
<p>在要展示的组件Profile.vue中接收参数</p>
<p>Profile.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    个人信息</span><br><span class="line">    &#123;&#123; id &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      props: [&#39;id&#39;],</span><br><span class="line">      name: &quot;UserProfile&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>4 运行</p>
<h2 id="14-2-组件重定向"><a href="#14-2-组件重定向" class="headerlink" title="14.2 组件重定向"></a>14.2 组件重定向</h2><p>重定向的意思大家都明白，但 Vue 中的重定向是作用在路径不同但组件相同的情况下，比如：<br> 在router下面index.js的配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Main&#x27;</span>,</span><br><span class="line">  component: Main</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/goHome&#x27;</span>,</span><br><span class="line">  redirect: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 说明：这里定义了两个路径，一个是 /main ，一个是 /goHome，其中 /goHome 重定向到了 /main 路径，由此可以看出重定向不需要定义组件；</p>
</blockquote>
<p>使用的话，只需要在Main.vue设置对应路径即可；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;goHome&quot;&gt;回到首页&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;&#x2F;el-menu-item&gt;</span><br></pre></td></tr></table></figure>

<h1 id="15-路由钩子与异步请求"><a href="#15-路由钩子与异步请求" class="headerlink" title="15 路由钩子与异步请求"></a>15 路由钩子与异步请求</h1><h2 id="15-1-路由模式与-404"><a href="#15-1-路由模式与-404" class="headerlink" title="15.1 路由模式与 404"></a>15.1 路由模式与 404</h2><p>==路由模式有两种==</p>
<ul>
<li><p>hash：路径带 # 符号，如 <a href="http://localhost/#/login">http://localhost/#/login</a></p>
</li>
<li><p>history：路径不带 # 符号，如 <a href="http://localhost/login">http://localhost/login</a></p>
</li>
</ul>
<p>修改路由配置，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>404界面：</p>
<p>1 创建一个NotFound.vue视图组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;404,你的页面走丢了&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;NotFound&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>2 修改路由配置index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">   path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">   component: NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="15-2-路由钩子与异步请求"><a href="#15-2-路由钩子与异步请求" class="headerlink" title="15.2 路由钩子与异步请求"></a>15.2 路由钩子与异步请求</h2><p><code>beforeRouteEnter</code>：在进入路由前执行<br><code>beforeRouteLeave</code>：在离开路由前执行</p>
<p>在Profile.vue中写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;UserProfile&quot;,</span><br><span class="line">  beforeRouteEnter: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备进入个人信息页&quot;);</span><br><span class="line">    next()</span><br><span class="line">&#125;,</span><br><span class="line">  beforeRouteLeave: (to, from, next) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;准备离开个人信息页&quot;);</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>参数说明:</p>
<ul>
<li><p>to：路由将要跳转的路径信息</p>
</li>
<li><p>from：路径跳转前的路径信息</p>
</li>
<li><p>next：路由的控制参数</p>
</li>
<li><p>next() 跳入下一个页面</p>
</li>
<li><p>next(’/path’) 改变路由的跳转方向，使其跳到另一个路由</p>
</li>
<li><p>next(false) 返回原来的页面</p>
</li>
<li><p>next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例</p>
</li>
</ul>
<h2 id="15-3-在钩子函数中使用异步请求"><a href="#15-3-在钩子函数中使用异步请求" class="headerlink" title="15.3 在钩子函数中使用异步请求"></a>15.3 在钩子函数中使用异步请求</h2><p>1 安装 Axios</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save vue-axios</span><br></pre></td></tr></table></figure>

<p>2 main.js引用 Axios</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>

<p>3 准备数据 ： 只有<strong>我们的 static 目录下的文件是可以被访问到的</strong>，所以我们就把静态文件放入该目录下。<br>数据和之前用的json数据一样 需要的去上述axios例子里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态数据存放的位置</span></span><br><span class="line"><span class="keyword">static</span>/mock/data.json</span><br></pre></td></tr></table></figure>

<p>4 在 beforeRouteEnter 中进行异步请求</p>
<p>Profile.vue:</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//第二种取值方式</span></span><br><span class="line">  <span class="comment">// props:[&#x27;id&#x27;],</span></span><br><span class="line">  name: <span class="string">&quot;UserProfile&quot;</span>,</span><br><span class="line">  <span class="comment">//钩子函数 过滤器</span></span><br><span class="line">  beforeRouteEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//加载数据</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>)</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//进入路由之前执行getData方法</span></span><br><span class="line">      vm.getData()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>)</span><br><span class="line">    next();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//axios</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    getData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:8080/static/mock/data.json&#x27;</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5 执行</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记</title>
    <url>/undefined/cecfc2f4/</url>
    <content><![CDATA[<blockquote>
<p>C++学习笔记</p>
</blockquote>
<span id="more"></span>

<h1 id="1-C-对C的增强"><a href="#1-C-对C的增强" class="headerlink" title="1 C++对C的增强"></a>1 C++对C的增强</h1><p>1、定义函数时必须写明类型，即int不可省略</p>
<p>2、声明结构体类型后，定义结构体变量时，C中需写struct，C++则不需要</p>
<p>3、全局变量重定义的加强（随用随定义）</p>
<p>4、布尔类型的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    flag = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//bool类型的字节数为1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bool只能取0,1，非0自动转换为1，值只能为true和false</li>
</ul>
<p>5、三目运算符的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>,b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    c = a &lt; b ? a : b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">        (a &lt; b ? a : b) = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//*((a &lt; b) ? &amp;a : &amp;b) = 50;（C,C++通用写法）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>C++中三目运算符可以做左值，C中三目运算符不能做左值</p>
</li>
<li><p>C++中三目运算符返回变量自身，C中返回变量的值</p>
</li>
<li><p>C++中两种赋值同时出现时，不论谁前谁后，都是*((a &lt; b) ? &amp;a : &amp;b) = 50的结果优先</p>
</li>
</ul>
<p>6、const的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*)&amp;a;</span><br><span class="line">    *b = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//改变的为临时开辟的变量</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>C++中通过指针不能改变所指向常变量的值</p>
</li>
<li><p>C++中将const存于符号表中，无空间和地址</p>
</li>
<li><p>C++中const定义的为常量(与#define类似，但运行时段不同，define无法被输出)</p>
</li>
</ul>
<p>7、枚举类型的增强</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">season</span> &#123;</span></span><br><span class="line">    SPR = <span class="number">0</span>,</span><br><span class="line">    SUM,</span><br><span class="line">    AUT,</span><br><span class="line">    WIN</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//enum season s=2;(×)</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">season</span> <span class="title">s</span> =</span> AUT;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C++中枚举变量赋值只能赋左边的元素名，不能赋数字</p>
<h1 id="2-命名空间（namespace）"><a href="#2-命名空间（namespace）" class="headerlink" title="2 命名空间（namespace）"></a>2 命名空间（namespace）</h1><h2 id="2-1-命名空间的使用"><a href="#2-1-命名空间的使用" class="headerlink" title="2.1 命名空间的使用"></a>2.1 命名空间的使用</h2><p>方式一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">    std::cin &gt;&gt; a;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>命名空间更好的控制标识符的作用域</p>
</li>
<li><p>cout代表黑屏幕，cin代表键盘</p>
</li>
<li><p>iostream提供一个叫命名空间的东西，标准的命名空间是std</p>
</li>
</ul>
<h2 id="2-2-命名空间的定义"><a href="#2-2-命名空间的定义" class="headerlink" title="2.2 命名空间的定义"></a>2.2 命名空间的定义</h2><h3 id="2-2-1-命名空间的普通定义"><a href="#2-2-1-命名空间的普通定义" class="headerlink" title="2.2.1 命名空间的普通定义"></a>2.2.1 命名空间的普通定义</h3><p>方式一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; spaceA::g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> spaceA;</span><br><span class="line">    cout &lt;&lt; g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> spaceA &#123;</span><br><span class="line">    <span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> spaceA::g_a;</span><br><span class="line">    cout &lt;&lt; g_a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-命名空间的嵌套定义"><a href="#2-2-2-命名空间的嵌套定义" class="headerlink" title="2.2.2 命名空间的嵌套定义"></a>2.2.2 命名空间的嵌套定义</h3><p>方式一</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> spaceB::spaceC;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    spaceB::spaceC::teacher t1;</span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> spaceB &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">namespace</span> spaceC &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> &#123;</span></span><br><span class="line">            <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> spaceB::spaceC::teacher;</span><br><span class="line">    teacher t1;</span><br><span class="line">    t1.id = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; t1.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-内联函数"><a href="#3-内联函数" class="headerlink" title="3 内联函数"></a>3 内联函数</h1><blockquote>
<p>原理：内联函数直接将代码贴到函数调用的地方，使得程序在调用函数时不用来回跳跃等其它操作，从而达到提高程序运行速度的目的（但其占用内存更大）</p>
</blockquote>
<ul>
<li>适用场景：函数体很“小”，且被“频繁”调用</li>
<li>inline和宏定义的区别：inline函数是函数，宏不是函数；内联函数在编译时展开，宏是在编译时展开的；在编译的时候，内联函数可以直接被镶嵌到目标代码中，宏定义只是简单地做文本替换；内联函数可以完成类型检查、语句是否正确等编译功能，宏不具备这样的能力；宏定义在处理宏参数时要非常小心，容易产生二义性，而内联函数定义时不会产生二义性</li>
<li>C++中内联编译的限制：不能存在任何形式的循环语句，函数体不能过于庞大，不能对函数进行取址操作，函数内联声明必须在调用语句之前</li>
</ul>
<p>在类定义中的定义的函数都是内联函数，即使没有使用 inline 说明符。对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。如果已定义的函数多于一行，编译器会忽略 inline 限定符（即看作普通函数处理）</p>
<p>注意：定义为普通函数，声明为内联函数，仍为普通函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b)</span></span><br><span class="line">((a)&gt;(b)?(a):(b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printAB</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;,b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = <span class="built_in">MAX</span>(a, b);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="built_in">printAB</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算机内存由慢到快网盘，硬盘，内存，缓存，寄存器</span></span><br></pre></td></tr></table></figure>

<h1 id="4-默认参数和占位参数"><a href="#4-默认参数和占位参数" class="headerlink" title="4 默认参数和占位参数"></a>4 默认参数和占位参数</h1><h2 id="4-1-单个默认参数"><a href="#4-1-单个默认参数" class="headerlink" title="4.1 单个默认参数"></a>4.1 单个默认参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a = <span class="number">666</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="comment">// 这个不填参数的时候，会使用你的默认参数，填参数时，使用你填的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-多个默认参数"><a href="#4-2-多个默认参数" class="headerlink" title="4.2 多个默认参数"></a>4.2 多个默认参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_volume</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;len = &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;w = &quot;</span> &lt;&lt; width &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;h = &quot;</span> &lt;&lt; height &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> len * width * height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">30</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;体积是&quot;</span> &lt;&lt; <span class="built_in">get_volume</span>(len, w, h) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 参数个数一一对应</span></span><br><span class="line"><span class="comment">// 传参从右往左传，可以一部分为默认参数，一部分传参</span></span><br></pre></td></tr></table></figure>

<p>默认参数为当没有实参时，默认的值。 当函数有一个参数为默认参数，那么从这个参数起，后面的参数都必须有默认参数。在函数的声明和定义中，默认参数只能写一次，不然编译器会报错，特别是在分文件编写中</p>
<h2 id="4-3-占位参数"><a href="#4-3-占位参数" class="headerlink" title="4.3 占位参数"></a>4.3 占位参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func1</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">func2</span>(<span class="number">199</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>占位参数只有参数类型声明，而没有参数名声明，一般情况下，在函数体内部无法使用占位参数。占位参数必须填入实参，占位参数也可以有默认值。占位参数与默认参数结合起来使用，兼容C语言程序中可能出现的不规范写法。</p>
<h1 id="5-函数重载"><a href="#5-函数重载" class="headerlink" title="5 函数重载"></a>5 函数重载</h1><h2 id="5-1-函数重载的条件"><a href="#5-1-函数重载的条件" class="headerlink" title="5.1 函数重载的条件"></a>5.1 函数重载的条件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数重载的话不要写默认参数，为了避免调用出现函数冲突</span></span><br><span class="line"><span class="comment">// 可以写占用参数，但不要与默认参数一起使用</span></span><br><span class="line"><span class="comment">// 如果调用func(10,20)则出错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c = <span class="number">300</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;print1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;print2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> x = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, x);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">10.0</span>);</span><br><span class="line">    <span class="built_in">print1</span>(<span class="number">3.14f</span>);<span class="comment">// (double)</span></span><br><span class="line">    <span class="built_in">print1</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//(int)</span></span><br><span class="line">    <span class="comment">// 匹配类型优先，其次为隐式转换</span></span><br><span class="line">    <span class="comment">// 若都匹配不到，则调用失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数名相同，参数列表(个数，类型，顺序)不同；函数返回值并不是构成函数重载的条件</p>
<h2 id="5-2-函数重载和函数指针"><a href="#5-2-函数重载和函数指针" class="headerlink" title="5.2 函数重载和函数指针"></a>5.2 函数重载和函数指针</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int,int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义一种函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(MY_FUNC)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义一个指向一种函数类型的指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*MY_FUNC_P)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    MY_FUNC* fp = <span class="literal">NULL</span>;</span><br><span class="line">    fp = func;</span><br><span class="line">    <span class="built_in">fp</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    MY_FUNC_P fp1 = <span class="literal">NULL</span>;</span><br><span class="line">    fp1 = func;</span><br><span class="line">    <span class="built_in">fp1</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span> (*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    fp3 = func;</span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    fp3 = func;<span class="comment">//fp3-&gt;func(int,int)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数指针不可自加</span></span><br><span class="line">    <span class="comment">// 实际上在给函数指针赋值的时候，是会发生函数重载匹配的</span></span><br><span class="line">    <span class="comment">// 在调用函数指针的时候，所调用的函数就已经固定了，而非重载，此处不能隐式转换</span></span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span>(*fp4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">    fp4 = func;<span class="comment">//fp4-&gt;func(int,int,int)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">30</span>);<span class="comment">//func(int,int)</span></span><br><span class="line">    <span class="built_in">fp3</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">fp4</span>(<span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-类与对象"><a href="#6-类与对象" class="headerlink" title="6 类与对象"></a>6 类与对象</h1><h2 id="6-1-基本概念"><a href="#6-1-基本概念" class="headerlink" title="6.1 基本概念"></a>6.1 基本概念</h2><p>类是一种数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">(struct Hero&amp; h)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hero&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; h.name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sex = &quot;</span> &lt;&lt; h.sex &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvHero</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">// 访问控制权限</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printHero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;advHero&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name = &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;sex = &quot;</span> &lt;&lt; sex &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">    <span class="comment">// &#123;&#125;以内叫类的内部，以外叫类的外部</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> kind[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line">    <span class="comment">// 在public下面定义成员变量和函数 是能够在类的内部和外部都可以访问的</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;kind = &quot;</span> &lt;&lt; kind &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;color = &quot;</span> &lt;&lt; color &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; kind &lt;&lt; <span class="string">&quot;开始写字了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; kind &lt;&lt; <span class="string">&quot;跑起来了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 在private下面定义的成员变量和方法只能够在类的内部访问</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="keyword">char</span> kind[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hero h;</span><br><span class="line">    <span class="built_in">strcpy</span>(h.name, <span class="string">&quot;gailun&quot;</span>);</span><br><span class="line">    h.sex = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printHero</span>(h);</span><br><span class="line">    AdvHero advH;</span><br><span class="line">    <span class="built_in">strcpy</span>(advH.name, <span class="string">&quot;ChunBro&quot;</span>);</span><br><span class="line">    advH.sex = <span class="number">1</span>;</span><br><span class="line">    advH.<span class="built_in">printHero</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Animal dog;</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.kind, <span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.color, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    Animal sheep;</span><br><span class="line">    <span class="built_in">strcpy</span>(sheep.kind, <span class="string">&quot;sheep&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(sheep.color, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">    dog.<span class="built_in">write</span>();</span><br><span class="line">    sheep.<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-类的封装"><a href="#6-2-类的封装" class="headerlink" title="6.2 类的封装"></a>6.2 类的封装</h2><p>类把数据（事物的属性）和函数（事物的行为——操作）封装为一个整体。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_date</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;year, month, day&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; d.year;</span><br><span class="line">    cin &gt;&gt; d.month;</span><br><span class="line">    cin &gt;&gt; d.day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印data的接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_date</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; d.year &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; d.month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; d.day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_leap_year</span><span class="params">(struct Date&amp; d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((d.year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (d.year % <span class="number">100</span> != <span class="number">0</span>) || (d.year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 成员方法 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;year, month, day&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; year;</span><br><span class="line">        cin &gt;&gt; month;</span><br><span class="line">        cin &gt;&gt; day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印data的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; year &lt;&lt; <span class="string">&quot;年&quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot;月&quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_leap_year</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_year</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_year</span><span class="params">(<span class="keyword">int</span> new_year)</span> </span>&#123;</span><br><span class="line">        year = new_year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">// 保护控制权限。在类的继承中跟private有区别，在单个类中，跟private是一模一样的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个类类的内部，默认的访问控制权限是private</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个结构体默认的访问控制权限是public</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hero2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    Date d1;</span><br><span class="line">    <span class="built_in">init_date</span>(d1);</span><br><span class="line">    <span class="built_in">print_date</span>(d1);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">is_leap_year</span>(d1) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyDate my_date;</span><br><span class="line">    my_date.<span class="built_in">init_date</span>();</span><br><span class="line">    my_date.<span class="built_in">print_date</span>();</span><br><span class="line">    <span class="keyword">if</span> (my_date.<span class="built_in">is_leap_year</span>() == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不是闰年&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// getter,setter</span></span><br><span class="line">    cout &lt;&lt; my_date.<span class="built_in">get_year</span>() &lt;&lt; endl;</span><br><span class="line">    my_date.<span class="built_in">set_year</span>(<span class="number">2000</span>);</span><br><span class="line">    cout &lt;&lt; my_date.<span class="built_in">get_year</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*错误写法：</span></span><br><span class="line"><span class="comment">	Hero h;</span></span><br><span class="line"><span class="comment">	h.year = 1000;*/</span></span><br><span class="line">    Hero2 h2;</span><br><span class="line">    h2.year = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-面向过程和面向对象"><a href="#6-3-面向过程和面向对象" class="headerlink" title="6.3 面向过程和面向对象"></a>6.3 面向过程和面向对象</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">char</span> *food)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; <span class="string">&quot;吃&quot;</span> &lt;&lt; food &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向过程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">(class Dog &amp;dog, <span class="keyword">char</span> *food)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; dog.name &lt;&lt; <span class="string">&quot;吃&quot;</span> &lt;&lt; food &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    <span class="built_in">strcpy</span>(dog.name, <span class="string">&quot;狗&quot;</span>);</span><br><span class="line">    <span class="built_in">eat</span>(dog, <span class="string">&quot;翔&quot;</span>);</span><br><span class="line">    dog.<span class="built_in">eat</span>(<span class="string">&quot;翔&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-案例"><a href="#6-4-案例" class="headerlink" title="6.4 案例"></a>6.4 案例</h2><h3 id="案例一：求圆的周长和面积"><a href="#案例一：求圆的周长和面积" class="headerlink" title="案例一：求圆的周长和面积"></a>案例一：求圆的周长和面积</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的周长</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCircleGirth</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span>*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆的面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getCircleArea</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span>*r*r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用面向对象实现</span></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14</span> *m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r*m_r*<span class="number">3.14</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> m_r; <span class="comment">// 圆的私有成员 半径</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_area = m_r*m_r*<span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">return</span> m_area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_girth = m_r * <span class="number">2</span> * <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">return</span> m_girth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> m_r;</span><br><span class="line">    <span class="keyword">double</span> m_girth; <span class="comment">//周长</span></span><br><span class="line">    <span class="keyword">double</span> m_area;<span class="comment">//面积</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> r = <span class="number">10</span>; <span class="comment">// 圆的半径</span></span><br><span class="line">    <span class="keyword">double</span> g = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> a = <span class="number">0</span>;</span><br><span class="line">    g = <span class="built_in">getCircleGirth</span>(r);</span><br><span class="line">    a = <span class="built_in">getCircleArea</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; g &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Circle c;</span><br><span class="line"></span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; c.<span class="built_in">getR</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; c.<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; c.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Circle2 c2;</span><br><span class="line"></span><br><span class="line">    c2.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的半径是&quot;</span> &lt;&lt; c2.<span class="built_in">getR</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长是&quot;</span> &lt;&lt; c2.<span class="built_in">getGirth</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积是&quot;</span> &lt;&lt; c2.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例二：求圆的面积-多文件"><a href="#案例二：求圆的面积-多文件" class="headerlink" title="案例二：求圆的面积(多文件)"></a>案例二：求圆的面积(多文件)</h3><p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Circle.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;面积&quot;</span> &lt;&lt; c.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Circle.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Circle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Circle::setR</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">    m_r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_area = m_r *m_r *<span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">return</span> m_area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Circle::getGirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_girth = m_r * <span class="number">2</span> * <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m_girth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例三：求立方体是否相等"><a href="#案例三：求立方体是否相等" class="headerlink" title="案例三：求立方体是否相等"></a>案例三：求立方体是否相等</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立方体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setABC</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">        m_c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_a*m_b) * <span class="number">2</span> + (m_a*m_c) * <span class="number">2</span> + (m_b*m_c) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (m_a*m_b*m_c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同类之间无私处</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeCube</span><span class="params">(Cube &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_a == another.m_a &amp;&amp;</span><br><span class="line">            m_b == another.<span class="built_in">getB</span>() &amp;&amp;</span><br><span class="line">            m_c == another.<span class="built_in">getC</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judgeCube</span><span class="params">(Cube &amp;c1, Cube &amp;c2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">getA</span>() == c2.<span class="built_in">getA</span>() &amp;&amp;</span><br><span class="line">        c1.<span class="built_in">getB</span>() == c2.<span class="built_in">getB</span>() &amp;&amp;</span><br><span class="line">        c1.<span class="built_in">getC</span>() == c2.<span class="built_in">getC</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Cube c1;</span><br><span class="line">    c1.<span class="built_in">setABC</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    Cube c2;</span><br><span class="line">    c2.<span class="built_in">setABC</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 的体积是&quot;</span> &lt;&lt; c1.<span class="built_in">getVolume</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1 的面积是&quot;</span> &lt;&lt; c1.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">judgeCube</span>(c1, c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ------ &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">judgeCube</span>(c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例四：求点是否在圆内"><a href="#案例四：求点是否在圆内" class="headerlink" title="案例四：求点是否在圆内"></a>案例四：求点是否在圆内</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x0 = x;</span><br><span class="line">        y0 = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个判断点是否在圆内</span></span><br><span class="line">    <span class="comment">// true 在内部</span></span><br><span class="line">    <span class="comment">// false 在外部</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint</span><span class="params">(Point &amp;p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dd;</span><br><span class="line"></span><br><span class="line">        dd = (p.<span class="built_in">getX</span>() - x0)*(p.<span class="built_in">getX</span>() - x0) + (p.<span class="built_in">getY</span>() - y0)*(p.<span class="built_in">getY</span>() - y0);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dd &gt; m_r*m_r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x0;</span><br><span class="line">    <span class="keyword">int</span> y0;</span><br><span class="line">    <span class="keyword">int</span> m_r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setXY</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    Point p;</span><br><span class="line">    p.<span class="built_in">setXY</span>(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (c.<span class="built_in">judgePoint</span>(p) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;圆的内部&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;圆的外部&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例五-判断两个圆是否相交"><a href="#案例五-判断两个圆是否相交" class="headerlink" title="案例五 判断两个圆是否相交"></a>案例五 判断两个圆是否相交</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两点距离的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">pointDistance</span><span class="params">(Point &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d_x = m_x - another.m_x;</span><br><span class="line">        <span class="keyword">int</span> d_y = m_y - another.m_y;</span><br><span class="line">        <span class="keyword">double</span> dis = <span class="built_in">sqrt</span>(d_x*d_x + d_y*d_y);</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        m_r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        p0.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断圆是否跟我相交</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isIntersection</span><span class="params">(Circle &amp;another)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两个半径之和</span></span><br><span class="line">        <span class="keyword">int</span> rr = m_r + another.m_r;</span><br><span class="line">        <span class="comment">// 两圆心之间距离</span></span><br><span class="line">        <span class="keyword">double</span> dis = p0.<span class="built_in">pointDistance</span>(another.p0);</span><br><span class="line">        <span class="keyword">if</span> (dis &lt;= rr) &#123;</span><br><span class="line">            <span class="comment">// 相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_r;</span><br><span class="line">    Point p0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    Circle c1, c2;</span><br><span class="line">    <span class="keyword">int</span> x, y, r;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的半径&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    c1.<span class="built_in">setR</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的x&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第一个圆的y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; y;</span><br><span class="line">    c1.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的半径&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    c2.<span class="built_in">setR</span>(r);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的x&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入第2个圆的y&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; y;</span><br><span class="line">    c2.<span class="built_in">setXY</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (c1.<span class="built_in">isIntersection</span>(c2) == <span class="literal">true</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相交&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;不相交&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-类中的函数"><a href="#7-类中的函数" class="headerlink" title="7 类中的函数"></a>7 类中的函数</h1><h2 id="7-1-构造函数和析构函数"><a href="#7-1-构造函数和析构函数" class="headerlink" title="7.1 构造函数和析构函数"></a>7.1 构造函数和析构函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// test类的构造函数</span></span><br><span class="line">    <span class="comment">// 在对象被创建的时候，用来初始化对象的函数</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123; <span class="comment">// 无参数的构造函数</span></span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">        name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(name, <span class="string">&quot;zhang3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;  y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    <span class="comment">// 析构函数可以释放一些不必要的东西</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(name);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;free sycc!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">        t1.<span class="built_in">prinT</span>();</span><br><span class="line">        <span class="comment">// 在一个对象临死之前，要自动调用析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Test t1;</span></span><br><span class="line">    <span class="comment">// t1.init(10, 20);</span></span><br><span class="line">    <span class="comment">// (普通类函数定义对象的写法)</span></span><br><span class="line">    <span class="comment">// t1此时是未知的，最好初始化</span></span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">    Test t3;<span class="comment">// 调用类的无参数构造函数</span></span><br><span class="line">    t3.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数可以被重载</span></span><br><span class="line"><span class="comment">// 析构函数不可以被重载，析构函数只有一个</span></span><br></pre></td></tr></table></figure>

<p>构造函数和析构函数都没有返回值,析构函数没有形参</p>
<h2 id="7-2-构造函数的分类"><a href="#7-2-构造函数的分类" class="headerlink" title="7.2 构造函数的分类"></a>7.2 构造函数的分类</h2><h3 id="7-2-1-无参构造函数"><a href="#7-2-1-无参构造函数" class="headerlink" title="7.2.1 无参构造函数"></a>7.2.1 无参构造函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span><span class="comment">// 默认的，无作用</span></span></span><br><span class="line">    <span class="comment">// 默认的无参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示提供一个有参的构造函数</span></span><br><span class="line">    <span class="comment">// 默认的无参 构造函数就不复存在</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的析构函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test t1;<span class="comment">// 调用Test无参构造</span></span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-拷贝构造函数"><a href="#7-2-2-拷贝构造函数" class="headerlink" title="7.2.2 拷贝构造函数"></a>7.2.2 拷贝构造函数</h3><p>即复制构造函数</p>
<p>同一个类的对象在内存中有完全相同的结构，如果作为一个整体进行复制是完全可行的。这个复制过程只需要复制数据成员，而函数成员是共用的（只有一份代码）。在建立对象时可用同一类的另一个对象来初始化该对象，这时所用的构造函数称为复制构造函数。复制构造函数的参数必须是引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;,y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 显示的拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test &amp;)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// 会有一个默认的拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">// =赋值操作符</span></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;</span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">    Test t3 = t1;</span><br><span class="line">    <span class="comment">// 依然是初始化t2的时候调用t3拷贝构造函数</span></span><br><span class="line">    Test t4;</span><br><span class="line">    t4 = t1;</span><br><span class="line">    <span class="comment">// 调用的不是t4的拷贝构造函数，而是t4的赋值操作符函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-3-默认拷贝构造函数"><a href="#7-2-3-默认拷贝构造函数" class="headerlink" title="7.2.3 默认拷贝构造函数"></a>7.2.3 默认拷贝构造函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        m_a = <span class="number">0</span>;</span><br><span class="line">        m_b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">const</span> A&amp; another) &#123;</span><br><span class="line">        m_a = another.m_a;</span><br><span class="line">        m_b = another.m_b;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(const A&amp;...)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类中</span></span><br><span class="line"><span class="comment">//	会有个默认的无参构造函数：</span></span><br><span class="line"><span class="comment">//		当没有任何显示的构造函数（显示的无参，显示有参，显示拷贝构造）的时候，默认无参构造函数就会出现</span></span><br><span class="line"><span class="comment">//	会有默认的拷贝构造:</span></span><br><span class="line"><span class="comment">//		当没有显示的拷贝构造函数，默认的拷贝构造就会出现</span></span><br><span class="line"><span class="comment">//	会有默认的析构函数：</span></span><br><span class="line"><span class="comment">//		当没有显示的析构函数的时候，默认的析构函数就会出现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="function">A <span class="title">a1</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>拷贝构造函数的应用场景</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = <span class="number">0</span>;</span><br><span class="line">        m_y = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(int x,int y)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = x;</span><br><span class="line">        m_y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test &amp;)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;operator=(const Test &amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_x = another.m_x;</span><br><span class="line">        m_y = another.m_y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; m_x &lt;&lt; <span class="string">&quot;  y = &quot;</span> &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_x;</span><br><span class="line">    <span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数调用的顺序，跟构造相反，谁先构造的，谁后析构</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(t1)</span></span>;<span class="comment">// Test t2 = t1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    Test t2;</span><br><span class="line">    t2 = t1;<span class="comment">// =操作符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Test t)</span> </span>&#123; <span class="comment">// Test t = t1;Test t的拷贝构造函数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    t.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test3 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="built_in">func</span>(t1);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test3 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function">Test <span class="title">temp</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    temp.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;<span class="comment">// 匿名的对象 = temp(构造)</span></span><br><span class="line"><span class="comment">// 一次析构</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test4 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">func2</span>();<span class="comment">// 返回一个匿名对象</span></span><br><span class="line">    <span class="comment">// 当一个函数返回一个匿名对象的时候，</span></span><br><span class="line">    <span class="comment">// 函数外部没有任何变量去接收它</span></span><br><span class="line">    <span class="comment">// 这个匿名对象将不会再被使用，</span></span><br><span class="line">    <span class="comment">// 编译器会直接将这个匿名对象回收掉，</span></span><br><span class="line">    <span class="comment">// 而不是等待整个函数执行完毕再回收</span></span><br><span class="line">    <span class="comment">// 故此处有两次析构</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test4 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test5 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t1 = <span class="built_in">func2</span>();</span><br><span class="line">    <span class="comment">// 不会触发t1的拷贝构造，而是将匿名对象转正t1</span></span><br><span class="line">    <span class="comment">// 把这个匿名对象起了名字叫做t1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test5 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test6 begin...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t1;<span class="comment">// t1已经被初始化了</span></span><br><span class="line">    t1 = <span class="built_in">func2</span>();<span class="comment">//不会被转正</span></span><br><span class="line">    <span class="comment">// 仍然是匿名对象，t1会调用等号操作符</span></span><br><span class="line">    <span class="comment">// t1.operator=匿名对象</span></span><br><span class="line">    <span class="comment">// 编译器会立刻回收匿名对象</span></span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test6 end...&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="comment">//test2();</span></span><br><span class="line">    <span class="comment">//test3();</span></span><br><span class="line">    <span class="comment">//test4();</span></span><br><span class="line">    <span class="comment">//test5();</span></span><br><span class="line">    <span class="built_in">test6</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-深拷贝和浅拷贝"><a href="#7-3-深拷贝和浅拷贝" class="headerlink" title="7.3 深拷贝和浅拷贝"></a>7.3 深拷贝和浅拷贝</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Teacher</span>(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* name) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Teacher(int,char*)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_id = id;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">        m_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; m_id &lt;&lt; <span class="string">&quot;,name = &quot;</span> &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示的提供一个拷贝构造函数，来完成深拷贝动作</span></span><br><span class="line">    <span class="built_in">Teacher</span>(<span class="keyword">const</span> Teacher&amp; another) &#123;</span><br><span class="line">        m_id = another.m_id;</span><br><span class="line">        <span class="comment">// 深拷贝动作  </span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.m_name);</span><br><span class="line">        m_name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);<span class="comment">// 一定要释放，且释放一次</span></span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, another.m_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Teacher</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Teacher()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (m_name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(m_name);</span><br><span class="line">            m_name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_id;</span><br><span class="line">    <span class="keyword">char</span>* m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">(t1)</span></span>;<span class="comment">// t2的默认拷贝构造</span></span><br><span class="line">    t2.<span class="built_in">prinT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-4-构造函数的参数列表"><a href="#7-4-构造函数的参数列表" class="headerlink" title="7.4 构造函数的参数列表"></a>7.4 构造函数的参数列表</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的初始化列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(A &amp;a1,A &amp;a2,<span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(A&amp;,A&amp;,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造对象成员的顺序跟初始化列表的顺序无关</span></span><br><span class="line">    <span class="comment">// 而是与对象的定义顺序有关</span></span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(int,int,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        m_a1.<span class="built_in">printA</span>();</span><br><span class="line">        m_a2.<span class="built_in">printA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    A m_a1;</span><br><span class="line">    A m_a2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(10), a2(100);</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a1, a2, <span class="number">1000</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">300</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的初始化列表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(A&amp;a1, A&amp;a2, <span class="keyword">int</span> b) :<span class="built_in">m_a1</span>(a1),<span class="built_in">m_a2</span>(a2)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B(A&amp;,A&amp;,int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        m_a1.<span class="built_in">printA</span>();</span><br><span class="line">        m_a2.<span class="built_in">printA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">    A m_a1;</span><br><span class="line">    A m_a2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1(10), a2(100);</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a1, a2, <span class="number">1000</span>)</span></span>;</span><br><span class="line">    b.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当A的对象是B的一个成员的时候，在初始化对象的时候，无法给B分配空间，因为无法初始化A类对象</p>
<p>初始化列表中的初始化顺序，与声明顺序有关，与前后赋值顺序无关</p>
<p>当类成员中含有一个const对象时，或者是一个引用时，他们也必须要通过成员初始化列表进行初始化，因为这两种对象要在声明后马上初始化，而在构造函数中，做的是对他们的赋值，这样是不被允许的</p>
<h3 id="强化训练"><a href="#强化训练" class="headerlink" title="强化训练"></a>强化训练</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABCD</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ABCD</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">        _b = b;</span><br><span class="line">        _c = c;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ABCD() construct,a:%d,b:%d,c:%d\n&quot;</span>, _a, _b, _c);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">ABCD</span>() &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;~ABCD() construct,a:%d,b:%d,c:%d\n&quot;</span>, _a, _b, _c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _a;</span><br><span class="line">    <span class="keyword">int</span> _b;</span><br><span class="line">    <span class="keyword">int</span> _c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyE</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyE</span>() :<span class="built_in">abcd1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="built_in">abcd2</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), <span class="built_in">m</span>(<span class="number">100</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyD()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyE</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~MyD()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MyE</span>(<span class="keyword">const</span> MyE&amp; obj) :<span class="built_in">abcd1</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="built_in">abcd2</span>(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>), <span class="built_in">m</span>(<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;MyD(const MyD&amp;obj)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ABCD abcd1;</span><br><span class="line">    ABCD abcd2;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">doThing</span><span class="params">(MyE mye1)</span> </span>&#123;<span class="comment">//mye1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;doThing() mye1.abcd1.a:%d\n&quot;</span>, mye1.abcd1.<span class="built_in">getA</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyE myE;</span><br><span class="line">    <span class="built_in">doThing</span>(myE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;run2 start...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">ABCD</span>(<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>);<span class="comment">//临时对象的生命周期</span></span><br><span class="line">    <span class="comment">//ABCD abcd = ABCD(100,200,300);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;run2 end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-5-new和delete"><a href="#7-5-new和delete" class="headerlink" title="7.5 new和delete"></a>7.5 new和delete</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = <span class="number">0</span>;</span><br><span class="line">        m_b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;prinT:&quot;</span> &lt;&lt; m_a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test(int,int)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C语言中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>* array_p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array_p[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, array_p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (array_p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(array_p);</span><br><span class="line">        array_p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test* tp = (Test*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Test));</span><br><span class="line">    tp-&gt;<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(tp);</span><br><span class="line">        tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    *p = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int a(10);等价于a=10</span></span><br><span class="line">    <span class="keyword">int</span>* array_p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array_p[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array_p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (array_p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]array_p;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test* tp = <span class="keyword">new</span> <span class="built_in">Test</span>(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 触发有参构造</span></span><br><span class="line">    tp-&gt;<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="comment">// Test* tp2 = new Test;// 触发无参构造</span></span><br><span class="line">    <span class="comment">// tp2-&gt;prinT();</span></span><br><span class="line">    <span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> tp;</span><br><span class="line">        tp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C语言输出的m_a,m_b为乱码</span></span><br></pre></td></tr></table></figure>

<p>malloc,free是函数，标准库(stdlib.h)。new在堆上初始化一个对象的时候，会触发对象的构造函数，malloc不能；delete触发析构函数而free则不</p>
<h2 id="7-6-静态成员变量和成员函数"><a href="#7-6-静态成员变量和成员函数" class="headerlink" title="7.6 静态成员变量和成员函数"></a>7.6 静态成员变量和成员函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AA</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        m_a = a;</span><br><span class="line">        m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        m_c++;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>&amp; <span class="title">getCC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// static修饰的静态成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_c;</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员变量的初始化，一定要在类的外边</span></span><br><span class="line"><span class="keyword">int</span> AA::m_c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">AA <span class="title">a1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">AA <span class="title">a2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    当m_c为<span class="keyword">public</span>成员变量时</span><br><span class="line">    AA::m_c = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">// a1.m_c = 200相同作用</span></span><br><span class="line">    <span class="comment">// 共用静态区</span></span><br><span class="line">    <span class="comment">// 访问空间中的静态区</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    a1.<span class="built_in">getCC</span>() = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//AA::getCC() = 200相同作用</span></span><br><span class="line">    cout &lt;&lt; a1.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.<span class="built_in">getC</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-1-static练习"><a href="#7-6-1-static练习" class="headerlink" title="7.6.1 static练习"></a>7.6.1 static练习</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Box</span>(<span class="keyword">int</span> l, <span class="keyword">int</span> w) &#123;</span><br><span class="line">        len = l;</span><br><span class="line">        width = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">volume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = len * width * hight;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;高度是&quot;</span> &lt;&lt; hight &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;体积是&quot;</span> &lt;&lt; v&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeHight</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        hight = h;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Box::hight = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">b1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Box <span class="title">b2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    b1.<span class="built_in">volume</span>();</span><br><span class="line">    b2.<span class="built_in">volume</span>();</span><br><span class="line">    Box::<span class="built_in">changeHight</span>(<span class="number">300</span>);</span><br><span class="line">    b1.<span class="built_in">volume</span>();</span><br><span class="line">    b2.<span class="built_in">volume</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-2-static占用的大小"><a href="#7-6-2-static占用的大小" class="headerlink" title="7.6.2 static占用的大小"></a>7.6.2 static占用的大小</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> j;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">// 4</span></span><br><span class="line">&#125;;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> j;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getK</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        k = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S1</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(C1) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(C2) &lt;&lt; endl;</span><br><span class="line">    C2 c1, c2;</span><br><span class="line">    c1.<span class="built_in">getK</span>();<span class="comment">// 返回c1的k</span></span><br><span class="line">    c2.<span class="built_in">getK</span>();<span class="comment">// 返回c2的k</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(S1) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c1:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(S2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有普通成员变量才会占对象空间 </span></span><br></pre></td></tr></table></figure>

<h3 id="7-6-3-强化练习-仓库货物管理"><a href="#7-6-3-强化练习-仓库货物管理" class="headerlink" title="7.6.3 强化练习 仓库货物管理"></a>7.6.3 强化练习 仓库货物管理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Goods</span>() &#123;</span><br><span class="line">        weight = <span class="number">0</span>;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建了一个重量为&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Goods</span>(<span class="keyword">int</span> w) &#123;</span><br><span class="line">        <span class="comment">//需要创建一个w的货物，并且仓库加上这个重量</span></span><br><span class="line">        weight = w;</span><br><span class="line">        next = <span class="literal">NULL</span>;</span><br><span class="line">        total_weight += w;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建了一个重量为&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Goods</span>() &#123;</span><br><span class="line">        <span class="comment">//仓库减少这个货物的重量</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;删除了一箱重量是&quot;</span> &lt;&lt; weight &lt;&lt; <span class="string">&quot;的货物&quot;</span> &lt;&lt; endl;</span><br><span class="line">        total_weight -= weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_total_weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total_weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Goods* next;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total_weight;<span class="comment">//仓库总重量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Goods::total_weight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">(Goods* &amp;head,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用二级指针或一级指针引用来改变</span></span><br><span class="line">    <span class="comment">//创建一个货物 重量是w</span></span><br><span class="line">    Goods* new_goods = <span class="keyword">new</span> <span class="built_in">Goods</span>(w);</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        head = new_goods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        new_goods-&gt;next = head;</span><br><span class="line">        head = new_goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">(Goods*&amp; head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;仓库中已经没有货物了。。&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Goods* temp = head;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;saled.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice = <span class="number">0</span>;</span><br><span class="line">    Goods* head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1 进货&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2 出货&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;0 退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; choice;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (choice) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">//进货</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入要创建货物的重量&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; w;</span><br><span class="line">            <span class="built_in">buy</span>(head, w);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="comment">//出货</span></span><br><span class="line">            <span class="built_in">sale</span>(head);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="comment">//退出</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;当前仓库的总重量是&quot;</span> &lt;&lt; Goods::<span class="built_in">get_total_weight</span>() &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-7-this指针"><a href="#7-7-this指针" class="headerlink" title="7.7 this指针"></a>7.7 this指针</h2><h3 id="7-7-1-如何区分变量属于哪个对象"><a href="#7-7-1-如何区分变量属于哪个对象" class="headerlink" title="7.7.1 如何区分变量属于哪个对象"></a>7.7.1 如何区分变量属于哪个对象</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        mI = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getI</span><span class="params">(Test* <span class="keyword">this</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this就是指向调用该成员函数方法的对象地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;mI;</span><br><span class="line">        <span class="comment">//return mI;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> mI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mI;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test_init</span><span class="params">(Test* pthis, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    pthis-&gt;mI = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getI</span><span class="params">(struct Test* pthis)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pthis-&gt;mI;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">//Test(&amp;t1,10)</span></span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    t1.<span class="built_in">getI</span>();<span class="comment">//getI(&amp;t1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-7-2-this指针"><a href="#7-7-2-this指针" class="headerlink" title="7.7.2 this指针"></a>7.7.2 this指针</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_k = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getK</span><span class="params">()</span><span class="keyword">const</span> </span>&#123;<span class="comment">// 成员函数尾部出现const,修饰this指针</span></span><br><span class="line">        <span class="comment">// 此时类型为const Test const*</span></span><br><span class="line">        <span class="comment">// this-&gt;m_k = 100;(√)</span></span><br><span class="line">        <span class="comment">// this指针不是const Test* int型</span></span><br><span class="line">        <span class="comment">// this++;(×)</span></span><br><span class="line">        <span class="comment">// this指针是一个常指针，Test const*</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_k;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">// Test(&amp;t1,10)</span></span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;<span class="comment">// Test(&amp;t1,20)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-8-全局函数和成员函数"><a href="#7-8-全局函数和成员函数" class="headerlink" title="7.8 全局函数和成员函数"></a>7.8 全局函数和成员函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prinT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="function">Test <span class="title">TestAdd</span><span class="params">(Test&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="function">Test <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// +=方法</span></span><br><span class="line">    <span class="function">Test&amp; <span class="title">TestAdd2</span><span class="params">(Test&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += another.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += another.b;</span><br><span class="line">        <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 如果想返回一个对象本身，在成员方法中，用*this返回</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">// 1 在全局提供一个两个Test相加的函数</span></span><br><span class="line"><span class="function">Test <span class="title">TestAdd</span><span class="params">(Test&amp; t1, Test&amp; t2)</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">temp</span><span class="params">(t1.getA() + t2.getA(), t1.getB() + t2.getB())</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line">    <span class="comment">// Test t3 = TestAdd(t1, t2);</span></span><br><span class="line">    Test t3 = t1.<span class="built_in">TestAdd</span>(t2);</span><br><span class="line">    t3.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="comment">// ((t1+=t2)+=t2)+=t2</span></span><br><span class="line">    <span class="comment">// 如果想对一个对象连续调用成员方法，每次都会改变对象本身，成员方法需要返回引用</span></span><br><span class="line">    t1.<span class="built_in">TestAdd2</span>(t2).<span class="built_in">TestAdd2</span>(t2);</span><br><span class="line">    t1.<span class="built_in">prinT</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回对象本身</span></span><br></pre></td></tr></table></figure>

<h2 id="7-9-自定义的数组类"><a href="#7-9-自定义的数组类" class="headerlink" title="7.9 自定义的数组类"></a>7.9 自定义的数组类</h2><p>代码如下：<br> MyArray.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyArray</span>();</span><br><span class="line">    <span class="built_in">MyArray</span>(<span class="keyword">int</span> len);</span><br><span class="line">    <span class="built_in">MyArray</span>(<span class="keyword">const</span> MyArray&amp; another);</span><br><span class="line">    ~<span class="built_in">MyArray</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span>* space;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>MyArray.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyArray::<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;MyArray()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;space = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyArray::<span class="built_in">MyArray</span>(<span class="keyword">int</span> len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = len;</span><br><span class="line">        <span class="comment">//给space开辟空间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray(int len)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyArray::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray&amp; another) &#123;</span><br><span class="line">    <span class="keyword">if</span> (another.len &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len + another.len;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;len; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;space[i] = another.space[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray::MyArray(const MyArray&amp; another)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MyArray::<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;space != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;space;</span><br><span class="line">        <span class="keyword">this</span>-&gt;space = <span class="literal">NULL</span>;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyArray::~MyArray()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyArray::setData</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;space != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;space[index] = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyArray::getData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;space[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyArray::getLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyArray <span class="title">array1</span><span class="params">(<span class="number">10</span>)</span></span>;<span class="comment">// 开辟10元素的数组</span></span><br><span class="line">    <span class="comment">// 赋值操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        array1.<span class="built_in">setData</span>(i, i + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; array1.<span class="built_in">getData</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    MyArray array2 = array1;</span><br><span class="line">    <span class="comment">/*MyArray array3;</span></span><br><span class="line"><span class="comment">	array3 = array1;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-10-友元"><a href="#7-10-友元" class="headerlink" title="7.10 友元"></a>7.10 友元</h2><h3 id="7-10-1-友元函数"><a href="#7-10-1-友元函数" class="headerlink" title="7.10.1 友元函数"></a>7.10.1 友元函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PointManager</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明全局函数PointDistance是我类Point类的一个友元函数</span></span><br><span class="line">    <span class="comment">//friend double PointDistance(Point&amp; p1, Point&amp; p2);</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">double</span> <span class="title">PointManager::PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span></span>;</span><br><span class="line">    <span class="built_in">Point</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">int</span> dd_x = p1.x - p2.x;</span><br><span class="line">    <span class="keyword">int</span> dd_y = p1.y - p2.y;</span><br><span class="line">    dis = <span class="built_in">sqrt</span>(dd_x * dd_x + dd_y * dd_y);</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PointManager::PointDistance</span><span class="params">(Point&amp; p1, Point&amp; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dis;</span><br><span class="line">    <span class="keyword">int</span> dd_x = p1.x - p2.x;</span><br><span class="line">    <span class="keyword">int</span> dd_y = p1.y - p2.y;</span><br><span class="line">    dis = <span class="built_in">sqrt</span>(dd_x * dd_x + dd_y * dd_y);</span><br><span class="line">    <span class="keyword">return</span> dis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p2</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; PointDistance(p1, p2) &lt;&lt; endl;</span></span><br><span class="line">    PointManager pm;</span><br><span class="line">    cout &lt;&lt; pm.<span class="built_in">PointDistance</span>(p1, p2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>友元函数提高了程序的运行效率（减少了类型检查和安全性检查（需要时间开销），破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员</p>
</blockquote>
<h3 id="7-10-2-友元类"><a href="#7-10-2-友元类" class="headerlink" title="7.10.2 友元类"></a>7.10.2 友元类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明一个友元类B</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">A <span class="title">objA</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">        cout &lt;&lt; objA.a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">B <span class="title">bObj</span><span class="params">(<span class="number">200</span>)</span></span>;</span><br><span class="line">    bObj.<span class="built_in">printB</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>友元关系不能被继承。友元关系是单向的，不具有交换性。友元关系不具有传递性</p>
<h1 id="8-操作符重载"><a href="#8-操作符重载" class="headerlink" title="8 操作符重载"></a>8 操作符重载</h1><h2 id="8-1-加法运算符"><a href="#8-1-加法运算符" class="headerlink" title="8.1 加法运算符"></a>8.1 加法运算符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; c1, Complex&amp; c2)</span></span>;</span><br><span class="line">    <span class="comment">//friend Complex operator + (Complex&amp; c1, Complex&amp; c2);</span></span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; another)</span> </span>&#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Complex <span class="keyword">operator</span>+(Complex&amp; another) &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Complex <span class="title">complexAdd</span><span class="params">(Complex&amp; c1, Complex&amp; c2)</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a + c2.a, c1.b + c2.b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作符重载写在全局</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">Complex <span class="keyword">operator</span> + (Complex &amp; c1, Complex &amp; c2) &#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a + c2.a, c1.b + c2.b)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    c2.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="comment">//Complex c3 = complexAdd(c1, c2);</span></span><br><span class="line">    <span class="comment">//Complex c3 = c1.complexAdd(c2);</span></span><br><span class="line">    <span class="comment">//Complex c3 = c1 + c2;</span></span><br><span class="line">        <span class="comment">//Complex c3 = operator+(c1, c2);</span></span><br><span class="line">        Complex c3 = c1.<span class="keyword">operator</span>+(c2);</span><br><span class="line">    c3.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-2-双目运算符"><a href="#8-2-双目运算符" class="headerlink" title="8.2 双目运算符"></a>8.2 双目运算符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//friend Complex&amp; operator+=(Complex&amp; c1,Complex&amp; c2);</span></span><br><span class="line">    <span class="keyword">friend</span> Complex&amp; <span class="keyword">operator</span>-=(Complex&amp; c1, Complex&amp; c2);</span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>+=(Complex&amp; another) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a += another.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b += another.b;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>+=(Complex&amp; c1, Complex&amp; c2) &#123;</span><br><span class="line">    c1.a -= c2.a;</span><br><span class="line">    c1.b -= c2.b;</span><br><span class="line">    <span class="keyword">return</span> c1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Complex <span class="title">c2</span><span class="params">(<span class="number">2</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">    (c1 += c2) += c2;<span class="comment">//c1.operator+=(c2).operator(c2)  </span></span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    c2.<span class="built_in">printComplex</span>();</span><br><span class="line">    c1 -= c2;</span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-3-单目运算符"><a href="#8-3-单目运算符" class="headerlink" title="8.3 单目运算符"></a>8.3 单目运算符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//friend Complex&amp; operator++(Complex&amp; c);</span></span><br><span class="line">    <span class="comment">//friend const Complex operator++(Complex&amp;c1,int);</span></span><br><span class="line"></span><br><span class="line">    Complex&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Complex <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        <span class="comment">//亚元：区分两个函数</span></span><br><span class="line">        <span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a, <span class="keyword">this</span>-&gt;b)</span></span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a++;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b++;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//重载的是前++运算符</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>++(Complex&amp; c) &#123;</span><br><span class="line">    c.a++;</span><br><span class="line">    c.b++;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//重载的是后++运算符</span></span><br><span class="line"><span class="comment">//用const修饰表示不能连加，值不能改变</span></span><br><span class="line"><span class="comment">//用占位参数来表示前++和后++的区别</span></span><br><span class="line"><span class="keyword">const</span> Complex <span class="keyword">operator</span>++(Complex&amp; c1, <span class="keyword">int</span>) &#123;</span><br><span class="line">    <span class="function">Complex <span class="title">temp</span><span class="params">(c1.a, c1.b)</span></span>;</span><br><span class="line">    c1.a++;</span><br><span class="line">    c1.b++;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="comment">//++++c1;</span></span><br><span class="line">    c1++;</span><br><span class="line">    <span class="comment">//后++普通情况不能累加</span></span><br><span class="line">    c1.<span class="built_in">printComplex</span>();</span><br><span class="line">    <span class="comment">//++++c1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-4-左移右移操作符重载"><a href="#8-4-左移右移操作符重载" class="headerlink" title="8.4 左移右移操作符重载"></a>8.4 左移右移操作符重载</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printComplex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Complex&amp; c);</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c);</span><br><span class="line">    <span class="comment">//&lt;&lt;操作符只能写在全局，不能够写在成员方法中，否则调用的顺序会变反  c1&lt;&lt;cout;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os)<span class="comment">//c1.operator&lt;&lt;(cout)&#123;</span></span><br><span class="line">        os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="string">&quot;i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//实数</span></span><br><span class="line">    <span class="keyword">int</span> b;<span class="comment">//虚数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, Complex&amp; c) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; c.a &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; c.b &lt;&lt; <span class="string">&quot;,)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; c) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a:&quot;</span>;</span><br><span class="line">    is &gt;&gt; c.a;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b:&quot;</span>;</span><br><span class="line">    is &gt;&gt; c.b;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">c1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    cin &gt;&gt; c1;<span class="comment">//operator&gt;&gt;(cin,c1)</span></span><br><span class="line">    cout &lt;&lt; c1;</span><br><span class="line">    <span class="comment">//c1&lt;&lt;cout;</span></span><br><span class="line">    <span class="comment">//cout.operator&lt;&lt;(c1);</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; c1 &lt;&lt; &quot; &quot; &lt;&lt; c1 &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-5-等号操作符重载"><a href="#8-5-等号操作符重载" class="headerlink" title="8.5 等号操作符重载"></a>8.5 等号操作符重载</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id, <span class="keyword">const</span> <span class="keyword">char</span>* name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="comment">//this-&gt;name = name;</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">const</span> Student&amp; another) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = another.id;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, another.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Student&amp; another) &#123;</span><br><span class="line">        <span class="comment">//1 防止自身赋值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123;</span><br><span class="line">            <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 先将自身的额外开辟的空间回收掉</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 执行深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;id = another.id;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, another.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 返回本身</span></span><br><span class="line">        <span class="keyword">return</span>* <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line">            <span class="keyword">this</span>-&gt;name = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;id = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">s1</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Student <span class="title">s2</span><span class="params">(s1)</span></span>;<span class="comment">//拷贝构造</span></span><br><span class="line">    s2 = s1;</span><br><span class="line">    <span class="function">Student <span class="title">s3</span><span class="params">(<span class="number">2</span>, <span class="string">&quot;li4&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//s2 = s3 = s1;//s2 = 赋值操作符</span></span><br><span class="line">    s1.<span class="built_in">printS</span>();</span><br><span class="line">    s2.<span class="built_in">printS</span>();</span><br><span class="line">    s3.<span class="built_in">printS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-6-重载小括号"><a href="#8-6-重载小括号" class="headerlink" title="8.6 重载小括号"></a>8.6 重载小括号</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sqr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sqr</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value * value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> value1, <span class="keyword">int</span> value2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value1 * value2;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Sqr <span class="title">s</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> value = <span class="built_in">s</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//s.operator()(2);</span></span><br><span class="line">    <span class="comment">//将一个对象 当成一个普通函数来调用。</span></span><br><span class="line">        <span class="comment">//称这种对象是仿函数，伪函数，函数对象</span></span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    value = <span class="built_in">s</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-7-重载new和delete操作符"><a href="#8-7-重载new和delete操作符" class="headerlink" title="8.7 重载new和delete操作符"></a>8.7 重载new和delete操作符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载的new操作符 依然会触发对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了new操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span> size) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了new[]操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>* p)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了delete操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>* p) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了delete[]操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//char* array = malloc(sizeof(char) * 80);</span></span><br><span class="line">    <span class="comment">//int* value_p = new int;</span></span><br><span class="line">    A* array_p = <span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//array_p-&gt;operator new[](sizeof(A[10]));</span></span><br><span class="line">    <span class="keyword">delete</span>[]array_p;</span><br><span class="line">    A* ap = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//ap-&gt;operator new(sizeof(A));</span></span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-8-不建议重载-amp-，-操作符"><a href="#8-8-不建议重载-amp-，-操作符" class="headerlink" title="8.8 不建议重载&amp;，|操作符"></a>8.8 不建议重载&amp;，|操作符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> value) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test <span class="keyword">operator</span>+(Test &amp;another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;执行了+操作符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="function">Test <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;value + another.value)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&amp;&amp;(Test another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;执行了&amp;&amp;操作符重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;value &amp;&amp; another.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>||(Test another) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;重载了||操作符&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;value || another.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="function">Test <span class="title">t1</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="comment">//重载&amp;&amp;,并不会发生短路现象</span></span><br><span class="line">    <span class="keyword">if</span> (t1 &amp;&amp; (t1 + t2)) &#123;<span class="comment">//t1.operator&amp;&amp;(t1.operator+(t2))</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为真&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为假&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (t1 || (t1 + t2)) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为真&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;为假&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-9-自定义智能指针"><a href="#8-9-自定义智能指针" class="headerlink" title="8.9 自定义智能指针"></a>8.9 自定义智能指针</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUER_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; <span class="keyword">this</span> -&gt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAutoPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyAutoPtr</span>(<span class="keyword">void</span>* ptr) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ptr = ptr;<span class="comment">//ptr=new A(10)</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">MyAutoPtr</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~MyAutoPtr()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> ptr;</span><br><span class="line">            <span class="keyword">this</span>-&gt;ptr = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    A* <span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A&amp; <span class="keyword">operator</span>*() &#123;</span><br><span class="line">        <span class="keyword">return</span> *ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    A* ap = <span class="keyword">new</span> <span class="built_in">A</span>(<span class="number">10</span>);</span><br><span class="line">    ap-&gt;<span class="built_in">func</span>();</span><br><span class="line">    (*ap).<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">auto_ptr&lt;A&gt; <span class="title">ptr</span><span class="params">(<span class="keyword">new</span> A(<span class="number">10</span>))</span></span>;</span><br><span class="line">    ptr-&gt;<span class="built_in">func</span>();</span><br><span class="line">    (*ptr).<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyAutoPtr <span class="title">my_p</span><span class="params">(<span class="keyword">new</span> A(<span class="number">10</span>))</span></span>;</span><br><span class="line">    my_p-&gt;<span class="built_in">func</span>();<span class="comment">//my_p.ptr-&gt;func()</span></span><br><span class="line">    (*my_p).<span class="built_in">func</span>();<span class="comment">//*ptr.func</span></span><br><span class="line">    <span class="comment">//重载*</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-10-自定义字符串类"><a href="#8-10-自定义字符串类" class="headerlink" title="8.10 自定义字符串类"></a>8.10 自定义字符串类</h2><p>MyString.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str =<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化时候被调用的</span></span><br><span class="line">MyString::<span class="built_in">MyString</span>(<span class="keyword">const</span> MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;len = another.len;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyString::~<span class="built_in">MyString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;str &lt;&lt; <span class="string">&quot;执行了析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>; </span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> &amp; MyString::<span class="keyword">operator</span>[](<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;str[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString &amp;  MyString::<span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;another) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">this</span>-&gt;str = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;len = another.len;</span><br><span class="line">    <span class="keyword">this</span>-&gt;str = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;str, another.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, MyString&amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; s.str;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, MyString &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1 将s之前的字符串释放掉</span></span><br><span class="line">    <span class="keyword">if</span> (s.str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] s.str;</span><br><span class="line">        s.str = <span class="literal">NULL</span>;</span><br><span class="line">        s.len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 通过cin添加新的字符串</span></span><br><span class="line">    <span class="keyword">char</span> temp_str[<span class="number">4096</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    cin &gt;&gt; temp_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(temp_str);</span><br><span class="line">    s.str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(s.str, temp_str);</span><br><span class="line">    s.len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyString MyString::<span class="keyword">operator</span>+(MyString &amp;another)</span><br><span class="line">&#123;</span><br><span class="line">    MyString temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">this</span>-&gt;len + another.len;</span><br><span class="line"></span><br><span class="line">    temp.len = len;</span><br><span class="line"></span><br><span class="line">    temp.str = <span class="keyword">new</span> <span class="keyword">char</span>[len + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(temp.str, <span class="number">0</span>, len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(temp.str, <span class="keyword">this</span>-&gt;str);</span><br><span class="line">    <span class="built_in">strcat</span>(temp.str, another.str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyString.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyString</span>();</span><br><span class="line">    <span class="comment">//MyString(int len); //创建一个长度是len的string对象</span></span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> <span class="keyword">char</span> *str);</span><br><span class="line">    <span class="built_in">MyString</span>(<span class="keyword">const</span> MyString &amp;another);</span><br><span class="line">    ~<span class="built_in">MyString</span>();</span><br><span class="line">    <span class="comment">//重载操作符[]</span></span><br><span class="line">    <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> index);</span><br><span class="line">    <span class="comment">//重载操作符&gt;&gt;</span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is, MyString &amp;s);</span><br><span class="line">    <span class="comment">//重载=操作符</span></span><br><span class="line">    MyString &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyString &amp;another);</span><br><span class="line">    <span class="comment">//重载==操作符</span></span><br><span class="line">    <span class="comment">//重载!=操作符</span></span><br><span class="line">    <span class="comment">//重载+操作符</span></span><br><span class="line">    MyString <span class="keyword">operator</span>+(MyString &amp;another);</span><br><span class="line">    <span class="comment">//重载操作符&lt;&lt;</span></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, MyString&amp;s);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>自定义的字符串类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyString.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">s2</span><span class="params">(<span class="string">&quot;123&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; s1 + s2 &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="function">MyString <span class="title">s1</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">MyString <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line">    MyString s3 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    s1[<span class="number">1</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    s1 = s3;</span><br><span class="line">    cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-继承"><a href="#9-继承" class="headerlink" title="9 继承"></a>9 继承</h1><h2 id="9-1-类和类之间的关系"><a href="#9-1-类和类之间的关系" class="headerlink" title="9.1 类和类之间的关系"></a>9.1 类和类之间的关系</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;funcA&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类B拥有类A的成员变量,B has A,//类B 依赖于类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//耦合度  高内聚  低耦合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类C的成员方法  需要类A的形参，C use A,//类C依赖于类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funC</span><span class="params">(A* a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funC2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//D继承于A 类D如果是继承类A  类D is A.//类D继承于A耦合度很高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funcD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> :</span><span class="keyword">public</span> D &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-2-继承的基本概念"><a href="#9-2-继承的基本概念" class="headerlink" title="9.2 继承的基本概念"></a>9.2 继承的基本概念</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id, string name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; <span class="string">&quot;, name = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个新的学生表，增加score功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student2</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> score) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;id = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; <span class="string">&quot;, name = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;score = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过继承创建一个新的学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3</span> :</span><span class="keyword">public</span> Student &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student3</span>(<span class="keyword">int</span> id, string name, <span class="keyword">int</span> score) :<span class="built_in">Student</span>(id, name) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student::<span class="built_in">printS</span>();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;score = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Student3 <span class="title">s3</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;zhang3&quot;</span>, <span class="number">80</span>)</span></span>;</span><br><span class="line">    s3.<span class="built_in">printS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-继承的方式"><a href="#9-3-继承的方式" class="headerlink" title="9.3 继承的方式"></a>9.3 继承的方式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.只要是父类中的private成员，不管是什么继承方式，儿子都访问不了</span></span><br><span class="line"><span class="comment">//2.如果是public继承，儿子中的访问控制权限保持不变</span></span><br><span class="line"><span class="comment">//3.如果是保护继承，儿子中父亲除了private成员，其余在儿子中都是protected</span></span><br><span class="line"><span class="comment">//4.如果是私有继承，儿子中父亲的除了private成员，其余在儿子中都是private成员</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> pub;<span class="comment">//在类的内部和外部都能访问</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> pro;<span class="comment">//在类的内部都可以访问，在类的外部不可以访问</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> pri;<span class="comment">//在类的内部可以访问，在类的外部不可以访问</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; pub &lt;&lt; endl; <span class="comment">//pub父类的public成员变量，在public继承类的内部,外部都可以访问</span></span><br><span class="line">        cout &lt;&lt; pro &lt;&lt; endl;<span class="comment">//pro 是父类protected成员变量 在public继承类的内部可以访问。外部访问不了 </span></span><br><span class="line">                            <span class="comment">//此时的pro在孙子能够访问，说此时pro不是private成员，而是protected成员</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; pri &lt;&lt; endl; //pri 是父类private成员变量 在public继承类的内部,外部不可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//孙子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubChild</span> :</span> <span class="keyword">public</span> Child</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; pro &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> :</span><span class="keyword">protected</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pub;<span class="comment">//此时pub通过protected继承 能够在类的内部访问。 </span></span><br><span class="line">            <span class="comment">//pub 在类的内部可以访问， 类的外部访问不了， 类的儿子可以访问</span></span><br><span class="line">            <span class="comment">//pub 就是protected成员</span></span><br><span class="line">        pro;<span class="comment">//pro和pub 是一样的性质，pro也是protected成员</span></span><br><span class="line">        <span class="comment">//pri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_child2</span> :</span><span class="keyword">public</span> Child2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pub;</span><br><span class="line">        pro;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child3</span> :</span><span class="keyword">private</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        pub;<span class="comment">//pub 在类的内部可以访问。在类的内部可以访问，类的外部不能访问。</span></span><br><span class="line">            <span class="comment">//pub 在儿子中访问不了，说明pub在Child3中是 私有成员</span></span><br><span class="line">        pro;<span class="comment">//pro 根pub的性质是一样， 也是私有成员。</span></span><br><span class="line">        <span class="comment">//pri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub_Child3</span> :</span><span class="keyword">public</span> Child3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub_fun3</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//pub;</span></span><br><span class="line">        <span class="comment">//pro;</span></span><br><span class="line">        <span class="comment">//都访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三看原则：  </span></span><br><span class="line"><span class="comment">//1 看调用的成员变量是在类的内部还是类的外部</span></span><br><span class="line"><span class="comment">//2 看儿子继承方式，</span></span><br><span class="line"><span class="comment">//3 当前变量在儿子中的变量在父亲中的访问控制权限</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Child c1;</span><br><span class="line">    c1.<span class="built_in">func</span>();</span><br><span class="line">    c1.pub;</span><br><span class="line">    <span class="comment">//c1.pri;</span></span><br><span class="line">    <span class="comment">//Child2 c2;</span></span><br><span class="line">    <span class="comment">//c2.pub;</span></span><br><span class="line">    <span class="comment">//c2.pro;</span></span><br><span class="line">    Child3 c3;</span><br><span class="line">    <span class="comment">//c3.pub;</span></span><br><span class="line">    <span class="comment">//c3.pro;</span></span><br><span class="line">    Child2 c2;</span><br><span class="line">    <span class="comment">//c2.pub;</span></span><br><span class="line">    <span class="comment">//c2.pro;</span></span><br><span class="line">    c1.pub;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承方式的练习</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>	b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;		 //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b;		 <span class="comment">//b此时是保护成员，类的内部可以访问</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c此时是公有成员，类的内部可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">protected</span>	A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;		 //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b;		 <span class="comment">//b 在子类中是protected权限，类的内部可以访问。</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c 子类的protected成员，类的内部可以访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span><span class="keyword">private</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a;       //a是父类的私有成员访问不了</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl; <span class="comment">//b 此时是private成员，类的内部可以访问。</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl; <span class="comment">//c 此时是private成员，类的内部可以访问。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A	aa;</span><br><span class="line">    B	bb;</span><br><span class="line">    C	cc;</span><br><span class="line">    D	dd;</span><br><span class="line">    aa.c = <span class="number">100</span>;			 <span class="comment">//c 是公有，类的外部可以访问。</span></span><br><span class="line">    bb.c = <span class="number">100</span>;			 <span class="comment">//Bpublic 继承与A，保持权限不变，c 是公有，类的外部可以访问</span></span><br><span class="line">    <span class="comment">//cc.c = 100;		 //C protected 继承与A，c 在此类中是protected成员，类的外部不能访问。</span></span><br><span class="line">    <span class="comment">//dd.c = 100;		 //D private 继承与A，c在此类中private成员，类的外部不能访问。</span></span><br><span class="line">    aa.<span class="built_in">set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);	 <span class="comment">//能访问</span></span><br><span class="line">    bb.<span class="built_in">set</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);	 <span class="comment">//能访问</span></span><br><span class="line">    <span class="comment">//cc.set(40, 50, 60);//不能访问</span></span><br><span class="line">    <span class="comment">//dd.set(70, 80, 90);//不能访问</span></span><br><span class="line">    bb.<span class="built_in">print</span>();			 <span class="comment">//print 是定义在B类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    cc.<span class="built_in">print</span>();			 <span class="comment">//print 是定义在C类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    dd.<span class="built_in">print</span>();	 	     <span class="comment">//print 是定义在D类 public成员函数，在类的外部可以访问。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-4-继承中的构造和析构"><a href="#9-4-继承中的构造和析构" class="headerlink" title="9.4 继承中的构造和析构"></a>9.4 继承中的构造和析构</h2><h3 id="9-4-1-类的兼容性和赋值原则"><a href="#9-4-1-类的兼容性和赋值原则" class="headerlink" title="9.4.1 类的兼容性和赋值原则"></a>9.4.1 类的兼容性和赋值原则</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	子类对象可以当作父类对象使用。</span></span><br><span class="line"><span class="comment">	子类对象可以直接赋值给父类对象。</span></span><br><span class="line"><span class="comment">	子类对象可以直接初始化父类对象.</span></span><br><span class="line"><span class="comment">	***父类指针可以直接指向子类对象***</span></span><br><span class="line"><span class="comment">	父类引用可以直接引用子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(Parent* pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pp-&gt;<span class="built_in">printP</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Parent p;</span></span><br><span class="line">    <span class="comment">//Child c = p; //p对象填充不满c对象空间，</span></span><br><span class="line">    <span class="comment">//Child c;</span></span><br><span class="line">    <span class="comment">//Parent p = c;//c 对象所占用的内存空间 &gt;= p对象占用空间 能够填充满p对象所需要空间。</span></span><br><span class="line">    <span class="comment">//p = c;</span></span><br><span class="line">    <span class="comment">//c.printP(); //c 能够当做父类 p 来使用。</span></span><br><span class="line">    Parent* pp = <span class="literal">NULL</span>;<span class="comment">//父类指针</span></span><br><span class="line">    Child* cp = <span class="literal">NULL</span>;<span class="comment">//子类指针</span></span><br><span class="line">    Parent p;<span class="comment">//父类对象</span></span><br><span class="line">    Child c; <span class="comment">//子类对象</span></span><br><span class="line">    pp = &amp;c;<span class="comment">//c 内存布局能够满足父类指针的全部需求， 可以用一个儿子的对象地址给父类指针赋值。</span></span><br><span class="line">    <span class="built_in">myPrint</span>(&amp;p);</span><br><span class="line">    <span class="built_in">myPrint</span>(&amp;c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-4-2-子类的构造和析构"><a href="#9-4-2-子类的构造和析构" class="headerlink" title="9.4.2 子类的构造和析构"></a>9.4.2 子类的构造和析构</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//在调用子类的构造函数时候，一定会调用父类的构造函数</span></span><br><span class="line">    <span class="comment">//父类先构造，子类后构造</span></span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :<span class="built_in">Parent</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child(int, int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Child()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">printC</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-5-子类和父类的成员重名"><a href="#9-5-子类和父类的成员重名" class="headerlink" title="9.5 子类和父类的成员重名"></a>9.5 子类和父类的成员重名</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> p_a, <span class="keyword">int</span> c_a) :<span class="built_in">Parent</span>(p_a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = c_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; Parent::a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;<span class="comment">//child&#x27;s a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-6-继承中的static"><a href="#9-6-继承中的static" class="headerlink" title="9.6 继承中的static"></a>9.6 继承中的static</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A::a = <span class="number">100</span>;<span class="comment">//静态成员变量 初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a1;</span><br><span class="line">    A a2;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    A::a = <span class="number">300</span>;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    B b1;</span><br><span class="line">    B b2;</span><br><span class="line">    A::a = <span class="number">400</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b2.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a1.a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a2.a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-7-多继承"><a href="#9-7-多继承" class="headerlink" title="9.7 多继承"></a>9.7 多继承</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//家具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> m; <span class="comment">//材质</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将父亲类继承爷爷类,改成虚继承,防止儿子在多继承我的时候，出现爷爷中的变量会拷贝多份</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bed</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;在床上睡觉&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sofa</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;在沙发上休息&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//沙发床</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SofaBed</span> :</span><span class="keyword">public</span> Bed, <span class="keyword">public</span> Sofa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SleepAndSit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sleep</span>();</span><br><span class="line">        <span class="built_in">sit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Bed b;</span><br><span class="line">    b.<span class="built_in">sleep</span>();</span><br><span class="line">    Sofa s;</span><br><span class="line">    s.<span class="built_in">sit</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; ------ &quot;</span> &lt;&lt; endl;</span><br><span class="line">    SofaBed sb;</span><br><span class="line">    sb.<span class="built_in">SleepAndSit</span>();</span><br><span class="line">    sb.m = <span class="number">100</span>;<span class="comment">//此时只有一个m</span></span><br><span class="line">    <span class="comment">//sb.Bed::m = 100;</span></span><br><span class="line">    <span class="comment">//sb.Sofa::m = 200;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-多态"><a href="#10-多态" class="headerlink" title="10 多态"></a>10 多态</h1><h2 id="10-1-什么是多态"><a href="#10-1-什么是多态" class="headerlink" title="10.1 什么是多态"></a>10.1 什么是多态</h2><h3 id="10-1-1-为什么要有多态"><a href="#10-1-1-为什么要有多态" class="headerlink" title="10.1.1 为什么要有多态"></a>10.1.1 为什么要有多态</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//岳不群</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yuebuqun</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Yuebuqun</span>(string kongfu)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;kongfu = kongfu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span> <span class="comment">//标识修饰一个成员方法是一个虚函数。</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;岳不群&quot;</span> &lt;&lt; <span class="string">&quot;使出了&quot;</span> &lt;&lt; kongfu &lt;&lt; <span class="string">&quot;打人&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string kongfu;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//林平之继承了岳不群</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linpingzhi</span> :</span><span class="keyword">public</span> Yuebuqun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Linpingzhi</span>(string kongfu) :<span class="built_in">Yuebuqun</span>(kongfu)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果说父类中有一个虚函数是fight（），子类如果去重写这个虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;林平之&quot;</span> &lt;&lt; <span class="string">&quot;使出了&quot;</span> &lt;&lt; kongfu &lt;&lt; <span class="string">&quot;打人&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linghuchong</span> :</span><span class="keyword">public</span> Yuebuqun</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Linghuchong</span>(string kongfu) :<span class="built_in">Yuebuqun</span>(kongfu)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">fight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;令狐冲 &quot;</span> &lt;&lt; <span class="string">&quot;使用了&quot;</span> &lt;&lt; kongfu &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在全局提供一个打斗的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fightPeople</span><span class="params">(Yuebuqun* hero)</span><span class="comment">//Yuebuqun *hero = xiaopp;  Yuebuqun *hero = xiaoyy;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;调用打人的方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">    hero-&gt;<span class="built_in">fight</span>();<span class="comment">//希望传递进来的如果是子类，调用子类的fight</span></span><br><span class="line">                  <span class="comment">//如果传递进来的是父类， 调用父类的fight</span></span><br><span class="line">                    <span class="comment">//这种行为就是 多态行为。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态发生的三个必要条件：</span></span><br><span class="line"><span class="comment">//1. 要有继承。</span></span><br><span class="line"><span class="comment">//2. 要有虚函数重写。</span></span><br><span class="line"><span class="comment">//3. 父类指针或引用指向子类对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Yuebuqun* xiaoyy = <span class="keyword">new</span> <span class="built_in">Yuebuqun</span>(<span class="string">&quot;葵花宝典&quot;</span>);</span><br><span class="line">    <span class="comment">//xiaoyy-&gt;fight();</span></span><br><span class="line">    Linpingzhi* xiaopp = <span class="keyword">new</span> <span class="built_in">Linpingzhi</span>(<span class="string">&quot;辟邪剑谱&quot;</span>);</span><br><span class="line">    <span class="comment">//xiaopp-&gt;fight();</span></span><br><span class="line">    Linghuchong* xiaoll = <span class="keyword">new</span> <span class="built_in">Linghuchong</span>(<span class="string">&quot;独孤九剑&quot;</span>);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaoyy);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaopp);</span><br><span class="line">    <span class="built_in">fightPeople</span>(xiaoll);</span><br><span class="line">    <span class="comment">//编译器默认做了一个安全的处理。 编译器认为不管传递的是子类对象还是父类对象</span></span><br><span class="line">    <span class="comment">//如果统一执行父类d方法 那么是一定可以被成功执行。</span></span><br><span class="line">    <span class="keyword">delete</span> xiaoyy;</span><br><span class="line">    <span class="keyword">delete</span> xiaopp;</span><br><span class="line">    <span class="keyword">delete</span> xiaoll;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-1-2-多态案例及多态的意义"><a href="#10-1-2-多态案例及多态的意义" class="headerlink" title="10.1.2 多态案例及多态的意义"></a>10.1.2 多态案例及多态的意义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//英雄类</span></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdvHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1001</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪兽类</span></span><br><span class="line"><span class="comment">//1999</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//战斗方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">playerFight</span><span class="params">(Hero* hp, Monster* mp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//多态对于编译器来讲的，也是一个动态联编，也是一个迟邦定</span></span><br><span class="line">    <span class="keyword">if</span> (hp-&gt;<span class="built_in">getAd</span>() &gt; mp-&gt;<span class="built_in">getAd</span>()) &#123; <span class="comment">//hp-&gt;getAd 发生了多态</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;英雄胜利， 怪兽被打死&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;英雄挂了，怪兽赢了&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2020年</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BugHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;调用了bugHero的方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">66666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hero h;</span><br><span class="line">    Monster m;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;h, &amp;m);</span><br><span class="line">    AdvHero advH;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;advH, &amp;m);</span><br><span class="line">    BugHero bH;</span><br><span class="line">    <span class="built_in">playerFight</span>(&amp;bH, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123; <span class="comment">//迟邦定</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &gt; 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a &lt;= 10&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-2-虚析构函数"><a href="#10-2-虚析构函数" class="headerlink" title="10.2 虚析构函数"></a>10.2 虚析构函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECUE_NO_WARNING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;p, <span class="string">&quot;A String..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;A: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~A()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[]<span class="keyword">this</span>-&gt;p;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() <span class="comment">//此刻会触发A()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="built_in">memset</span>(<span class="keyword">this</span>-&gt;p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;p, <span class="string">&quot;B String..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;B: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">B</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~B()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;p;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(A* ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ap-&gt;<span class="built_in">print</span>();<span class="comment">//在此发生多态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteFunc</span><span class="params">(A* ap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> ap; <span class="comment">//此刻ap-&gt;~B() //~B() ---&gt; ~A()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//A *ap = new A;</span></span><br><span class="line">    <span class="comment">//func(ap);</span></span><br><span class="line">    B* bp = <span class="keyword">new</span> B;</span><br><span class="line">    <span class="built_in">func</span>(bp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">deleteFunc</span>(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    B bObj;</span><br><span class="line">    <span class="comment">//bObj.~B();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-3-重载、重写、重定义"><a href="#10-3-重载、重写、重定义" class="headerlink" title="10.3 重载、重写、重定义"></a>10.3 重载、重写、重定义</h2><p>重载一定是同一个作用域下。重定义是发生在两个不同的类中，一个父类，一个子类</p>
<ul>
<li>普通函数重定义：父类的普通成员函数被子类重写</li>
<li>虚函数重写：如果父类的虚函数，被子类重写，就是虚函数重写，这个函数会发生多态</li>
</ul>
<h2 id="10-4-多态的实现原理"><a href="#10-4-多态的实现原理" class="headerlink" title="10.4 多态的实现原理"></a>10.4 多态的实现原理</h2><h3 id="10-4-1-多态的原理"><a href="#10-4-1-多态的原理" class="headerlink" title="10.4.1 多态的原理"></a>10.4.1 多态的原理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func(int ,int ,int )....&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :<span class="built_in">Parent</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child: func(int)...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child :func(int ,int )...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Child ::func(int ,int ,int )...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//Parent *pp = new Parent(10);</span></span><br><span class="line">    <span class="comment">//Parent *cp = new Child(100, 200);</span></span><br><span class="line">    Parent* pp = <span class="keyword">new</span> <span class="built_in">Child</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">    pp-&gt;<span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//Parent ？ Child</span></span><br><span class="line">                    <span class="comment">//如果调用一个普通函数，编译器根本就不会查找虚函数表。</span></span><br><span class="line">                    <span class="comment">//只有你调用的函数，是虚函数的时候，才会去查找虚函数表</span></span><br><span class="line">    pp-&gt;<span class="built_in">func</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-4-2-验证vptr指针的存在"><a href="#10-4-2-验证vptr指针的存在" class="headerlink" title="10.4.2 验证vptr指针的存在"></a>10.4.2 验证vptr指针的存在</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent2::func()..&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Parent p1;</span><br><span class="line">    Parent2 p2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(p1) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p1) &lt;&lt; endl;<span class="comment">//多出来的4个字节就是vptr指针所占用的空间。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(p2) &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-4-3-vptr指针分布初始化"><a href="#10-4-3-vptr指针分布初始化" class="headerlink" title="10.4.3 vptr指针分布初始化"></a>10.4.3 vptr指针分布初始化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-4-4-父类指针和子类指针的步长"><a href="#10-4-4-父类指针和子类指针的步长" class="headerlink" title="10.4.4 父类指针和子类指针的步长"></a>10.4.4 父类指针和子类指针的步长</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="10-5-纯虚函数和抽象类"><a href="#10-5-纯虚函数和抽象类" class="headerlink" title="10.5 纯虚函数和抽象类"></a>10.5 纯虚函数和抽象类</h2><h3 id="10-5-1-基本概念"><a href="#10-5-1-基本概念" class="headerlink" title="10.5.1 基本概念"></a>10.5.1 基本概念</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-5-2-大哥看场子"><a href="#10-5-2-大哥看场子" class="headerlink" title="10.5.2 大哥看场子"></a>10.5.2 大哥看场子</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="10-5-3-纯虚函数和多继承"><a href="#10-5-3-纯虚函数和多继承" class="headerlink" title="10.5.3 纯虚函数和多继承"></a>10.5.3 纯虚函数和多继承</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-6-面对抽象类编程案例"><a href="#10-6-面对抽象类编程案例" class="headerlink" title="10.6 面对抽象类编程案例"></a>10.6 面对抽象类编程案例</h2><h3 id="案例一-动物园"><a href="#案例一-动物园" class="headerlink" title="案例一 动物园"></a>案例一 动物园</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="案例二-电脑组装"><a href="#案例二-电脑组装" class="headerlink" title="案例二 电脑组装"></a>案例二 电脑组装</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>语法基础</title>
    <url>/undefined/36d3508b/</url>
    <content><![CDATA[<blockquote>
<p>acwing语法基础课笔记，结合柳婼的pdf</p>
</blockquote>
<span id="more"></span>

<h1 id="1-变量、输入输出、表达式与顺序语句"><a href="#1-变量、输入输出、表达式与顺序语句" class="headerlink" title="1 变量、输入输出、表达式与顺序语句"></a>1 变量、输入输出、表达式与顺序语句</h1><h2 id="1-1-常用头文件"><a href="#1-1-常用头文件" class="headerlink" title="1.1 常用头文件"></a>1.1 常用头文件</h2><ul>
<li><code>iostream</code>包括<code>cin</code>、<code>cout</code>、<code>scanf</code>、<code>printf</code></li>
<li><code>cstdio</code>包括<code>scanf</code>、<code>printf</code></li>
<li><code>cmath</code>，相当于C语言里面的<code>math.h</code></li>
<li><code>cctype</code>，相当于C语言里面的<code>ctype.h</code></li>
<li><code>cstring</code>，相当于C语言里面的<code>string.h</code></li>
<li>万能头文件<code>bits/stdc++.h</code></li>
</ul>
<h2 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><ul>
<li>bool</li>
<li>int 2B</li>
<li>long 4B</li>
<li>long long 8B</li>
<li>float 6~7位小数，4B</li>
<li>double 15~16位小数，8B</li>
<li>long double 16B</li>
</ul>
<h2 id="1-3-字符的读入"><a href="#1-3-字符的读入" class="headerlink" title="1.3 字符的读入"></a>1.3 字符的读入</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c%c&quot;</span>, &amp;a, &amp;b);      <span class="comment">// 会把空格读入</span></span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;              <span class="comment">// 会忽略中间的空格（1个或多个）</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-OJ系统的输出格式问题"><a href="#1-4-OJ系统的输出格式问题" class="headerlink" title="1.4 OJ系统的输出格式问题"></a>1.4 OJ系统的输出格式问题</h2><ul>
<li>忽略每一行末尾的空格</li>
<li>忽略输出结果最后的换行符</li>
</ul>
<h2 id="1-5-max数学表达式的理解"><a href="#1-5-max数学表达式的理解" class="headerlink" title="1.5 max数学表达式的理解"></a>1.5 max数学表达式的理解</h2><p>$max=\frac{a+b+\vert a-b\vert}{2}$</p>
<p>因为 “ 短 + 二者之差 = 长 ”</p>
<p>所以有 “ 长 + （ 短 + 二者之差 ）= 长 + 长 = 2 * 长 ”</p>
<h1 id="2-scanf-printf语法及判断语句"><a href="#2-scanf-printf语法及判断语句" class="headerlink" title="2 scanf/printf语法及判断语句"></a>2 scanf/printf语法及判断语句</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);<span class="comment">//代码优化</span></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//代码优化</span></span><br></pre></td></tr></table></figure>

<p>判断浮点数是否为0：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">!x</span><br></pre></td></tr></table></figure>

<h1 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3 循环语句"></a>3 循环语句</h1><h2 id="3-1-输入函数返回值的妙用"><a href="#3-1-输入函数返回值的妙用" class="headerlink" title="3.1 输入函数返回值的妙用"></a>3.1 输入函数返回值的妙用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(cin &gt;&gt; x &amp;&amp; x &gt; <span class="number">0</span>) &#123;...&#125;         <span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">if</span>(cin &gt;&gt; x, x &gt; <span class="number">0</span>) &#123;...&#125;           <span class="comment">// 写法2。与写法1不同的是，这里的if语句不考虑&quot;cin &gt;&gt; x&quot;的返回值。&quot;cin &gt;&gt; x&quot;仅做执行，然后抛弃其返回值，最后对判断x &gt; 0。即等价于&quot;cin &gt;&gt; x; if(x &gt; 0) &#123;...&#125;&quot;，可以节省1行。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) &amp;&amp; x &gt; <span class="number">0</span>) &#123;...&#125;  <span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x), x &gt; <span class="number">0</span>) &#123;...&#125;    <span class="comment">// 写法2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x)) &#123;...&#125;          <span class="comment">// 判断是否非法输入（EOF），用于文件读取</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-逗号运算符"><a href="#3-2-逗号运算符" class="headerlink" title="3.2 逗号运算符"></a>3.2 逗号运算符</h2><p>C++的<code>,</code>运算符对逗号前后的表达式进行运算，然后舍弃前一个表达式的返回值，仅仅返回最后一个表达式的返回值，例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式<span class="number">1</span>, 表达式<span class="number">2</span>, 表达式<span class="number">3</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">表达式<span class="number">1</span>;</span><br><span class="line">表达式<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (表达式<span class="number">3</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure>


<p>节省了2行代码</p>
<h1 id="4-数组"><a href="#4-数组" class="headerlink" title="4 数组"></a>4 数组</h1><h2 id="4-1-浮点数比较问题"><a href="#4-1-浮点数比较问题" class="headerlink" title="4.1 浮点数比较问题"></a>4.1 浮点数比较问题</h2><p>C++中，表达式$\sqrt{3}\times \sqrt{3} == 3$并不成立，由于浮点数精读损失，应该用$\vert\sqrt{3}\times\sqrt{3}-3\vert\leq eps$去判断，eps一般取$10^{−6}$</p>
<h2 id="4-2-高精度运算的数组大小问题"><a href="#4-2-高精度运算的数组大小问题" class="headerlink" title="4.2 高精度运算的数组大小问题"></a>4.2 高精度运算的数组大小问题</h2><p>计算$2^N$时，可用lg2N估算数组长度</p>
<h2 id="4-3-cstring一些函数用法"><a href="#4-3-cstring一些函数用法" class="headerlink" title="4.3 cstring一些函数用法"></a>4.3 cstring一些函数用法</h2><p>memset赋值是按字节赋值，因此只有赋予-1和0时才与预期一致。其最后一个参数的单位是Byte</p>
<p>memset(arr, 0, n * sizeof(int))</p>
<p>memset(arr, -1, n * sizeof(int))</p>
<p>sizeof可不加括号，即可这样使用sizeof a，其返回单位是Byte</p>
<p>memcpy用于拷贝数组，格式为memcpy(dest，src，izeof(src))</p>
<h2 id="4-4-数组初始化的坑"><a href="#4-4-数组初始化的坑" class="headerlink" title="4.4 数组初始化的坑"></a>4.4 数组初始化的坑</h2><p>在函数内定义的数组不会自动初始化为0，都是随机数，例如main函数里。而在函数外定义的数组会自动初始化为0。</p>
<h1 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5 字符串"></a>5 字符串</h1><h2 id="5-1-读取字符串的方法"><a href="#5-1-读取字符串的方法" class="headerlink" title="5.1 读取字符串的方法"></a>5.1 读取字符串的方法</h2><p>C语言方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);    <span class="comment">// 不能读取含空格、换行符的字符串</span></span><br><span class="line"><span class="built_in">gets</span>(s);           <span class="comment">// 能读取含空格的字符串，同时自动去掉换行符\n</span></span><br><span class="line"><span class="built_in">fgets</span>(s, N, stdin);<span class="comment">// 能读取含空格的字符串，但不会去掉换行符\n。【注意】</span></span><br></pre></td></tr></table></figure>

<p>C++方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">string str;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; str;             <span class="comment">// 不能读取含空格、换行符的字符串</span></span><br><span class="line"><span class="built_in">getline</span>(cin, str);       <span class="comment">// 能读取含空格的字符串，同时自动去掉换行符\n</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-字符串操作"><a href="#5-2-字符串操作" class="headerlink" title="5.2 字符串操作"></a>5.2 字符串操作</h2><p>C语言方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span>      <span class="comment">// 或&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[N], b[N];</span><br><span class="line"><span class="built_in">strlen</span>(a);              <span class="comment">// O(N)复杂度，使用前最好用变量保存字符串长度。统计的长度不包括`\0`</span></span><br><span class="line"><span class="built_in">strcat</span>(a, b);           <span class="comment">// 把字符串b拼接到a之后，拼接后的字符串保存在a中</span></span><br><span class="line"><span class="built_in">strcmp</span>(a, b);           <span class="comment">// 根据字典排序比较字符串</span></span><br><span class="line"><span class="built_in">strcpy</span>(b, a);           <span class="comment">// 把字符串a的内容拷贝到字符串b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++) &#123;...&#125;      <span class="comment">// 遍历字符串</span></span><br></pre></td></tr></table></figure>

<p>C++方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;           <span class="comment">// 构造重复字符的字符串</span></span><br><span class="line">str.<span class="built_in">empty</span>();                <span class="comment">// 判空</span></span><br><span class="line">str.<span class="built_in">size</span>();                 <span class="comment">// 长度，与stelen()不同的是，这个复杂度是O(1)，不用额外的变量保存</span></span><br><span class="line">str.<span class="built_in">c_str</span>();                <span class="comment">// 转成char数组，此时才可用printf输出</span></span><br><span class="line">str.<span class="built_in">substr</span>(begin, length);   <span class="comment">// 子串</span></span><br><span class="line">str.<span class="built_in">pop_back</span>();             <span class="comment">// 删除最后一个字符</span></span><br><span class="line">str.<span class="built_in">length</span>();               <span class="comment">// 有几个字符就是长度多少，不存在char[]里面的什么末尾的结束符之类的</span></span><br><span class="line"><span class="comment">// 字符串比较&quot;&gt;&quot;、&quot;&lt;&quot;</span></span><br><span class="line"><span class="comment">// 字符串拼接&quot;+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch : str) &#123;...&#125;   <span class="comment">// 遍历（不可修改字符）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> &amp;ch : str) &#123;...&#125;  <span class="comment">// 遍历（可修改字符）</span></span><br></pre></td></tr></table></figure>

<p>注意：使用<code>+</code>对字符串拼接时，要求左右两边至少有一个string对象，即<code>str = &quot;a&quot; + &quot;b&quot;;</code>会报错。</p>
<h2 id="5-3-字符串流"><a href="#5-3-字符串流" class="headerlink" title="5.3 字符串流"></a>5.3 字符串流</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">string s;</span><br><span class="line"><span class="function">stringstream <span class="title">ssin</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(ssin &gt;&gt; s) &#123;...&#125;      <span class="comment">// 按空格拆分s，例如英语句子拆分单词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用如下代码代替</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; word) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-char数组难点"><a href="#5-4-char数组难点" class="headerlink" title="5.4 char数组难点"></a>5.4 char数组难点</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">4</span>] = &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">5</span>] = &#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;          <span class="comment">// 最后一个位置会补\0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;          <span class="comment">// 输出&quot;C++D++&quot;，因为字符数组a不会自动添加&#x27;\0&#x27;，cout会读取到b的部分</span></span><br></pre></td></tr></table></figure>

<h1 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h1><h2 id="6-1-函数中的数组参数"><a href="#6-1-函数中的数组参数" class="headerlink" title="6.1 函数中的数组参数"></a>6.1 函数中的数组参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">    cout &lt;&lt; <span class="keyword">sizeof</span> a &lt;&lt; endl;           <span class="comment">// 4B * 10 = 40B</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">size</span>(a) &lt;&lt; endl;            <span class="comment">// 8B，虽然函数f能修改实参a的内容，但其本质是一个不同的数组指针指向数组的内存空间，故对函数内的数组参数a调用sizeof，返回的是数组指针的长度。在64位系统中，指针的长度等于64b=8B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-默认参数值"><a href="#6-2-默认参数值" class="headerlink" title="6.2 默认参数值"></a>6.2 默认参数值</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span> </span>&#123;...&#125;     <span class="comment">// 需要默认值的变量只能放在靠后的位置</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-内联"><a href="#6-3-内联" class="headerlink" title="6.3 内联"></a>6.3 内联</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;...&#125;           <span class="comment">// 编译时把函数体复制到调用函数的位置，减少函数跳转次数</span></span><br></pre></td></tr></table></figure>

<p><code>fgets</code>的坑：</p>
<p><code>fgets</code>会读入<code>\n</code>，因此遍历字符串时，应当用<code>for (int i = 0; str[i] != &#39;\n&#39;; i++)</code>，而不能用 <code>for (int i = 0; str[i]; i++)</code></p>
<h1 id="7-结构体、类、指针与引用"><a href="#7-结构体、类、指针与引用" class="headerlink" title="7 结构体、类、指针与引用"></a>7 结构体、类、指针与引用</h1><h2 id="7-1-结构体"><a href="#7-1-结构体" class="headerlink" title="7.1 结构体"></a>7.1 结构体</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node* next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _val): <span class="built_in">val</span>(_val), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;        <span class="comment">// 编译更快</span></span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _val) &#123;</span><br><span class="line">        vall = _val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Node* p = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>注意：链表中的头结点指的是链表第一个结点的<strong>地址</strong>，而不是结点本身。</p>
<h2 id="7-2-类"><a href="#7-2-类" class="headerlink" title="7.2 类"></a>7.2 类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;;          <span class="comment">// 注意类末尾要加分号！</span></span><br></pre></td></tr></table></figure>

<p><strong>类与结构体的区别：</strong></p>
<ul>
<li>结构体默认是public</li>
<li>类默认是private</li>
</ul>
<p><strong>Leetcode式模板：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="8-STL容器、位运算与常用库函数"><a href="#8-STL容器、位运算与常用库函数" class="headerlink" title="8 STL容器、位运算与常用库函数"></a>8 STL容器、位运算与常用库函数</h1><h2 id="8-1-数组类容器"><a href="#8-1-数组类容器" class="headerlink" title="8.1 数组类容器"></a>8.1 数组类容器</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a><code>vector</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;      <span class="comment">// 一维数组</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; b[N];   <span class="comment">// 二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">a[k];           <span class="comment">// 取值</span></span><br><span class="line">a.<span class="built_in">size</span>();       <span class="comment">// 长度</span></span><br><span class="line">a.<span class="built_in">empty</span>();      <span class="comment">// 判空</span></span><br><span class="line">a.<span class="built_in">clear</span>();      <span class="comment">// 清空</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">front</span>();              <span class="comment">// 读取第1个元素</span></span><br><span class="line">a.<span class="built_in">back</span>();               <span class="comment">// 读取最后1个元素</span></span><br><span class="line">a.<span class="built_in">push_back</span>(x);          <span class="comment">// 在末尾插入元素</span></span><br><span class="line"><span class="keyword">int</span> x = a.<span class="built_in">pop_back</span>();    <span class="comment">// 删除末尾元素并返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* p = <span class="built_in">lower_bound</span>(a, a + a.<span class="built_in">size</span>(), x);       <span class="comment">// 查找数组在指定范围内大于等于x的元素地址（要求数组有序）</span></span><br><span class="line"><span class="keyword">int</span>* p = <span class="built_in">upper_bound</span>(a, a + a.<span class="built_in">size</span>(), x);       <span class="comment">// 查找数组在指定范围内大于x的元素地址（要求数组有序）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="built_in">lower_bound</span>(a, a + a.<span class="built_in">size</span>(), x); - a;   <span class="comment">// 查找数组在指定范围内大于等于x的元素下标（要求数组有序）</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="built_in">upper_bound</span>(a, a + a.<span class="built_in">size</span>(), x); - a;   <span class="comment">// 查找数组在指定范围内大于x的元素下标（要求数组有序）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;...&#125;                            <span class="comment">// 方式1，通过a[i]读取元素值</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator i = a.<span class="built_in">begin</span>(); i &lt; a.<span class="built_in">end</span>(); i++) &#123;...&#125;     <span class="comment">// 方式2（迭代器），通过*i读取元素值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = a.<span class="built_in">begin</span>(); i &lt; a.<span class="built_in">end</span>(); i++) &#123;...&#125;                     <span class="comment">// 方式3（迭代器简化版）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x : a) &#123;...&#125;                                             <span class="comment">// 方式4，通过x读取元素值</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>vector</code>是变长数组，类似<code>java</code>的<code>ArrayList</code></li>
<li><code>a.begin()</code>返回的是vector第1个元素的<strong>地址</strong>，而<code>a.end()</code>返回的是最后一个元素的下一个位置的<strong>地址</strong></li>
<li><code>a.end() - a.begin() == a.size()</code></li>
<li><code>*a.begin() == a[0]</code></li>
</ul>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a><code>queue</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************</span></span><br><span class="line"><span class="comment">** 普通队列queue</span></span><br><span class="line"><span class="comment">***************************************************/</span></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">q.<span class="built_in">push</span>(x);              <span class="comment">// 入队（末尾插入元素）</span></span><br><span class="line"><span class="keyword">int</span> x = q.<span class="built_in">pop</span>();         <span class="comment">// 出队（删除第1个元素）</span></span><br><span class="line">a.<span class="built_in">front</span>();              <span class="comment">// 查看队头元素</span></span><br><span class="line">a.<span class="built_in">back</span>();               <span class="comment">// 查看队尾元素</span></span><br><span class="line"><span class="comment">// a.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************</span></span><br><span class="line"><span class="comment">** 优先队列（堆）</span></span><br><span class="line"><span class="comment">***************************************************/</span></span><br><span class="line"><span class="comment">// 元素为基本类型</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; a;                                  <span class="comment">// 大根堆</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; b;          <span class="comment">// 小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素为自定义类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rec</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大根堆需要自定义类重载&lt;号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Rec&amp; t) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &lt; t.a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 小根堆需要自定义类重载&gt;号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt; (<span class="keyword">const</span> Rec&amp; t) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; t.a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;Rec&gt; a;                                  <span class="comment">// 大根堆</span></span><br><span class="line">priority_queue&lt;Rec, vector&lt;Rec&gt;, greater&lt;Rec&gt;&gt; b;          <span class="comment">// 小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">a.<span class="built_in">push</span>(x);              <span class="comment">// 插入元素（位置不确定）</span></span><br><span class="line">a.<span class="built_in">top</span>();                <span class="comment">// 查看堆顶元素（大根堆是最大值，小根堆是最小值）</span></span><br><span class="line">a.<span class="built_in">pop</span>();                <span class="comment">// 删除堆顶元素（大根堆是最大值，小根堆是最小值）</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>队列没有clear()方法</li>
<li>优先队列插入时无序，输出时有序</li>
<li>优先队列存储自定义类型时，需要重载运算符<ul>
<li>大根堆重载&lt;</li>
<li>小根堆重载&gt;</li>
</ul>
</li>
</ul>
<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a><code>stack</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">s.<span class="built_in">push</span>(x);          <span class="comment">// 入栈</span></span><br><span class="line">s.<span class="built_in">top</span>();            <span class="comment">// 查看栈顶</span></span><br><span class="line">s.<span class="built_in">pop</span>();            <span class="comment">// 出栈（不放回出栈元素！）</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>stack</code>的<code>pop()</code>方法不像<code>java</code>返回栈顶元素！</p>
<h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a><code>deque</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">q[i]                <span class="comment">// 随机访问</span></span><br><span class="line">q.<span class="built_in">begin</span>();          <span class="comment">// 队头元素地址，用*q.begin()读取元素</span></span><br><span class="line">q.<span class="built_in">end</span>();            <span class="comment">// 队尾元素地址，用*q.end()读取元素</span></span><br><span class="line">q.<span class="built_in">front</span>();          <span class="comment">// 队头元素值</span></span><br><span class="line">q.<span class="built_in">back</span>();           <span class="comment">// 队尾元素值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">push_back</span>();        <span class="comment">// 队尾插入元素</span></span><br><span class="line"><span class="built_in">push_front</span>();       <span class="comment">// 队头插入元素</span></span><br><span class="line"><span class="built_in">pop_back</span>();         <span class="comment">// 队尾删除元素</span></span><br><span class="line"><span class="built_in">pop_front</span>();        <span class="comment">// 队头插入元素</span></span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; s;             <span class="comment">// 集合</span></span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; ms;       <span class="comment">// 多重集合（允许元素重复）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line">s.<span class="built_in">empty</span>();</span><br><span class="line">s.<span class="built_in">claer</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">begin</span>();</span><br><span class="line">s.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">insert</span>(x);</span><br><span class="line">s.<span class="built_in">find</span>(x);              <span class="comment">// 返回迭代器，可用if(s.find(x) == s.end())判断是否存在元素x</span></span><br><span class="line">s.<span class="built_in">lower_bound</span>(x);        <span class="comment">// 返回大于等于x的最小元素的迭代器</span></span><br><span class="line">s.<span class="built_in">upper_bound</span>(x);        <span class="comment">// 返回大于x的最小元素的迭代器</span></span><br><span class="line"></span><br><span class="line">s.<span class="built_in">erase</span>(x);             <span class="comment">// 删除x并返回迭代器</span></span><br><span class="line">s.<span class="built_in">count</span>(x);             <span class="comment">// 统计x出现的次数（普通集合只会返回0或1，多重集合可能返回大于1的数）</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>自定义类要求重载&lt;</li>
<li><code>find()</code>、<code>erase()</code>、<code>lower_bound()</code>和<code>upper_bound()</code>都是<code>O(logn)</code>复杂度</li>
<li><code>count()</code>是<code>O(k+logn)</code>复杂度</li>
</ul>
<h3 id="unordered-set"><a href="#unordered-set" class="headerlink" title="unordered_set"></a><code>unordered_set</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line">unordered_set&lt;<span class="keyword">int</span>&gt; s;           <span class="comment">// 哈希表</span></span><br><span class="line">unordered_multiset&lt;<span class="keyword">int</span>&gt; s;</span><br></pre></td></tr></table></figure>

<h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a><code>bitset</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二进制串</span></span><br><span class="line">bitset s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">s.<span class="built_in">count</span>();      <span class="comment">// 1的个数</span></span><br><span class="line">s.<span class="built_in">set</span>(p);       <span class="comment">// 第p位设为1</span></span><br><span class="line">s.<span class="built_in">reset</span>(p);     <span class="comment">// 第p位设为0</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>bitset</code>元素支持位运算符<code>&amp;</code>、<code>|</code>和<code>~</code>等等</li>
<li>求x的第k位二进制数：<code>x &gt;&gt; k &amp; 1</code></li>
<li>求x从右起的第1个1：<code>lowbit(x) = x &amp; -x;</code><ul>
<li>实际上是原码和补码做与操作</li>
<li>例如<code>110110</code>返回<code>10</code>，<code>11000</code>返回<code>1000</code></li>
</ul>
</li>
</ul>
<h2 id="8-2-有序对容器"><a href="#8-2-有序对容器" class="headerlink" title="8.2 有序对容器"></a>8.2 有序对容器</h2><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a><code>pair</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a = &#123;<span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b = <span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">a[<span class="string">&quot;a&quot;</span>] = <span class="number">4</span>;     <span class="comment">// 类似数组的操作</span></span><br><span class="line">m.<span class="built_in">insert</span>();</span><br><span class="line">m.<span class="built_in">find</span>();</span><br></pre></td></tr></table></figure>

<h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a><code>unordered_map</code></h3><p>哈希映射，效率更高</p>
<h2 id="8-3-algorithm库"><a href="#8-3-algorithm库" class="headerlink" title="8.3 algorithm库"></a>8.3 algorithm库</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转</span></span><br><span class="line"><span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">reverse</span>(a, a + a.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line"><span class="built_in">unique</span>(a, a + a.<span class="built_in">size</span>());                        <span class="comment">// 返回去重后最后一个元素的地址</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="built_in">unique</span>(a, a + a.<span class="built_in">size</span>()) - a;             <span class="comment">// 去重后数组的长度</span></span><br><span class="line">a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());     <span class="comment">// 真删除重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打乱</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());                       <span class="comment">// 升序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), greater&lt;<span class="keyword">int</span>&gt;());         <span class="comment">// 降序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a - b;&#125;              <span class="comment">// 自定义比较方法</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);                      <span class="comment">// 自定义排序</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><code>random_shuffle()</code>常结合<code>ctime</code>的<code>srand( time(0) )</code>使用</li>
<li><code>unique</code>并没有真的删除重复元素，它仅将重复的元素放到非重复元素部分的后边</li>
</ul>
]]></content>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>基础算法</title>
    <url>/undefined/83fa91fc/</url>
    <content><![CDATA[<blockquote>
<p>排序和二分的笔记</p>
</blockquote>
<span id="more"></span>
<h1 id="1-排序"><a href="#1-排序" class="headerlink" title="1 排序"></a>1 排序</h1><h2 id="1-1-快速排序"><a href="#1-1-快速排序" class="headerlink" title="1.1 快速排序"></a>1.1 快速排序</h2><p>基于分治，不稳定的排序</p>
<ul>
<li>确定分界点：q[l]，q[(l+r)/2]，q[r]，随机（即左边界，中间数，有边界，随机）</li>
<li>调整区间：小于分界点的数在左边，大于分界点的数在右边</li>
<li>递归处理左右两端</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>; <span class="comment">// 终止条件</span></span><br><span class="line">    <span class="keyword">int</span> x = q[(l + r) &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<p>如果x选取<code>q[l]</code>，则递归时参数范围选择<code>(l, j)</code>和<code>(j + 1, r)</code></p>
<p>如果x选取<code>q[r]</code>，则递归时参数范围选择<code>(l, i - 1)</code>和<code>(i, r)</code></p>
<p>如果x选取<code>q[l + r &gt;&gt; 1]</code>，则递归时参数范围选择哪种都行</p>
<p><strong>证明：</strong></p>
<p>反例：</p>
<p>如果算法x选取q[l]，即x = q[0] = 1，递归时参数范围选择<code>(l, i - 1)</code>和<code>(i, r)</code>，则下一次迭代后i = 0，j = 0，递归时参数的范围为(0, -1)和(0, 1)，其中第1个递归无效，第2个递归与之前一致，陷入死循环。</p>
<p>同理如果算法x选取q[r]，即x = q[1] = 2，递归时参数范围选择(l, j)和(j + 1, r)，则下一次迭代后i = 1，j = 1，递归时参数的范围为(0, 1)和(2, 1)，其中第2个递归无效，第1个递归与之前一致，陷入死循环。</p>
<h2 id="1-2-归并排序"><a href="#1-2-归并排序" class="headerlink" title="1.2 归并排序"></a>1.2 归并排序</h2><p>也是基于分治，但是有差别，稳定的排序</p>
<ul>
<li>确定分界点 mid = (l + r) / 2（下标的中间位置）</li>
<li>递归排序left, right</li>
<li>归并——合二为一</li>
</ul>
<p>时间复杂度$O(nlogn)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> q[N], tmp[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">    <span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-二分"><a href="#2-二分" class="headerlink" title="2 二分"></a>2 二分</h1><h2 id="2-1-整数"><a href="#2-1-整数" class="headerlink" title="2.1 整数"></a>2.1 整数</h2><p>二分的本质不是单调性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>个人感觉一个特别好的例题：数的范围</p>
<p>理解记忆代码的快速方法：1 2 2 2 3，另外有-1的话mid就需要+1再除以2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l] != x) <span class="built_in">printf</span>(<span class="string">&quot;-1 -1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, l); <span class="comment">// 此处输出的l为最左边x的位置</span></span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(q[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l); <span class="comment">// 此处输出的l为最左边x的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-浮点数"><a href="#2-2-浮点数" class="headerlink" title="2.2 浮点数"></a>2.2 浮点数</h2><p>平方</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid * mid &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>浮点数二分不需要考虑mid是否+1，else后是否+1。</li>
<li>没有固定的浮点数序列，因此要考虑精度eps，一般比题目要求多1位小数就行</li>
<li>需要自己确定l和r的值，即查找范围</li>
</ul>
<h1 id="3-高精度"><a href="#3-高精度" class="headerlink" title="3 高精度"></a>3 高精度</h1><p>大整数存储：数组， 每个元素存一位数字</p>
<h2 id="3-1-高精度加法"><a href="#3-1-高精度加法" class="headerlink" title="3.1 高精度加法"></a>3.1 高精度加法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;A, vector&lt;<span class="keyword">int</span>&gt; &amp;)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:a)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-2-高精度减法"><a href="#3-2-高精度减法" class="headerlink" title="3.2 高精度减法"></a>3.2 高精度减法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## <span class="number">3.3</span>. 高精度乘法</span><br><span class="line"></span><br><span class="line">```c++</span><br></pre></td></tr></table></figure>



<h2 id="3-4-高精度除法"><a href="#3-4-高精度除法" class="headerlink" title="3.4 高精度除法"></a>3.4 高精度除法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/undefined/167cd958/</url>
    <content><![CDATA[<blockquote>
<p>链表，双向链表，栈和队列</p>
</blockquote>
<span id="more"></span>


<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// head 表示头结点的下标</span></span><br><span class="line"><span class="comment">// e[i] 表示节点i的值</span></span><br><span class="line"><span class="comment">// ne[i] 表示节点i的next指针是多少</span></span><br><span class="line"><span class="comment">// idx 存储当前已经用到了哪个点</span></span><br><span class="line"><span class="keyword">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_head</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到下标是k的点后面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将下标是k的点后面的点删掉</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> k, x;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head; i != <span class="number">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法基础</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构笔记</title>
    <url>/undefined/79666db/</url>
    <content><![CDATA[<blockquote>
<p>数据结构的详细笔记，对应课本</p>
</blockquote>
<span id="more"></span>
<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h1><h2 id="1-1-基本概念和术语"><a href="#1-1-基本概念和术语" class="headerlink" title="1.1 基本概念和术语"></a>1.1 基本概念和术语</h2><p><strong>数据：</strong>是描述客观事物的符号，是计算机中操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型（信息的载体；对客观事物符号化的表示；能够被计算机识别，存储和加工）</p>
<p><strong>数据元素：</strong>是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录、结点或顶点。 例如，人。</p>
<p><strong>数据项：</strong>一个数据元素可以由若干个数据项组成。例如人有眼、耳、鼻、嘴、手、脚这些数据项，也可以有姓名、年龄、性别等数据项，要视所做的系统来决定。 <strong>数据项是数据不可分割的最小单位</strong></p>
<blockquote>
<p>数据 &gt; 数据元素 &gt; 数据项</p>
</blockquote>
<p><strong>数据对象：</strong>是性质相同的数据元素的集合，是数据的子集。数据元素是数据的个体，数据对象是数据的子集</p>
<p><strong>数据结构：</strong>是相互之间存在一种或多种特定关系的数据元素的集合。数据元素相互之间的关系称为结构。数据结构是带结构的数据元素的集合</p>
<h2 id="1-2-数据结构的两个层次"><a href="#1-2-数据结构的两个层次" class="headerlink" title="1.2 数据结构的两个层次"></a>1.2 数据结构的两个层次</h2><h3 id="1-2-1-逻辑结构"><a href="#1-2-1-逻辑结构" class="headerlink" title="1.2.1 逻辑结构"></a>1.2.1 逻辑结构</h3><p>逻辑结构是指数据对象中数据元素之间的相互关系。与数据的存储无关，独立于计算机，具体分为以下四种</p>
<p>集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系</p>
<p>线性结构：线性结构中的数据元素之间是一对一的关系。例如：线性表、栈、队列、串</p>
<p>树形结构：树形结构中的数据元素之间存在一种一对多的层次关系</p>
<p>图形结构：图形结构的数据元素是多对多的关系</p>
<p>用示意图表示逻辑结构时应注意：</p>
<ul>
<li>将每一个数据元素看做一个结点，用圆圈表示</li>
<li>元素之间的逻辑关系用结点之间的连线表示，如果这个关系是有方向的，那么用带箭头的连线表示</li>
</ul>
<h3 id="1-2-2-物理结构"><a href="#1-2-2-物理结构" class="headerlink" title="1.2.2 物理结构"></a>1.2.2 物理结构</h3><p>物理结构是指数据的逻辑结构在计算机中的存储形式，有时也称存储结构，是数据结构在计算机中的表示</p>
<p>顺序存储结构：是指把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。C语言用数组实现</p>
<p>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。C语言用指针实现</p>
<p>索引存储结构：在存储结点信息的同时，还建立附加的索引表</p>
<p>散列存储结构：根据结点的关键字直接计算出该结点的存储地址。散列表</p>
<blockquote>
<p>两者关系：<br>物理结构是逻辑关系的映像和元素本身的映像；逻辑结构是数据结构的抽象，物理结构是数据结构的实现</p>
</blockquote>
<h2 id="1-3-抽象数据类型"><a href="#1-3-抽象数据类型" class="headerlink" title="1.3 抽象数据类型"></a>1.3 抽象数据类型</h2><h3 id="1-3-1-数据类型"><a href="#1-3-1-数据类型" class="headerlink" title="1.3.1 数据类型"></a>1.3.1 数据类型</h3><p>是指性质相同的值的集合及定义在此集合上的一些操作的总称。它是按照值的不同进行划分的</p>
<ul>
<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等</li>
<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据构成的</li>
</ul>
<h3 id="1-3-2-抽象数据类型"><a href="#1-3-2-抽象数据类型" class="headerlink" title="1.3.2 抽象数据类型"></a>1.3.2 抽象数据类型</h3><p>是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性，而与其在计算机内部表示和实现无关，而链式存储关系并不能反映其逻辑关系，因此需要一个指针存放数据元素的地址，通过地址找到相关联数据元素的位置</p>
<p>抽象是指抽取出事物具有的普遍性的本质，其意义在于数据类型的数学抽象特性。抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来</p>
<h2 id="1-4-算法"><a href="#1-4-算法" class="headerlink" title="1.4 算法"></a>1.4 算法</h2><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作</p>
<h3 id="1-4-1-算法的描述"><a href="#1-4-1-算法的描述" class="headerlink" title="1.4.1 算法的描述"></a>1.4.1 算法的描述</h3><ul>
<li>自然语言：英语，中文</li>
<li>流程图：传统流程图、NS流程图</li>
<li>伪代码：类C语言</li>
<li>程序代码：…</li>
</ul>
<h3 id="1-4-2-算法的特性"><a href="#1-4-2-算法的特性" class="headerlink" title="1.4.2 算法的特性"></a>1.4.2 算法的特性</h3><ul>
<li>算法具有零个或多个输入，至少一个或多个输出</li>
<li>有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成</li>
<li>确定性：算法的每一步骤都具有确定的含义，不会出现二义性</li>
<li>可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成</li>
</ul>
<h3 id="1-4-3-算法设计的要求"><a href="#1-4-3-算法设计的要求" class="headerlink" title="1.4.3 算法设计的要求"></a>1.4.3 算法设计的要求</h3><ul>
<li>正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案</li>
<li>可读性：算法设计的另一目的是为了便于阅读、理解和交流</li>
<li>健壮性：当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名奇妙的结果</li>
<li>时间效率高，存储量低</li>
</ul>
<h3 id="1-4-4-算法效率的度量方法"><a href="#1-4-4-算法效率的度量方法" class="headerlink" title="1.4.4 算法效率的度量方法"></a>1.4.4 算法效率的度量方法</h3><p>（1）事后统计法：这种方法主要是通过设计好的测试程序和数据，利用计算机计时器不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。缺陷多，一般不使用</p>
<p>（2）事前分析估算方法：在计算机程序编制前，依据统计方法对算法进行估算。一个程序的运行时间，依赖于算法的好坏和问题的输入规模</p>
<h3 id="1-4-5-函数的渐近增长"><a href="#1-4-5-函数的渐近增长" class="headerlink" title="1.4.5 函数的渐近增长"></a>1.4.5 函数的渐近增长</h3><p>关注主项的阶数</p>
<h3 id="1-4-6-算法时间复杂度"><a href="#1-4-6-算法时间复杂度" class="headerlink" title="1.4.6 算法时间复杂度"></a>1.4.6 算法时间复杂度</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h4><p><strong>算法时间复杂度：</strong> 在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况并确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数</p>
<h4 id="2-推导大O阶步骤"><a href="#2-推导大O阶步骤" class="headerlink" title="2  推导大O阶步骤"></a>2  推导大O阶步骤</h4><ul>
<li>用常数1取代运行时间中的所有加法常数</li>
<li>在修改后的运行次数函数中，只保留最高阶项</li>
<li>如果最高阶项存在且不是1，则去除这个项相乘的常数，结果就是大O阶</li>
</ul>
<h4 id="3-具体阶数"><a href="#3-具体阶数" class="headerlink" title="3 具体阶数"></a>3 具体阶数</h4><ul>
<li><p>常数阶<br>顺序结构，分支结构</p>
</li>
<li><p>线性阶<br>循环结构</p>
</li>
<li><p>对数阶</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (count &lt;= n)&#123;</span><br><span class="line">    count = count * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度为O($log_2n$))</p>
</li>
<li><p>平方阶<br>时间复杂度为O($n^2$)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    b++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(n) &#123;</span><br><span class="line">    n = n / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>nlogn阶<br>2n+3nlog2(n)+19对应O(nlogn)</p>
</li>
<li><p>立方阶</p>
</li>
<li><p>指数阶</p>
<p>  $2^n$对应O($2^n$)</p>
</li>
</ul>
<p>常用的时间复杂度所耗费的时间从小到大依次是：O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O($n^2$) &lt; O($n^3$) &lt; O($2^n$) &lt; O(n!) &lt; O($n^n$)</p>
<p>最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。除非特别指定，我们提到的运行时间都是最坏时间复杂度。平均运行时间是所有情况中最有意义的，因为它是期望的运行时间</p>
<h3 id="1-4-7-算法空间复杂度"><a href="#1-4-7-算法空间复杂度" class="headerlink" title="1.4.7 算法空间复杂度"></a>1.4.7 算法空间复杂度</h3><p>算法的空间复杂度通过计算算法所需的存储空间实现，包括指令空间、数据空间、动态申请的内存空间等，算法空间复杂度的计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数</p>
<p>算法要占据的时间包括：算法本身要占据的空间，输入/输出，指令，常数，变量等；算法要使用的<strong>辅助空间</strong></p>
<p>（1）S(n) = n + $n^2$ ，则空间复杂度为O($n^2$)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> **b = <span class="keyword">new</span> <span class="keyword">int</span>*[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    b[i] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）S(n) = O(1)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    t = a[i];</span><br><span class="line">    a[i] = a[n - i - <span class="number">1</span>];</span><br><span class="line">    a[n - i - <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）S(n) = O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    b[i] = a[n - i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2 线性表"></a>2 线性表</h1><h2 id="2-1-线性表的定义"><a href="#2-1-线性表的定义" class="headerlink" title="2.1 线性表的定义"></a>2.1 线性表的定义</h2><p>线性表：零个或多个元素的有限序列</p>
<h2 id="2-2-线性表的抽象数据类型"><a href="#2-2-线性表的抽象数据类型" class="headerlink" title="2.2 线性表的抽象数据类型"></a>2.2 线性表的抽象数据类型</h2><p>线性表的数据对象集合为{$a_1$,$a_2$,……,$a_n$}，每个元素的类型均为DataType。其中，除第一个元素$a_1$外，每一个元素有且只有一个直接前趋元素，除了最后一个元素$a_n$外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitList(*L);   <span class="comment">//初始化操作，建立一个空的线性表L</span></span><br><span class="line">ListEmpty(L);   <span class="comment">//若线性表为空，返回true，否则返回false</span></span><br><span class="line">ClearList(*L);   <span class="comment">//将线性表清空</span></span><br><span class="line">GetElem(L,i,*e);  <span class="comment">//将线性表L中的第i个位置元素值返回给e</span></span><br><span class="line">LocateElem(L,e);  <span class="comment">//若线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中的序号表示成功；否则，返回0表示失败</span></span><br><span class="line">ListInsert(*L,i,e);  <span class="comment">//在线性表L中的第i个位置插入新元素e</span></span><br><span class="line">ListDelete(*L,i,*e);  <span class="comment">//删除线性表L中第i个位置元素，并用e返回其值</span></span><br><span class="line">ListLength(L);    <span class="comment">//返回线性表L的元素个数</span></span><br></pre></td></tr></table></figure>
<p>求A = A并B，假设La表示集合A，Lb表示集合B，则实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(List* La,List Lb)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> La_len,Lb_len,i;</span><br><span class="line">    ElemType e;<span class="comment">//声明与La和Lb相同的数据元素e</span></span><br><span class="line">    La_len = ListLength(La);<span class="comment">//求线性表的长度</span></span><br><span class="line">    Lb_len = ListLength(Lb);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= Lb_len; i++ )&#123;</span><br><span class="line">        GetElem(Lb, i, e);<span class="comment">//取Lb中第i个数据元素赋给e</span></span><br><span class="line">        <span class="keyword">if</span>(!LocateElem(La, e, equal))<span class="comment">//La中不存在和e相同数据元素</span></span><br><span class="line">            ListInsert(La, ++La_len, e);<span class="comment">//插入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于复杂的个性化操作，就是把基本操作组合起来实现</p>
<h2 id="2-3-线性表的顺序存储结构"><a href="#2-3-线性表的顺序存储结构" class="headerlink" title="2.3 线性表的顺序存储结构"></a>2.3 线性表的顺序存储结构</h2><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。可以用一维数组来实现，一维数组可以是静态分配的，也可以是动态分配的。在静态分配时，由于数组的大小和空间是固定的，一旦空间占满，就无法再新增数据，否则会导致数据溢出；而在动态分配时，存储数组的空间在程序执行过程中会动态调整大小，当空间占满时，可以另行开辟更大的存储空间来储存数据</p>
<p>顺序表最主要的特点是可以进行<strong>随机访问</strong>，即可以通过表头元素的地址和元素的编号（下标），在O(1)的时间复杂度内找到指定的元素。顺序表的不足之处是插入和删除操作需要移动大量的元素，从而保持逻辑上和物理上的连续性</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">insert(loc, value)</td>
<td align="center">将value插入到顺序表中下标为loc的位置</td>
</tr>
<tr>
<td align="center">expand()</td>
<td align="center">扩大顺序表的容量</td>
</tr>
<tr>
<td align="center">search(value)</td>
<td align="center">寻找顺序表中值为value的元素</td>
</tr>
<tr>
<td align="center">remove(index)</td>
<td align="center">将顺序表下标为index的元素</td>
</tr>
<tr>
<td align="center">print()</td>
<td align="center">输出顺序表中所有元素</td>
</tr>
</tbody></table>
<ol>
<li><p>插入操作实现方法：</p>
<ul>
<li>判断插入位置是否合法</li>
<li>判断顺序表是否已满</li>
<li>将目标位置及以后的元素后移一位</li>
<li>将待插入的元素后移一位</li>
</ul>
</li>
<li><p>扩容操作实现方法：</p>
<p>我们需要把原数组空间里的元素一一复制到新的空间内，因此扩容的时间复杂度为O(n)</p>
<ul>
<li>将原来的元素存储到临时存储空间</li>
<li>扩大原来的存储空间</li>
<li>将临时存储空间里的数据元素复制到新的存储空间里</li>
<li>释放临时的存储空间</li>
</ul>
</li>
<li><p>查找操作实现方法：</p>
<ul>
<li>从下标为0的元素开始依次枚举顺序表中的所有元素</li>
<li>发现和目标值相等的元素则返回它的下标</li>
<li>枚举结束没有找到目标元素则返回 -1</li>
</ul>
</li>
<li><p>删除操作实现方法：</p>
<ul>
<li>判断传入参数是否合法，即下标是否在顺序表的范围内</li>
<li>将目标下标之后所有的元素前移一位</li>
<li>更新顺序表的长度</li>
</ul>
</li>
<li><p>遍历操作实现方法：</p>
<ul>
<li>从下标为0的元素开始遍历顺序表</li>
<li>输出所有元素的值</li>
</ul>
</li>
</ol>
<p>顺序存储结构的三个属性：</p>
<ul>
<li>存储空间的起始位置</li>
<li>线性表的最大存储容量：MAXSIZE</li>
<li>线性表的当前长度：length</li>
<li>$logn$</li>
</ul>
<p>注意区分数组长度和线性表长度，线性表长度应该小于等于数组的长度</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFEASIBLE -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIST_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTINCREMENT 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType* elem;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    L.elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!L.elem)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DestroyList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(L.elem);</span><br><span class="line">    L.elem = <span class="literal">NULL</span>;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ClearList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListEmpty_Sq</span><span class="params">(SqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListLength_Sq</span><span class="params">(SqList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (L.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetElem_Sq</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = L.elem[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_Sq</span><span class="params">(SqList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L.length &amp;&amp; L.elem[i] != e)</span><br><span class="line">        ++i;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; L.length)</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    ElemType* p, * q, * newbase;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize) &#123;</span><br><span class="line">        newbase = (ElemType*)<span class="built_in">realloc</span>(L.elem, (L.listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase)</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        L.elem = newbase;</span><br><span class="line">        L.listsize += LISTINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;(L.elem[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; --p)</span><br><span class="line">        *(p + <span class="number">1</span>) = *p;</span><br><span class="line">    *q = e;</span><br><span class="line">    ++L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ListDelete_Sq</span><span class="params">(SqList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    ElemType* p, * q;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i&gt;L.length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = &amp;(L.elem[i - <span class="number">1</span>]); <span class="comment">// p为被删除元素的位置</span></span><br><span class="line">    e = *p; <span class="comment">// 被删除元素的位置赋给e</span></span><br><span class="line">    q = L.elem + L.length + <span class="number">1</span>; <span class="comment">// 表尾元素的位置</span></span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= q; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList_Sq</span><span class="params">(SqList&amp; L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, L.elem[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序表的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （1）初始化顺序表L\n&quot;</span>);</span><br><span class="line">    InitList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （2）依次插入a, b, c, d, e元素\n&quot;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">5</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （3）输出顺序表L：&quot;</span>);</span><br><span class="line">    DispList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （4）顺序表L长度：%d\n&quot;</span>, ListLength_Sq(L));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （5）顺序表L为%s\n&quot;</span>, ListEmpty_Sq(L) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">    GetElem_Sq(L, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （6）顺序表L的第3个元素：%c\n&quot;</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （7）元素a的位置：%d\n&quot;</span>, LocateElem_Sq(L, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （8）在第4个元素位置上插入f元素\n&quot;</span>);</span><br><span class="line">    ListInsert_Sq(L, <span class="number">4</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （9）输出顺序表L：&quot;</span>);</span><br><span class="line">    DispList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （10）删除L的第3个元素\n&quot;</span>);</span><br><span class="line">    ListDelete_Sq(L, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （11）输出顺序表L：&quot;</span>);</span><br><span class="line">    DispList_Sq(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  （12）释放顺序表L\n&quot;</span>);</span><br><span class="line">    DestroyList_Sq(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c++的动态内存分配</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1, *p2;</span><br><span class="line">p1 = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">p2 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> p1, p2;</span><br></pre></td></tr></table></figure>


<h2 id="2-4-线性表的链式存储结构"><a href="#2-4-线性表的链式存储结构" class="headerlink" title="2.4 线性表的链式存储结构"></a>2.4 线性表的链式存储结构</h2><p>为了表示每个数据元素a1与其直接后继数据元素a(i+1)之间的逻辑关系，对数据元素a1来说，除了存储其本身的信息以外，还需存储一个指示其直接后继的 信息（即直接后继的存储位置）。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点。</p>
<p>n个结点（ai的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因此此链表的每个结点只包含一个指针域，所以叫做单链表。链表第一个结点的存储位置叫做头指针。有时，为了方便操作，会在单链表的第一个结点前附设一个结点，称为头结点</p>
<table>
<thead>
<tr>
<th>头指针</th>
<th>头结点</th>
</tr>
</thead>
<tbody><tr>
<td>头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针</td>
<td>头结点是为了操作的统一和方便而设立的，放在第一元素的结点之前，其数据域一般无意义（也可存放链表的长度）</td>
</tr>
<tr>
<td>头指针具有标识的作用，所以常用头指针冠以链表的名字</td>
<td>有了头结点，对在第一元素结点前插入结点和删除第一结点，其操作与其它结点的操作就统一了</td>
</tr>
<tr>
<td>无论链表是否为空，头指针均不为空。头指针是链表的必要元素</td>
<td>头结点不一定是链表必须要素</td>
</tr>
</tbody></table>
<p>重复利用指针建立链表</p>
<ol>
<li>如果链表为空链表，那么就可以直接将head指针赋给NILL，而无须进行其他操作；</li>
<li>如果链表不为空，那么首先使用一个malloc函数新建一个结点，使head、p1和p2都指向它。它就是这个链表的头结点；</li>
<li>对结点内的数据进行赋值，从而完成该结点的初始化工作；</li>
<li>开辟另外一个结点，并使p1指向这个新开辟的结点；</li>
<li>如果链表还未满足结束条件，那么继续将这个新的结点链入链表，也就是将p1的值赋给p2-&gt;next（注意这个时候p2仍指向第一个结点），所以在执行了语句p2-&gt;next=p1之后，新结点就被成功链入链表了；</li>
<li>让指针p2向后移动一个位置，即执行语句p2=p1，也就是使p2指向最新建立的结点；</li>
<li>再次开辟一个新结点并初始化它；</li>
<li>再次将指针p1指向这个新结点。如果链表仍然未满足结束条件，那么继续将这个新的结点链入链表，也就是将p1的值赋给p2-&gt;next=p1之后，新结点同样被成功链入链表；</li>
<li>再像前面一样将指针p2向后移动一个位置，即执行语句p2=p1，也就是使p2再次指向最新建立的结点</li>
<li>如果仍有新的数据被接收，那么就再次为该数据开辟一个结点，并让指针p1指向这个新结点，并按照前面的操作方式继续为链表添加新数据；</li>
<li>如果链表满足结束条件或者达到事前预定的长度，那么循环操作就将被中止。新的结点也不再被链入链表中。这个时候即将NULL赋给p2-&gt;next，表示该结点为整个链表的尾结点。</li>
</ol>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">insert(node, index)</td>
<td align="center">将node插入到链表中下标为index的位置</td>
</tr>
<tr>
<td align="center">output()</td>
<td align="center">输出整个链表</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p>链表的遍历</p>
<ol>
<li>以链表的表头结点作为输入；</li>
<li>设一个指针变量p，先指向第一个结点，并输出该结点中的数据；</li>
<li>将指针p向后移动一个结点，再输出结点数据；</li>
<li>如此继续下去直到链表的尾结点。</li>
</ol>
<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成</p>
<ol>
<li><p>链表插入操作的实现方法：</p>
<ul>
<li>找到链表中要插入的位置</li>
<li>令待插入结点的next指针指向插入位置的当前结点</li>
<li>令插入位置之前的当前结点的next指针指向待插入结点</li>
</ul>
</li>
<li><p>链表遍历操作的实现方法：</p>
<ul>
<li>定义一个用于遍历的变量，初始指向头结点</li>
<li>输出遍历变量所在结点的值，并更新遍历变量为当前结点的下一个结点</li>
<li>重复操作2，直到遍历完所有结点</li>
</ul>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListF</span><span class="params">(LinkList &amp;L, ElemType a[], <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 头插法建立单链表</span></span><br><span class="line">    LinkList s;</span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListR</span><span class="params">(LinkList&amp; L, ElemType a[], <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">//尾插法建立单链表</span></span><br><span class="line">    LinkList s, r;</span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(LinkList&amp; L)</span> </span>&#123; <span class="comment">// 初始化线性表</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryList</span><span class="params">(LinkList&amp; L)</span> </span>&#123; <span class="comment">// 销毁链表</span></span><br><span class="line">    LinkList pre = L, p = pre-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(pre);</span><br><span class="line">        pre = p;</span><br><span class="line">        p = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pre);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListEmpty</span><span class="params">(LinkList L)</span> </span>&#123; <span class="comment">// 判断链表是否为空表</span></span><br><span class="line">    <span class="keyword">return</span> (L-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispList</span><span class="params">(LinkList L)</span> </span>&#123;</span><br><span class="line">    LinkList p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        e = p-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    LinkList p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList&amp; L, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L, s;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList&amp; L, <span class="keyword">int</span> i, ElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkList p = L, q;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        e = q-&gt;data;</span><br><span class="line">        p-&gt;next = q-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkList h;</span><br><span class="line">    ElemType e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;单链表的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（1）初始化单链表h\n&quot;</span>);</span><br><span class="line">    InitList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（2）依次采用尾插法插入a, b, c, d, e元素\n&quot;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">4</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">5</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（3）输出单链表h：&quot;</span>);</span><br><span class="line">    DispList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（4）单链表h长度：%d\n&quot;</span>, ListLength(h));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（5）单链表h为%s\n&quot;</span>, ListEmpty(h) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>);</span><br><span class="line">    GetElem(h, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（6）单链表h上的第3个元素：%c\n&quot;</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（7）元素a的位置：%d\n&quot;</span>, LocateElem(h, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（8）在第4个元素位置上插入f元素\n&quot;</span>);</span><br><span class="line">    ListInsert(h, <span class="number">4</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（9）输出单链表h：&quot;</span>);</span><br><span class="line">    DispList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（10）删除h的第3个元素\n&quot;</span>);</span><br><span class="line">    ListDelete(h, <span class="number">3</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（11）输出单链表h：&quot;</span>);</span><br><span class="line">    DispList(h);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（12）释放单链表h\n&quot;</span>);</span><br><span class="line">    DestoryList(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220223223428452.png" alt="image-20220223223428452"></p>
<h1 id="3-栈"><a href="#3-栈" class="headerlink" title="3 栈"></a>3 栈</h1><h2 id="3-1-栈的定义"><a href="#3-1-栈的定义" class="headerlink" title="3.1 栈的定义"></a>3.1 栈的定义</h2><p>栈是限定仅在表位进行插入和删除操作的线性表</p>
<p>我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出的线性表，简称LFO结构。只能对栈顶元素进行操作，我们把栈的插入，删除操作改名为push，pop</p>
<p><strong>栈的插入操作，</strong> 叫做进栈，也称压栈，入栈</p>
<p><strong>栈的删除操作，</strong> 叫做出栈，也有的叫做弹栈</p>
<h2 id="3-2-栈的顺序存储结构"><a href="#3-2-栈的顺序存储结构" class="headerlink" title="3.2 栈的顺序存储结构"></a>3.2 栈的顺序存储结构</h2><p>我们定义一个top变量来指示栈顶元素在数组中的位置，且其小于栈的长度StackSize，一般采用下标为0的一端作为栈底，当栈存在一个元素时，top等于0。因此空栈的判断条件为top = -1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    SElemType* base;</span><br><span class="line">    SElemType* top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">    S.base = (SElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="built_in"><span class="keyword">sizeof</span></span>(SElemType));</span><br><span class="line">    <span class="keyword">if</span> (!S.base)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    S.top = S.base;</span><br><span class="line">    S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DestoryStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.base) &#123;</span><br><span class="line">        <span class="keyword">delete</span> S.base;</span><br><span class="line">        S.stacksize = <span class="number">0</span>;</span><br><span class="line">        S.base = S.top = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.base)</span><br><span class="line">        S.top = S.base;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S.top - S.base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack&amp; S, SElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize) &#123;</span><br><span class="line">        S.base = (SElemType*)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREMENT) * <span class="built_in"><span class="keyword">sizeof</span></span>(SElemType));</span><br><span class="line">        <span class="keyword">if</span> (!S.base)</span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        S.top = S.base + S.stacksize;</span><br><span class="line">        S.stacksize += STACKINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    *S.top++ = e;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack&amp; S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = *--S.top;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    e = *(S.top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SElemType e;</span><br><span class="line">    SqStack S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序栈s的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（1）初始化栈s\n&quot;</span>);</span><br><span class="line">    <span class="built_in">InitStack</span>(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（2）栈为%s\n&quot;</span>, (<span class="built_in">StackEmpty</span>(S) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（3）依次进栈元素a, b, c, d, e\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="built_in">Push</span>(S, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（4）栈为%s\n&quot;</span>, (<span class="built_in">StackEmpty</span>(S) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（5）出栈队列：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S)) &#123;</span><br><span class="line">        <span class="built_in">Pop</span>(S, e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（6）栈为%s\n&quot;</span>, (<span class="built_in">StackEmpty</span>(S) ? <span class="string">&quot;空&quot;</span> : <span class="string">&quot;非空&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（7）释放栈\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DestoryStack</span>(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-队列"><a href="#4-队列" class="headerlink" title="4 队列"></a>4 队列</h1><h2 id="4-1-基本知识"><a href="#4-1-基本知识" class="headerlink" title="4.1 基本知识"></a>4.1 基本知识</h2><p>先进先出</p>
<ol>
<li><p>队列的插入操作实现方法：</p>
<ul>
<li>判断队列是否已满，实际上是由于队尾标记不断增加，需要判断队尾标记是否大于数组长度</li>
<li>更新队尾标记，将新插入元素存入队尾</li>
</ul>
</li>
<li><p>队列的遍历操作实现方法：</p>
<ul>
<li>输出队首标记所在的元素</li>
<li>队首标记后移一位</li>
<li>若队尾标记和队首标记相等，输出最后一个元素，否则返回步骤1</li>
</ul>
</li>
<li><p>队列出队操作的实现方法：</p>
<ul>
<li>比较队尾标记和队首标记的大小，当队首标记大于队尾标记则说明队列为空了，此时出队操作是非法的</li>
<li>令队首标记后移一位，队首标记后移即视作原队首出队了*</li>
</ul>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> head, tail, length;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *q, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    q-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br><span class="line">    q-&gt;length = length;</span><br><span class="line">    q-&gt;head = <span class="number">0</span>;</span><br><span class="line">    q-&gt;tail = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Queue *q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;tail + <span class="number">1</span> &gt;= q-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;tail++;</span><br><span class="line">    q-&gt;data[q-&gt;tail] = element;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = q-&gt;head; i &lt;= q-&gt;tail; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首元素输出函数 front</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除队首元素函数 pop</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    q-&gt;head++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空的函数 empty</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;head &gt; q-&gt;tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(q-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue *<span class="built_in">queue</span> = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    init(<span class="built_in">queue</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(<span class="built_in">queue</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    output(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">if</span>(!empty(<span class="built_in">queue</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, front(<span class="built_in">queue</span>));</span><br><span class="line">        pop(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    output(<span class="built_in">queue</span>);</span><br><span class="line">    clear(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-循环队列"><a href="#4-2-循环队列" class="headerlink" title="4.2 循环队列"></a>4.2 循环队列</h2><p>上面的队列实现方式有一个问题：假上溢</p>
<p>循环队列，当队尾标记<code>tail</code>到达队列上限后，如果队列内的元素没有达到上限，就跳转到数组的开始位置，也就是0的位置，也就是0的位置，队首标记到达队列上限也采取同样的处理。通过这样的方法，我们就能够最大化利用内存空间，避免“假上溢”的情况出现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> head, tail, length, count;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(Queue *q, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    q-&gt;data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * length);</span><br><span class="line">    q-&gt;length = length;</span><br><span class="line">    q-&gt;head = <span class="number">0</span>;</span><br><span class="line">    q-&gt;tail = <span class="number">-1</span>;</span><br><span class="line">    q-&gt;count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(Queue *q, <span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;count &gt;= q-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;tail = (q-&gt;tail + <span class="number">1</span>) % q-&gt;length;</span><br><span class="line">    q-&gt;data[q-&gt;tail] = element;</span><br><span class="line">    q-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = q-&gt;head;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q-&gt;data[i]);</span><br><span class="line">        i = (i + <span class="number">1</span>) % q-&gt;length;</span><br><span class="line">    &#125; <span class="keyword">while</span>(i != (q-&gt;tail + <span class="number">1</span>) % q-&gt;length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;data[q-&gt;head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    q-&gt;head = (q-&gt;head + <span class="number">1</span>) % q-&gt;length;</span><br><span class="line">    q-&gt;count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Queue *q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(q-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue *q = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    init(q, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        push(q, i);</span><br><span class="line">    &#125;</span><br><span class="line">    output(q);</span><br><span class="line">    <span class="keyword">if</span> (!empty(q)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, front(q));</span><br><span class="line">        pop(q);        </span><br><span class="line">    &#125;</span><br><span class="line">    output(q);</span><br><span class="line">    clear(q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-树和二叉树"><a href="#5-树和二叉树" class="headerlink" title="5 树和二叉树"></a>5 树和二叉树</h1><h2 id="5-1-树"><a href="#5-1-树" class="headerlink" title="5.1 树"></a>5.1 树</h2><h3 id="5-1-1-概念"><a href="#5-1-1-概念" class="headerlink" title="5.1.1 概念"></a>5.1.1 概念</h3><p>树有且仅有一个上面的树根。树是由若干个有限结点组成的一个具有层次关系的集合，最上面的结点为树的根结点</p>
<p>结点拥有的子树个数我们称为结点的度</p>
<h3 id="5-1-2-性质"><a href="#5-1-2-性质" class="headerlink" title="5.1.2 性质"></a>5.1.2 性质</h3><p>每棵非空树有且仅有一个根结点</p>
<p>在树上，从一个结点出发可以访问到其余的结点，并且一个结点到另一个结点的路径有且仅有一条</p>
<p>父亲结点可以有多个孩子结点，除根结点外，其余的结点有且仅有一个父亲结点。</p>
<p>根结点没有父亲结点，叶结点没有孩子结点</p>
<h2 id="5-2-二叉树"><a href="#5-2-二叉树" class="headerlink" title="5.2 二叉树"></a>5.2 二叉树</h2><h3 id="5-2-1-概念"><a href="#5-2-1-概念" class="headerlink" title="5.2.1 概念"></a>5.2.1 概念</h3><p>二叉树的每个结点最多只有两个孩子结点。二叉树有5种基本形态：空二叉树（树为空没有结点）、只有根结点的二叉树、只有左子树的二叉树、只有右子树的二叉树、左右子树都有的二叉树</p>
<h3 id="5-2-2-性质"><a href="#5-2-2-性质" class="headerlink" title="5.2.2 性质"></a>5.2.2 性质</h3><p>二叉树的第 i 层最多有 $2^{i-1}$ 个结点。由定义可知，二叉树的每个结点最多有两个孩子结点，那么第 i 层最多的结点数等于第 i - 1 层最多结点数的2倍。而第 1 层最多只有1个结点，所以我们可以知道第 i 层最多有 $2^{i-1}$ 个结点</p>
<p>深度为 k 的二叉树最多有 $2^k$ - 1 个结点。由上一个性质，我们可以知道二叉树每层最多的结点个数，从第 1 层到第 k 层把最多结点数累加起来，我们就可以得到深度为 k 的二叉树最多有 $2^k$ - 1个结点</p>
<p>任意一棵二叉树上，其叶子结点个数 $n_0$ 比度为2的结点数 $n_2$ 多1。我们记树上结点总个数为n，度为1的结点个数为 $n_1$ ，则有 n = $n_0$ + $n_1$ + $n_2$。另外我们可以发现一棵二叉树一共有 n - 1条边，度为2的结点可以延伸出两条边，度为1的结点可以延伸出一条边，叶子结点没有边延伸出来，所以又有 n - 1 = $n_1$ + 2 $\times$ $n_2$。结合以上两个式子，我们可以得到 $n_0$ = $n_2$ + 1</p>
<h3 id="5-2-3-两个特殊的二叉树"><a href="#5-2-3-两个特殊的二叉树" class="headerlink" title="5.2.3 两个特殊的二叉树"></a>5.2.3 两个特殊的二叉树</h3><p><strong>满二叉树：</strong>如果一棵树深度为 k 而且有 $2^k$ - 1个结点，那么我们称该二叉树为满二叉树，也就是说在此深度上，不能再添加结点了</p>
<p><strong>完全二叉树：</strong>如果一棵树深度为k，从第 1 层到第 k - 1层该树是满二叉树，第 k 层的结点都集中在左边，那么我们称该二叉树为完全二叉树。完全二叉树因其结构的特殊性具有很高的效率，经常被用在算法的优化里</p>
<h3 id="5-2-4-二叉树的广义表表达形式"><a href="#5-2-4-二叉树的广义表表达形式" class="headerlink" title="5.2.4 二叉树的广义表表达形式"></a>5.2.4 二叉树的广义表表达形式</h3><p>我们可以用广义表来表示二叉树，形式为 a(b, c)，表示根结点a的左孩子结点为b，右孩子结点为c。中间用一个逗号隔开。如果左右孩子结点不为空，则用以上形式来替换；如果结点为空，则不填任何字符。以下是几种常见的格式：</p>
<ul>
<li>a：表示根结点为a，左右孩子结点均为空</li>
<li>a(b)：表示根结点为a，左孩子结点为b，右孩子结点为空</li>
<li>a(, c)：表示根结点为a，左孩子结点为空，右孩子结点为c</li>
<li>a(b, c)：表示根结点为a，左孩子结点为b，右孩子结点为c</li>
</ul>
<p>如 7(4(3, 6), 15(, 55)) 可以表示以下这棵二叉树：</p>
<p>如何将广义表创建成二叉树：</p>
<p>将广义表创建成二叉树，可以借助栈来实现，利用栈先进后出的特点，先将根结点压入栈中，如果左孩子结点不为空，则将其作为栈顶结点（即其父亲结点）的左孩子结点，并压入栈中，递归左子树，处理完之后左孩子节点出战；如果右孩子不为空，则将其作为栈顶结点（即其父亲结点）的右孩子结点，并压入栈中，递归右子树，处理完之后右孩子结点出栈</p>
<h2 id="5-3-二叉树的存储结构"><a href="#5-3-二叉树的存储结构" class="headerlink" title="5.3 二叉树的存储结构"></a>5.3 二叉树的存储结构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现二叉树的各种基本运算</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBTree</span><span class="params">(BTNode*&amp; b, <span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>, k, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    ch = str[j];</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (ch) &#123;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>(<span class="string">&#x27;:</span></span><br><span class="line">            top++;</span><br><span class="line">            St[top] = p;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>)<span class="string">&#x27;:</span></span><br><span class="line">            top--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>,<span class="string">&#x27;:</span></span><br><span class="line">            k = 2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            p = (BTNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">            p-&gt;data = ch;</span><br><span class="line">            p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">                b = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in"><span class="keyword">switch</span></span> (k) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    St[top]-&gt;lchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    St[top]-&gt;rchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch = str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryBTree</span><span class="params">(BTNode*&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;lchild);</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">FindNode</span><span class="params">(BTNode* b, ElemType x)</span> </span>&#123;</span><br><span class="line">    BTNode* p;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;data == x)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p = <span class="built_in">FindNode</span>(b-&gt;lchild, x);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">FindNode</span>(b-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">LchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">RchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BTHeight</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchildh, rchildh;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lchildh = <span class="built_in">BTHeight</span>(b-&gt;lchild);</span><br><span class="line">        rchildh = <span class="built_in">BTHeight</span>(b-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> (lchildh &gt; rchildh ? (lchildh + <span class="number">1</span>) : (rchildh + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;c&quot;</span>, b-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild != <span class="literal">NULL</span> || b-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span> (b-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;rchild);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BTNode* b, * p, * lp, * rp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树的基本运算如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（1）创建二叉树\n&quot;</span>);</span><br><span class="line">    <span class="built_in">CreateBTree</span>(b, <span class="string">&quot;A(B(D,E(H(J,K(L,M(,N))))),C(F,G(,I)))&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（2）输出二叉树&quot;</span>);</span><br><span class="line">    <span class="built_in">DispBTree</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（3）H结点：&quot;</span>);</span><br><span class="line">    p = <span class="built_in">FindNode</span>(b, <span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        lp = <span class="built_in">LchildNode</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (lp != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;左孩子为%c&quot;</span>, lp-&gt;data);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无左孩子&quot;</span>);</span><br><span class="line">        rp = <span class="built_in">RchildNode</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (rp != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;右孩子为%c&quot;</span>, rp-&gt;data);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无右孩子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（4）二叉树b的高度：%d\n&quot;</span>, <span class="built_in">BTHeight</span>(b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;（5）释放二叉树b\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DestoryBTree</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-遍历二叉树"><a href="#5-4-遍历二叉树" class="headerlink" title="5.4 遍历二叉树"></a>5.4 遍历二叉树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现二叉树各种遍历算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBTree</span><span class="params">(BTNode*&amp; b, <span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>, k, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    ch = str[j];</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (ch) &#123;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>(<span class="string">&#x27;:</span></span><br><span class="line">            top++;</span><br><span class="line">            St[top] = p;</span><br><span class="line">            k = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>)<span class="string">&#x27;:</span></span><br><span class="line">            top--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span><span class="number">&#x27;</span>,<span class="string">&#x27;:</span></span><br><span class="line">            k = 2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            p = (BTNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BTNode));</span><br><span class="line">            p-&gt;data = ch;</span><br><span class="line">            p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">                b = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in"><span class="keyword">switch</span></span> (k) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    St[top]-&gt;lchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    St[top]-&gt;rchild = p;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch = str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryBTree</span><span class="params">(BTNode*&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;lchild);</span><br><span class="line">        <span class="built_in">DestoryBTree</span>(b-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">FindNode</span><span class="params">(BTNode* b, ElemType x)</span> </span>&#123;</span><br><span class="line">    BTNode* p;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b-&gt;data == x)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p = <span class="built_in">FindNode</span>(b-&gt;lchild, x);</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">FindNode</span>(b-&gt;rchild, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">LchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BTNode* <span class="title">RchildNode</span><span class="params">(BTNode* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BTHeight</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchildh, rchildh;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        lchildh = <span class="built_in">BTHeight</span>(b-&gt;lchild);</span><br><span class="line">        rchildh = <span class="built_in">BTHeight</span>(b-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> (lchildh &gt; rchildh ? (lchildh + <span class="number">1</span>) : (rchildh + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispBTree</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;c&quot;</span>, b-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild != <span class="literal">NULL</span> || b-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span> (b-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="built_in">DispBTree</span>(b-&gt;rchild);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上为btree.cpp 包含二叉树的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 先序遍历递归算法</span></span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问根节点</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(b-&gt;lchild);  <span class="comment">// 递归访问左子树</span></span><br><span class="line">        <span class="built_in">PreOrder</span>(b-&gt;rchild);  <span class="comment">//递归访问右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder1</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 先序非递归遍历算法</span></span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        top++;  <span class="comment">// 根结点进栈</span></span><br><span class="line">        St[top] = b;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">-1</span>) &#123;  <span class="comment">// 栈不为空时循环</span></span><br><span class="line">            p = St[top];  <span class="comment">// 退栈并访问该结点</span></span><br><span class="line">            top--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;rchild != <span class="literal">NULL</span>) &#123;  <span class="comment">// 有右孩子，将其进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;lchild != <span class="literal">NULL</span>) &#123;  <span class="comment">// 有左孩子，将其进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 中序遍历的递归算法</span></span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(b-&gt;lchild);  <span class="comment">// 递归访问左子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问根结点</span></span><br><span class="line">        <span class="built_in">InOrder</span>(b-&gt;rchild);  <span class="comment">// 递归访问右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder1</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 中序非递归遍历算法</span></span><br><span class="line">    BTNode* St[MAXSIZE], * p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p = b;</span><br><span class="line">        <span class="keyword">while</span> (top &gt; <span class="number">-1</span> || p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;  <span class="comment">// 扫描结点p的所有左下结点并进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p;</span><br><span class="line">                p = p-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (top &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                p = St[top];  <span class="comment">// 出栈结点p并访问</span></span><br><span class="line">                top--;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, p-&gt;data);</span><br><span class="line">                p = p-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 后序遍历的递归算法</span></span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">PostOrder</span>(b-&gt;lchild);  <span class="comment">// 递归访问左子树</span></span><br><span class="line">        <span class="built_in">PostOrder</span>(b-&gt;rchild);  <span class="comment">// 递归访问右子树</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问根结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder1</span><span class="params">(BTNode* b)</span> </span>&#123;  <span class="comment">// 后序非递归遍历算法</span></span><br><span class="line">    BTNode* St[MAXSIZE];</span><br><span class="line">    BTNode* p;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;  <span class="comment">// 栈指针置初值</span></span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (b != <span class="literal">NULL</span>) &#123;  <span class="comment">// 将b结点的所有左下结点进栈</span></span><br><span class="line">                top++;</span><br><span class="line">                St[top] = b;</span><br><span class="line">                b = b-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="literal">NULL</span>;  <span class="comment">// p指向当前结点的前一个已访问的结点</span></span><br><span class="line">            flag = <span class="literal">true</span>;  <span class="comment">// flag为真表示正在处理栈顶结点</span></span><br><span class="line">            <span class="keyword">while</span> (top != <span class="number">-1</span> &amp;&amp; flag) &#123;</span><br><span class="line">                b = St[top];  <span class="comment">// 取出当前的栈顶元素</span></span><br><span class="line">                <span class="keyword">if</span> (b-&gt;rchild == p) &#123;  <span class="comment">// 右子树不存在或已被访问</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);  <span class="comment">// 访问b结点</span></span><br><span class="line">                    top--;</span><br><span class="line">                    p = b;  <span class="comment">// p指向被访问的结点</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    b = b-&gt;rchild;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (top != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TravLevel</span><span class="params">(BTNode* b)</span> </span>&#123;</span><br><span class="line">    BTNode* Qu[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> front, rear;</span><br><span class="line">    front = rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;data);</span><br><span class="line">    rear++;</span><br><span class="line">    Qu[rear] = b;</span><br><span class="line">    <span class="keyword">while</span> (rear != front) &#123;</span><br><span class="line">        front = (front + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        b = Qu[front];</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;lchild-&gt;data);</span><br><span class="line">            rear = (rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">            Qu[rear] = b-&gt;lchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;rchild != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, b-&gt;rchild-&gt;data);</span><br><span class="line">            rear = (rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">            Qu[rear] = b-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BTNode* b;</span><br><span class="line">    <span class="built_in">CreateBTree</span>(b, <span class="string">&quot;A(B(D,E(H(J,K(L,M(,N))))),C(F,G(,I)))&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树b：&quot;</span>);</span><br><span class="line">    <span class="built_in">DispBTree</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;层次遍历序列：&quot;</span>);</span><br><span class="line">    <span class="built_in">TravLevel</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;先序遍历序列：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PreOrder</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PreOrder1</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;中序遍历序列：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrder</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">InOrder1</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;后序遍历序列：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PostOrder</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  非递归算法：&quot;</span>);</span><br><span class="line">    <span class="built_in">PostOrder1</span>(b);</span><br><span class="line">    <span class="built_in">DestoryBTree</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-5-赫夫曼树及其应用"><a href="#5-5-赫夫曼树及其应用" class="headerlink" title="5.5 赫夫曼树及其应用"></a>5.5 赫夫曼树及其应用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50  <span class="comment">//叶子结点总数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2*N-1  <span class="comment">// 树中结点总数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">5</span>];  <span class="comment">// 结点值</span></span><br><span class="line">    <span class="keyword">int</span> weight;  <span class="comment">// 权重</span></span><br><span class="line">    <span class="keyword">int</span> parent;  <span class="comment">// 双亲结点</span></span><br><span class="line">    <span class="keyword">int</span> lchild;  <span class="comment">// 左孩子结点</span></span><br><span class="line">    <span class="keyword">int</span> rchild;  <span class="comment">// 右孩子结点</span></span><br><span class="line">&#125;HTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> cd[N];  <span class="comment">// 存放哈夫曼编码</span></span><br><span class="line">    <span class="keyword">int</span> start;  <span class="comment">// ch[start.n]存放哈夫曼编码</span></span><br><span class="line">&#125;HCode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHT</span><span class="params">(HTNode ht[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">// 由ht的叶子结点构造完整的哈夫曼树</span></span><br><span class="line">    <span class="keyword">int</span> i, k, lnode, rnode;</span><br><span class="line">    <span class="keyword">int</span> min1, min2;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++)  <span class="comment">// 所有结点的相关域置初值-1</span></span><br><span class="line">        ht[i].parent = ht[i].lchild = ht[i].rchild = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &lt; <span class="number">2</span> * n - <span class="number">1</span>; i++) &#123;  <span class="comment">// 构造哈夫曼树的分支结点</span></span><br><span class="line">        min1 = min2 = <span class="number">32767</span>;  <span class="comment">// lnode和rnode为最小权重的两个结点位置</span></span><br><span class="line">        lnode = rnode = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt;= i - <span class="number">1</span>; k++)  <span class="comment">// 查找最小和次小结点</span></span><br><span class="line">            <span class="keyword">if</span> (ht[k].parent == <span class="number">-1</span>) &#123;  <span class="comment">// 只在尚未构造二叉树的结点中查找</span></span><br><span class="line">                <span class="keyword">if</span> (ht[k].weight &lt; min1) &#123;</span><br><span class="line">                    min2 = min1;</span><br><span class="line">                    rnode = lnode;</span><br><span class="line">                    min1 = ht[k].weight;</span><br><span class="line">                    lnode = k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ht[k].weight &lt; min2) &#123;</span><br><span class="line">                    min2 = ht[k].weight;</span><br><span class="line">                    rnode = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ht[lnode].parent = i;  <span class="comment">// 合并两个最小和次小的结点</span></span><br><span class="line">        ht[rnode].parent = i;</span><br><span class="line">        ht[i].weight = ht[lnode].weight + ht[rnode].weight;</span><br><span class="line">        ht[i].lchild = lnode;</span><br><span class="line">        ht[i].rchild = rnode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateHCode</span><span class="params">(HTNode ht[], HCode hcd[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">// 由哈夫曼树ht构造哈夫曼编码hcd</span></span><br><span class="line">    <span class="keyword">int</span> i, f, c;</span><br><span class="line">    HCode hc;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 根据哈夫曼树构造所有叶子结点的哈夫曼编码</span></span><br><span class="line">        hc.start = n;</span><br><span class="line">        c = i;</span><br><span class="line">        f = ht[i].parent;</span><br><span class="line">        <span class="keyword">while</span> (f != <span class="number">-1</span>) &#123;  <span class="comment">// 循环直到树根结点</span></span><br><span class="line">            <span class="keyword">if</span> (ht[f].lchild == c)  <span class="comment">// 处理左孩子结点</span></span><br><span class="line">                hc.cd[hc.start--] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// 处理右孩子结点</span></span><br><span class="line">                hc.cd[hc.start--] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            c = f;</span><br><span class="line">            f = ht[f].parent;</span><br><span class="line">        &#125;</span><br><span class="line">        hc.start++;  <span class="comment">// start指向哈夫曼编码最开始字符</span></span><br><span class="line">        hcd[i] = hc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispHCode</span><span class="params">(HTNode ht[], HCode hcd[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">// 输出哈夫曼编码</span></span><br><span class="line">    <span class="keyword">int</span> i, k;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, m = <span class="number">0</span>, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输出哈夫曼编码：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;   %s\t&quot;</span>, ht[i].data);</span><br><span class="line">        <span class="keyword">for</span> (k = hcd[i].start; k &lt;= n; k++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, hcd[i].cd[k]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        m += ht[i].weight;</span><br><span class="line">        sum += ht[i].weight * j;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n平均长度=%g\n&quot;</span>, <span class="number">1.0</span> * sum / m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">15</span>, i;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* str[] = &#123; <span class="string">&quot;The&quot;</span>, <span class="string">&quot;of&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;to&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;in&quot;</span>, <span class="string">&quot;that&quot;</span>, <span class="string">&quot;he&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;at&quot;</span>, <span class="string">&quot;on&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;His&quot;</span>, <span class="string">&quot;are&quot;</span>, <span class="string">&quot;be&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> fnum[] = &#123; <span class="number">1192</span>, <span class="number">677</span>, <span class="number">541</span>, <span class="number">518</span>, <span class="number">462</span>, <span class="number">450</span>, <span class="number">242</span>, <span class="number">195</span>, <span class="number">190</span>, <span class="number">181</span>, <span class="number">174</span>, <span class="number">157</span>, <span class="number">138</span>, <span class="number">124</span>, <span class="number">123</span> &#125;;</span><br><span class="line">    HTNode ht[M];</span><br><span class="line">    HCode hcd[N];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(ht[i].data, str[i]);</span><br><span class="line">        ht[i].weight = fnum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CreateHT</span>(ht, n);  <span class="comment">// 创建哈夫曼树</span></span><br><span class="line">    <span class="built_in">CreateHCode</span>(ht, hcd, n);  <span class="comment">// 构造哈夫曼编码</span></span><br><span class="line">    <span class="built_in">DispHCode</span>(ht, hcd, n);  <span class="comment">// 输出哈夫曼编码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="6-图"><a href="#6-图" class="headerlink" title="6 图"></a>6 图</h1><h2 id="6-1-什么是图"><a href="#6-1-什么是图" class="headerlink" title="6.1 什么是图"></a>6.1 什么是图</h2><p>图是由一系列顶点和若干连结顶点集合内两个顶点的边组成的数据结构。通常我们用G = (V, E) 表示一个图结构，其中V表示点集，E表示边集</p>
<p>在顶点集合所包含的若干个顶点之间，可能存在这某种两两对应关系——如果某两个点之间的确存在这样的关系的话，我们就在这两个点之间连边，这样就得到了边集的一个成员，也就是一条边。对应到社交网络上，顶点就是网络中的用户，边就是用户之间的好友关系</p>
<h2 id="6-2-图的常用概念"><a href="#6-2-图的常用概念" class="headerlink" title="6.2 图的常用概念"></a>6.2 图的常用概念</h2><p>如果图中所有边都是无向边，则称为无向图，反之称为有向图</p>
<p>有很少边或弧（如 e &lt; nlogn，e指边数，n指点数）的图称为稀疏图，反之称为稠密图。顶点的<strong>度</strong>是指依附于某个顶点的边数。在有向图中，顶点的<strong>入度</strong>是指以顶点为弧头的弧的数目，也就是以该顶点为终点的弧的数目；顶点的<strong>出度</strong>是指以顶点为弧尾的弧的数目，也就是以该顶点为起点的弧的数目，在有向图里，顶点的度为入度和出度之和。在无向图里，图中的边数等于所有顶点度数和的一半</p>
<h2 id="6-3-图的存储方式"><a href="#6-3-图的存储方式" class="headerlink" title="6.3 图的存储方式"></a>6.3 图的存储方式</h2><p>两个常见的图的存储结构——<strong>邻接矩阵</strong>和<strong>邻接表</strong>。邻接矩阵就是用一维数组存储图中顶点的信息，用矩阵表示图中各顶点之间的邻接关系</p>
<p>对于有n个顶点的图 G = (V, E) 来说，我们可以用一个 n $\times$ n 的矩阵A来表示G中各顶点的相邻关系，如果$v_i$和$v_j$之间存在边（或弧），则A$[i]$$[j]$ = 1，否则A$[i]$$[j]$ = 0。下图为有向图$G_1$和无向图$G_2$对应的邻接矩阵：</p>
<p>图的邻接矩阵是唯一的，矩阵的大小只与顶点个数N有关，是一个N $\times$ N 的矩阵。在无向图里，如果顶点 $v_i$ 和 $v_j$ 之间有边，则可认为顶点 $v_i$ 到 $v_j$ 有边，顶点 $v_j$ 到 $v_i$ 也有边。对应到邻接矩阵里，则有A$[i]$ $[j]$ = A$[j]$$[i]$ = 1。无向图的邻接矩阵是一个对称矩阵</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现图的邻接矩阵和邻接表存储</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &lt; n;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    AdjGraph* G;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">5</span>,INF,<span class="number">7</span>,INF,INF&#125;,&#123;INF,<span class="number">0</span>,<span class="number">4</span>,INF,INF,INF&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>,INF,<span class="number">0</span>,INF,INF,<span class="number">9</span>&#125;,&#123;INF,INF,<span class="number">5</span>,<span class="number">0</span>,INF,<span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF,INF,INF,<span class="number">5</span>,<span class="number">0</span>,INF&#125;,&#123;<span class="number">3</span>,INF,INF,INF,<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(1)图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">CreateAdj</span>(G, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(2)图G的邻接表：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispAdj</span>(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(3)销毁图G的邻接表\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DestoryAdj</span>(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-图的遍历"><a href="#6-4-图的遍历" class="headerlink" title="6.4 图的遍历"></a>6.4 图的遍历</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visited[MAXV];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AdjGraph* G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, v);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    p = G-&gt;adjlist[v].firstarc;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[p-&gt;adjvex] == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">DFS</span>(G, p-&gt;adjvex);</span><br><span class="line">        p = p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(AdjGraph* G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">int</span> St[MAXV];</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>, w, x, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, v);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    top++;</span><br><span class="line">    St[top] = v;</span><br><span class="line">    <span class="keyword">while</span> (top &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        x = St[top];</span><br><span class="line">        p = G-&gt;adjlist[x].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            w = p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (visited[w] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, w);</span><br><span class="line">                visited[w] = <span class="number">1</span>;</span><br><span class="line">                top++;</span><br><span class="line">                St[top] = w;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">            top--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(AdjGraph* G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">int</span> queue[MAXV], front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> visited[MAXV];</span><br><span class="line">    <span class="keyword">int</span> w, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G-&gt;n; i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, v);</span><br><span class="line">    visited[v] = <span class="number">1</span>;</span><br><span class="line">    rear = (rear + <span class="number">1</span>) % MAXV;</span><br><span class="line">    queue[rear] = v;</span><br><span class="line">    <span class="keyword">while</span> (front != rear) &#123;</span><br><span class="line">        front = (front + <span class="number">1</span>) % MAXV;</span><br><span class="line">        w = queue[front];</span><br><span class="line">        p = G-&gt;adjlist[w].firstarc;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[p-&gt;adjvex] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, p-&gt;adjvex);</span><br><span class="line">                visited[p-&gt;adjvex] = <span class="number">1</span>;</span><br><span class="line">                rear = (rear + <span class="number">1</span>) % MAXV;</span><br><span class="line">                queue[rear] = p-&gt;adjvex;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AdjGraph* G;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">7</span>, INF, INF&#125;, &#123;INF, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, INF, <span class="number">0</span>, INF, INF, <span class="number">9</span>&#125;, &#123;INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF&#125;, &#123;<span class="number">3</span>, INF, INF, INF, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateAdj</span>(G, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图G的邻接表：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispAdj</span>(G);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0开始的DFS（递归算法）：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DFS</span>(G, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0开始的DFS（非递归算法）：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DFS1</span>(G, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从顶点0开始的BFS：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">BFS</span>(G, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">DestoryAdj</span>(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-最小生成树"><a href="#6-5-最小生成树" class="headerlink" title="6.5 最小生成树"></a>6.5 最小生成树</h2><p>构造连通网的最小代价生成树称为最小生成树</p>
<h3 id="6-5-1-普利姆算法"><a href="#6-5-1-普利姆算法" class="headerlink" title="6.5.1 普利姆算法"></a>6.5.1 普利姆算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Prim</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(MatGraph g, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lowcost[MAXV], min, n = g.n;</span><br><span class="line">    <span class="keyword">int</span> closest[MAXV], i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        lowcost[i] = g.edges[v][i];</span><br><span class="line">        closest[i] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        min = INF;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; lowcost[j] &lt; min) &#123;</span><br><span class="line">                min = lowcost[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;边（%d, %d）权为：%d\n&quot;</span>, closest[k], k, min);</span><br><span class="line">        lowcost[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[k][j] != <span class="number">0</span> &amp;&amp; g.edges[k][j] &lt; lowcost[j]) &#123;</span><br><span class="line">                lowcost[j] = g.edges[k][j];</span><br><span class="line">                closest[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">3</span>;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, INF, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, INF, <span class="number">9</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;普利姆算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Prim</span>(g, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-2-克鲁斯卡尔算法"><a href="#6-5-2-克鲁斯卡尔算法" class="headerlink" title="6.5.2 克鲁斯卡尔算法"></a>6.5.2 克鲁斯卡尔算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Kruskal</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">&#125;Edge;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(Edge E[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    Edge temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        temp = E[i];</span><br><span class="line">        j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; temp.w &lt; E[j].w) &#123;</span><br><span class="line">            E[j + <span class="number">1</span>] = E[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        E[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, u1, v1, sn1, sn2, k;</span><br><span class="line">    <span class="keyword">int</span> vset[MAXV];</span><br><span class="line">    Edge E[MAXSIZE];</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != <span class="number">0</span> &amp;&amp; g.edges[i][j] != INF) &#123;</span><br><span class="line">                E[k].u = i;</span><br><span class="line">                E[k].v = j;</span><br><span class="line">                E[k].w = g.edges[i][j];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">InsertSort</span>(E, g.e);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        vset[i] = i;</span><br><span class="line">    k = <span class="number">1</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; g.n) &#123;</span><br><span class="line">        u1 = E[j].u;</span><br><span class="line">        v1 = E[j].v;</span><br><span class="line">        sn1 = vset[u1];</span><br><span class="line">        sn2 = vset[v1];</span><br><span class="line">        <span class="keyword">if</span> (sn1 != sn2) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d):%d\n&quot;</span>, u1, v1, E[j].w);</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">                <span class="keyword">if</span> (vset[i] == sn2)</span><br><span class="line">                    vset[i] = sn1;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">3</span>;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, INF, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;, &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="number">7</span>, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, INF, <span class="number">9</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;克鲁斯卡尔算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Kruskal</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-最短路径"><a href="#6-6-最短路径" class="headerlink" title="6.6 最短路径"></a>6.6 最短路径</h2><h3 id="6-6-1-迪杰斯特拉算法"><a href="#6-6-1-迪杰斯特拉算法" class="headerlink" title="6.6.1 迪杰斯特拉算法"></a>6.6.1 迪杰斯特拉算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dijkstra</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dispath</span><span class="params">(MatGraph g, <span class="keyword">int</span> dist[], <span class="keyword">int</span> path[], <span class="keyword">int</span> S[], <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> apath[MAXV], d;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">if</span> (S[i] == <span class="number">1</span> &amp;&amp; i != v) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;从顶点%d到顶点%d的路径长度为：%d\t路径为：&quot;</span>, v, i, dist[i]);</span><br><span class="line">            d = <span class="number">0</span>;</span><br><span class="line">            apath[d] = i;</span><br><span class="line">            k = path[i];</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;无路径\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (k != v) &#123;</span><br><span class="line">                    d++;</span><br><span class="line">                    apath[d] = k;</span><br><span class="line">                    k = path[k];</span><br><span class="line">                &#125;</span><br><span class="line">                d++;</span><br><span class="line">                apath[d] = v;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, apath[d]);</span><br><span class="line">                <span class="keyword">for</span> (j = d - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;,%d&quot;</span>, apath[j]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(MatGraph g, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXV], path[MAXV];</span><br><span class="line">    <span class="keyword">int</span> S[MAXV];</span><br><span class="line">    <span class="keyword">int</span> Mindis, i, j, u;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        dist[i] = g.edges[v][i];</span><br><span class="line">        S[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (g.edges[v][i] &lt; INF)</span><br><span class="line">            path[i] = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[v] = <span class="number">1</span>;</span><br><span class="line">    path[v] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        Mindis = INF;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (S[j] == <span class="number">0</span> &amp;&amp; dist[j] &lt; Mindis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                Mindis = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        S[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; g.n;j++)</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> (g.edges[u][j] &lt; INF &amp;&amp; dist[u] + g.edges[u][j] &lt; dist[j]) &#123;</span><br><span class="line">                    dist[j] = dist[u] + g.edges[u][j];</span><br><span class="line">                    path[j] = u;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dispath</span>(g, dist, path, S, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    MatGraph g;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">7</span>, INF, INF&#125;, &#123;INF, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, INF, <span class="number">0</span>, INF, INF, <span class="number">9</span>&#125;, &#123;INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF&#125;, &#123;<span class="number">3</span>, INF, INF, INF, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有向图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;迪杰斯特拉算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Dijkstra</span>(g, v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-6-2-弗洛伊德算法"><a href="#6-6-2-弗洛伊德算法" class="headerlink" title="6.6.2 弗洛伊德算法"></a>6.6.2 弗洛伊德算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Floyd</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 100  <span class="comment">// 最大顶点个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> InfoType;</span><br><span class="line"><span class="comment">//以下定义邻接矩阵类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> no;  <span class="comment">// 顶点编号</span></span><br><span class="line">    InfoType info;  <span class="comment">// 顶点其他信息</span></span><br><span class="line">&#125;VertexType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> edges[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    VertexType vexs[MAXV];</span><br><span class="line">&#125;MatGraph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ANode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span> &#123;</span></span><br><span class="line">    InfoType info;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    ArcNode* firstarc;</span><br><span class="line">&#125;VNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    VNode adjlist[MAXV];</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">&#125;AdjGraph;</span><br><span class="line"><span class="comment">//邻接矩阵的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMat</span><span class="params">(MatGraph&amp; g, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    g.n = n;</span><br><span class="line">    g.e = e;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            g.edges[i][j] = A[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispMat</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (g.edges[i][j] != INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, g.edges[i][j]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%4s&quot;</span>, <span class="string">&quot;∞&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表的基本运算算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateAdj</span><span class="params">(AdjGraph*&amp; G, <span class="keyword">int</span> A[MAXV][MAXV], <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    G = (AdjGraph*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AdjGraph));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        G-&gt;adjlist[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span> &amp;&amp; A[i][j] != INF) &#123;</span><br><span class="line">                p = (ArcNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ArcNode));</span><br><span class="line">                p-&gt;adjvex = j;</span><br><span class="line">                p-&gt;weight = A[i][j];</span><br><span class="line">                p-&gt;nextarc = G-&gt;adjlist[i].firstarc;</span><br><span class="line">                G-&gt;adjlist[i].firstarc = p;</span><br><span class="line">            &#125;</span><br><span class="line">    G-&gt;n = n;</span><br><span class="line">    G-&gt;e = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DispAdj</span><span class="params">(AdjGraph* G)</span> </span>&#123;</span><br><span class="line">    ArcNode* p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        p = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d:&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d[%d]-&gt;&quot;</span>, p-&gt;adjvex, p-&gt;weight);</span><br><span class="line">            p = p-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;^\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryAdj</span><span class="params">(AdjGraph*&amp; G)</span> </span>&#123;</span><br><span class="line">    ArcNode* pre, * p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G-&gt;n; i++) &#123;</span><br><span class="line">        pre = G-&gt;adjlist[i].firstarc;</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            p = pre-&gt;nextarc;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(pre);</span><br><span class="line">                pre = p;</span><br><span class="line">                p = p-&gt;nextarc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(G);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dispath</span><span class="params">(MatGraph g, <span class="keyword">int</span> A[][MAXV], <span class="keyword">int</span> path[][MAXV])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, s;</span><br><span class="line">    <span class="keyword">int</span> apath[MAXV], d;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != INF &amp;&amp; i != j) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;从%d到%d的路径为：&quot;</span>, i, j);</span><br><span class="line">                k = path[i][j];</span><br><span class="line">                d = <span class="number">0</span>;</span><br><span class="line">                apath[d] = j;</span><br><span class="line">                <span class="keyword">while</span> (k != <span class="number">-1</span> &amp;&amp; k != i) &#123;</span><br><span class="line">                    d++;</span><br><span class="line">                    apath[d] = k;</span><br><span class="line">                    k = path[i][k];</span><br><span class="line">                &#125;</span><br><span class="line">                k++;</span><br><span class="line">                apath[d] = i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, apath[d]);</span><br><span class="line">                <span class="keyword">for</span> (s = d - <span class="number">1</span>; s &gt;= <span class="number">0</span>; s--)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;,%d&quot;</span>, apath[s]);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t路径长度为：%d\n&quot;</span>, A[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(MatGraph g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV], path[MAXV][MAXV];</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++) &#123;</span><br><span class="line">            A[i][j] = g.edges[i][j];</span><br><span class="line">            <span class="keyword">if</span> (i != j &amp;&amp; g.edges[i][j] &lt; INF)</span><br><span class="line">                path[i][j] = i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                path[i][j] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; g.n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; g.n; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; g.n; j++)</span><br><span class="line">                <span class="keyword">if</span> (A[i][j] &gt; A[i][k] + A[k][j]) &#123;</span><br><span class="line">                    A[i][j] = A[i][k] + A[k][j];</span><br><span class="line">                    path[i][j] = path[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dispath</span>(g, A, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MatGraph q;</span><br><span class="line">    <span class="keyword">int</span> A[MAXV][MAXV] = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">5</span>, INF, <span class="number">7</span>, INF, INF&#125;, &#123;INF, <span class="number">0</span>, <span class="number">4</span>, INF, INF, INF&#125;,</span><br><span class="line">        &#123;<span class="number">8</span>, INF, <span class="number">0</span>, INF, INF, <span class="number">9</span>&#125;, &#123;INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF, <span class="number">6</span>&#125;,</span><br><span class="line">        &#123;INF, INF, INF, <span class="number">5</span>, <span class="number">0</span>, INF&#125;, &#123;<span class="number">3</span>, INF, INF, INF, <span class="number">1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">6</span>, e = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">CreateMat</span>(g, A, n, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有向图G的邻接矩阵：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DispMat</span>(g);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;弗洛伊德算法求解结果：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Floyd</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-7-拓扑排序"><a href="#6-7-拓扑排序" class="headerlink" title="6.7 拓扑排序"></a>6.7 拓扑排序</h2><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系。这样的有向图为顶点表示活动的网，我们称为<strong>AOV网</strong></p>
<p>设 G = (V, E) 是一个具有 n 个顶点的有向图，V 中的顶点序列 $v_1$ ，$v_2$，… $v_n$ , 满足若从 顶点 $v_i$ 到 $v_j$ 有一条路径， 则在顶点序列中顶点 $v_i$ 必在顶点 $v_j$ 之前。则我们称这样的顶点序列为一个拓扑序列</p>
<p>所谓拓扑排序，其实就是对一个有向图构造拓扑序列的过程。构造时时会有两个结果，如果此网的全部顶点都被输出，则说明它是不存在环(回路)的 AOV网； 如果输出顶点数少了，哪怕是少了一个，也说明这个网存在环(回路)，不是 AOV 网。</p>
<p>在拓扑排序算法中，涉及的结构代码如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> &#123;</span>  <span class="comment">// 边表结点</span></span><br><span class="line">    <span class="keyword">int</span> adjvex; <span class="comment">// 邻接点域，存储该顶点对应的下标</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">// 用于存储权值，对于非网图可以不需要</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span> <span class="comment">// 键域，指向下一个邻接点</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VertexNode</span> &#123;</span>  <span class="comment">// 顶点表结点</span></span><br><span class="line">        <span class="keyword">int</span> in;  <span class="comment">// 顶点入度</span></span><br><span class="line">        <span class="keyword">int</span> data;  <span class="comment">// 顶点域，存储顶点信息</span></span><br><span class="line">        EdgeNode *firstedge;  <span class="comment">// 边表头指针</span></span><br><span class="line">&#125;VertexNode, AdjList[MAXVEX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    AdjList adjList;</span><br><span class="line">    <span class="keyword">int</span> numVertexes, numEdges;  <span class="comment">// 图中当前顶点数和边数</span></span><br><span class="line">&#125;graphAdjList, * GraphAdjList;</span><br></pre></td></tr></table></figure>

<p>具体代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">TopologicalSort</span><span class="params">(GraphAdjList GL)</span> </span>&#123;</span><br><span class="line">    EdgeNode* e;</span><br><span class="line">    <span class="keyword">int</span> i, k, gettop;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;  <span class="comment">// 用于栈指针下标</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">// 用于统计输出顶点的个数</span></span><br><span class="line">    <span class="keyword">int</span>* stack;  <span class="comment">// 建栈存储入度为0的顶点</span></span><br><span class="line">    stack = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(GL-&gt;numVertexes * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;GL -&gt;numVertexes; i++)</span><br><span class="line">        <span class="keyword">if</span> (GL-&gt;adjList[i].in == <span class="number">0</span>)</span><br><span class="line">            stack[++top] = i;  <span class="comment">// 将入度为0的顶点入栈</span></span><br><span class="line">    <span class="keyword">while</span> (top != <span class="number">0</span>) &#123;</span><br><span class="line">        gettop = stack[top--]; <span class="comment">// 出栈</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, GL-&gt;adjList[gettop].data);  <span class="comment">// 打印此顶点</span></span><br><span class="line">        count++;  <span class="comment">// 统计输出顶点数</span></span><br><span class="line">        <span class="keyword">for</span> (e = GL-&gt;adjList[gettop].firstedge; e; e = e-&gt;next) &#123;  <span class="comment">// 对此顶点弧表遍历</span></span><br><span class="line">            k = e-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span> (!(--GL-&gt;adjList[k].in))  <span class="comment">// 将k号顶点邻接点的入度减1</span></span><br><span class="line">                stack[++top] = k;  <span class="comment">// 若为0则入栈，以便于下次循环输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; GL-&gt;numVertexes)  <span class="comment">// 如果 count 小于顶点数，说明存在环</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-8-关键路径"><a href="#6-8-关键路径" class="headerlink" title="6.8 关键路径"></a>6.8 关键路径</h2><p>拓扑排序主要是解决一个工程能否顺序进行的问题，但有时我们还需要解决工程完成需要的最短时间问题</p>
<p>在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为 <strong>AOE 网</strong></p>
<p>路径上各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大长度的路径叫关键路径，在关键路径上的活动叫关键活动。</p>
<h1 id="7-查找"><a href="#7-查找" class="headerlink" title="7 查找"></a>7 查找</h1><h2 id="7-1-查找概论"><a href="#7-1-查找概论" class="headerlink" title="7.1 查找概论"></a>7.1 查找概论</h2><p><strong>查找表</strong>是由同一类型的数据元素（或记录）构成的集合</p>
<p><strong>关键字</strong>是数据元素中某个数据项的值。若此关键字可以唯一地标识一个记录，则称此关键字为<strong>主关键字</strong>。对于那些可以识别多个数据元素(或记 )的关键字，我们称为<strong>次关键字</strong></p>
<p><strong>查找</strong>就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</p>
<p>查找表按照操作方式来分有两大种：静态查找表和动态查找表</p>
<p>静态查找表：只作查找操作的查找表。它的主要操作有：</p>
<ul>
<li><p>查询某个”特定的”数据元素是否在查找表中。</p>
</li>
<li><p>检索某个”特定的”数据元素和各种属性。</p>
</li>
</ul>
<p>动态查找表：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是两个：</p>
<ul>
<li><p>查找时插入数据元素。</p>
</li>
<li><p>查找时删除数据元素。</p>
</li>
</ul>
<h2 id="7-2-顺序表查找"><a href="#7-2-顺序表查找" class="headerlink" title="7.2 顺序表查找"></a>7.2 顺序表查找</h2><p>要针对这一线性表进行查找操作，因此它就是静态查找表</p>
<p><strong>顺序查找</strong>又叫线性查找，是最基本的查找技术，它的查找过程是：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功</p>
<h3 id="7-2-1-顺序表查找算法"><a href="#7-2-1-顺序表查找算法" class="headerlink" title="7.2.1 顺序表查找算法"></a>7.2.1 顺序表查找算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 顺序查找，a为数组，n为要查找的数组个数，key为要查找的关键字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seguential_Search</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i J == key)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-顺序表查找优化"><a href="#7-2-2-顺序表查找优化" class="headerlink" title="7.2.2 顺序表查找优化"></a>7.2.2 顺序表查找优化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有哨兵顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sequential_Search2</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    a[<span class="number">0</span>] = key;  <span class="comment">// 设置a[0]为关键字值，我们称之为&quot;哨兵&quot;</span></span><br><span class="line">    i = n;  <span class="comment">// 循环从数组尾部开始</span></span><br><span class="line">    <span class="keyword">while</span> (a[i] != key) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;  <span class="comment">// 返回0则说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-有序表查找"><a href="#7-3-有序表查找" class="headerlink" title="7.3 有序表查找"></a>7.3 有序表查找</h2><h3 id="7-3-1-折半查找"><a href="#7-3-1-折半查找" class="headerlink" title="7.3.1 折半查找"></a>7.3.1 折半查找</h3><p>折半查找技术，又称为二分查找。它的前提是线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须采用顺序存储。折半查找的基本思想是:在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 折半查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binaxy_Search</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> n, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low, high, mid;</span><br><span class="line">    low = <span class="number">1</span>;  <span class="comment">// 定义最低下标为记录首位</span></span><br><span class="line">    high = n;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;  <span class="comment">// 折半</span></span><br><span class="line">        <span class="keyword">if</span> (key &lt; a[mid])  <span class="comment">// 若查找值比中值小</span></span><br><span class="line">            high = mid - <span class="number">1</span>;  <span class="comment">// 最高下标调整到中位下标大一位</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; a[mid])  <span class="comment">// 若查找值比中值大</span></span><br><span class="line">            low = mid + <span class="number">1</span>;  <span class="comment">// 最低下标调整到中位下标大一位</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid;  <span class="comment">// 若相等则说明 mid 即为查找到的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-插值查找"><a href="#7-3-2-插值查找" class="headerlink" title="7.3.2 插值查找"></a>7.3.2 插值查找</h3><p>根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。</p>
<h3 id="7-3-3-斐波那契查找"><a href="#7-3-3-斐波那契查找" class="headerlink" title="7.3.3 斐波那契查找"></a>7.3.3 斐波那契查找</h3><p>利用黄金分割原理实现</p>
<h2 id="7-4-线性索引查找"><a href="#7-4-线性索引查找" class="headerlink" title="7.4 线性索引查找"></a>7.4 线性索引查找</h2><h3 id="7-4-1-稠密索引"><a href="#7-4-1-稠密索引" class="headerlink" title="7.4.1 稠密索引"></a>7.4.1 稠密索引</h3><p>稠密索引中的索引项一定是按照关键码有序的排列</p>
<h3 id="7-4-2-分块索引"><a href="#7-4-2-分块索引" class="headerlink" title="7.4.2 分块索引"></a>7.4.2 分块索引</h3><h3 id="7-4-3-倒排索引"><a href="#7-4-3-倒排索引" class="headerlink" title="7.4.3 倒排索引"></a>7.4.3 倒排索引</h3><p>其中记录号表存储具有相同次关键字的所有记录的记录号（可以是指向记录的指针或者是该记录的主关键字）。这样的索引方法就是倒排索引。</p>
<h2 id="7-5-二叉排序树"><a href="#7-5-二叉排序树" class="headerlink" title="7.5 二叉排序树"></a>7.5 二叉排序树</h2><p>二叉排序树，又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树。</p>
<ul>
<li>若它的左子树不空，则左子树上所有结点的值均小于它的根结构的值</li>
<li> 若它的右子树不空 ，则右子树上所有结点的值均大于它的根结点的值</li>
<li>它的左右子树也分别为二叉排序树</li>
</ul>
<h2 id="7-6-平衡二叉树"><a href="#7-6-平衡二叉树" class="headerlink" title="7.6 平衡二叉树"></a>7.6 平衡二叉树</h2><h2 id="7-7-多路查找树（B树）"><a href="#7-7-多路查找树（B树）" class="headerlink" title="7.7 多路查找树（B树）"></a>7.7 多路查找树（B树）</h2><h2 id="7-8-散列表查找"><a href="#7-8-散列表查找" class="headerlink" title="7.8 散列表查找"></a>7.8 散列表查找</h2><p>hash</p>
<h1 id="8-排序"><a href="#8-排序" class="headerlink" title="8 排序"></a>8 排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求各排序算法的绝对执行时间</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50001</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(KeyType&amp; x, KeyType&amp; y)</span> </span>&#123;</span><br><span class="line">    KeyType tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initial</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = low; i &lt; high; i++)</span><br><span class="line">        R[i] = <span class="built_in">rand</span>() % <span class="number">99</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> R1[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        R1[i] = R[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy1</span><span class="params">(<span class="keyword">int</span> R[], <span class="keyword">int</span> R1[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        R1[i+<span class="number">1</span>] = R[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(KeyType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = low; i &lt; high - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (R[i] &gt; R[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    KeyType tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R[i] &lt; R[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = R[i];</span><br><span class="line">            j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; R[j] &gt; tmp);</span><br><span class="line">            R[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;直接插入排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">InsertSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 折半插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinInsertSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, low, high, mid;</span><br><span class="line">    KeyType tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (R[i] &lt; R[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = R[i];</span><br><span class="line">            low = <span class="number">0</span>;</span><br><span class="line">            high = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">                mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (tmp &lt; R[mid])</span><br><span class="line">                    high = mid <span class="number">-1</span></span><br><span class="line">                    ;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= high + <span class="number">1</span>; j--)</span><br><span class="line">                R[j + <span class="number">1</span>] = R[j];</span><br><span class="line">            R[high + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinInsertSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;折半插入排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">BinInsertSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, d;</span><br><span class="line">    KeyType tmp;</span><br><span class="line">    d = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = d; i &lt; n; i++) &#123;</span><br><span class="line">            tmp = R[i];</span><br><span class="line">            j = i - d;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; tmp &lt; R[j]) &#123;</span><br><span class="line">                R[j + d] = R[j];</span><br><span class="line">                j = j - d;</span><br><span class="line">            &#125;</span><br><span class="line">            R[j + d] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        d = d / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSortTime</span><span class="params">(KeyType R[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;希尔排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">ShellSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>()-t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">bool</span> exchange;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        exchange = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">            <span class="keyword">if</span> (R[j] &lt; R[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(R[j], R[j - <span class="number">1</span>]);</span><br><span class="line">                exchange = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (!exchange)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;冒泡排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">BubbleSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t )/ CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(KeyType R[], <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = s, j = t;</span><br><span class="line">    KeyType tmp = R[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; i &amp;&amp; R[j] &gt;= tmp)</span><br><span class="line">                j--;</span><br><span class="line">        R[i] = R[j];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; R[i] &lt;= tmp)</span><br><span class="line">            i++;</span><br><span class="line">        R[j] = R[i];</span><br><span class="line">    &#125;</span><br><span class="line">    R[i] = tmp;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span> (s &lt; t)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="built_in">partition</span>(R, s, t);</span><br><span class="line">        <span class="built_in">QuickSort</span>(R, s, i - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(R, i + <span class="number">1</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;快速排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">QuickSort</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>()-t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简单选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (R[j] &lt; R[k])</span><br><span class="line">                k = j;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">swap</span>(R[i], R[k]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;简单选择排序\t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">SelectSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sift</span><span class="params">(KeyType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = <span class="number">2</span> * i;</span><br><span class="line">    KeyType tmp = R[i];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; high &amp;&amp; R[j] &lt; R[j + <span class="number">1</span>])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (tmp &lt; R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            R[i] = R[j];</span><br><span class="line">            i = j;</span><br><span class="line">            j = <span class="number">2</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    R[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">sift</span>(R, i, n);</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">2</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(R[<span class="number">1</span>], R[i]);</span><br><span class="line">        <span class="built_in">sift</span>(R, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;堆排序  \t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">HeapSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">1</span>, n))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二路归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(KeyType R[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType* R1;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    R1 = (KeyType*)<span class="built_in">malloc</span>((high - low + <span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(KeyType));</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high)</span><br><span class="line">        <span class="keyword">if</span> (R[i] &lt;= R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            R1[k] = R[i];</span><br><span class="line">            i++; k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            R1[k] = R[j];</span><br><span class="line">            j++; k++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        R1[k] = R[i];</span><br><span class="line">        i++; k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        R1[k] = R[j];</span><br><span class="line">        j++; k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>, i = low; i &lt;= high; k++, i++)</span><br><span class="line">        R[i] = R1[k];</span><br><span class="line">    <span class="built_in">free</span>(R1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergePass</span><span class="params">(KeyType R[], <span class="keyword">int</span> length, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i + <span class="number">2</span> * length - <span class="number">1</span> &lt; n; i = i + <span class="number">2</span> * length )</span><br><span class="line">        <span class="built_in">Merge</span>(R, i, i + length - <span class="number">1</span>, i + <span class="number">2</span> * length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (i + length - <span class="number">1</span> &lt; n - <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">Merge</span>(R, i, i + length - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">for</span> (length = <span class="number">1</span>; length &lt; n; length = <span class="number">2</span> * length)</span><br><span class="line">        <span class="built_in">MergePass</span>(R, length, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSortTime</span><span class="params">(KeyType R[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二路归并排序  \t&quot;</span>);</span><br><span class="line">    t = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="built_in">MergeSort</span>(R, n);</span><br><span class="line">    t = <span class="built_in">clock</span>() - t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf秒&quot;</span>, ((<span class="keyword">float</span>)t) / CLOCKS_PER_SEC);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">test</span>(R, <span class="number">0</span>, n - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t正确\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t错误\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    KeyType R[MaxSize], R1[MaxSize];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;随机产生50000个1-99的正整数，各种排序方法的比较\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">50000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序方法         用时       结果验证\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">initial</span>(R, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">InsertSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">BinInsertSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">ShellSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">BubbleSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">QuickSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">SelectSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">HeapSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">copy</span>(R, R1, n);</span><br><span class="line">    <span class="built_in">MergeSortTime</span>(R1, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/jiucheng120/clouding/data/2022/image-20220223221533488.png" alt="image-20220223221533488"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
